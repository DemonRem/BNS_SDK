#pragma once

/*
#############################################################################################
# Blade and Soul (25) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: Engine_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
# Mentions: Ant.
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_MINFLOORZ                                          0.7
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RB_None                                            0x00
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_Sleeping                                        0x02
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_NULLCHARACTER                                      127
#define CONST_TEMP_SPLITSCREEN_INDEX                             0
#define CONST_DEFAULT_SCENE_PRIORITY                             10
#define CONST_PRIVATE_NotEditorSelectable                        0x001
#define CONST_PRIVATE_TreeHidden                                 0x002
#define CONST_PRIVATE_NotFocusable                               0x004
#define CONST_PRIVATE_NotDockable                                0x008
#define CONST_PRIVATE_NotRotatable                               0x010
#define CONST_PRIVATE_ManagedStyle                               0x020
#define CONST_PRIVATE_TreeHiddenRecursive                        0x042
#define CONST_PRIVATE_EditorNoDelete                             0x080
#define CONST_PRIVATE_EditorNoRename                             0x100
#define CONST_PRIVATE_EditorNoReparent                           0x200
#define CONST_PRIVATE_PropagateState                             0x400
#define CONST_PRIVATE_KeepFocusedState                           0x800
#define CONST_PRIVATE_Protected                                  0x380
#define CONST_ASPECTRATIO_Normal                                 1.333333f
#define CONST_ASPECTRATIO_Monitor                                1.25f
#define CONST_ASPECTRATIO_Widescreen                             1.777778f
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_SCENE_DATASTORE_TAG                                'SceneData'
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_MaxHistory                                         16
#define CONST_FIRST_DEFAULT_DATABINDING_INDEX                    100
#define CONST_CONTEXTMENU_BINDING_INDEX                          101
#define CONST_ConsolePromptText                                  "(> "
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_MAXRELEASETICKCOUNT                                3
#define CONST_IMAGE_MATPARAM_NONE                                0x0000
#define CONST_IMAGE_MATPARAM_TEXTURE                             0x0001
#define CONST_IMAGE_MATPARAM_MULTITEXTURE                        0x0002
#define CONST_IMAGE_MATPARAM_COORDINATES                         0x0004
#define CONST_IMAGE_MATPARAM_COLOR                               0x0008
#define CONST_IMAGE_MATPARAM_GRAY                                0x0010
#define CONST_IMAGE_MATPARAM_GAUGE                               0x0020
#define CONST_IMAGE_MATPARAM_ALL                                 0xFFFF
#define CONST_EDITBOX_EDIT_NONE                                  0x0000
#define CONST_EDITBOX_COPY_SELECTEDTEXT                          0x0001
#define CONST_EDITBOX_COPY_MASK                                  0x000F
#define CONST_EDITBOX_DELETE_PREVCHAR                            0x0010
#define CONST_EDITBOX_DELETE_NEXTCHAR                            0x0020
#define CONST_EDITBOX_DELETE_SELECTEDTEXT                        0x0030
#define CONST_EDITBOX_DELETE_ALLTEXT                             0x0040
#define CONST_EDITBOX_DELETE_MASK                                0x00F0
#define CONST_EDITBOX_APPEND_TEXT                                0x0100
#define CONST_EDITBOX_APPEND_ENTER                               0x0200
#define CONST_EDITBOX_APPEND_MASK                                0x0F00
#define CONST_EDITBOX_ETC_SAVECLIPBOARD                          0x1000
#define CONST_EDITBOX_ETC_LOADCLIPBOARD                          0x2000
#define CONST_DEFAULT_UISKIN                                     "DefaultUISkin.DefaultSkin"
#define CONST_FSM_DEFAULTRECYCLETIME                             0.2
#define CONST_SDPG_NumBits                                       3
#define CONST_CONSOLE_PROMPT_TEXT                                "(> "

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.Actor.EPhysics
/*enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_Spider                                        = 8,
	PHYS_Ladder                                        = 9,
	PHYS_RigidBody                                     = 10,
	PHYS_SoftBody                                      = 11,
	PHYS_Unused                                        = 12,
	PHYS_Custom                                        = 13,
	PHYS_RuleMove                                      = 14,
	PHYS_MAX                                           = 15
};*/

// Enum Engine.Actor.EMoveDir
/*enum EMoveDir
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_MAX                                             = 7
};*/

// Enum Engine.Actor.ENetRole
/*enum ENetRole
{
	ROLE_None                                          = 0,
	ROLE_SimulatedProxy                                = 1,
	ROLE_AutonomousProxy                               = 2,
	ROLE_Authority                                     = 3,
	ROLE_MAX                                           = 4
};*/

// Enum Engine.Actor.ECollisionType
/*enum ECollisionType
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_BlockWeaponsKickable                       = 8,
	COLLIDE_MAX                                        = 9
};*/

// Enum Engine.Actor.ETravelType
/*enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_MAX                                         = 3
};*/

// Enum Engine.Actor.EDoubleClickDir
/*enum EDoubleClickDir
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6,
	DCLICK_MAX                                         = 7
};*/

// Enum Engine.Actor.EOptimizeException
/*enum EOptimizeException
{
	EOptExp_Normal                                     = 0,
	EOptExp_High                                       = 1,
	EOptExp_CustomMesh                                 = 2,
	EOptExp_DemonShadowBoss                            = 3,
	EOptExp_LightMode                                  = 4,
	EOptExp_MAX                                        = 5
};*/

// Enum Engine.Scene.EDetailMode
/*enum EDetailMode
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_MAX                                             = 3
};*/

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
/*enum ERBCollisionChannel
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_Untitled3                                     = 9,
	RBCC_Untitled4                                     = 10,
	RBCC_Untitled5                                     = 11,
	RBCC_Untitled6                                     = 12,
	RBCC_Untitled7                                     = 13,
	RBCC_Untitled8                                     = 14,
	RBCC_Untitled9                                     = 15,
	RBCC_Untitled10                                    = 16,
	RBCC_Untitled11                                    = 17,
	RBCC_Untitled12                                    = 18,
	RBCC_Untitled13                                    = 19,
	RBCC_Untitled14                                    = 20,
	RBCC_Untitled15                                    = 21,
	RBCC_Untitled16                                    = 22,
	RBCC_Untitled17                                    = 23,
	RBCC_Untitled18                                    = 24,
	RBCC_Untitled19                                    = 25,
	RBCC_Untitled20                                    = 26,
	RBCC_Cloth                                         = 27,
	RBCC_FluidDrain                                    = 28,
	RBCC_SoftBody                                      = 29,
	RBCC_FracturedMeshPart                             = 30,
	RBCC_MAX                                           = 31
};*/

// Enum Engine.PrimitiveComponent.EFadingState
/*enum EFadingState
{
	EFading_Normal                                     = 0,
	EFading_FadeIn                                     = 1,
	EFading_FadeOut                                    = 2,
	EFading_Force                                      = 3,
	EFading_MAX                                        = 4
};*/

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
/*enum ERadialImpulseFalloff
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_MAX                                            = 2
};*/

// Enum Engine.Scene.ESceneDepthPriorityGroup
/*enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_Sky                                           = 1,
	SDPG_World                                         = 2,
	SDPG_Foreground                                    = 3,
	SDPG_UnrealEdForeground                            = 4,
	SDPG_PostProcess                                   = 5,
	SDPG_MAX                                           = 6
};*/

// Enum Engine.Texture.TextureCompressionSettings
/*enum TextureCompressionSettings
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_NoCompression                                   = 6,
	TC_MAX                                             = 7
};*/

// Enum Engine.Texture.EPixelFormat
/*enum EPixelFormat
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16                                    = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_MAX                                             = 24
};*/

// Enum Engine.Texture.TextureFilter
/*enum TextureFilter
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_MAX                                             = 2
};*/

// Enum Engine.Texture.TextureAddress
/*enum TextureAddress
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_MAX                                             = 3
};*/

// Enum Engine.Texture.TextureGroup
/*enum TextureGroup
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_WorldSpecular                         = 2,
	TEXTUREGROUP_Character                             = 3,
	TEXTUREGROUP_CharacterNormalMap                    = 4,
	TEXTUREGROUP_CharacterSpecular                     = 5,
	TEXTUREGROUP_Weapon                                = 6,
	TEXTUREGROUP_WeaponNormalMap                       = 7,
	TEXTUREGROUP_WeaponSpecular                        = 8,
	TEXTUREGROUP_Vehicle                               = 9,
	TEXTUREGROUP_VehicleNormalMap                      = 10,
	TEXTUREGROUP_VehicleSpecular                       = 11,
	TEXTUREGROUP_Cinematic                             = 12,
	TEXTUREGROUP_Effects                               = 13,
	TEXTUREGROUP_Skybox                                = 14,
	TEXTUREGROUP_UI                                    = 15,
	TEXTUREGROUP_LightAndShadowMap                     = 16,
	TEXTUREGROUP_RenderTarget                          = 17,
	TEXTUREGROUP_System                                = 18,
	TEXTUREGROUP_TerrainDiffuse                        = 19,
	TEXTUREGROUP_TerrainNormalMap                      = 20,
	TEXTUREGROUP_UniqueDiffuse                         = 21,
	TEXTUREGROUP_UniqueNormalMap                       = 22,
	TEXTUREGROUP_WorldMaskMap                          = 23,
	TEXTUREGROUP_WorldOcclusionMap                     = 24,
	TEXTUREGROUP_ColorLookupTable                      = 25,
	TEXTUREGROUP_MAX                                   = 26
};*/

// Enum Engine.Texture2D.TextureLoadSwitchSettings
/*enum TextureLoadSwitchSettings
{
	TLS_None                                           = 0,
	TLS_Black                                          = 1,
	TLS_White                                          = 2,
	TLS_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ELoginStatus
/*enum ELoginStatus
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_MAX                                             = 3
};*/

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
/*enum EFeaturePrivilegeLevel
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
/*enum ENetworkNotificationPosition
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_MAX                                            = 9
};*/

// Enum Engine.OnlineSubsystem.EOnlineGameState
/*enum EOnlineGameState
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_Starting                                       = 2,
	OGS_InProgress                                     = 3,
	OGS_Ending                                         = 4,
	OGS_Ended                                          = 5,
	OGS_MAX                                            = 6
};*/

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
/*enum EOnlineEnumerationReadState
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
/*enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_MAX                                           = 9
};*/

// Enum Engine.OnlineSubsystem.ENATType
/*enum ENATType
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ELanBeaconState
/*enum ELanBeaconState
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_MAX                                           = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
/*enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_MAX                                           = 7
};*/

// Enum Engine.Settings.EOnlineDataAdvertisementType
/*enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_MAX                                           = 3
};*/

// Enum Engine.Settings.ESettingsDataType
/*enum ESettingsDataType
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_MAX                                            = 8
};*/

// Enum Engine.PlayerController.EInputTypes
/*enum EInputTypes
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_MAX                                             = 2
};*/

// Enum Engine.PlayerController.EInputMatchAction
/*enum EInputMatchAction
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_MAX                                            = 2
};*/

// Enum Engine.PlayerController.EProgressMessageType
/*enum EProgressMessageType
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_ConnectionFailure                              = 4,
	PMT_SocketFailure                                  = 5,
	PMT_MAX                                            = 6
};*/

// Enum Engine.DOFEffect.EFocusType
/*enum EFocusType
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_MAX                                          = 2
};*/

// Enum Engine.Camera.T1CAMERAINTERPOLMODE
/*enum T1CAMERAINTERPOLMODE
{
	T1CAMERAINTERPOL_INTERPOL00                        = 0,
	T1CAMERAINTERPOL_INTERPOL01                        = 1,
	T1CAMERAINTERPOL_INTERPOL02                        = 2,
	T1CAMERAINTERPOL_INTERPOL04                        = 3,
	T1CAMERAINTERPOL_INTERPOL06                        = 4,
	T1CAMERAINTERPOL_INTERPOL08                        = 5,
	T1CAMERAINTERPOL_INTERPOL1                         = 6,
	T1CAMERAINTERPOL_INTERPOL2                         = 7,
	T1CAMERAINTERPOL_INTERPOL3                         = 8,
	T1CAMERAINTERPOL_MAX                               = 9
};*/

// Enum Engine.Camera.CAMERATRAVELMODE
/*enum CAMERATRAVELMODE
{
	CAMTRAVEL_PLAYER                                   = 0,
	CAMTRAVEL_WORLDPOS                                 = 1,
	CAMTRAVEL_NONPLAYERPAWN                            = 2,
	CAMTRAVEL_FREE                                     = 3,
	CAMTRAVEL_FITPAWNS                                 = 4,
	CAMTRAVEL_QUATERVIEW                               = 5,
	CAMTRAVEL_MAX                                      = 6
};*/

// Enum Engine.Camera.EViewTargetBlendFunction
/*enum EViewTargetBlendFunction
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_MAX                                        = 5
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
/*enum EOnlineGameSearchEntryType
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_MAX                                          = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
/*enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_MAX                                          = 6
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
/*enum EOnlineGameSearchSortType
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_MAX                                          = 2
};*/

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
/*enum EAmbientOcclusionQuality
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_MAX                                             = 3
};*/

// Enum Engine.LightComponent.EShadowProjectionTechnique
/*enum EShadowProjectionTechnique
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_MAX                                 = 6
};*/

// Enum Engine.LightComponent.EShadowFilterQuality
/*enum EShadowFilterQuality
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_MAX                                            = 3
};*/

// Enum Engine.LightComponent.ELightAffectsClassification
/*enum ELightAffectsClassification
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_MAX                                            = 4
};*/

// Enum Engine.LightComponent.ELightShadowMode
/*enum ELightShadowMode
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_MAX                                    = 3
};*/

// Enum Engine.SkeletalMeshComponent.DynamicParamPlayType
/*enum DynamicParamPlayType
{
	DynamicParamPlayType_QuickInit                     = 0,
	DynamicParamPlayType_SlowInit                      = 1,
	DynamicParamPlayType_MAX                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
/*enum ERootMotionMode
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_Relative                                       = 4,
	RMM_MAX                                            = 5
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
/*enum ERootMotionRotationMode
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
/*enum EFaceFXBlendMode
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
/*enum EFaceFXRegOp
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_MAX                                           = 3
};*/

// Enum Engine.ReverbVolume.ReverbPreset
/*enum ReverbPreset
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_GhostMode                                   = 23,
	REVERB_MAX                                         = 24
};*/

// Enum Engine.SkeletalMeshActor.SMA_SkelMeshCompPart
/*enum SMA_SkelMeshCompPart
{
	SMA_SKEL_BODY                                      = 0,
	SMA_SKEL_FACE                                      = 1,
	SMA_SKEL_HAIR                                      = 2,
	SMA_SKEL_EYEBROW                                   = 3,
	SMA_SKEL_BEARD                                     = 4,
	SMA_SKEL_TAIL                                      = 5,
	SMA_SKEL_ACCESSORY                                 = 6,
	SMA_SKEL_MAX                                       = 7
};*/

// Enum Engine.AnimNode.ESliderType
/*enum ESliderType
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_MAX                                             = 2
};*/

// Enum Engine.AnimNodeSequence.ERootBoneAxis
/*enum ERootBoneAxis
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_MAX                                            = 3
};*/

// Enum Engine.AnimNodeSequence.ERootRotationOption
/*enum ERootRotationOption
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_MAX                                            = 3
};*/

// Enum Engine.AmbientSkeletalCreature.EFlockType
/*enum EFlockType
{
	FLOCK_None                                         = 0,
	FLOCK_Simple                                       = 1,
	FLOCK_Smooth                                       = 2,
	FLOCK_Fluid                                        = 3,
	FLOCK_Loose                                        = 4,
	FLOCK_LooseFluid                                   = 5,
	FLOCK_MAX                                          = 6
};*/

// Enum Engine.MusicVolume.SoundPreset
/*enum SoundPreset
{
	Sound_Always                                       = 0,
	Sound_Day                                          = 1,
	Sound_Night                                        = 2,
	Sound_MAX                                          = 3
};*/

// Enum Engine.AudioDevice.ESoundClassName
/*enum ESoundClassName
{
	Master                                             = 0,
	Music                                              = 1,
	PublicMusic                                        = 2,
	FieldMusic                                         = 3,
	DungeonMusic                                       = 4,
	TownMusic                                          = 5,
	FactionMusic                                       = 6,
	SpZoneMusic                                        = 7,
	DirectionMusic                                     = 8,
	CutsceneMusic                                      = 9,
	MusicOnceVolume                                    = 10,
	UniqueMusic                                        = 11,
	GhostMusic                                         = 12,
	SFX                                                = 13,
	Ambient                                            = 14,
	AmbAir                                             = 15,
	AmbToggle                                          = 16,
	AmbAnimal                                          = 17,
	AmbInsect                                          = 18,
	AmbEnv                                             = 19,
	AmbObject                                          = 20,
	Character                                          = 21,
	Action                                             = 22,
	ChaStuff                                           = 23,
	ChaMov                                             = 24,
	ChaItem                                            = 25,
	Step                                               = 26,
	Voice                                              = 27,
	Hit                                                = 28,
	Monster                                            = 29,
	MonAction                                          = 30,
	MonSkillWhoosh                                     = 31,
	MonCasting                                         = 32,
	MonHit                                             = 33,
	MonVoice                                           = 34,
	BossMonVoice                                       = 35,
	NorMonvoice                                        = 36,
	MonStuff                                           = 37,
	SysMSG                                             = 38,
	NoLPF                                              = 39,
	Item                                               = 40,
	UI                                                 = 41,
	NPCVoice                                           = 42,
	NPCVoice2                                          = 43,
	SysVoice                                           = 44,
	SignalSFX                                          = 45,
	SignalMusic                                        = 46,
	Skill                                              = 47,
	SkillCast                                          = 48,
	SkillHit                                           = 49,
	Kismet                                             = 50,
	KismetSFX                                          = 51,
	KismetMix                                          = 52,
	KismetVoice                                        = 53,
	KismetVoiceNoReverb                                = 54,
	UIAction                                           = 55,
	ESoundClassName_MAX                                = 56
};*/

// Enum Engine.AudioDevice.MUSICVolModifier
/*enum MUSICVolModifier
{
	MUSICVolModifier_None                              = 0,
	MUSICVolModifier_Quest                             = 1,
	MUSICVolModifier_MAX                               = 2
};*/

// Enum Engine.SoundNodeAttenuation.SoundDistanceModel
/*enum SoundDistanceModel
{
	ATTENUATION_Linear                                 = 0,
	ATTENUATION_Logarithmic                            = 1,
	ATTENUATION_Inverse                                = 2,
	ATTENUATION_LogReverse                             = 3,
	ATTENUATION_NaturalSound                           = 4,
	ATTENUATION_MAX                                    = 5
};*/

// Enum Engine.Brush.ECsgOper
/*enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_MAX                                            = 5
};*/

// Enum Engine.Volume.EOutVolumeType
/*enum EOutVolumeType
{
	EOV_None                                           = 0,
	EOV_InOut                                          = 1,
	EOV_Interp                                         = 2,
	EOV_MAX                                            = 3
};*/

// Enum Engine.MusicVolume.PlayByControledCamera
/*enum PlayByControledCamera
{
	Play_Off                                           = 0,
	Play_Normal                                        = 1,
	Play_Mute                                          = 2,
	Play_MAX                                           = 3
};*/

// Enum Engine.AmbientStaticCreature.EFlockType
/*enum EFlockType
{
	FLOCK_None                                         = 0,
	FLOCK_Simple                                       = 1,
	FLOCK_Smooth                                       = 2,
	FLOCK_Fluid                                        = 3,
	FLOCK_Loose                                        = 4,
	FLOCK_LooseFluid                                   = 5,
	FLOCK_MAX                                          = 6
};*/

// Enum Engine.CameraAnim.CAM_ANIM_POST_ANIM_SETTING
/*enum CAM_ANIM_POST_ANIM_SETTING
{
	CAM_ANIM_PAS_RETURN                                = 0,
	CAM_ANIM_PAS_RETAIN_LAST                           = 1,
	CAM_ANIM_PAS_TRACK_PLAYER                          = 2,
	CAM_ANIM_PAS_MAX                                   = 3
};*/

// Enum Engine.AnimSequence.WeaponLocationType
/*enum WeaponLocationType
{
	WLT_CurrentLoc                                     = 0,
	WLT_WeaponR                                        = 1,
	WLT_WeaponL                                        = 2,
	WLT_WeaponLKeep_SW                                 = 3,
	WLT_WeaponLKeep_PT                                 = 4,
	WLT_WeaponRKeep_PT                                 = 5,
	WLT_WeaponRKeep_RF                                 = 6,
	WLT_WeaponKeep_DG                                  = 7,
	WLT_WeaponHidden                                   = 8,
	WLT_WeaponTA_R                                     = 9,
	WLT_WeaponKeep_SD                                  = 10,
	WLT_MAX                                            = 11
};*/

// Enum Engine.AnimSequence.ClType
/*enum ClType
{
	CI_DontUse                                         = 0,
	CI_01Sec                                           = 1,
	CI_02Sec                                           = 2,
	CI_04Sec                                           = 3,
	CI_06Sec                                           = 4,
	CI_08Sec                                           = 5,
	CI_1Sec                                            = 6,
	CI_2Sec                                            = 7,
	CI_3Sec                                            = 8,
	CI_MAX                                             = 9
};*/

// Enum Engine.AnimSequence.CameraSetMode
/*enum CameraSetMode
{
	T1CM_None                                          = 0,
	T1CM_ATTACK                                        = 1,
	T1CM_DASH                                          = 2,
	T1CM_MAX                                           = 3
};*/

// Enum Engine.AnimSequence.NamePlateControl
/*enum NamePlateControl
{
	Name_DontControl                                   = 0,
	Name_Hide                                          = 1,
	Name_Bip01Anim                                     = 2,
	Name_MAX                                           = 3
};*/

// Enum Engine.AnimSequence.AnimationCompressionFormat
/*enum AnimationCompressionFormat
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_ZOnlyRLE                                       = 6,
	ACF_MAX                                            = 7
};*/

// Enum Engine.AnimNodeBlendBase.AnimBlendType
/*enum AnimBlendType
{
	ABT_Linear                                         = 0,
	ABT_Cubic                                          = 1,
	ABT_Sinusoidal                                     = 2,
	ABT_EaseInOutExponent2                             = 3,
	ABT_EaseInOutExponent3                             = 4,
	ABT_EaseInOutExponent4                             = 5,
	ABT_EaseInOutExponent5                             = 6,
	ABT_MAX                                            = 7
};*/

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
/*enum EAnimAimDir
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_MAX                                        = 9
};*/

// Enum Engine.AnimNodeAimOffset.EAimID
/*enum EAimID
{
	EAID_LeftUp                                        = 0,
	EAID_LeftDown                                      = 1,
	EAID_RightUp                                       = 2,
	EAID_RightDown                                     = 3,
	EAID_ZeroUp                                        = 4,
	EAID_ZeroDown                                      = 5,
	EAID_ZeroLeft                                      = 6,
	EAID_ZeroRight                                     = 7,
	EAID_CellLU                                        = 8,
	EAID_CellCU                                        = 9,
	EAID_CellRU                                        = 10,
	EAID_CellLC                                        = 11,
	EAID_CellCC                                        = 12,
	EAID_CellRC                                        = 13,
	EAID_CellLD                                        = 14,
	EAID_CellCD                                        = 15,
	EAID_CellRD                                        = 16,
	EAID_MAX                                           = 17
};*/

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
/*enum EBaseBlendType
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeByMoveState.ANODEMOVESTATESLOT
/*enum ANODEMOVESTATESLOT
{
	ANMS_Run_Front                                     = 0,
	ANMS_Run_Right                                     = 1,
	ANMS_Run_Left                                      = 2,
	ANMS_Run_Back                                      = 3,
	ANMS_Run_LeftBack                                  = 4,
	ANMS_Run_RightBack                                 = 5,
	ANMS_Walk_Front                                    = 6,
	ANMS_Walk_Right                                    = 7,
	ANMS_Walk_Left                                     = 8,
	ANMS_Walk_Back                                     = 9,
	ANMS_Walk_LeftBack                                 = 10,
	ANMS_Walk_RightBack                                = 11,
	ANMS_Jump                                          = 12,
	ANMS_JumpRight                                     = 13,
	ANMS_JumpLeft                                      = 14,
	ANMS_Idle                                          = 15,
	ANMS_JToI                                          = 16,
	ANMS_JToM                                          = 17,
	ANMS_JToMRight                                     = 18,
	ANMS_JToMLeft                                      = 19,
	ANMS_JToMBack                                      = 20,
	ANMS_MToI                                          = 21,
	ANMS_LToR                                          = 22,
	ANMS_RToL                                          = 23,
	ANMS_MToJ                                          = 24,
	ANMS_MToJRight                                     = 25,
	ANMS_MToJLeft                                      = 26,
	ANMS_TurnLeft                                      = 27,
	ANMS_TurnRight                                     = 28,
	ANMS_Ride_Idle                                     = 29,
	ANMS_Dashing                                       = 30,
	ANMS_DashToJ1                                      = 31,
	ANMS_DashToJ2                                      = 32,
	ANMS_DashToJ3                                      = 33,
	ANMS_DashJump_Front                                = 34,
	ANMS_DashJToI                                      = 35,
	ANMS_DashJtoRun_Front                              = 36,
	ANMS_Dashing_Left                                  = 37,
	ANMS_Dashing_Right                                 = 38,
	ANMS_WaterDashing_Front                            = 39,
	ANMS_WaterDashing_Left                             = 40,
	ANMS_WaterDashing_Right                            = 41,
	ANMS_MagneticRunFront                              = 42,
	ANMS_Glide_Front                                   = 43,
	ANMS_Glide_Right                                   = 44,
	ANMS_Glide_Left                                    = 45,
	ANMS_Glide_Drop                                    = 46,
	ANMS_WaterLineSwim_Front                           = 47,
	ANMS_WaterLineSwim_Right                           = 48,
	ANMS_WaterLineSwim_Left                            = 49,
	ANMS_WaterLineSwim_Back                            = 50,
	ANMS_WaterLineSwim_LeftBack                        = 51,
	ANMS_WaterLineSwim_RightBack                       = 52,
	ANMS_WaterLineSwim_In                              = 53,
	ANMS_WaterLineSwim_Idle                            = 54,
	ANMS_WaterLineSwim_MtoI                            = 55,
	ANMS_Glide_Boost                                   = 56,
	ANMS_MagneticRunLeft                               = 57,
	ANMS_MagneticRunRight                              = 58,
	ANMS_MagneticJLeft                                 = 59,
	ANMS_MagneticJRight                                = 60,
	ANMS_ActionMove_Start                              = 61,
	ANMS_ActionMove_Loop                               = 62,
	ANMS_ActionMove_End                                = 63,
	ANMS_MAX                                           = 64
};*/

// Enum Engine.AnimNodeByMoveState_Pet.ANODEMOVESTATESLOT_PET
/*enum ANODEMOVESTATESLOT_PET
{
	PANMS_Idle                                         = 0,
	PANMS_Walk_Front                                   = 1,
	PANMS_Run_Front                                    = 2,
	PANMS_Run_Back                                     = 3,
	PANMS_Dashing                                      = 4,
	PANMS_Glide_Front                                  = 5,
	PANMS_Glide_Boost                                  = 6,
	PANMS_MAX                                          = 7
};*/

// Enum Engine.AnimNodeSeqBlendByEnvState.ANODEENVTYPESLOT
/*enum ANODEENVTYPESLOT
{
	ANES_Normal_None                                   = 0,
	ANES_Normal_None_d                                 = 1,
	ANES_Normal_Destroyed                              = 2,
	ANES_Normal_Destroyed_d                            = 3,
	ANES_Normal_Open                                   = 4,
	ANES_Normal_Open_d                                 = 5,
	ANES_Normal_Close                                  = 6,
	ANES_Normal_Close_d                                = 7,
	ANES_Normal_On                                     = 8,
	ANES_Normal_On_d                                   = 9,
	ANES_Normal_Off                                    = 10,
	ANES_Normal_Off_d                                  = 11,
	ANES_Normal_Empty                                  = 12,
	ANES_Normal_Empty_d                                = 13,
	ANES_Normal_Step1                                  = 14,
	ANES_Normal_Step1_d                                = 15,
	ANES_Normal_Step2                                  = 16,
	ANES_Normal_Step2_d                                = 17,
	ANES_Normal_Step3                                  = 18,
	ANES_Normal_Step3_d                                = 19,
	ANES_Normal_Step4                                  = 20,
	ANES_Normal_Step4_d                                = 21,
	ANES_Normal_Step5                                  = 22,
	ANES_Normal_Step5_d                                = 23,
	ANES_Normal_Step6                                  = 24,
	ANES_Normal_Step6_d                                = 25,
	ANES_Normal_Step7                                  = 26,
	ANES_Normal_Step7_d                                = 27,
	ANES_Hit_Step1_Idle                                = 28,
	ANES_Hit_Step2_Idle                                = 29,
	ANES_Hit_Step3_Idle                                = 30,
	ANES_Hit_Step4_Idle                                = 31,
	ANES_Hit_Step5_Idle                                = 32,
	ANES_Hit_Step6_Idle                                = 33,
	ANES_Hit_Step7_Idle                                = 34,
	ANES_Hit_UnderAttack_Step1                         = 35,
	ANES_Hit_UnderAttack_Step2                         = 36,
	ANES_Hit_UnderAttack_Step3                         = 37,
	ANES_Hit_UnderAttack_Step4                         = 38,
	ANES_Hit_UnderAttack_Step5                         = 39,
	ANES_Hit_UnderAttack_Step6                         = 40,
	ANES_Hit_UnderAttack_Step7                         = 41,
	ANES_Hit_NextStep1                                 = 42,
	ANES_Hit_NextStep2                                 = 43,
	ANES_Hit_NextStep3                                 = 44,
	ANES_Hit_NextStep4                                 = 45,
	ANES_Hit_NextStep5                                 = 46,
	ANES_Hit_NextStep6                                 = 47,
	ANES_None_Idle                                     = 48,
	ANES_Transit_Open_In                               = 49,
	ANES_Transit_Open_In_d                             = 50,
	ANES_Transit_Open_Out                              = 51,
	ANES_Transit_Open_Out_d                            = 52,
	ANES_Transit_Close_In                              = 53,
	ANES_Transit_Close_In_d                            = 54,
	ANES_Transit_Close_Out                             = 55,
	ANES_Transit_Close_Out_d                           = 56,
	ANES_Transit_Empty_In                              = 57,
	ANES_Transit_Empty_In_d                            = 58,
	ANES_Transit_Empty_Out                             = 59,
	ANES_Transit_Empty_Out_d                           = 60,
	ANES_Transit_Step1_In                              = 61,
	ANES_Transit_Step1_In_d                            = 62,
	ANES_Transit_Step1_Out                             = 63,
	ANES_Transit_Step1_Out_d                           = 64,
	ANES_Transit_Step2_In                              = 65,
	ANES_Transit_Step2_In_d                            = 66,
	ANES_Transit_Step2_Out                             = 67,
	ANES_Transit_Step2_Out_d                           = 68,
	ANES_Transit_Step3_In                              = 69,
	ANES_Transit_Step3_In_d                            = 70,
	ANES_Transit_Step3_Out                             = 71,
	ANES_Transit_Step3_Out_d                           = 72,
	ANES_Transit_Step4_In                              = 73,
	ANES_Transit_Step4_In_d                            = 74,
	ANES_Transit_Step4_Out                             = 75,
	ANES_Transit_Step4_Out_d                           = 76,
	ANES_Transit_Step5_In                              = 77,
	ANES_Transit_Step5_In_d                            = 78,
	ANES_Transit_Step5_Out                             = 79,
	ANES_Transit_Step5_Out_d                           = 80,
	ANES_Transit_Step6_In                              = 81,
	ANES_Transit_Step6_In_d                            = 82,
	ANES_Transit_Step6_Out                             = 83,
	ANES_Transit_Step6_Out_d                           = 84,
	ANES_Transit_Step7_In                              = 85,
	ANES_Transit_Step7_In_d                            = 86,
	ANES_Transit_Step7_Out                             = 87,
	ANES_Transit_Step7_Out_d                           = 88,
	ANES_Transit_NoneIdle_In                           = 89,
	ANES_Transit_NoneIdle_In_d                         = 90,
	ANES_Transit_NoneIdle_Out                          = 91,
	ANES_Transit_NoneIdle_Out_d                        = 92,
	ANES_MAX                                           = 93
};*/

// Enum Engine.ProgressEffectProperty_Anim.EProgAnimType
/*enum EProgAnimType
{
	ProgAnimType_TimeLine                              = 0,
	ProgAnimType_SequenceBlend                         = 1,
	ProgAnimType_MAX                                   = 2
};*/

// Enum Engine.ProgressEffectProperty_Anim.EProgAnimPlayType
/*enum EProgAnimPlayType
{
	ProgAnimPlay_Forced                                = 0,
	ProgAnimPlay_State                                 = 1,
	ProgAnimPlay_MAX                                   = 2
};*/

// Enum Engine.ProgressEffectProperty_Anim.EProgAnimWeightType
/*enum EProgAnimWeightType
{
	ProgAnimWeight_Exchange                            = 0,
	ProgAnimWeight_Additive                            = 1,
	ProgAnimWeight_MAX                                 = 2
};*/

// Enum Engine.AnimNodeSeqBlendByProgress.ANODEPROGRESSSLOT
/*enum ANODEPROGRESSSLOT
{
	ANPS_STEP                                          = 0,
	ANPS_STEP01                                        = 1,
	ANPS_STEP02                                        = 2,
	ANPS_STEP_MAX                                      = 3
};*/

// Enum Engine.AnimNotify_DialogueSound.DialogueType
/*enum DialogueType
{
	DSet                                               = 0,
	DSet01                                             = 1,
	DSet02                                             = 2,
	DSet03                                             = 3,
	DSet04                                             = 4,
	DSet05                                             = 5,
	DSet06                                             = 6,
	DSet07                                             = 7,
	DSet08                                             = 8,
	DSet09                                             = 9,
	DSet_MAX                                           = 10
};*/

// Enum Engine.AnimNotify_SESound.UpperFlagType
/*enum UpperFlagType
{
	Upper_True                                         = 0,
	Upper_False                                        = 1,
	Upper_Both                                         = 2,
	Upper_MAX                                          = 3
};*/

// Enum Engine.AnimNotify_PhysicNoiseForce.PhysicNoiseSpace
/*enum PhysicNoiseSpace
{
	PNoise_Local                                       = 0,
	PNoise_Character                                   = 1,
	PNoise_World                                       = 2,
	PNoise_MAX                                         = 3
};*/

// Enum Engine.AnimNotify_SESound.BodyfallType
/*enum BodyfallType
{
	Bodyfall_Type1                                     = 0,
	Bodyfall_Type2                                     = 1,
	Bodyfall_Type3                                     = 2,
	Bodyfall_Type4                                     = 3,
	Bodyfall_MAX                                       = 4
};*/

// Enum Engine.AnimNotify_SESound.StuffType
/*enum StuffType
{
	Stuff_Type1                                        = 0,
	Stuff_Type2                                        = 1,
	Stuff_Sp1                                          = 2,
	Stuff_Sp2                                          = 3,
	Stuff_MAX                                          = 4
};*/

// Enum Engine.AnimNotify_SESound.MonWPType
/*enum MonWPType
{
	MonWP_Nor1                                         = 0,
	MonWP_Nor2                                         = 1,
	MonWP_Nor3                                         = 2,
	MonWP_Sp1                                          = 3,
	MonWP_Sp2                                          = 4,
	MonWP_Sp3                                          = 5,
	MonWP_MAX                                          = 6
};*/

// Enum Engine.AnimNotify_VoiceSound.AttackVoiceType
/*enum AttackVoiceType
{
	Attack_Type1                                       = 0,
	Attack_Type2                                       = 1,
	Attack_MAX                                         = 2
};*/

// Enum Engine.AnimNotify_VoiceSound.HeavyAttackVoiceType
/*enum HeavyAttackVoiceType
{
	HeavyAttack_Type1                                  = 0,
	HeavyAttack_Type2                                  = 1,
	HeavyAttack_Type3                                  = 2,
	HeavyAttack_MAX                                    = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.PreAttackVoiceType
/*enum PreAttackVoiceType
{
	PreAttack_Short                                    = 0,
	PreAttack_Long                                     = 1,
	PreAttack_MAX                                      = 2
};*/

// Enum Engine.AnimNotify_VoiceSound.DamageVoiceType
/*enum DamageVoiceType
{
	DamageVoice_Normal                                 = 0,
	DamageVoice_Heavy                                  = 1,
	DamageVoice_Normal2                                = 2,
	DamageVoice_HeavyR                                 = 3,
	DamageVoice_MAX                                    = 4
};*/

// Enum Engine.AnimNotify_VoiceSound.DeathVoiceType
/*enum DeathVoiceType
{
	Death_Death                                        = 0,
	Death_Death2                                       = 1,
	Death_Death3                                       = 2,
	Death_MAX                                          = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.BreathVoiceType
/*enum BreathVoiceType
{
	Breath_Run                                         = 0,
	Breath_Stun                                        = 1,
	Breath_Normal                                      = 2,
	Breath_Angry                                       = 3,
	Breath_Walk                                        = 4,
	Breath_MAX                                         = 5
};*/

// Enum Engine.AnimNotify_VoiceSound.MoveVoiceType
/*enum MoveVoiceType
{
	Move_Evade                                         = 0,
	Move_Jump                                          = 1,
	Move_Bounce                                        = 2,
	Move_MAX                                           = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.SocialVoiceType
/*enum SocialVoiceType
{
	Social_Greet                                       = 0,
	Social_Love                                        = 1,
	Social_Sit                                         = 2,
	Social_Stand                                       = 3,
	Social_Stretch                                     = 4,
	Social_Trade                                       = 5,
	Social_TradeGet                                    = 6,
	Social_Drink                                       = 7,
	Social_Laugh                                       = 8,
	Social_Speak                                       = 9,
	Social_Roar                                        = 10,
	Social_Victory                                     = 11,
	Social_Search                                      = 12,
	Social_Tease                                       = 13,
	Social_Eat                                         = 14,
	Social_Slot1                                       = 15,
	Social_Slot2                                       = 16,
	Social_Slot3                                       = 17,
	Social_MAX                                         = 18
};*/

// Enum Engine.AnimNotify_VoiceSound.CastVoiceType
/*enum CastVoiceType
{
	Cast_Type1                                         = 0,
	Cast_Type2                                         = 1,
	Cast_Type3                                         = 2,
	Cast_Type4                                         = 3,
	Cast_MAX                                           = 4
};*/

// Enum Engine.AnimNotify_VoiceSound.ShotVoiceType
/*enum ShotVoiceType
{
	Shot_Type1                                         = 0,
	Shot_Type2                                         = 1,
	Shot_Type3                                         = 2,
	Shot_Type4                                         = 3,
	Shot_MAX                                           = 4
};*/

// Enum Engine.AnimNotify_VoiceSound.IdleVoiceType
/*enum IdleVoiceType
{
	Idle_Type1                                         = 0,
	Idle_Type2                                         = 1,
	Idle_Type3                                         = 2,
	Idle_MAX                                           = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.SPAttackVoiceType
/*enum SPAttackVoiceType
{
	SPAttack_Type1                                     = 0,
	SPAttack_Type2                                     = 1,
	SPAttack_Type3                                     = 2,
	SPAttack_MAX                                       = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.KnockBackVoiceType
/*enum KnockBackVoiceType
{
	KnockBack_Start                                    = 0,
	KnockBack_Loop                                     = 1,
	KnockBack_StandUp                                  = 2,
	KnockBack_MAX                                      = 3
};*/

// Enum Engine.AnimNotify_VoiceSound.CombatVoiceType
/*enum CombatVoiceType
{
	Combat_PreemptAtk                                  = 0,
	Combat_SOS                                         = 1,
	Combat_Flee                                        = 2,
	Combat_MAX                                         = 3
};*/

// Enum Engine.AudioDevice.SOUNDGROUPMode
/*enum SOUNDGROUPMode
{
	SOUNDGROUPMode_None                                = 0,
	SOUNDGROUPMode_UIAction                            = 1,
	SOUNDGROUPMode_Custom                              = 2,
	SOUNDGROUPMode_UniqueBGM                           = 3,
	SOUNDGROUPMode_MusicOnce                           = 4,
	SOUNDGROUPMode_Social                              = 5,
	SOUNDGROUPMode_MAX                                 = 6
};*/

// Enum Engine.AudioDevice.ETTSSpeaker
/*enum ETTSSpeaker
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_MAX                                     = 9
};*/

// Enum Engine.AudioDevice.SoundModeLayerIndex
/*enum SoundModeLayerIndex
{
	SMLI_Engine                                        = 0,
	SMLI_Client                                        = 1,
	SMLI_MAX                                           = 2
};*/

// Enum Engine.AudioDevice.Track_Type
/*enum Track_Type
{
	TrackType                                          = 0,
	TrackType01                                        = 1,
	TrackType02                                        = 2,
	TrackType03                                        = 3,
	TrackType_ByDistance                               = 4,
	TrackType_MAX                                      = 5
};*/

// Enum Engine.BillboardComponent.BillBoard_Mesh_Type
/*enum BillBoard_Mesh_Type
{
	PLANE_TYPE                                         = 0,
	CROSS_PLANE_TYPE                                   = 1,
	BillBoard_Mesh_Type_MAX                            = 2
};*/

// Enum Engine.BillboardComponent.BillBoard_Axis_Type
/*enum BillBoard_Axis_Type
{
	BillBoard_Axis_Z                                   = 0,
	BillBoard_Axis_All                                 = 1,
	BillBoard_Axis_MAX                                 = 2
};*/

// Enum Engine.PostProcessVolume.EWeatherInterpolationType
/*enum EWeatherInterpolationType
{
	Weather_Interpolation_Type1                        = 0,
	Weather_Interpolation_Type2                        = 1,
	Weather_Interpolation_MAX                          = 2
};*/

// Enum Engine.FontImportOptions.EFontImportCharacterSet
/*enum EFontImportCharacterSet
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_MAX                                        = 3
};*/

// Enum Engine.CloudInfo.TEXTURE_LAYOUT_TYPE
/*enum TEXTURE_LAYOUT_TYPE
{
	TLAYOUT_2X2                                        = 0,
	TLAYOUT_3X3                                        = 1,
	TLAYOUT_4X4                                        = 2,
	TLAYOUT_MAX                                        = 3
};*/

// Enum Engine.UIRoot.EMaterialAdjustmentType
/*enum EMaterialAdjustmentType
{
	ADJUST_None                                        = 0,
	ADJUST_Normal                                      = 1,
	ADJUST_Justified                                   = 2,
	ADJUST_Bound                                       = 3,
	ADJUST_Stretch                                     = 4,
	ADJUST_MAX                                         = 5
};*/

// Enum Engine.UIRoot.EPositionEvalType
/*enum EPositionEvalType
{
	EVALPOS_None                                       = 0,
	EVALPOS_PixelViewport                              = 1,
	EVALPOS_PixelScene                                 = 2,
	EVALPOS_PixelOwner                                 = 3,
	EVALPOS_PercentageViewport                         = 4,
	EVALPOS_PercentageOwner                            = 5,
	EVALPOS_PercentageScene                            = 6,
	EVALPOS_MAX                                        = 7
};*/

// Enum Engine.UIRoot.EUIExtentEvalType
/*enum EUIExtentEvalType
{
	UIEXTENTEVAL_Pixels                                = 0,
	UIEXTENTEVAL_PercentSelf                           = 1,
	UIEXTENTEVAL_PercentOwner                          = 2,
	UIEXTENTEVAL_PercentScene                          = 3,
	UIEXTENTEVAL_PercentViewport                       = 4,
	UIEXTENTEVAL_MAX                                   = 5
};*/

// Enum Engine.UIRoot.EUIDockPaddingEvalType
/*enum EUIDockPaddingEvalType
{
	UIPADDINGEVAL_Pixels                               = 0,
	UIPADDINGEVAL_PercentTarget                        = 1,
	UIPADDINGEVAL_PercentOwner                         = 2,
	UIPADDINGEVAL_PercentScene                         = 3,
	UIPADDINGEVAL_PercentViewport                      = 4,
	UIPADDINGEVAL_MAX                                  = 5
};*/

// Enum Engine.UIRoot.EUIAutoSizeConstraintType
/*enum EUIAutoSizeConstraintType
{
	UIAUTOSIZEREGION_Minimum                           = 0,
	UIAUTOSIZEREGION_Maximum                           = 1,
	UIAUTOSIZEREGION_MAX                               = 2
};*/

// Enum Engine.UIRoot.ETextClipMode
/*enum ETextClipMode
{
	CLIP_Ellipsis                                      = 0,
	CLIP_Wrap                                          = 1,
	CLIP_MAX                                           = 2
};*/

// Enum Engine.UIRoot.ETextAutoScaleMode
/*enum ETextAutoScaleMode
{
	UIAUTOSCALE_None                                   = 0,
	UIAUTOSCALE_Normal                                 = 1,
	UIAUTOSCALE_Justified                              = 2,
	UIAUTOSCALE_ResolutionBased                        = 3,
	UIAUTOSCALE_MAX                                    = 4
};*/

// Enum Engine.UIRoot.EUIAlignment
/*enum EUIAlignment
{
	UIALIGN_Left                                       = 0,
	UIALIGN_Center                                     = 1,
	UIALIGN_Right                                      = 2,
	UIALIGN_Default                                    = 3,
	UIALIGN_MAX                                        = 4
};*/

// Enum Engine.UIRoot.EUIListElementState
/*enum EUIListElementState
{
	ELEMENT_Normal                                     = 0,
	ELEMENT_Active                                     = 1,
	ELEMENT_Selected                                   = 2,
	ELEMENT_UnderCursor                                = 3,
	ELEMENT_MAX                                        = 4
};*/

// Enum Engine.UIRoot.EColumnHeaderState
/*enum EColumnHeaderState
{
	COLUMNHEADER_Normal                                = 0,
	COLUMNHEADER_PrimarySort                           = 1,
	COLUMNHEADER_SecondarySort                         = 2,
	COLUMNHEADER_MAX                                   = 3
};*/

// Enum Engine.UIRoot.EUIOrientation
/*enum EUIOrientation
{
	UIORIENT_Horizontal                                = 0,
	UIORIENT_Vertical                                  = 1,
	UIORIENT_MAX                                       = 2
};*/

// Enum Engine.UIRoot.EUIWidgetFace
/*enum EUIWidgetFace
{
	UIFACE_Left                                        = 0,
	UIFACE_Top                                         = 1,
	UIFACE_Right                                       = 2,
	UIFACE_Bottom                                      = 3,
	UIFACE_MAX                                         = 4
};*/

// Enum Engine.UIRoot.EUIAspectRatioConstraint
/*enum EUIAspectRatioConstraint
{
	UIASPECTRATIO_AdjustNone                           = 0,
	UIASPECTRATIO_AdjustWidth                          = 1,
	UIASPECTRATIO_AdjustHeight                         = 2,
	UIASPECTRATIO_MAX                                  = 3
};*/

// Enum Engine.UIRoot.EUIDefaultPenColor
/*enum EUIDefaultPenColor
{
	UIPEN_White                                        = 0,
	UIPEN_Black                                        = 1,
	UIPEN_Grey                                         = 2,
	UIPEN_MAX                                          = 3
};*/

// Enum Engine.UIRoot.ENavigationLinkType
/*enum ENavigationLinkType
{
	NAVLINK_Automatic                                  = 0,
	NAVLINK_Manual                                     = 1,
	NAVLINK_MAX                                        = 2
};*/

// Enum Engine.UIRoot.EScreenInputMode
/*enum EScreenInputMode
{
	INPUTMODE_None                                     = 0,
	INPUTMODE_Locked                                   = 1,
	INPUTMODE_MatchingOnly                             = 2,
	INPUTMODE_ActiveOnly                               = 3,
	INPUTMODE_Free                                     = 4,
	INPUTMODE_Simultaneous                             = 5,
	INPUTMODE_MAX                                      = 6
};*/

// Enum Engine.UIRoot.ESplitscreenRenderMode
/*enum ESplitscreenRenderMode
{
	SPLITRENDER_Fullscreen                             = 0,
	SPLITRENDER_PlayerOwner                            = 1,
	SPLITRENDER_MAX                                    = 2
};*/

// Enum Engine.UIRoot.EUIDataProviderFieldType
/*enum EUIDataProviderFieldType
{
	DATATYPE_Property                                  = 0,
	DATATYPE_Provider                                  = 1,
	DATATYPE_RangeProperty                             = 2,
	DATATYPE_NetIdProperty                             = 3,
	DATATYPE_Collection                                = 4,
	DATATYPE_ProviderCollection                        = 5,
	DATATYPE_MAX                                       = 6
};*/

// Enum Engine.UIRoot.EEditBoxCharacterSet
/*enum EEditBoxCharacterSet
{
	CHARSET_All                                        = 0,
	CHARSET_NoSpecial                                  = 1,
	CHARSET_AlphaOnly                                  = 2,
	CHARSET_NumericOnly                                = 3,
	CHARSET_AlphaNumeric                               = 4,
	CHARSET_PassWord                                   = 5,
	CHARSET_Japan                                      = 6,
	CHARSET_JapanName                                  = 7,
	CHARSET_MAX                                        = 8
};*/

// Enum Engine.UIRoot.ERotationAnchor
/*enum ERotationAnchor
{
	RA_Absolute                                        = 0,
	RA_Center                                          = 1,
	RA_PivotLeft                                       = 2,
	RA_PivotRight                                      = 3,
	RA_PivotTop                                        = 4,
	RA_PivotBottom                                     = 5,
	RA_UpperLeft                                       = 6,
	RA_UpperRight                                      = 7,
	RA_LowerLeft                                       = 8,
	RA_LowerRight                                      = 9,
	RA_MAX                                             = 10
};*/

// Enum Engine.UIRoot.EInputPlatformType
/*enum EInputPlatformType
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_MAX                                            = 3
};*/

// Enum Engine.UIRoot.EAnimationMode
/*enum EAnimationMode
{
	EAnimMode_Linear                                   = 0,
	EAnimMode_Quadratic                                = 1,
	EAnimMode_Cubic                                    = 2,
	EAnimMode_Threshold                                = 3,
	EAnimMode_Sine_Minus90to90                         = 4,
	EAnimMode_Sine_0to90                               = 5,
	EAnimMode_Sine_45to103                             = 6,
	EAnimMode_ArcTangent_0to4                          = 7,
	EAnimMode_ArcTangent_0to10                         = 8,
	EAnimMode_ArcTangent_Minus10to10                   = 9,
	EAnimMode_Tangent_Minus60to60                      = 10,
	EAnimMode_Tangent_0to60_Tangent_81to0              = 11,
	EAnimMode_MAX                                      = 12
};*/

// Enum Engine.UIRoot.EResizeLinkType
/*enum EResizeLinkType
{
	BORDER_LINK_LEFT                                   = 0,
	BORDER_LINK_RIGHT                                  = 1,
	BORDER_LINK_CENTER                                 = 2,
	BORDER_LINK_RIGHT_AND_LEFT                         = 3,
	WIDGET_LINK_LEFT                                   = 4,
	WIDGET_LINK_RIGHT                                  = 5,
	WIDGET_LINKNRESIZE_LEFT                            = 6,
	WIDGET_LINKNRESIZE_RIGHT                           = 7,
	WIDGET_LINKNRESIZE_RIGHT_AND_LEFT                  = 8,
	EResizeLinkType_MAX                                = 9
};*/

// Enum Engine.UIRoot.EWidgetState
/*enum EWidgetState
{
	WidgetState_None                                   = 0,
	WidgetState_Normal                                 = 1,
	WidgetState_Active                                 = 2,
	WidgetState_Pressed                                = 3,
	WidgetState_Dissable                               = 4,
	WidgetState_ActiveOnly                             = 5,
	WidgetState_MAX                                    = 6
};*/

// Enum Engine.UIRoot.EWidgetSubState
/*enum EWidgetSubState
{
	WidgetSubState_Normal                              = 0,
	WidgetSubState_Checked                             = 1,
	WidgetSubState_MAX                                 = 2
};*/

// Enum Engine.UIRoot.EToggleType
/*enum EToggleType
{
	ToggleType_CheckBox                                = 0,
	ToggleType_Toggle                                  = 1,
	ToggleType_MAX                                     = 2
};*/

// Enum Engine.UIRoot.EJustificationType
/*enum EJustificationType
{
	Justification_Type_Normal                          = 0,
	Justification_Type_LineFeedByWidgetArea            = 1,
	Justification_Type_LineFeedByLineArea              = 2,
	Justification_Type_MAX                             = 3
};*/

// Enum Engine.UIRoot.EUIAnimEventState
/*enum EUIAnimEventState
{
	UIANIM_EVENTSTATE_START                            = 0,
	UIANIM_EVENTSTATE_EVENT                            = 1,
	UIANIM_EVENTSTATE_COMPLETE                         = 2,
	UIANIM_EVENTSTATE_FLUSH                            = 3,
	UIANIM_EVENTSTATE_MAX                              = 4
};*/

// Enum Engine.UIRoot.EUIAnimFactorType
/*enum EUIAnimFactorType
{
	UIANIM_FACTORTYPE_POSITION                         = 0,
	UIANIM_FACTORTYPE_SIZE                             = 1,
	UIANIM_FACTORTYPE_SIZE_HALIGN                      = 2,
	UIANIM_FACTORTYPE_SIZE_VALIGN                      = 3,
	UIANIM_FACTORTYPE_SCALE                            = 4,
	UIANIM_FACTORTYPE_ALPHA                            = 5,
	UIANIM_FACTORTYPE_COLOR                            = 6,
	UIANIM_FACTORTYPE_VISIBLE                          = 7,
	UIANIM_FACTORTYPE_CLIPPING                         = 8,
	UIANIM_FACTORTYPE_CLIPPING_FACE                    = 9,
	UIANIM_FACTORTYPE_CLIPPINGBOUNDWIDGET              = 10,
	UIANIM_FACTORTYPE_GAUGE                            = 11,
	UIANIM_FACTORTYPE_GAUGE_REVERSE                    = 12,
	UIANIM_FACTORTYPE_PROGRESS                         = 13,
	UIANIM_FACTORTYPE_PROGRESS_CHANGEDEVENT            = 14,
	UIANIM_FACTORTYPE_RENDERORDER                      = 15,
	UIANIM_FACTORTYPE_RENDERWIDGET                     = 16,
	UIANIM_FACTORTYPE_SCROLL                           = 17,
	UIANIM_FACTORTYPE_UV                               = 18,
	UIANIM_FACTORTYPE_UVSIZE                           = 19,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK                    = 20,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK_FADE               = 21,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK_FADE_STARTALPHA    = 22,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK_FADE_ENDALPHA      = 23,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK_FADE_DIRECTION     = 24,
	UIANIM_FACTORTYPE_TEXTSTYLEMASK_FADE_INTERPOLATIONSIZE = 25,
	UIANIM_FACTORTYPE_RADIALGRAPHVALUE                 = 26,
	UIANIM_FACTORTYPE_COUNTING                         = 27,
	UIANIM_FACTORTYPE_COUNTING_DECIMALPLACE            = 28,
	UIANIM_FACTORTYPE_MAX                              = 29
};*/

// Enum Engine.UIRoot.EUIAnimFactorValueType
/*enum EUIAnimFactorValueType
{
	UIANIM_FACTORVALUETYPE_OFFSET                      = 0,
	UIANIM_FACTORVALUETYPE_RATIO                       = 1,
	UIANIM_FACTORVALUETYPE_VALUE                       = 2,
	UIANIM_FACTORVALUETYPE_MAX                         = 3
};*/

// Enum Engine.UIRoot.EUITargetType
/*enum EUITargetType
{
	UI_TARGETTYPE_NONE                                 = 0,
	UI_TARGETTYPE_WIDGET                               = 1,
	UI_TARGETTYPE_WIDGET_INSTANCE                      = 2,
	UI_TARGETTYPE_DRAWCOMPONENT                        = 3,
	UI_TARGETTYPE_DRAWCOMPONENT_INSTANCE               = 4,
	UI_TARGETTYPE_DRAWCOMPONENT_TEXTSTYLEMASK          = 5,
	UI_TARGETTYPE_EXPANSIONCOMPONENT                   = 6,
	UI_TARGETTYPE_EXPANSIONCOMPONENT_INSTANCE          = 7,
	UI_TARGETTYPE_EXPANSIONCOMPONENT_TEXTSTYLEMASK     = 8,
	UI_TARGETTYPE_CONTAINDATA                          = 9,
	UI_TARGETTYPE_MINIMAP                              = 10,
	UI_TARGETTYPE_MINIMAPUNIT                          = 11,
	UI_TARGETTYPE_MINIMAPUNITOUTGLOW                   = 12,
	UI_TARGETTYPE_RADIALGRAPH                          = 13,
	UI_TARGETTYPE_PARTICLE                             = 14,
	UI_TARGETTYPE_MAX                                  = 15
};*/

// Enum Engine.UIRoot.EUIAnimRenderOrder
/*enum EUIAnimRenderOrder
{
	UIANIM_RENDERORDER_NONE                            = 0,
	UIANIM_RENDERORDER_PRE                             = 1,
	UIANIM_RENDERORDER_POST                            = 2,
	UIANIM_RENDERORDER_MAX                             = 3
};*/

// Enum Engine.UIRoot.EUIParticleOrder
/*enum EUIParticleOrder
{
	UIPARTICLE_ORDER_PRE                               = 0,
	UIPARTICLE_ORDER_POST                              = 1,
	UIPARTICLE_ORDER_POSTALL                           = 2,
	UIPARTICLE_ORDER_MAX                               = 3
};*/

// Enum Engine.UIRoot.EUIAnimLoopMode
/*enum EUIAnimLoopMode
{
	UIANIM_LOOPMODE_NONE                               = 0,
	UIANIM_LOOPMODE_REPLAY                             = 1,
	UIANIM_LOOPMODE_REVERSE                            = 2,
	UIANIM_LOOPMODE_PAUSE                              = 3,
	UIANIM_LOOPMODE_MAX                                = 4
};*/

// Enum Engine.UIRoot.EUIAnimMoveType
/*enum EUIAnimMoveType
{
	UIANIM_MOVETYPE_LINEAR                             = 0,
	UIANIM_MOVETYPE_SINE                               = 1,
	UIANIM_MOVETYPE_MAX                                = 2
};*/

// Enum Engine.UIRoot.EUIRenderDataType
/*enum EUIRenderDataType
{
	UIRENDER_DATATYPE_TEXT                             = 0,
	UIRENDER_DATATYPE_IMAGE                            = 1,
	UIRENDER_DATATYPE_MAX                              = 2
};*/

// Enum Engine.UIRoot.EUIAnimKeyElementType
/*enum EUIAnimKeyElementType
{
	UIANIM_DUMMYKEY_ELEMENTTYPE                        = 0,
	UIANIM_POSKEY_ELEMENTTYPE                          = 1,
	UIANIM_ALPHAKEY_ELEMENTTYPE                        = 2,
	UIANIM_SCALEKEY_ELEMENTTYPE                        = 3,
	UIANIM_RESIZEKEY_ELEMENTTYPE                       = 4,
	UIANIM_SCROLLKEY_ELEMENTTYPE                       = 5,
	UIANIM_PROGRESSKEY_ELEMENTTYPE                     = 6,
	UIANIM_TEXCOORDSKEY_ELEMENTTYPE                    = 7,
	UIANIM_COLORKEY_ELEMENTTYPE                        = 8,
	UIANIM_VISIBLEKEY_ELEMENTTYPE                      = 9,
	UIANIM_CLIPPINGKEY_ELEMENTTYPE                     = 10,
	UIANIM_GAUGEKEY_ELEMENTTYPE                        = 11,
	UIANIM_TEXTFADEKEY_ELEMENTTYPE                     = 12,
	UIANIM_RADIALGRAPHVALUEKEY_ELEMENTTYPE             = 13,
	UIANIM_COUNTINGKEY_ELEMENTTYPE                     = 14,
	UIANIM_MAX                                         = 15
};*/

// Enum Engine.UIRoot.EUIStringAreaType
/*enum EUIStringAreaType
{
	UISTRING_AREATYPE_TEXT                             = 0,
	UISTRING_AREATYPE_LINE                             = 1,
	UISTRING_AREATYPE_RENDERBOX                        = 2,
	UISTRING_AREATYPE_MAX                              = 3
};*/

// Enum Engine.UIRoot.EUITextStyleMaskType
/*enum EUITextStyleMaskType
{
	UITEXT_STYLEMASKTYPE_ALPHA                         = 0,
	UITEXT_STYLEMASKTYPE_COLOR                         = 1,
	UITEXT_STYLEMASKTYPE_FADE                          = 2,
	UITEXT_STYLEMASKTYPE_MAX                           = 3
};*/

// Enum Engine.UIRoot.EUIStringDirectionType
/*enum EUIStringDirectionType
{
	UISTRING_DIRECTIONTYPE_LEFT                        = 0,
	UISTRING_DIRECTIONTYPE_TOP                         = 1,
	UISTRING_DIRECTIONTYPE_RIGHT                       = 2,
	UISTRING_DIRECTIONTYPE_BOTTOM                      = 3,
	UISTRING_DIRECTIONTYPE_TEXTPATH                    = 4,
	UISTRING_DIRECTIONTYPE_REVERSETEXTPATH             = 5,
	UISTRING_DIRECTIONTYPE_MAX                         = 6
};*/

// Enum Engine.UIRoot.EUIActionClientDataType
/*enum EUIActionClientDataType
{
	UIACTION_CLIENTDATATYPE_TEXTNODE_TEXT              = 0,
	UIACTION_CLIENTDATATYPE_ANIMPROGRESSNODE_STARTENDVALUE = 1,
	UIACTION_CLIENTDATATYPE_ANIMCOUNTINGNODE_STARTENDVALUE = 2,
	UIACTION_CLIENTDATATYPE_MAX                        = 3
};*/

// Enum Engine.UIRoot.EUIAnimPosKeyValueType
/*enum EUIAnimPosKeyValueType
{
	UIANIM_POSVALUETYPE_PIXELOFFSET                    = 0,
	UIANIM_POSVALUETYPE_SCREENRATIO                    = 1,
	UIANIM_POSVALUETYPE_WIDGETPOS                      = 2,
	UIANIM_POSVALUETYPE_MAX                            = 3
};*/

// Enum Engine.UIRoot.EUIAnimScrollKeyValueType
/*enum EUIAnimScrollKeyValueType
{
	UIANIM_SCROLLVALUETYPE_SCROLLRATIO                 = 0,
	UIANIM_SCROLLVALUETYPE_CURRENTPOS                  = 1,
	UIANIM_SCROLLVALUETYPE_EXTENDEDSTARTPOS            = 2,
	UIANIM_SCROLLVALUETYPE_EXTENDEDENDPOS              = 3,
	UIANIM_SCROLLVALUETYPE_MAX                         = 4
};*/

// Enum Engine.WorldInfo.ENetMode
/*enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_MAX                                             = 4
};*/

// Enum Engine.WorldInfo.EConsoleType
/*enum EConsoleType
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_MAX                                        = 3
};*/

// Enum Engine.CoverGroup.ECoverGroupFillAction
/*enum ECoverGroupFillAction
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_MAX                                           = 5
};*/

// Enum Engine.CoverLink.ECoverAction
/*enum ECoverAction
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_StepLeft                                        = 5,
	CA_StepRight                                       = 6,
	CA_PopUp                                           = 7,
	CA_BlindUp                                         = 8,
	CA_PeekLeft                                        = 9,
	CA_PeekRight                                       = 10,
	CA_PeekUp                                          = 11,
	CA_MAX                                             = 12
};*/

// Enum Engine.CoverLink.ECoverDirection
/*enum ECoverDirection
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_MAX                                             = 4
};*/

// Enum Engine.CoverLink.ECoverType
/*enum ECoverType
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_MAX                                             = 3
};*/

// Enum Engine.CoverLink.ECoverLocationDescription
/*enum ECoverLocationDescription
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_MAX                                      = 12
};*/

// Enum Engine.CrowdAgent.EAgentMoveState
/*enum EAgentMoveState
{
	EAMS_Move                                          = 0,
	EAMS_Idle                                          = 1,
	EAMS_MAX                                           = 2
};*/

// Enum Engine.CrowdAttractor.ECrowdAttractorMode
/*enum ECrowdAttractorMode
{
	ECAM_MoveTarget                                    = 0,
	ECAM_Repulsor                                      = 1,
	ECAM_MAX                                           = 2
};*/

// Enum Engine.CustomUIObject.EWidgetClippingType
/*enum EWidgetClippingType
{
	WIDGET_CLIPPINGTYPE_SELF                           = 0,
	WIDGET_CLIPPINGTYPE_HIERARCHY                      = 1,
	WIDGET_CLIPPINGTYPE_ANIMATION                      = 2,
	WIDGET_CLIPPINGTYPE_MAX                            = 3
};*/

// Enum Engine.CustomUIObject.EDelegateType
/*enum EDelegateType
{
	DELEGATETYPE_IMAGECLICKED                          = 0,
	DELEGATETYPE_BUTTONPRESSED                         = 1,
	DELEGATETYPE_BUTTONPRESSREPEAT                     = 2,
	DELEGATETYPE_BUTTONCLICKED                         = 3,
	DELEGATETYPE_BUTTONRCLICKED                        = 4,
	DELEGATETYPE_BUTTONDRAGSTART                       = 5,
	DELEGATETYPE_BUTTONDRAG                            = 6,
	DELEGATETYPE_BUTTONDROP                            = 7,
	DELEGATETYPE_TOGGLEBUTTONCLICKED                   = 8,
	DELEGATETYPE_TOGGLEBUTTONRCLICKED                  = 9,
	DELEGATETYPE_SCROLL                                = 10,
	DELEGATETYPE_CHANGESLIDERVALUE                     = 11,
	DELEGATETYPE_UPDATELIST                            = 12,
	DELEGATETYPE_ITEMCHANGED                           = 13,
	DELEGATETYPE_RADIOBUTTONCHANGED                    = 14,
	DELEGATETYPE_RADIOBUTTONCONTEXT                    = 15,
	DELEGATETYPE_SIZERPRESSED                          = 16,
	DELEGATETYPE_SIZERCLICKED                          = 17,
	DELEGATETYPE_CHANGESLIDERBOXVALUE                  = 18,
	DELEGATETYPE_MAX                                   = 19
};*/

// Enum Engine.CustomUIComp_DrawImage.ESperateImageType
/*enum ESperateImageType
{
	SperateImageType_1Frame                            = 0,
	SperateImageType_3Frame                            = 1,
	SperateImageType_9Frame                            = 2,
	SperateImageType_MAX                               = 3
};*/

// Enum Engine.TextParser.ETextLengthType
/*enum ETextLengthType
{
	TextLength_Type_Byte                               = 0,
	TextLength_Type_TwoByte                            = 1,
	TextLength_Type_MAX                                = 2
};*/

// Enum Engine.TextParser.EXmlNodeType
/*enum EXmlNodeType
{
	XMLNODE_TYPE_NONE                                  = 0,
	XMLNODE_TYPE_ELEMENT                               = 1,
	XMLNODE_TYPE_TEXT                                  = 2,
	XMLNODE_TYPE_MAX                                   = 3
};*/

// Enum Engine.CustomUIComp_DrawStringEditbox.ECaretMoveType
/*enum ECaretMoveType
{
	Caret_MoveType_Prev                                = 0,
	Caret_MoveType_Next                                = 1,
	Caret_MoveType_Up                                  = 2,
	Caret_MoveType_Down                                = 3,
	Caret_MoveType_Start                               = 4,
	Caret_MoveType_End                                 = 5,
	Caret_MoveType_PageUp                              = 6,
	Caret_MoveType_PageDown                            = 7,
	Caret_MoveType_MAX                                 = 8
};*/

// Enum Engine.CustomUIGameMainScene.EUIActionType
/*enum EUIActionType
{
	UIActionType_None                                  = 0,
	UIActionType_Visible                               = 1,
	UIActionType_Sound                                 = 2,
	UIActionType_Particle                              = 3,
	UIActionType_Animation                             = 4,
	UIActionType_Text                                  = 5,
	UIActionType_Image                                 = 6,
	UIActionType_ResizeLink                            = 7,
	UIActionType_InstRenderObj                         = 8,
	UIActionType_MAX                                   = 9
};*/

// Enum Engine.CustomUIMeshWidget.EViewMode
/*enum EViewMode
{
	ViewMode_Ortho                                     = 0,
	ViewMode_Perspective                               = 1,
	ViewMode_MAX                                       = 2
};*/

// Enum Engine.MaterialInterface.EMaterialUsage
/*enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_FracturedMeshes                           = 1,
	MATUSAGE_ParticleSprites                           = 2,
	MATUSAGE_BeamTrails                                = 3,
	MATUSAGE_ParticleSubUV                             = 4,
	MATUSAGE_Foliage                                   = 5,
	MATUSAGE_StaticLighting                            = 6,
	MATUSAGE_GammaCorrection                           = 7,
	MATUSAGE_LensFlare                                 = 8,
	MATUSAGE_InstancedMeshParticles                    = 9,
	MATUSAGE_FluidSurface                              = 10,
	MATUSAGE_Decals                                    = 11,
	MATUSAGE_MaterialEffect                            = 12,
	MATUSAGE_MAX                                       = 13
};*/

// Enum Engine.Material.EBlendMode
/*enum EBlendMode
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_UI                                           = 5,
	BLEND_ForMaskedDof                                 = 6,
	BLEND_MAX                                          = 7
};*/

// Enum Engine.Material.EMaterialLightingModel
/*enum EMaterialLightingModel
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_Anisotropic                                    = 5,
	MLM_MAX                                            = 6
};*/

// Enum Engine.CustomUIMiniMap.EMapUnitRenderStage
/*enum EMapUnitRenderStage
{
	MapUnit_RenderStage_NoAnim                         = 0,
	MapUnit_RenderStage_Anim                           = 1,
	MapUnit_RenderStage_MAX                            = 2
};*/

// Enum Engine.CustomUIMiniMap.EMapUnitState
/*enum EMapUnitState
{
	MapUnit_State_Noraml                               = 0,
	MapUnit_State_Active                               = 1,
	MapUnit_State_Pressed                              = 2,
	MapUnit_State_OutGlow                              = 3,
	MapUnit_State_MAX                                  = 4
};*/

// Enum Engine.CustomUIMiniMap.EMapAnimType
/*enum EMapAnimType
{
	Map_AnimType_Blend                                 = 0,
	Map_AnimType_Slide                                 = 1,
	Map_AnimType_Rotate                                = 2,
	Map_AnimType_MAX                                   = 3
};*/

// Enum Engine.CustomUIMiniMap.EMapMaterialInst
/*enum EMapMaterialInst
{
	Map_MaterialInst_Main                              = 0,
	Map_MaterialInst_BlendDest                         = 1,
	Map_MaterialInst_MAX                               = 2
};*/

// Enum Engine.CustomUIMiniMap.EMapFunction
/*enum EMapFunction
{
	Map_Func_Mark_LineDraw                             = 0,
	Map_Func_SetCenterPosition                         = 1,
	Map_Func_SetRotate                                 = 2,
	Map_Func_SetMode                                   = 3,
	Map_Func_MapDrag                                   = 4,
	Map_Func_SetMapInfo                                = 5,
	Map_Func_Animation                                 = 6,
	Map_Func_MAX                                       = 7
};*/

// Enum Engine.CustomUIMiniMap.EMapFunctionCheckResult
/*enum EMapFunctionCheckResult
{
	Map_FuncCheck_Cancel                               = 0,
	Map_FuncCheck_Excute                               = 1,
	Map_FuncCheck_MAX                                  = 2
};*/

// Enum Engine.CustomUIScrollIndex.EIndexEntryDataTye
/*enum EIndexEntryDataTye
{
	IndexEntry_DataTye_Text                            = 0,
	IndexEntry_DataTye_Image                           = 1,
	IndexEntry_DataTye_MAX                             = 2
};*/

// Enum Engine.CustomUISizer.EResizeFaceHorizontal
/*enum EResizeFaceHorizontal
{
	RESIZE_FACE_HORIZONTAL_LEFT                        = 0,
	RESIZE_FACE_HORIZONTAL_RIGHT                       = 1,
	RESIZE_FACE_HORIZONTAL_MAX                         = 2
};*/

// Enum Engine.CustomUISizer.EResizeFaceVertical
/*enum EResizeFaceVertical
{
	RESIZE_FACE_VERTICAL_TOP                           = 0,
	RESIZE_FACE_VERTICAL_BOTTOM                        = 1,
	RESIZE_FACE_VERTICAL_MAX                           = 2
};*/

// Enum Engine.CustomUIToggleButton.EToggleCheckType
/*enum EToggleCheckType
{
	ToggleCheckType_Clicked                            = 0,
	ToggleCheckType_Pressed                            = 1,
	ToggleCheckType_MAX                                = 2
};*/

// Enum Engine.GameViewportClient.ESplitScreenType
/*enum ESplitScreenType
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_MAX                                           = 6
};*/

// Enum Engine.GameViewportClient.ESafeZoneType
/*enum ESafeZoneType
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_MAX                                            = 4
};*/

// Enum Engine.DecalComponent.EFilterMode
/*enum EFilterMode
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_MAX                                             = 3
};*/

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
/*enum DistributionParamMode
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_MAX                                            = 3
};*/

// Enum Engine.DoorMarker.EDoorType
/*enum EDoorType
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_MAX                                           = 2
};*/

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
/*enum EParticleSystemUpdateMode
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_MAX                                          = 2
};*/

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
/*enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_MAX                        = 2
};*/

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
/*enum EParticleSysParamType
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_Vector                                        = 2,
	PSPT_Color                                         = 3,
	PSPT_Actor                                         = 4,
	PSPT_Material                                      = 5,
	PSPT_MAX                                           = 6
};*/

// Enum Engine.ParticleSystemComponent.ParticleReplayState
/*enum ParticleReplayState
{
	PRS_Disabled                                       = 0,
	PRS_Capturing                                      = 1,
	PRS_Replaying                                      = 2,
	PRS_MAX                                            = 3
};*/

// Enum Engine.ParticleSystemComponent.EParticleEventType
/*enum EParticleEventType
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_Kismet                                        = 4,
	EPET_MAX                                           = 5
};*/

// Enum Engine.Emitter.Emitter_GhostMode_ViewType
/*enum Emitter_GhostMode_ViewType
{
	Emitter_GhostMode_BothView                         = 0,
	Emitter_GhostMode_NormalOnlyView                   = 1,
	Emitter_GhostMode_GhostOnlyView                    = 2,
	Emitter_GhostMode_BeyondOnlyView                   = 3,
	Emitter_GhostMode_MAX                              = 4
};*/

// Enum Engine.Engine.ETransitionType
/*enum ETransitionType
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_MAX                                             = 6
};*/

// Enum Engine.MoveActionPoint.ActionPoint_MoveType
/*enum ActionPoint_MoveType
{
	ActionPT_MoveState_A                               = 0,
	ActionPT_MoveState_B                               = 1,
	ActionPT_MoveState_C                               = 2,
	ActionPT_MoveState_MAX                             = 3
};*/

// Enum Engine.MoveActionPoint.ActionPointMovingType
/*enum ActionPointMovingType
{
	ActionPT_MoveType_Abs                              = 0,
	ActionPT_MoveType_Relative                         = 1,
	ActionPT_MoveType_MAX                              = 2
};*/

// Enum Engine.MoveActionPoint.ActionPoint_AnimIndex
/*enum ActionPoint_AnimIndex
{
	ActionPT_AnimType_Start                            = 0,
	ActionPT_AnimType_Loop                             = 1,
	ActionPT_AnimType_MAX                              = 2
};*/

// Enum Engine.MoveActionPoint.ActionPoint_CancelDir
/*enum ActionPoint_CancelDir
{
	ActionPT_Cancel_FrontJump                          = 0,
	ActionPT_Cancel_BackJump                           = 1,
	ActionPT_Cancel_LeftJump                           = 2,
	ActionPT_Cancel_RightJump                          = 3,
	ActionPT_Cancel_MAX                                = 4
};*/

// Enum Engine.FileWriter.FWFileType
/*enum FWFileType
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_MAX                                           = 5
};*/

// Enum Engine.FluidInfluenceComponent.EInfluenceType
/*enum EInfluenceType
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_MAX                                          = 4
};*/

// Enum Engine.FontSet.EFontFilter
/*enum EFontFilter
{
	FontFilter_Nearest                                 = 0,
	FontFilter_Linear                                  = 1,
	FontFilter_MAX                                     = 2
};*/

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
/*enum EWaveformFunction
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_MAX                                             = 7
};*/

// Enum Engine.GameEngine.EFullyLoadPackageType
/*enum EFullyLoadPackageType
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_Mutator                                  = 4,
	FULLYLOAD_MAX                                      = 5
};*/

// Enum Engine.InterpTrackToggle.ETrackToggleAction
/*enum ETrackToggleAction
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_Trigger                                       = 3,
	ETTA_MAX                                           = 4
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackAction
/*enum EVisibilityTrackAction
{
	EVTA_Hide                                          = 0,
	EVTA_Show                                          = 1,
	EVTA_Toggle                                        = 2,
	EVTA_MAX                                           = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
/*enum EInterpTrackMoveFrame
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_MAX                                            = 2
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
/*enum EInterpTrackMoveRotMode
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_MAX                                            = 2
};*/

// Enum Engine.VoiceSet.VoicePlayType
/*enum VoicePlayType
{
	VPT_NONE                                           = 0,
	VPT_ATTACKVOICEPLAY                                = 1,
	VPT_HEAVYATTACKVOICEPLAY                           = 2,
	VPT_PREATTACKVOICEPLAY                             = 3,
	VPT_DAMAGEVOICEPLAY                                = 4,
	VPT_DEATHVOICEPLAY                                 = 5,
	VPT_BREATHVOICEPLAY                                = 6,
	VPT_MOVEVOICEPLAY                                  = 7,
	VPT_SOCIALVOICEPLAY                                = 8,
	VPT_PHYSICALCASTVOICEPLAY                          = 9,
	VPT_MAGICALCASTVOICEPLAY                           = 10,
	VPT_KNOCKBACKVOICEPLAY                             = 11,
	VPT_SPATTACKVOICEPLAY                              = 12,
	VPT_IDLEVOICEPLAY                                  = 13,
	VPT_CASTSHOTVOICEPLAY                              = 14,
	VPT_ACTSHOTVOICEPLAY                               = 15,
	VPT_SHORTACTSHOTVOICEPLAY                          = 16,
	VPT_COMBATVOICEPLAY                                = 17,
	VPT_MAX                                            = 18
};*/

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
/*enum EStreamingVolumeUsage
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_MAX                                            = 5
};*/

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
/*enum ESceneTextureType
{
	SceneTex_Lighting                                  = 0,
	SceneTex_MAX                                       = 1
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
/*enum EMaterialVectorCoordTransform
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_MAX                                      = 3
};*/

// Enum Engine.MaterialExpressionTransformMatrix.EMaterialTransformMatrixType
/*enum EMaterialTransformMatrixType
{
	TRANSFORMMAT_World                                 = 0,
	TRANSFORMMAT_View                                  = 1,
	TRANSFORMMAT_Local                                 = 2,
	TRANSFORMMAT_MAX                                   = 3
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransformSource
/*enum EMaterialPositionTransformSource
{
	TRANSFORMPOSSOURCE_Local                           = 0,
	TRANSFORMPOSSOURCE_PostProjection                  = 1,
	TRANSFORMPOSSOURCE_MAX                             = 2
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
/*enum EMaterialPositionTransform
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_MAX                                   = 1
};*/

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
/*enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_MAX                                            = 4
};*/

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
/*enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_MAX                                            = 4
};*/

// Enum Engine.Settings.EPropertyValueMappingType
/*enum EPropertyValueMappingType
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineNewsType
/*enum EOnlineNewsType
{
	ONT_Unknown                                        = 0,
	ONT_GameNews                                       = 1,
	ONT_ContentAnnouncements                           = 2,
	ONT_Misc                                           = 3,
	ONT_MAX                                            = 4
};*/

// Enum Engine.OnlineProfileSettings.EOnlineProfilePropertyOwner
/*enum EOnlineProfilePropertyOwner
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileSettingID
/*enum EProfileSettingID
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_MAX                                            = 28
};*/

// Enum Engine.OnlineProfileSettings.EOnlineProfileAsyncState
/*enum EOnlineProfileAsyncState
{
	OPAS_None                                          = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
/*enum EProfileDifficultyOptions
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_MAX                                            = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
/*enum EProfileControllerSensitivityOptions
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
/*enum EProfilePreferredColorOptions
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_MAX                                           = 12
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
/*enum EProfileAutoAimOptions
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
/*enum EProfileAutoCenterOptions
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
/*enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
/*enum EProfileRaceTransmissionOptions
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
/*enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_MAX                                          = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
/*enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
/*enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
/*enum EProfileYInversionOptions
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
/*enum EProfileXInversionOptions
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
/*enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_MAX                                          = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
/*enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_MAX                                          = 3
};*/

// Enum Engine.ParticleEmitter.EParticleBurstMethod
/*enum EParticleBurstMethod
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_MAX                                           = 2
};*/

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
/*enum EParticleSubUVInterpMethod
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_MAX                                         = 5
};*/

// Enum Engine.ParticleEmitter.EEmitterRenderMode
/*enum EEmitterRenderMode
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_MAX                                            = 4
};*/

// Enum Engine.ParticleModule.EModuleType
/*enum EModuleType
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_MAX                                           = 7
};*/

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
/*enum EParticleSourceSelectionMethod
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_ZeroIndex                                    = 2,
	EPSSM_SameIndex                                    = 3,
	EPSSM_MAX                                          = 4
};*/

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
/*enum EAttractorParticleSelectionMethod
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
/*enum Beam2SourceTargetMethod
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_MAX                                        = 5
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
/*enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_MAX                                       = 4
};*/

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
/*enum BeamModifierType
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_MAX                                         = 2
};*/

// Enum Engine.ParticleModuleClone.EParticleCloneShape
/*enum EParticleCloneShape
{
	PC_Circle                                          = 0,
	PC_Square                                          = 1,
	PC_MAX                                             = 2
};*/

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
/*enum EParticleCollisionComplete
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleColorByParameter.EColorParameterMode
/*enum EColorParameterMode
{
	ECPM_Spawn_ReplaceValue                            = 0,
	ECPM_Spawn_MultiplyValue                           = 1,
	ECPM_Update_ReplaceValue                           = 2,
	ECPM_Update_MultiplyValue                          = 3,
	ECPM_MAX                                           = 4
};*/

// Enum Engine.ParticleModuleLocationBase.ELocationEmitterSelectionMethod
/*enum ELocationEmitterSelectionMethod
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_ZeroIndex                                    = 2,
	ELESM_SameIndex                                    = 3,
	ELESM_MAX                                          = 4
};*/

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
/*enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_MAX                               = 3
};*/

// Enum Engine.ParticleModuleLocationStaticMesh.EStaticMeshTextureChannel
/*enum EStaticMeshTextureChannel
{
	EPMLSM_TEXTURECHANNEL_RED                          = 0,
	EPMLSM_TEXTURECHANNEL_GREEN                        = 1,
	EPMLSM_TEXTURECHANNEL_BLUE                         = 2,
	EPMLSM_TEXTURECHANNEL_MAX                          = 3
};*/

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
/*enum EOrbitChainMode
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_MAX                                    = 3
};*/

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
/*enum EParticleAxisLock
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_MAX                                           = 10
};*/

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
/*enum EParticleScreenAlignment
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_MAX                                            = 4
};*/

// Enum Engine.ParticleSpriteEmitter.EParticlePriority
/*enum EParticlePriority
{
	PP_High                                            = 0,
	PP_Mid                                             = 1,
	PP_Low                                             = 2,
	PP_MAX                                             = 3
};*/

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
/*enum ETrail2SourceMethod
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
/*enum ETrail2SpawnMethod
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
/*enum ETrailTaperMethod
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
/*enum EBeamMethod
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
/*enum EBeamEndPointMethod
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
/*enum EBeam2Method
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
/*enum EBeamTaperMethod
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataDecal.EDecalDrawType
/*enum EDecalDrawType
{
	DRAW_Basic                                         = 0,
	DRAW_Circle                                        = 1,
	DRAW_Bar                                           = 2,
	DRAW_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataDecal.ESystemDecalShapeType
/*enum ESystemDecalShapeType
{
	SysDecal_Circle                                    = 0,
	SysDecal_Box_Close                                 = 1,
	SysDecal_Box_Open                                  = 2,
	SysDecal_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
/*enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
/*enum EPhysXMeshRotationMethod
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataSkeletalMesh.ESkeletalMeshScreenAlignment
/*enum ESkeletalMeshScreenAlignment
{
	PSKMA_SkeletalMeshFaceCameraWithRoll               = 0,
	PSKMA_SkeletalMeshFaceCameraWithSpin               = 1,
	PSKMA_SkeletalMeshFaceCameraWithLockedAxis         = 2,
	PSKMA_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleWeather.EWeatherDistanceType
/*enum EWeatherDistanceType
{
	WeatherDistance_Type1                              = 0,
	WeatherDistance_Type2                              = 1,
	WeatherDistance_MAX                                = 2
};*/

// Enum Engine.ParticleSet.PSWS_WeaponSizeType
/*enum PSWS_WeaponSizeType
{
	PSWS_Single                                        = 0,
	PSWS_Small                                         = 1,
	PSWS_Medium                                        = 2,
	PSWS_Large                                         = 3,
	PSWS_MAX                                           = 4
};*/

// Enum Engine.Pawn.EPathSearchType
/*enum EPathSearchType
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_MAX                                            = 4
};*/

// Enum Engine.Pawn.EventJumpStateType
/*enum EventJumpStateType
{
	EventJump_Start                                    = 0,
	EventJump_Ing                                      = 1,
	EventJump_End                                      = 2,
	EventJump_Cancle                                   = 3,
	EventJump_MAX                                      = 4
};*/

// Enum Engine.Pawn.EventJumpTypeList
/*enum EventJumpTypeList
{
	EventJumpType_High                                 = 0,
	EventJumpType_Long                                 = 1,
	EventJumpType_MAX                                  = 2
};*/

// Enum Engine.Pawn.EPawnWalkRunAniMode
/*enum EPawnWalkRunAniMode
{
	EPawn_RunAni                                       = 0,
	EPawn_WalkAni                                      = 1,
	EPawn_MAX                                          = 2
};*/

// Enum Engine.PhysicalMaterial.EPhysEffectType
/*enum EPhysEffectType
{
	EPMET_Impact                                       = 0,
	EPMET_Slide                                        = 1,
	EPMET_MAX                                          = 2
};*/

// Enum Engine.PhysicsAsset.AttachPhysicsBoneType
/*enum AttachPhysicsBoneType
{
	ATB_UpperBody                                      = 0,
	ATB_Lower                                          = 1,
	ATB_Arms                                           = 2,
	ATB_MAX                                            = 3
};*/

// Enum Engine.PhysXDestructibleStructure.EPhysXDestructibleChunkState
/*enum EPhysXDestructibleChunkState
{
	DCS_StaticRoot                                     = 0,
	DCS_StaticChild                                    = 1,
	DCS_DynamicRoot                                    = 2,
	DCS_DynamicChild                                   = 3,
	DCS_Hidden                                         = 4,
	DCS_MAX                                            = 5
};*/

// Enum Engine.PhysXParticleSystem.ESimulationMethod
/*enum ESimulationMethod
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_MAX                                            = 3
};*/

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
/*enum EPacketSizeMultiplier
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_MAX                                           = 6
};*/

// Enum Engine.PlayerCameraAnim.PLAYERCAMERAANIM_TYPE
/*enum PLAYERCAMERAANIM_TYPE
{
	PLAYERCAMERAANIM_DIALOGUE                          = 0,
	PLAYERCAMERAANIM_ABNORMAL                          = 1,
	PLAYERCAMERAANIM_SKILL                             = 2,
	PLAYERCAMERAANIM_SKILL_ESSENTIAL                   = 3,
	PLAYERCAMERAANIM_MAX                               = 4
};*/

// Enum Engine.PlayerCameraFreeSample.FREE_SAMPLE_ROTATION_RELATIVITY
/*enum FREE_SAMPLE_ROTATION_RELATIVITY
{
	FSDR_ABSOLUTE_ROTATION                             = 0,
	FSDR_RELATIVE_DIRECTION_ONLY                       = 1,
	FSDR_RELATIVE_ROTATION                             = 2,
	FSDR_MAX                                           = 3
};*/

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
/*enum ESceneCaptureViewMode
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_MAX                                   = 4
};*/

// Enum Engine.ProgressControler_InternalValue.EProgValueType
/*enum EProgValueType
{
	ProgValueType_GroundSpeed                          = 0,
	ProgValueType_MAX                                  = 1
};*/

// Enum Engine.ProgressEffectProperty_Anim.EEnvObjectState
/*enum EEnvObjectState
{
	ProgEnv_State_None                                 = 0,
	ProgEnv_State_Open                                 = 1,
	ProgEnv_State_Close                                = 2,
	ProgEnv_State_Empty                                = 3,
	ProgEnv_State_Step1                                = 4,
	ProgEnv_State_Step2                                = 5,
	ProgEnv_State_Step3                                = 6,
	ProgEnv_State_Step4                                = 7,
	ProgEnv_State_Step5                                = 8,
	ProgEnv_State_MAX                                  = 9
};*/

// Enum Engine.ProgressEffectProperty_MatInst.EProgressEffectMatType
/*enum EProgressEffectMatType
{
	ProgEffectMat_Scalar                               = 0,
	ProgEffectMat_Vector                               = 1,
	ProgEffectMat_MAX                                  = 2
};*/

// Enum Engine.ProgressEffectProperty_Particle.EProgEffectParticleType
/*enum EProgEffectParticleType
{
	ProgEffectParticle_Rate                            = 0,
	ProgEffectParticle_Toggle                          = 1,
	ProgEffectParticle_DynamicParam                    = 2,
	ProgEffectParticle_MAX                             = 3
};*/

// Enum Engine.ProgressEffectProperty_Particle.EProgEffectDynamicParamType
/*enum EProgEffectDynamicParamType
{
	ProgEffectParticleParam_ColorType                  = 0,
	ProgEffectParticleParam_MAX                        = 1
};*/

// Enum Engine.ProgressEffectProperty_Sound.ProgEffectSoundPlayType
/*enum ProgEffectSoundPlayType
{
	ProgEffectSoundPlay_VolumeRate                     = 0,
	ProgEffectSoundPlay_Toggle                         = 1,
	ProgEffectSoundPlay_MAX                            = 2
};*/

// Enum Engine.ProgressiveEffect.EProgressEffectControlType
/*enum EProgressEffectControlType
{
	ProgControl_Time                                   = 0,
	ProgControl_InternalValue                          = 1,
	ProgControl_FixedValue                             = 2,
	ProgControl_MAX                                    = 3
};*/

// Enum Engine.ProgressiveEffect.EProgressEffectType
/*enum EProgressEffectType
{
	ProgEffectType_Animation                           = 0,
	ProgEffectType_Material                            = 1,
	ProgEffectType_Particle                            = 2,
	ProgEffectType_Sound                               = 3,
	ProgEffectType_MAX                                 = 4
};*/

// Enum Engine.RB_BodySetup.ESleepFamily
/*enum ESleepFamily
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_MAX                                             = 2
};*/

// Enum Engine.RB_BodySetup.EHitBodyIndex
/*enum EHitBodyIndex
{
	Hit_BodyBone                                       = 0,
	Hit_HeadBone                                       = 1,
	Hit_LegBone                                        = 2,
	Hit_ArmBone                                        = 3,
	Hit_MAX                                            = 4
};*/

// Enum Engine.RB_RadialForceActor.ERadialForceType
/*enum ERadialForceType
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteFillAction
/*enum ERouteFillAction
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_MAX                                            = 4
};*/

// Enum Engine.Route.ERouteDirection
/*enum ERouteDirection
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteType
/*enum ERouteType
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_MAX                                            = 3
};*/

// Enum Engine.SeqAct_ActorFactory.EPointSelection
/*enum EPointSelection
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_MAX                                             = 3
};*/

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
/*enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_Kismet                                = 3,
	ePARTICLEOUT_MAX                                   = 4
};*/

// Enum Engine.ShowKey.SHOW_KEY_ID
/*enum SHOW_KEY_ID
{
	SHOW_KEY_NONE                                      = 0,
	SHOW_KEY_ACTION                                    = 1,
	SHOW_KEY_ANIM                                      = 2,
	SHOW_KEY_ANIMRANDOM                                = 3,
	SHOW_KEY_ANIMSTOP                                  = 4,
	SHOW_KEY_ANIMSLOW                                  = 5,
	SHOW_KEY_REMOVED                                   = 6,
	SHOW_KEY_CAMERA                                    = 7,
	SHOW_KEY_MATERIAL                                  = 8,
	SHOW_KEY_REMOVED01                                 = 9,
	SHOW_KEY_MULTIHIT                                  = 10,
	SHOW_KEY_PARTICLE                                  = 11,
	SHOW_KEY_PARTICLEPHYSIC                            = 12,
	SHOW_KEY_PHYSICS                                   = 13,
	SHOW_KEY_POSTPROC                                  = 14,
	SHOW_KEY_SOUND                                     = 15,
	SHOW_KEY_SOUNDMATERIAL                             = 16,
	SHOW_KEY_SPAWN                                     = 17,
	SHOW_KEY_TRAILANIM                                 = 18,
	SHOW_KEY_TRAIL_PAWN                                = 19,
	SHOW_KEY_TRAIL_WEAPON                              = 20,
	SHOW_KEY_TRAIL_MESH                                = 21,
	SHOW_KEY_REMOVED02                                 = 22,
	SHOW_KEY_ACTION_CATMULLROM                         = 23,
	SHOW_KEY_ACTION_CATMULLROM_PAWN                    = 24,
	SHOW_KEY_ACTION_FOLLOW_BONE                        = 25,
	SHOW_KEY_ACTION_LINEAR                             = 26,
	SHOW_KEY_ACTION_LINEAR_PAWN                        = 27,
	SHOW_KEY_PARTICLEMATERIAL                          = 28,
	SHOW_KEY_POINTLIGHT                                = 29,
	SHOW_KEY_DYNAMICPARAM                              = 30,
	SHOW_KEY_HIT                                       = 31,
	SHOW_KEY_DIE                                       = 32,
	SHOW_KEY_CAMERA_LOCATION_AND_TARGET                = 33,
	SHOW_KEY_SPOT_LIGHT_OUTER_CONE                     = 34,
	SHOW_KEY_DAMAGE                                    = 35,
	SHOW_KEY_REMOVED03                                 = 36,
	SHOW_KEY_VOICE                                     = 37,
	SHOW_KEY_DIALOGUE                                  = 38,
	SHOW_KEY_PLAYER_CAMERA_ANIM                        = 39,
	SHOW_KEY_UIPARTICLE                                = 40,
	SHOW_KEY_REMOVED04                                 = 41,
	SHOW_KEY_PLAYER_CAMERA_ANIM_RANDOM                 = 42,
	SHOW_KEY_ACTION_RANDOM_LINEAR                      = 43,
	SHOW_KEY_ACTION_RANDOM_CATMULLROM                  = 44,
	SHOW_KEY_FACEFX                                    = 45,
	SHOW_KEY_CAMERAINTERPOL                            = 46,
	SHOW_KEY_FACIALANI                                 = 47,
	SHOW_KEY_BEAM                                      = 48,
	SHOW_KEY_COPYPAWN                                  = 49,
	SHOW_KEY_PARTICLEANIM                              = 50,
	SHOW_KEY_DEPENDENCYPARTICLE                        = 51,
	SHOW_KEY_PAWNOUTLINEBLOOM                          = 52,
	SHOW_KEY_TERMSOUNDNOTIFY                           = 53,
	SHOW_KEY_SPLASHPARTICLE                            = 54,
	SHOW_KEY_DEPENDENCYTRAIL                           = 55,
	SHOW_KEY_SOCKETCONTROLLER                          = 56,
	SHOW_KEY_PAWN_PARTICLEATTACHMENT                   = 57,
	SHOW_KEY_SOCKETDELAYMOVE                           = 58,
	SHOW_KEY_MAX                                       = 59
};*/

// Enum Engine.ShowActionKey.SHOW_ARRIVE_OBJECT_TYPE
/*enum SHOW_ARRIVE_OBJECT_TYPE
{
	SAOT_ARRIVE_OBJECT_CASTER                          = 0,
	SAOT_ARRIVE_OBJECT_TARGET                          = 1,
	SAOT_ARRIVE_OBJECT_MAX                             = 2
};*/

// Enum Engine.ShowActionCatmullromRandomKey.ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD
/*enum ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD
{
	ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD_CASTER     = 0,
	ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD_TARGET     = 1,
	ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD_WORLD      = 2,
	ACTIONCATMULLROMRANDOM_ARRIVAL_STANDARD_MAX        = 3
};*/

// Enum Engine.ShowActionLinearKey.ARRIVAL_JUDGEMENT
/*enum ARRIVAL_JUDGEMENT
{
	ARRIVAL_JUDGEMENT_CASTER                           = 0,
	ARRIVAL_JUDGEMENT_TARGET                           = 1,
	ARRIVAL_JUDGEMENT_MAX                              = 2
};*/

// Enum Engine.ShowActionLinearRandomKey.ACTIONLINEARRANDOM_ARRIVAL_STANDARD
/*enum ACTIONLINEARRANDOM_ARRIVAL_STANDARD
{
	ACTIONLINEARRANDOM_ARRIVAL_STANDARD_CASTER         = 0,
	ACTIONLINEARRANDOM_ARRIVAL_STANDARD_TARGET         = 1,
	ACTIONLINEARRANDOM_ARRIVAL_STANDARD_WORLD          = 2,
	ACTIONLINEARRANDOM_ARRIVAL_STANDARD_MAX            = 3
};*/

// Enum Engine.ShowCameraInterpolKey.PLAYINTERPOL_APPLIED_OBJECT
/*enum PLAYINTERPOL_APPLIED_OBJECT
{
	PLAYINTERPOL_ALL                                   = 0,
	PLAYINTERPOL_CASTER                                = 1,
	PLAYINTERPOL_CASTER_TARGET                         = 2,
	PLAYINTERPOL_TARGET                                = 3,
	PLAYINTERPOL_MAX                                   = 4
};*/

// Enum Engine.ShowCameraKey.CAM_MODIFIER_TYPE
/*enum CAM_MODIFIER_TYPE
{
	CAM_MODIFIER_SHAKE                                 = 0,
	CAM_MODIFIER_MOVE                                  = 1,
	CAM_MODIFIER_MAX                                   = 2
};*/

// Enum Engine.ShowCameraKey.CAM_APPLIED_OBJECT
/*enum CAM_APPLIED_OBJECT
{
	CAM_ALL                                            = 0,
	CAM_CASTER                                         = 1,
	CAM_CASTER_TARGET                                  = 2,
	CAM_TARGET                                         = 3,
	CAM_MAX                                            = 4
};*/

// Enum Engine.ShowCopyPawnKey.CopyPawnDisplayMode
/*enum CopyPawnDisplayMode
{
	CPD_All                                            = 0,
	CPD_PlayerOnly                                     = 1,
	CPD_MAX                                            = 2
};*/

// Enum Engine.ShowCopyPawnKey.CopyPawnPawnMode
/*enum CopyPawnPawnMode
{
	CPP_CasterPawn                                     = 0,
	CPP_TargetPawn                                     = 1,
	CPP_MAX                                            = 2
};*/

// Enum Engine.ShowCopyPawnKey.CopyPawnTranslationMode
/*enum CopyPawnTranslationMode
{
	CPT_None                                           = 0,
	CPT_PhysicsMove                                    = 1,
	CPT_PawnLocationMove                               = 2,
	CPT_SpawnDataPos                                   = 3,
	CPT_MAX                                            = 4
};*/

// Enum Engine.ShowCopyPawnKey.CopyPawnRotationMode
/*enum CopyPawnRotationMode
{
	CPR_PrimaryPawn                                    = 0,
	CPR_PlayerRotationYaw                              = 1,
	CPR_InversePlayerRotationYaw                       = 2,
	CPR_InverseSecondaryPawn                           = 3,
	CPR_SecondaryPawn                                  = 4,
	CPR_MAX                                            = 5
};*/

// Enum Engine.TrailTemplate.TrailTessellationType
/*enum TrailTessellationType
{
	TTT_Bezier_Spline                                  = 0,
	TTT_CatmullRom_Spline                              = 1,
	TTT_MAX                                            = 2
};*/

// Enum Engine.TrailTemplate.TrailTilingType
/*enum TrailTilingType
{
	TLT_OneTimeOverAll                                 = 0,
	TLT_RepeatEachSample                               = 1,
	TLT_CenterSpread                                   = 2,
	TLT_MAX                                            = 3
};*/

// Enum Engine.TrailTemplate.TrailExtraPositionType
/*enum TrailExtraPositionType
{
	TEPT_None                                          = 0,
	TEPT_Both                                          = 1,
	TEPT_Uppermost                                     = 2,
	TEPT_Lowermost                                     = 3,
	TEPT_MAX                                           = 4
};*/

// Enum Engine.TrailTemplate.TrailOnePointAxisType
/*enum TrailOnePointAxisType
{
	TOPAT_Billboarding                                 = 0,
	TOPAT_OuterLocal_X                                 = 1,
	TOPAT_OuterLocal_Y                                 = 2,
	TOPAT_OuterLocal_Z                                 = 3,
	TOPAT_Complexity                                   = 4,
	TOPAT_MAX                                          = 5
};*/

// Enum Engine.TrailTemplate.TrailPointSamplerType
/*enum TrailPointSamplerType
{
	TPST_Bone                                          = 0,
	TPST_Socket                                        = 1,
	TPST_MAX                                           = 2
};*/

// Enum Engine.ShowDynamicParamKey.DYNAMICPARAMPLAY_TYPE
/*enum DYNAMICPARAMPLAY_TYPE
{
	DYNAMICPARAMPLAY_QuickInit                         = 0,
	DYNAMICPARAMPLAY_SlowInit                          = 1,
	DYNAMICPARAMPLAY_MAX                               = 2
};*/

// Enum Engine.ShowMaterialKey.MaterialApplyType
/*enum MaterialApplyType
{
	MaterialAdd                                        = 0,
	MaterialChange                                     = 1,
	MaterialParam                                      = 2,
	MaterialApplyType_MAX                              = 3
};*/

// Enum Engine.ShowMaterialKey.MaterialApplyPriority
/*enum MaterialApplyPriority
{
	MaterialPriority_LowSystem                         = 0,
	MaterialPriority_Low                               = 1,
	MaterialPriority_MiddleLow                         = 2,
	MaterialPriority_Middle                            = 3,
	MaterialPriority_MiddleHigh                        = 4,
	MaterialPriority_High                              = 5,
	MaterialPriority_HighSystem                        = 6,
	MaterialPriority_MAX                               = 7
};*/

// Enum Engine.ShowParticleKey.PARTICLE_ACTIVE_POS
/*enum PARTICLE_ACTIVE_POS
{
	NONE_ACTIVE_POS                                    = 0,
	LEFT_DOWN                                          = 1,
	CENTER_DOWN                                        = 2,
	RIGHT_DOWN                                         = 3,
	LEFT_CENTER                                        = 4,
	CENTER_CENTER                                      = 5,
	RIGHT_CENTER                                       = 6,
	LEFT_UP                                            = 7,
	CENTER_UP                                          = 8,
	RIGHT_UP                                           = 9,
	PARTICLE_ACTIVE_POS_MAX                            = 10
};*/

// Enum Engine.ShowParticleKey.WORLD_TARGET_TYPE
/*enum WORLD_TARGET_TYPE
{
	WORLD_TARGET_TYPE_NONE                             = 0,
	WORLD_TARGET_TYPE_PARTICLE                         = 1,
	WORLD_TARGET_TYPE_DECAL                            = 2,
	WORLD_TARGET_TYPE_MAX                              = 3
};*/

// Enum Engine.ShowParticleKey.AUTOSCALE_TYPE
/*enum AUTOSCALE_TYPE
{
	AUTOSCALE_TYPE_NONE                                = 0,
	AUTOSCALE_TYPE_EFFECT                              = 1,
	AUTOSCALE_TYPE_DELTAPOS                            = 2,
	AUTOSCALE_TYPE_ALL                                 = 3,
	AUTOSCALE_TYPE_MAX                                 = 4
};*/

// Enum Engine.ShowParticleKey.REFPARTICLESYS_INDEX
/*enum REFPARTICLESYS_INDEX
{
	REF_PARTICLESYSTEM_PARAM1                          = 0,
	REF_PARTICLESYSTEM_PARAM2                          = 1,
	REF_PARTICLESYSTEM_PARAM3                          = 2,
	REF_PARTICLESYSTEM_PARAM4                          = 3,
	REF_PARTICLESYSTEM_PARAM5                          = 4,
	REF_PARTICLESYSTEM_PARAM6                          = 5,
	REF_PARTICLESYSTEM_PARAM7                          = 6,
	REF_PARTICLESYSTEM_PARAM8                          = 7,
	REF_PARTICLESYSTEM_PARAM9                          = 8,
	REF_PARTICLESYSTEM_PARAM10                         = 9,
	REF_PARTICLESYSTEM_MAX                             = 10
};*/

// Enum Engine.ShowParticleMaterialKey.MATERIAL_PARTICLE_TYPE
/*enum MATERIAL_PARTICLE_TYPE
{
	MATERIAL_PARTICLE_HIT                              = 0,
	MATERIAL_PARTICLE_MAX                              = 1
};*/

// Enum Engine.ShowPhysicsKey.PHYSICS_TYPE
/*enum PHYSICS_TYPE
{
	PHYSICS_PUSH                                       = 0,
	PHYSICS_BONE_PULL                                  = 1,
	PHYSICS_ATTACK                                     = 2,
	PHYSICS_ATTACH                                     = 3,
	PHYSICS_MAX                                        = 4
};*/

// Enum Engine.ShowPhysicsKey.SHOWPHYSICS_DAMAGETYPE
/*enum SHOWPHYSICS_DAMAGETYPE
{
	SPhysicsDamage_None                                = 0,
	SPhysicsDamage_Normal                              = 1,
	SPhysicsDamage_Heavy                               = 2,
	SPhysicsDamage_MAX                                 = 3
};*/

// Enum Engine.ShowPointLightKey.ELightAffectGroup
/*enum ELightAffectGroup
{
	Affect_All                                         = 0,
	Affect_Dynamic                                     = 1,
	Affect_Static                                      = 2,
	Affect_MAX                                         = 3
};*/

// Enum Engine.ShowPostProcKey.POSTPROC_APPLIED_OBJECT
/*enum POSTPROC_APPLIED_OBJECT
{
	POSTPROC_ALL                                       = 0,
	POSTPROC_CASTER                                    = 1,
	POSTPROC_CASTER_TARGET                             = 2,
	POSTPROC_TARGET                                    = 3,
	POSTPROC_MAX                                       = 4
};*/

// Enum Engine.ShowSocketControllerKey.SOCKET_MONEMENT_TYPE
/*enum SOCKET_MONEMENT_TYPE
{
	SOCKET_MONEMENT_TYPE_WORLDTARGET                   = 0,
	SOCKET_MONEMENT_TYPE_WORLDTPOS                     = 1,
	SOCKET_MONEMENT_TYPE_SPAWNDATA                     = 2,
	SOCKET_MONEMENT_TYPE_TRAILBODY                     = 3,
	SOCKET_MONEMENT_TYPE_ATTACHCASTER                  = 4,
	SOCKET_MONEMENT_TYPE_ATTACHTARGET                  = 5,
	SOCKET_MONEMENT_TYPE_MAX                           = 6
};*/

// Enum Engine.ShowSoundMaterialKey.MATERIAL_SOUND_TYPE
/*enum MATERIAL_SOUND_TYPE
{
	MATERIAL_SOUND_HIT                                 = 0,
	MATERIAL_SOUND_MAX                                 = 1
};*/

// Enum Engine.ShowSpawnKey.SPAWN_OBJ_TYPE
/*enum SPAWN_OBJ_TYPE
{
	SPAWN_PARTICLE                                     = 0,
	SPAWN_GADGET                                       = 1,
	SPAWN_MAX                                          = 2
};*/

// Enum Engine.ShowSpawnKey.SPAWN_SPOT_TYPE
/*enum SPAWN_SPOT_TYPE
{
	SPAWN_SPOT_CASTER                                  = 0,
	SPAWN_SPOT_TARGET                                  = 1,
	SPAWN_SPOT_MAX                                     = 2
};*/

// Enum Engine.ShowTrailWeaponKey.TRAILWEAPON_SKELINDEX
/*enum TRAILWEAPON_SKELINDEX
{
	TRAILWEAPON_WEAPON_R                               = 0,
	TRAILWEAPON_WEAPON_L                               = 1,
	TRAILWEAPON_WEAPON_MAX                             = 2
};*/

// Enum Engine.SignalInfo.EDamageFloaterScaleType
/*enum EDamageFloaterScaleType
{
	EDFSCALE_Down                                      = 0,
	EDFSCALE_UP                                        = 1,
	EDFSCALE_Down_CURVE                                = 2,
	EDFSCALE_UP_CURVE                                  = 3,
	EDFSCALE_DOWN_WAVE                                 = 4,
	EDFSCALE_UP_WAVE                                   = 5,
	EDFSCALE_MAX                                       = 6
};*/

// Enum Engine.SignalInfo.EDamageFloaterRotationType
/*enum EDamageFloaterRotationType
{
	EDFROT_None                                        = 0,
	EDFROT_Normal                                      = 1,
	EDFROT_Shake                                       = 2,
	EDFROT_MAX                                         = 3
};*/

// Enum Engine.SignalInfo.EDamageFloaterShakeType
/*enum EDamageFloaterShakeType
{
	EDFSHAKE_None                                      = 0,
	EDFSHAKE_UpDdown                                   = 1,
	EDFSHAKE_LeftRight                                 = 2,
	EDFSHAKE_ALL                                       = 3,
	EDFSHAKE_MAX                                       = 4
};*/

// Enum Engine.SignalInfo.EDamageFloaterLocationType
/*enum EDamageFloaterLocationType
{
	DEFLOC_None                                        = 0,
	DEFLOC_RandomBox                                   = 1,
	DEFLOC_Dynamic                                     = 2,
	DEFLOC_MAX                                         = 3
};*/

// Enum Engine.SkelControlBase.EBoneControlSpace
/*enum EBoneControlSpace
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_MAX                                            = 6
};*/

// Enum Engine.SkelControlFootPlacement.EFootOffsetValueType
/*enum EFootOffsetValueType
{
	FootOffsetType                                     = 0,
	FootOffsetType01                                   = 1,
	FootOffsetType_MAX                                 = 2
};*/

// Enum Engine.SkelControlSpline.ESplineControlRotMode
/*enum ESplineControlRotMode
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshFactorSet.ItemPreviewLocationType
/*enum ItemPreviewLocationType
{
	ItemPreviewLocation_Sword                          = 0,
	ItemPreviewLocation_Dagger                         = 1,
	ItemPreviewLocation_Aura                           = 2,
	ItemPreviewLocation_Staff                          = 3,
	ItemPreviewLocation_Axe                            = 4,
	ItemPreviewLocation_Attach                         = 5,
	ItemPreviewLocation_Belt                           = 6,
	ItemPreviewLocation_Bracelet                       = 7,
	ItemPreviewLocation_Earing                         = 8,
	ItemPreviewLocation_Ring                           = 9,
	ItemPreviewLocation_Necklace                       = 10,
	ItemPreviewLocation_Soul                           = 11,
	ItemPreviewLocation_Pet                            = 12,
	ItemPreviewLocation_Rune                           = 13,
	ItemPreviewLocation_MAX                            = 14
};*/

// Enum Engine.SkeletalMesh.TriangleSortOption
/*enum TriangleSortOption
{
	TRISORT_None                                       = 0,
	TRISORT_CenterRadialDistance                       = 1,
	TRISORT_MAX                                        = 2
};*/

// Enum Engine.SkeletalMesh.ClothBoneType
/*enum ClothBoneType
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_MAX                                      = 2
};*/

// Enum Engine.SkeletalMesh.SoftBodyBoneType
/*enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_MAX                                   = 3
};*/

// Enum Engine.SoundNodeAttenuation.ESoundDistanceCalc
/*enum ESoundDistanceCalc
{
	SOUNDDISTANCE_Normal                               = 0,
	SOUNDDISTANCE_InfiniteXYPlane                      = 1,
	SOUNDDISTANCE_InfiniteXZPlane                      = 2,
	SOUNDDISTANCE_InfiniteYZPlane                      = 3,
	SOUNDDISTANCE_MAX                                  = 4
};*/

// Enum Engine.SoundNodeWave.EDecompressionType
/*enum EDecompressionType
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_MAX                                          = 5
};*/

// Enum Engine.SVehicleWheel.EWheelSide
/*enum EWheelSide
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_MAX                                           = 3
};*/

// Enum Engine.TerrainMaterial.ETerrainMappingType
/*enum ETerrainMappingType
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_VOXELLIKE_TYPE                                 = 4,
	TMT_VOXELLIKE_TYPE01                               = 5,
	TMT_VOXELLIKE_TYPE02                               = 6,
	TMT_MAX                                            = 7
};*/

// Enum Engine.Texture2DExternalStreamed.ExternalTextureMode
/*enum ExternalTextureMode
{
	ETM_File                                           = 0,
	ETM_FileStreamed                                   = 1,
	ETM_Memory                                         = 2,
	ETM_MAX                                            = 3
};*/

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
/*enum TextureFlipBookMethod
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_MAX                                           = 9
};*/

// Enum Engine.TextureMovie.EMovieStreamSource
/*enum EMovieStreamSource
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_MAX                                    = 2
};*/

// Enum Engine.TrailComponent.TrailStateType
/*enum TrailStateType
{
	TST_Ready                                          = 0,
	TST_Generating                                     = 1,
	TST_Disappearing                                   = 2,
	TST_Idle                                           = 3,
	TST_MAX                                            = 4
};*/

// Enum Engine.TrailComponent.TrailPushForceForceApplyType
/*enum TrailPushForceForceApplyType
{
	TrailPushForceApplyType_Constant                   = 0,
	TrailPushForceApplyType_Linear                     = 1,
	TrailPushForceApplyType_MAX                        = 2
};*/

// Enum Engine.UIActionEditBase.EUIActionOrder
/*enum EUIActionOrder
{
	UIACTION_ORDER_PRE                                 = 0,
	UIACTION_ORDER_POST                                = 1,
	UIACTION_ORDER_MAX                                 = 2
};*/

// Enum Engine.UIActionEditBase.EUIActionEditResult
/*enum EUIActionEditResult
{
	UIACTION_EDITRESULT_SUCCESS                        = 0,
	UIACTION_EDITRESULT_FAIL_INVALIDPARAMETER          = 1,
	UIACTION_EDITRESULT_FAIL_INSERT_ALREADYEXIST       = 2,
	UIACTION_EDITRESULT_FAIL_INSERT_INVALIDPARENT      = 3,
	UIACTION_EDITRESULT_FAIL_INSERT_IMPOSSIBLETARGET   = 4,
	UIACTION_EDITRESULT_FAIL_INSERT_OVERMAXCOUNT       = 5,
	UIACTION_EDITRESULT_FAIL_REMOVE_DONOTEXIST         = 6,
	UIACTION_EDITRESULT_FAIL_MERGE_SHORTAGEPARAMETER   = 7,
	UIACTION_EDITRESULT_FAIL_MERGE_NOTEQUALTARGET      = 8,
	UIACTION_EDITRESULT_FAIL_MERGE_NOTEQUALCLASS       = 9,
	UIACTION_EDITRESULT_FAIL_MERGE_NOTEQUALPARENT      = 10,
	UIACTION_EDITRESULT_FAIL_BIND_SHORTAGEPARAMETER    = 11,
	UIACTION_EDITRESULT_FAIL_BIND_NONTARGET            = 12,
	UIACTION_EDITRESULT_FAIL_BIND_ALREADYBOUND         = 13,
	UIACTION_EDITRESULT_FAIL_ETC                       = 14,
	UIACTION_EDITRESULT_MAX                            = 15
};*/

// Enum Engine.UIActionEditNode.EUIActionTimeSyncType
/*enum EUIActionTimeSyncType
{
	UIACTION_TIMESYNCTYPE_NONE                         = 0,
	UIACTION_TIMESYNCTYPE_STARTTIME                    = 1,
	UIACTION_TIMESYNCTYPE_ENDTIME                      = 2,
	UIACTION_TIMESYNCTYPE_MAX                          = 3
};*/

// Enum Engine.UICalloutButtonPanel.ECalloutButtonLayoutType
/*enum ECalloutButtonLayoutType
{
	CBLT_None                                          = 0,
	CBLT_DockLeft                                      = 1,
	CBLT_DockRight                                     = 2,
	CBLT_MAX                                           = 3
};*/

// Enum Engine.UICond_IsFocused.ECondIsFocusedResultIndex
/*enum ECondIsFocusedResultIndex
{
	ISFOCUSEDRESULT_True                               = 0,
	ISFOCUSEDRESULT_False                              = 1,
	ISFOCUSEDRESULT_MAX                                = 2
};*/

// Enum Engine.UIDataProvider.EProviderAccessType
/*enum EProviderAccessType
{
	ACCESS_ReadOnly                                    = 0,
	ACCESS_PerField                                    = 1,
	ACCESS_WriteAll                                    = 2,
	ACCESS_MAX                                         = 3
};*/

// Enum Engine.UISafeRegionPanel.ESafeRegionType
/*enum ESafeRegionType
{
	ESRT_FullRegion                                    = 0,
	ESRT_TextSafeRegion                                = 1,
	ESRT_MAX                                           = 2
};*/

// Enum Engine.UIState.EUIStateType
/*enum EUIStateType
{
	UISTATE_TYPE_NONE                                  = 0,
	UISTATE_TYPE_ACTIVE                                = 1,
	UISTATE_TYPE_DISABLED                              = 2,
	UISTATE_TYPE_ENABLED                               = 3,
	UISTATE_TYPE_FOCUSED                               = 4,
	UISTATE_TYPE_PRESSED                               = 5,
	UISTATE_TYPE_MAX                                   = 6
};*/

// Enum Engine.Weapon.EWeaponFireType
/*enum EWeaponFireType
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Custom                                        = 2,
	EWFT_None                                          = 3,
	EWFT_MAX                                           = 4
};*/

// Enum Engine.WindDirectionalSourceComponent.EWindType
/*enum EWindType
{
	Point                                              = 0,
	Direction                                          = 1,
	Road                                               = 2,
	EWindType_MAX                                      = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.UIRoot
// 0x0000 (0x003C - 0x003C)
class UUIRoot : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 140 ];

		return pClassPointer;
	};

	class UOnlinePlayerInterfaceEx* GetOnlinePlayerInterfaceEx ( );
	class UOnlinePlayerInterface* GetOnlinePlayerInterface ( );
	class UOnlineGameInterface* GetOnlineGameInterface ( );
	struct FString ConvertWidgetIDToString ( class UUIObject* SourceWidget );
	bool GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue );
	bool GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue );
	bool SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer );
	bool SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue );
	class UUIDataStore* StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner );
	struct FMatrix GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale );
	void SetMouseCaptureOverride ( unsigned long bCaptureMouse );
	bool GetCursorSize ( float* CursorXL, float* CursorYL );
	bool GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY );
	unsigned char GetFaceOrientation ( unsigned char Face );
	class UGameUISceneClient* GetSceneClient ( );
	class UUIInteraction* GetCurrentUIController ( );
	bool IsConsole ( unsigned char ConsoleType );
	unsigned char GetInputPlatformType ( class ULocalPlayer* OwningPlayer );
};

//UClass* UUIRoot::pClassPointer = NULL;

// Class Engine.UIScreenObject
// 0x006C (0x00A8 - 0x003C)
class UUIScreenObject : public UUIRoot
{
public:
	struct FUIScreenValue_Bounds                       Position;                                         		// 0x003C (0x0024) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHidden : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeverFocus : 1;                                  		// 0x0060 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bSupportsFocusHint : 1;                           		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverrideInputOrder : 1;                          		// 0x0060 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bSupports3DPrimitives : 1;                        		// 0x0060 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	TArray< class UUIObject* >                         Children;                                         		// 0x0064 (0x000C) [0x0000000000000000]              
	TArray< class UClass* >                            DefaultStates;                                    		// 0x0070 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      InitialState;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< class UUIState* >                          InactiveStates;                                   		// 0x0080 (0x000C) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	TArray< class UUIState* >                          StateStack;                                       		// 0x008C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      PlayerInputMask;                                  		// 0x0098 (0x0001) [0x0000000000000000]              
	int                                                InstanceId;                                       		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstanceGroupId;                                  		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIComp_Event*                               EventProvider;                                    		// 0x00A4 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 139 ];

		return pClassPointer;
	};

	void LogCurrentState ( int Indent );
	unsigned char GetNATType ( );
	bool CanPlayOnline ( int ControllerId );
	bool HasLinkConnection ( );
	unsigned char GetLoginStatus ( int ControllerId );
	int GetBestControllerId ( );
	bool DisableWidget ( int PlayerIndex );
	bool EnableWidget ( int PlayerIndex );
	class UUIScreenObject* GetParent ( );
	bool eventActivateFocusHint ( class UUIObject* FocusHintObject );
	void eventGetSupportedUIActionKeyNames ( TArray< struct FName >* out_KeyNames );
	void eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse );
	void eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	void eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	void eventSetVisibility ( unsigned long bIsVisible );
	void PrivateSetVisibility ( unsigned long bVisible );
	bool eventIsGamepadConnected ( int ControllerId );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventPostInitialize ( );
	void eventInitialized ( );
	struct FString GetWidgetPathName ( );
	bool IsEnableActiveOnly ( );
	float GetAspectRatioAutoScaleFactor ( class UFont* BaseFont );
	struct FMatrix GetInverseCanvasToScreen ( );
	struct FMatrix GetCanvasToScreen ( );
	struct FVector PixelToCanvas ( struct FVector2D* PixelPosition );
	struct FVector ScreenToCanvas ( struct FVector4* ScreenPosition );
	struct FVector4 PixelToScreen ( struct FVector2D* PixelPosition );
	struct FVector2D ScreenToPixel ( struct FVector4* ScreenPosition );
	struct FVector4 CanvasToScreen ( struct FVector* CanvasPosition );
	struct FVector DeProject ( struct FVector* PixelPosition );
	struct FVector Project ( struct FVector* CanvasPosition );
	void GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, TArray< class UUIObject* >* out_DockedWidgets );
	float ResolveUIExtent ( class UUIScreenObject* OwnerWidget, unsigned char OutputType, struct FUIScreenValue_Extent* ExtentToResolve );
	struct FVector GetPositionVector ( unsigned long bIncludeParentPosition );
	float GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding );
	float GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bIncludeOrigin, unsigned long bIgnoreDockPadding );
	void SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bIncludesViewportOrigin );
	int GetBestPlayerIndex ( );
	int GetSupportedPlayerCount ( );
	int GetActivePlayerCount ( );
	bool AcceptsPlayerInput ( int PlayerIndex );
	bool IsPressed ( int PlayerIndex );
	bool IsActive ( int PlayerIndex );
	bool IsFocused ( int PlayerIndex );
	bool IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain );
	bool KillFocusEx ( int PlayerIndex );
	bool SetFocusEx ( int PlayerIndex );
	bool KillFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex );
	bool SetFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool CanAcceptFocus ( int PlayerIndex );
	bool IsNeverFocused ( );
	bool IsHoldingShift ( int ControllerId );
	bool IsHoldingAlt ( int ControllerId );
	bool IsHoldingCtrl ( int ControllerId );
	bool ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce );
	bool DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved );
	bool DeactivateState ( class UUIState* StateToRemove, int PlayerIndex );
	bool ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded );
	bool ActivateState ( class UUIState* StateToActivate, int PlayerIndex );
	bool HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex );
	class UUIState* GetCurrentState ( int PlayerIndex );
	bool SetEnabled ( unsigned long bEnabled, int PlayerIndex );
	void FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, TArray< class UUIEvent* >* out_EventInstances );
	void ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int > IndicesToActivate, TArray< class UUIEvent* >* out_ActivatedEvents );
	float GetViewportHeight ( );
	float GetViewportWidth ( );
	bool GetViewportSize ( struct FVector2D* out_ViewportSize );
	bool GetViewportOrigin ( struct FVector2D* out_ViewportOrigin );
	float GetViewportScale ( );
	bool GetViewportOffset ( struct FVector2D* out_ViewportOffset );
	void RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage );
	void RequestFormattingUpdate ( );
	void RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged );
	int GetObjectCount ( );
	TArray< class UUIObject* > GetChildren ( unsigned long bRecurse, TArray< class UUIObject* > ExclusionSet );
	bool ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse );
	bool ContainsChild ( class UUIObject* Child, unsigned long bRecurse );
	int FindChildIndex ( struct FName WidgetName );
	class UUIObject* FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse );
	class UUIObject* FindChild ( struct FName WidgetName, unsigned long bRecurse );
	bool ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild );
	bool ReparentChildren ( TArray< class UUIObject* > ChildrenToReparent, class UUIScreenObject* NewParent, int InsertIndex );
	bool ReparentChild ( class UUIObject* CurrentChild, class UUIScreenObject* NewParent, int InsertIndex );
	TArray< class UUIObject* > RemoveChildren ( TArray< class UUIObject* > ChildrenToRemove );
	bool RemoveChild ( class UUIObject* ExistingChild, TArray< class UUIObject* > ExclusionSet );
	int InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting );
	void Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner );
	class UUIObject* CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName );
	bool PlayUISound ( struct FName SoundCueName, int PlayerIndex );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void InitializePlayerTracking ( );
	void RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	bool IsHidden ( unsigned long bIncludeParents );
	bool IsVisible ( unsigned long bIncludeParents );
	bool IsInitialized ( );
};

//UClass* UUIScreenObject::pClassPointer = NULL;

// Class Engine.UIObject
// 0x00B8 (0x0160 - 0x00A8)
class UUIObject : public UUIScreenObject
{
public:
	struct FWIDGET_ID                                  WidgetID;                                         		// 0x00A8 (0x0010) [0x0000000000000000]              
	struct FName                                       WidgetTag;                                        		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   Owner;                                            		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIScene*                                    OwnerScene;                                       		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUIStyleReference                           PrimaryStyle;                                     		// 0x00C8 (0x0020) [0x0000000000000000]              
	int                                                TabIndex;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FUIDockingSet                               DockTargets;                                      		// 0x00EC (0x0038) [0x0000000000000001]              ( CPF_Edit )
	float                                              RenderBounds[ 0x4 ];                              		// 0x0124 (0x0010) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	int                                                PrivateFlags;                                     		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsFirstCreateWidget : 1;                          		// 0x0138 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableActiveCursorUpdates : 1;                   		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSupportsPrimaryStyle : 1;                        		// 0x0138 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bEnableSceneUpdateNotifications : 1;              		// 0x0138 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDebugShowBounds : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHidePlaceWidget : 1;                             		// 0x0138 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< class UUIStyleResolver* >                  StyleSubscribers;                                 		// 0x013C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      DebugBoundsColor;                                 		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fActivateTime;                                    		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fActivateTimeLeft;                                		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ActivateTimeMousePos;                             		// 0x0154 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChildSceneIndex;                                  		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 138 ];

		return pClassPointer;
	};

	void LogRenderBounds ( int Indent );
	void ClearDockTargets ( );
	class UUIScreenObject* GetParent ( );
	class UUIObject* GetOwner ( );
	class UUIScene* GetScene ( );
	bool SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName );
	int FindStyleSubscriberIndexById ( struct FName StyleSubscriberId );
	int FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber );
	void RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber );
	void AddStyleSubscriber ( class UUIStyleResolver* Subscriber );
	float GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation, unsigned long bIncludeOrigin );
	void GetPositionExtents ( unsigned long bIncludeRotation, unsigned long bIncludeOrigin, float* MinX, float* MaxX, float* MinY, float* MaxY );
	bool NeedsActiveCursorUpdates ( );
	void SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates );
	void SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse );
	bool IsPrivateBehaviorSet ( int Behavior );
	bool CanAcceptFocus ( int PlayerIndex );
	bool IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace );
	bool GetDockParameters ( unsigned char SourceFace, class UUIScreenObject** TargetWidget, unsigned char* TargetFace, float* TargetPadding );
	bool SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace );
	bool IsContainedBy ( class UUIObject* TestWidget );
	void NotifyValueChanged ( int PlayerIndex, int NotifyFlags );
	struct FMatrix GenerateTransformMatrix ( unsigned long bIncludeParentTransforms );
	bool HasTransform ( unsigned long bIncludeParentTransforms );
};

//UClass* UUIObject::pClassPointer = NULL;

// Class Engine.CustomUIObject
// 0x0170 (0x02D0 - 0x0160)
class UCustomUIObject : public UUIObject
{
public:
	unsigned char                                      ScaleAlignment[ 0x2 ];                            		// 0x0160 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ClippingFace;                                     		// 0x0162 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsVisibleStarted : 1;                             		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisibleBlend : 1;                                		// 0x0164 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bVisibleScale : 1;                                		// 0x0164 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNeverActivate : 1;                               		// 0x0164 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreReplay : 1;                                		// 0x0164 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      IgnoreInputClicked : 1;                           		// 0x0164 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      IgnoreInputRClicked : 1;                          		// 0x0164 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      EnableResize : 1;                                 		// 0x0164 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      EnableBoundResize : 1;                            		// 0x0164 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnoreHorizontalEnableResize : 1;                		// 0x0164 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIgnoreVerticalEnableResize : 1;                  		// 0x0164 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIgnoreBoundResize : 1;                           		// 0x0164 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bHorizontalResizeHide : 1;                        		// 0x0164 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bVerticalResizeHide : 1;                          		// 0x0164 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bEnableActivateEvent : 1;                         		// 0x0164 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bChildrenEnableActivateEvent : 1;                 		// 0x0164 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bEnableActiveOnly : 1;                            		// 0x0164 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bEnableActivateWithParentRender : 1;              		// 0x0164 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bEnablePressedWithParentRender : 1;               		// 0x0164 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bEnableWheel : 1;                                 		// 0x0164 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bIgnoreOwnerWheelEvent : 1;                       		// 0x0164 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bEnableHorizontalResizeLink : 1;                  		// 0x0164 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bEnableVerticalResizeLink : 1;                    		// 0x0164 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bEnableActiveParticle : 1;                        		// 0x0164 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bEnableRuntimeHorizontalResizeLink : 1;           		// 0x0164 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bEnableRuntimeVerticalResizeLink : 1;             		// 0x0164 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bIsActivateEvent : 1;                             		// 0x0164 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bEnableGray : 1;                                  		// 0x0164 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bIgnoreLockCursor : 1;                            		// 0x0164 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bVisibleInternalEvent : 1;                        		// 0x0164 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bEnableRenderStateFromChild : 1;                  		// 0x0164 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bRecursiveRenaming : 1;                           		// 0x0164 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bEnableState : 1;                                 		// 0x0168 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedRefreshContainer : 1;                        		// 0x0168 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bScalePosition : 1;                               		// 0x0168 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasLocalDestBound : 1;                           		// 0x0168 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FString                                     WidgetClassType;                                  		// 0x016C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USoundCue*                                   ShowEvent;                                        		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HideEvent;                                        		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ActiveEvent;                                      		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeactiveEvent;                                    		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MetaData;                                         		// 0x0188 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   RegionImageSet;                                   		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FResizeLink                                 HorizontalResizeLink;                             		// 0x0198 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FResizeLink                                 VerticalResizeLink;                               		// 0x01AC (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FUIParticle                                 ActiveParticle;                                   		// 0x01C0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FExpansionComponent >               ExpansionComponentArray;                          		// 0x01DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FResizeLink                                 RuntimeHorizontalResizeLink;                      		// 0x01E8 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FResizeLink                                 RuntimeVerticalResizeLink;                        		// 0x01FC (0x0014) [0x0000000000002000]              ( CPF_Transient )
	float                                              fFadeTime;                                        		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentScale;                                    		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PressedTextLinkId;                                		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActivateCursorType;                               		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCustomDragInfo                             DragInfo;                                         		// 0x0220 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDrawComponentInfo >                DrawComponentArray;                               		// 0x023C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fContentsOpacity;                                 		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fEffectOpacity;                                   		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWidgetClippingBoundInfo >          ClippingBoundArray;                               		// 0x0250 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fClippingRatio;                                   		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIParticleRenderInfo >             ParticleRenderArray;                              		// 0x0260 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIParticleUpdateInfo >             ParticleUpdateArray;                              		// 0x026C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReleaseTickCount;                                 		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             PressedKeyArray;                                  		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             InputAllowedKeyArray;                             		// 0x0288 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            RemainedAnimFactors;                              		// 0x0294 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                PositionAnimInstId;                               		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ResizeAnimInstId;                                 		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ScaleAnimInstId;                                  		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AlphaAnimInstId;                                  		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ShowAnimInstId;                                   		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HideAnimInstId;                                   		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClippingAnimInstId;                               		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FBoundInfo                                  LocalDestBound;                                   		// 0x02BC (0x0014) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 137 ];

		return pClassPointer;
	};

	bool SetFocus ( class UUIScreenObject* Sender, int PlayerIndex );
};

//UClass* UCustomUIObject::pClassPointer = NULL;

// Class Engine.CustomUIImageText
// 0x0078 (0x0348 - 0x02D0)
class UCustomUIImageText : public UCustomUIObject
{
public:
	unsigned long                                      AutoResizeHorizontal : 1;                         		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AutoResizeVertical : 1;                           		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeedToRefresh : 1;                               		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              MaxAutoResizeHorizontal;                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoResizeVertical;                            		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeHorizontal;                          		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeVertical;                            		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextAlignmentHorizontal;                          		// 0x02E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextAlignmentVertical;                            		// 0x02E5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FImageTextInfo >                    ImageTextInfoArray;                               		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ImageTextValue;                                   		// 0x02F4 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     SourceText;                                       		// 0x0300 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x030C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIImageText.ImageTextInfoMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 136 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIImageText::pClassPointer = NULL;

// Class Engine.CustomUISliderBox
// 0x002C (0x02FC - 0x02D0)
class UCustomUISliderBox : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     HighlightImageComponent;                          		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class USoundCue*                                   MarkerEvent;                                      		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableHighlight : 1;                             		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UCustomUIButton*                             MarkerButton;                                     		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MaxSliderValue;                                   		// 0x02E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MinSliderValue;                                   		// 0x02EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CurSliderValue;                                   		// 0x02F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 146 ];

		return pClassPointer;
	};

	void OnMarkerDrop ( class UUIScreenObject* Sender );
	void OnMarkerDragStart ( class UUIScreenObject* Sender );
	void OnMarkerDrag ( class UUIScreenObject* Sender );
};

//UClass* UCustomUISliderBox::pClassPointer = NULL;

// Class Engine.CustomUIArrow
// 0x0054 (0x0324 - 0x02D0)
class UCustomUIArrow : public UCustomUIObject
{
public:
	int                                                ColumnCount;                                      		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RowCount;                                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ColumnGap;                                        		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RowGap;                                           		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LineSize;                                         		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HorizontalLineOffset;                             		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   HorizontalLineImageSet;                           		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   VerticalLineImageSet;                             		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   ArrowImageSet;                                    		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   LBLineImageSet;                                   		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   RBLineImageSet;                                   		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   TRLineImageSet;                                   		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   TLLineImageSet;                                   		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIImage*                              TemplateWidget;                                   		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIArrowLine >                      ArrowLineArray;                                   		// 0x030C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FWidgetContainerSystemInfo                  ArrowContainerSystemInfo;                         		// 0x0318 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 148 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIArrow::pClassPointer = NULL;

// Class Engine.CustomUIScrollIndex
// 0x0064 (0x0334 - 0x02D0)
class UCustomUIScrollIndex : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class USoundCue*                                   PressedEvent;                                     		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    FontSet;                                          		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MinIndexEntrySize;                                		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Padding;                                          		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ImagePadding;                                     		// 0x02E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SeparationGap;                                    		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   MouseOverImageSet;                                		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   PressedImageSet;                                  		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SeparationText;                                   		// 0x02FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   IndexEntrySize;                                   		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   SeparationSize;                                   		// 0x0310 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnableDrawBackgrondImage : 1;                    		// 0x0318 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                MouseOverIndexEntry;                              		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PressedIndexEntry;                                		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VerticalGap;                                      		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FIndexEntryInfo >                   IndexEntryArray;                                  		// 0x0328 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 150 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIScrollIndex::pClassPointer = NULL;

// Class Engine.CustomUIWebBrowser
// 0x0030 (0x0300 - 0x02D0)
class UCustomUIWebBrowser : public UCustomUIObject
{
public:
	unsigned long                                      bEnableStartShowScrollbar : 1;                    		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableWebResize : 1;                             		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseExternalLink : 1;                             		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsWebTextureInputFocus : 1;                      		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAlwaysUpdate : 1;                                		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bEnableJavascriptConsoleMessage : 1;              		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bEnableGlobalState : 1;                           		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bEnableUseWebViewPool : 1;                        		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	int                                                IndexWebTexture;                                  		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   WebPageSize;                                      		// 0x02D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           FilePaths;                                        		// 0x02E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     FocusedId;                                        		// 0x02EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FQWord                                      IMEContext;                                       		// 0x02F8 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 152 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIWebBrowser::pClassPointer = NULL;

// Class Engine.CustomUIRadialGraph
// 0x007C (0x034C - 0x02D0)
class UCustomUIRadialGraph : public UCustomUIObject
{
public:
	int                                                AngleCount;                                       		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LineThickness;                                    		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableDrawLine : 1;                               		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableAutoCorrectCenterPosition : 1;              		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x02DC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FLinearColor                                FanColor;                                         		// 0x02E0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                LineColor;                                        		// 0x02F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   BackgroundImage;                                  		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Values;                                           		// 0x0304 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UTexture2D*                                  OutLineTexture;                                   		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector2D >                         RenderOutLinePointPositions;                      		// 0x0314 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector2D >                         RenderPointPositions;                             		// 0x0320 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector2D >                         RenderPointTexCoords;                             		// 0x032C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CenterPosition;                                   		// 0x0338 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      ValueAnimInstIdArray;                             		// 0x0340 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 154 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIRadialGraph::pClassPointer = NULL;

// Class Engine.CustomUIReading
// 0x0014 (0x02E4 - 0x02D0)
class UCustomUIReading : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     ImageComponent;                                   		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UFontSet*                                    FontSet;                                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Padding;                                          		// 0x02D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpaceBetweenLines;                                		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 156 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIReading::pClassPointer = NULL;

// Class Engine.CustomUICandidate
// 0x0018 (0x02E8 - 0x02D0)
class UCustomUICandidate : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     ImageComponent;                                   		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UFontSet*                                    FontSet;                                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   SelectionImageSet;                                		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Padding;                                          		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpaceBetweenLines;                                		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 158 ];

		return pClassPointer;
	};

};

//UClass* UCustomUICandidate::pClassPointer = NULL;

// Class Engine.CustomUIImage
// 0x002C (0x02FC - 0x02D0)
class UCustomUIImage : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     ImageComponent;                                   		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      EnableDrawImage : 1;                              		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableClickedParticle : 1;                       		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClickEvent : 1;                                  		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRClickEvent : 1;                                 		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableLeftButton : 1;                            		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableRightButton : 1;                           		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableDoubleClick : 1;                           		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseWheel : 1;                                    		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bPressedInput : 1;                                		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bIsClickEvent : 1;                                		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDragEnabled : 1;                                 		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDragLockEnabled : 1;                             		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bIsDoubleClickPress : 1;                          		// 0x02D4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	struct FUIParticle                                 ClickedParticle;                                  		// 0x02D8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClickedEvent;                                     		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PresedEvent;                                      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 162 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIImage::pClassPointer = NULL;

// Class Engine.CustomUIPanel
// 0x0024 (0x0320 - 0x02FC)
class UCustomUIPanel : public UCustomUIImage
{
public:
	class UCustomUIComp_DrawImage*                     CustomizeImageComponent;                          		// 0x02FC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bEnableTopOrder : 1;                              		// 0x0300 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableCustomize : 1;                             		// 0x0300 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreCustomize : 1;                             		// 0x0300 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreClearInputFocus : 1;                       		// 0x0300 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AdjustAspectRatio : 1;                            		// 0x0300 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      EanableFittedHorizontalAspectRatio : 1;           		// 0x0300 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      EanableFittedVerticalAspectRatio : 1;             		// 0x0300 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHorizontalSnapping : 1;                          		// 0x0300 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bVerticalSnapping : 1;                            		// 0x0300 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	float                                              AspectRatioLowerBoundBeforeAdjust;                		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AspectRatioUpperBoundBeforeAdjust;                		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AspectRatioValueAfterAdjust;                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   SnappingOffset;                                   		// 0x0310 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomizeGroupId;                                 		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIObject*                                   LinkModal;                                        		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 161 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIPanel::pClassPointer = NULL;

// Class Engine.CustomUIWindow
// 0x0010 (0x0330 - 0x0320)
class UCustomUIWindow : public UCustomUIPanel
{
public:
	unsigned long                                      bEnableEnterKey : 1;                              		// 0x0320 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableTabKey : 1;                                		// 0x0320 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableEscapeKey : 1;                             		// 0x0320 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UUIObject*                                   LastInputFocus;                                   		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fVisibleBlendShowDelayTime;                       		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fVisibleBlendHideDelayTime;                       		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 160 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIWindow::pClassPointer = NULL;

// Class Engine.CustomUIMultiLineEditBox
// 0x0024 (0x02F4 - 0x02D0)
class UCustomUIMultiLineEditBox : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawStringMultiLineEditbox*    StringRenderComponent;                            		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     FocusedBackgroundImageComponent;                  		// 0x02D8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIScrollBar*                          ScrollBarCtrl;                                    		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnableGlobalState : 1;                           		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableEnterKey : 1;                              		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReadOnly : 1;                                    		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsEditBoxFocus : 1;                              		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                MaxCharacters;                                    		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSet;                                     		// 0x02E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KeyInputEvent;                                    		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PixelScrollValue;                                 		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 166 ];

		return pClassPointer;
	};

	bool KillFocusEx ( int PlayerIndex );
	void OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset );
};

//UClass* UCustomUIMultiLineEditBox::pClassPointer = NULL;

// Class Engine.CustomUIBink
// 0x0014 (0x02E4 - 0x02D0)
class UCustomUIBink : public UCustomUIObject
{
public:
	class UTextureMovie*                               TextureMovie;                                     		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUILabel*                              PlayTimeLabel;                                    		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUISlider*                             PlayBarSlider;                                    		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedToUpdateVolume : 1;                          		// 0x02DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMute : 1;                                        		// 0x02DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                Volume;                                           		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 168 ];

		return pClassPointer;
	};

	void OnPlayBarSlider ( class UUIScreenObject* Sender, float Value );
};

//UClass* UCustomUIBink::pClassPointer = NULL;

// Class Engine.CustomUISizer
// 0x0044 (0x0314 - 0x02D0)
class UCustomUISizer : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     NormalImageComponent;                             		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     MouseOverImageComponent;                          		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     PressedImageComponent;                            		// 0x02D8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     DisabledImageComponent;                           		// 0x02DC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      EnableDrawImage : 1;                              		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableHorizontalFace : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      EnableVerticalFace : 1;                           		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              MinHorizontalRatio;                               		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHorizontalRatio;                               		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinVerticalRatio;                                 		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxVerticalRatio;                                 		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HorizontalFace;                                   		// 0x02F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VerticalFace;                                     		// 0x02F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentHorizontalRatio;                           		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentVerticalRatio;                             		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ResizeOffSet;                                     		// 0x0300 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UUIObject* >                         ResizeWidgetArray;                                		// 0x0308 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 170 ];

		return pClassPointer;
	};

};

//UClass* UCustomUISizer::pClassPointer = NULL;

// Class Engine.CustomUIColumnList
// 0x016C (0x043C - 0x02D0)
class UCustomUIColumnList : public UCustomUIObject
{
public:
	unsigned long                                      AttachScrollBar : 1;                              		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableDragScroll : 1;                            		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableDragScrollFromChild : 1;                   		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoRename : 1;                                  		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUpdateCompleteCallback : 1;                      		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              DragScrollOffsetLimit;                            		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PixelScrollValue;                                 		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ColumnCount;                                      		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RowCount;                                         		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ColumnGap;                                        		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RowGap;                                           		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DragScrollOffset;                                 		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIScrollBar*                          ScrollBarCtrl;                                    		// 0x02F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< float >                                    ColumnSizeArray;                                  		// 0x02F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    RowSizeArray;                                     		// 0x0300 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     LastDragSeconds;                                  		// 0x030C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              DragScrollSpeed;                                  		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCubicFuncAnimationInfo                     DragScrollPositionAnimationInfo;                  		// 0x0318 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FCubicFuncAnimationInfo                     DragScrollOffsetAnimationInfo;                    		// 0x0344 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FWidgetContainerSystemInfo                  ColumnListContainerSystemInfo;                    		// 0x0370 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FWidgetContainDataSystemInfo                ColumnListContainDataSystemInfo;                  		// 0x037C (0x00C0) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 172 ];

		return pClassPointer;
	};

	void OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset );
};

//UClass* UCustomUIColumnList::pClassPointer = NULL;

// Class Engine.CustomUIMiniMap
// 0x01C0 (0x0490 - 0x02D0)
class UCustomUIMiniMap : public UCustomUIObject
{
public:
	TArray< struct FMapUnit >                          UnitArray;                                        		// 0x02D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDrawLine >                         DrawLineArray;                                    		// 0x02DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMapParticleInfo >                  MapParticleInfoArray;                             		// 0x02E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x02F4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIMiniMap.MarkingInfoMap
	TArray< int >                                      ToolTipArray;                                     		// 0x0330 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMapInfoData >                      MapInfoDataArray;                                 		// 0x033C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentMapInfoId;                                 		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentRotateDegree;                              		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CenterPosition;                                   		// 0x0350 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   RenderCenterPosition;                             		// 0x0358 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FQWord                                      HiLabelFlag;                                      		// 0x0360 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FQWord                                      LowLabelFlag;                                     		// 0x0368 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fZoomRatio;                                       		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRefreshMap : 1;                                  		// 0x0374 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshMapOpacity : 1;                           		// 0x0374 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableDrawing : 1;                               		// 0x0374 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bEnableMapDrag : 1;                               		// 0x0374 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnableMarking : 1;                               		// 0x0374 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FColor                                      BrushColor;                                       		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LineLifeTime;                                     		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LineExportTime;                                   		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxDrawingTime;                                   		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkingCheckTime;                                 		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkingCheckDistance;                             		// 0x038C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DrawingSamplingCount;                             		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MiniMapMode;                                      		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClickedUnitId;                                    		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstanceIdIndex;                                  		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMapOpacity;                                      		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x03A4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIMiniMap.MapBoundsMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x03E0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIMiniMap.MapTexCoordMap
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x041C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIMiniMap.UnitMaskMapColorBufferMap
	float                                              LineSize;                                         		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CatmullRomSamplingCount;                          		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  MiniMapLineTexture;                               		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   MiniMapMaterial;                                  		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         MinimapMaterialInstConstArray;                    		// 0x0468 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         MinimapMaskMaterialInstConstArray;                		// 0x0474 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMapFunc >                          MapFuncArray;                                     		// 0x0480 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MinimapAlphaAnimInstId;                           		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 174 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIMiniMap::pClassPointer = NULL;

// Class Engine.CustomUITabCtrl
// 0x010C (0x03DC - 0x02D0)
class UCustomUITabCtrl : public UCustomUIObject
{
public:
	int                                                TabCount;                                         		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TabSize;                                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTabButtonSize;                                 		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTabButtonSize;                                 		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIButton*                             IncrementButton;                                  		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIButton*                             DecrementButton;                                  		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIToggleButton*                       TemplateWidget;                                   		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentCount;                                   		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DisplayCount;                                     		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxScrollValue;                                   		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MinScrollValue;                                   		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentScrollValue;                               		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedTabIndex;                                 		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   DragOffSet;                                       		// 0x0304 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      RefreshComponentList : 1;                         		// 0x030C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      TabLock : 1;                                      		// 0x030C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FWidgetContainerSystemInfo                  TabCtrlContainerSystemInfo;                       		// 0x0310 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FWidgetContainDataSystemInfo                TabCtrlContainDataSystemInfo;                     		// 0x031C (0x00C0) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 176 ];

		return pClassPointer;
	};

	void OnTabDecrement ( class UUIScreenObject* Sender );
	void OnTabIncrement ( class UUIScreenObject* Sender );
	void OnTabButtonDrop ( class UUIScreenObject* Sender );
	void OnTabButtonDrag ( class UUIScreenObject* Sender );
	void OnTabButtonDragStart ( class UUIScreenObject* Sender );
	void OnTabButtonRClicked ( class UUIScreenObject* Sender );
	void OnTabButtonChanged ( class UUIScreenObject* Sender );
};

//UClass* UCustomUITabCtrl::pClassPointer = NULL;

// Class Engine.CustomUIButton
// 0x0048 (0x0318 - 0x02D0)
class UCustomUIButton : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     NormalImageComponent;                             		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     MouseOverImageComponent;                          		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     PressedImageComponent;                            		// 0x02D8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     DisabledImageComponent;                           		// 0x02DC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     ActiveOnlyImageComponent;                         		// 0x02E0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      EnableDrawImage : 1;                              		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableClickedParticle : 1;                       		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClickEvent : 1;                                  		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRClickEvent : 1;                                 		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMClickEvent : 1;                                 		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableLeftButton : 1;                            		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableMiddleButton : 1;                          		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEnableRightButton : 1;                           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bEnableDoubleClick : 1;                           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPressedInput : 1;                                		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIsClickEvent : 1;                                		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDragEnabled : 1;                                 		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bIsDoubleClickPress : 1;                          		// 0x02E4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bOverrideParentRenderState : 1;                   		// 0x02E4 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	struct FUIParticle                                 ClickedParticle;                                  		// 0x02E8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PressRepeatTime;                                  		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClickedEvent;                                     		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PresedEvent;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CancelEvent;                                      		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PressRepeatTimeElapsedTime;                       		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 180 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIButton::pClassPointer = NULL;

// Class Engine.CustomUILabelButton
// 0x0038 (0x0350 - 0x0318)
class UCustomUILabelButton : public UCustomUIButton
{
public:
	struct FString                                     CaptionString;                                    		// 0x0318 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIComp_DrawString*                    StringRenderComponent;                            		// 0x0324 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UFontSet*                                    NormalFontSet;                                    		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    MouseOverFontSet;                                 		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    PressedFontSet;                                   		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    DisabledFontSet;                                  		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    ActiveOnlyFontSet;                                		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AutoResizeHorizontal : 1;                         		// 0x033C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AutoResizeVertical : 1;                           		// 0x033C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRecursiveRender : 1;                             		// 0x033C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              MaxAutoResizeHorizontal;                          		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoResizeVertical;                            		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeHorizontal;                          		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeVertical;                            		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 179 ];

		return pClassPointer;
	};

};

//UClass* UCustomUILabelButton::pClassPointer = NULL;

// Class Engine.CustomUIToggleButton
// 0x0044 (0x0394 - 0x0350)
class UCustomUIToggleButton : public UCustomUILabelButton
{
public:
	class UCustomUIComp_DrawImage*                     CheckedNormalImageComponent;                      		// 0x0350 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     CheckedMouseOverImageComponent;                   		// 0x0354 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     CheckedPressedImageComponent;                     		// 0x0358 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     CheckedDisabledImageComponent;                    		// 0x035C (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     CheckedActiveOnlyImageComponent;                  		// 0x0360 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UFontSet*                                    CheckedNormalFontSet;                             		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    CheckedMouseOverFontSet;                          		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    CheckedPressedFontSet;                            		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    CheckedDisabledFontSet;                           		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    CheckedActiveOnlyFontSet;                         		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   TextClippingBound;                                		// 0x0378 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextClippingBoundFace[ 0x2 ];                     		// 0x0380 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CheckedTextClippingBoundFace[ 0x2 ];              		// 0x0382 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ToggleType;                                       		// 0x0384 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ToggleCheckType;                                  		// 0x0385 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CheckedTextClippingBound;                         		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsChecked : 1;                                   		// 0x0390 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearRenderBoundChk : 1;                         		// 0x0390 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 178 ];

		return pClassPointer;
	};

	void OnToggleButtonRClickedChecked ( class UUIScreenObject* Sender );
	void OnToggleButtonPressedChecked ( class UUIScreenObject* Sender );
	void OnToggleButtonClickedChecked ( class UUIScreenObject* Sender );
	void SetCheck ( unsigned long bShouldBeChecked );
	bool IsChecked ( );
};

//UClass* UCustomUIToggleButton::pClassPointer = NULL;

// Class Engine.CustomUISlider
// 0x0028 (0x02F8 - 0x02D0)
class UCustomUISlider : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     HighlightImageComponent;                          		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned char                                      SliderOrientation;                                		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SliderSnap : 1;                                   		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableHighlight : 1;                             		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SliderStepValue;                                  		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MarkerEvent;                                      		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIButton*                             MarkerButton;                                     		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxSliderValue;                                   		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinSliderValue;                                   		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurSliderValue;                                   		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 184 ];

		return pClassPointer;
	};

	void OnMarkerDrop ( class UUIScreenObject* Sender );
	void OnMarkerDragStart ( class UUIScreenObject* Sender );
	void OnMarkerDrag ( class UUIScreenObject* Sender );
};

//UClass* UCustomUISlider::pClassPointer = NULL;

// Class Engine.CustomUIScrollBar
// 0x0014 (0x02E4 - 0x02D0)
class UCustomUIScrollBar : public UCustomUIObject
{
public:
	class UCustomUISlider*                             SliderBar;                                        		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIButton*                             IncrementButton;                                  		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIButton*                             DecrementButton;                                  		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIScrollIndex*                        ScrollIndex;                                      		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ScrollHide : 1;                                   		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsedScrollIndex : 1;                             		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 186 ];

		return pClassPointer;
	};

	void OnScrollDecrementPressed ( class UUIScreenObject* Sender );
	void OnScrollIncrementPressed ( class UUIScreenObject* Sender );
	void OnScrollSlider ( class UUIScreenObject* Sender, float Value );
	void OnScrollDecrement ( class UUIScreenObject* Sender );
	void OnScrollIncrement ( class UUIScreenObject* Sender );
};

//UClass* UCustomUIScrollBar::pClassPointer = NULL;

// Class Engine.CustomUIRadioButton
// 0x0010 (0x02E0 - 0x02D0)
class UCustomUIRadioButton : public UCustomUIObject
{
public:
	int                                                ButtonCount;                                      		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UCustomUIToggleButton* >             ButtonList;                                       		// 0x02D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 188 ];

		return pClassPointer;
	};

	void OnRadioButtonRClicked ( class UUIScreenObject* Sender );
	void OnRadioButtonClicked ( class UUIScreenObject* Sender );
};

//UClass* UCustomUIRadioButton::pClassPointer = NULL;

// Class Engine.CustomUIProgressBar
// 0x0138 (0x0434 - 0x02FC)
class UCustomUIProgressBar : public UCustomUIImage
{
public:
	class UCustomUIComp_DrawImage*                     ProgressDisabledImageComponent;                   		// 0x02FC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     ProgressImageComponent;                           		// 0x0300 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawString*                    StringRenderComponent;                            		// 0x0304 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     ProgressDisabledImageBackgroundComponent;         		// 0x0308 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     ProgressImageBackgroundComponent;                 		// 0x030C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	unsigned char                                      ProgressOrientation;                              		// 0x0310 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChildValueMarkerFace;                             		// 0x0311 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxProgressValue;                                 		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinProgressValue;                                 		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InitProgressValue;                                		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTextPercentageValue : 1;                         		// 0x0320 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBubbleProgress : 1;                              		// 0x0320 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReverseMode : 1;                                 		// 0x0320 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableChildValueMarker : 1;                      		// 0x0320 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFirstRender : 1;                                 		// 0x0320 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsBackgroundAnimation : 1;                       		// 0x0320 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsColorAnimation : 1;                            		// 0x0320 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	class UImageSet*                                   IncrementHighLightProgressImageSet;               		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   DecrementHighLightProgressImageSet;               		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BubbleProgressSpace;                              		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChildValueMarkerOffsetX;                         		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChildValueMarkerOffsetY;                         		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChildValueMarkerStartPosition;                   		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   IncrementScale;                                   		// 0x033C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   IncrementLifeTimeScale;                           		// 0x0344 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   DecrementScale;                                   		// 0x034C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             IncrementParticleSystem;                          		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             IncrementLifeTimeParticleSystem;                  		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DecrementParticleSystem;                          		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIImage*                              ChildValueMarkerImage;                            		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IncrementParticleInstanceId;                      		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IncrementLifeTimeParticleInstanceId;              		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DecrementParticleInstanceId;                      		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                StartAnimationColor;                              		// 0x0370 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                EndAnimationColor;                                		// 0x0380 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                CurrentAnimationColor;                            		// 0x0390 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                BaseSectionActiveColor;                           		// 0x03A0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                BaseSectionPassiveColor;                          		// 0x03B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FProgressSectionData >              ProgressSectionDataArray;                         		// 0x03C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FProgressMarkImageData >            ProgressMarkImageDataArray;                       		// 0x03CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FProgressColorSectionData >         ProgressColorSectionDataArray;                    		// 0x03D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         ProgressMaterialInstConstArray;                   		// 0x03E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   ProgressMaterial;                                 		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     ProgressCurrentValue;                             		// 0x03F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct Fsqword                                     ProgressMaxValue;                                 		// 0x03FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct Fsqword                                     ProgressMinValue;                                 		// 0x0404 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FModeAnimationInfo                          GaugeAnimationInfo;                               		// 0x040C (0x0028) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 190 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIProgressBar::pClassPointer = NULL;

// Class Engine.CustomUIMeshWidget
// 0x024C (0x051C - 0x02D0)
class UCustomUIMeshWidget : public UCustomUIObject
{
public:
	class ULightComponent*                             DefaultLight;                                     		// 0x02D0 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class ULightComponent*                             DefaultLight2;                                    		// 0x02D4 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class ULightComponent*                             DefaultLight3;                                    		// 0x02D8 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FVector2D                                   CaptureRatio;                                     		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableOwnerClipping : 1;                         		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableThumbnail : 1;                             		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseDummyMesh : 1;                                		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUseZoomHeight : 1;                               		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCustomizePC : 1;                                 		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              RotateAmount;                                     		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HeightAmount;                                     		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InsideZoomStep;                                   		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OutsideZoomStep;                                  		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshScale;                                        		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotValue;                                         		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ViewMode;                                         		// 0x0300 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LightDirection;                                   		// 0x0304 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LightDirection2;                                  		// 0x0310 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LightDirection3;                                  		// 0x031C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                LightIndex;                                       		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseMeshHeight;                                   		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshHeight;                                       		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshWidth;                                        		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxHeight;                                        		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinHeight;                                        		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DefaultHeight;                                    		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxZoomHeight;                                    		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartHeight;                                      		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EndHeight;                                        		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHeight;                                    		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartDistanceRatio;                               		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EndDistanceRatio;                                 		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentDistanceRatio;                             		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistanceRatio;                                 		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxDistanceRatio;                                 		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DefaultZoomDistance;                              		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      AmbientColor;                                     		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    CanvasScene;                                      		// 0x0370 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class USkeletalMeshComponent* >            SkeletalMeshComp;                                 		// 0x0374 (0x000C) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	TArray< int >                                      SkeletalMeshIndexArray;                           		// 0x0380 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomizeInfoRace;                                		// 0x038C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomizeInfoSex;                                 		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomizeParam[ 0x5C ];                           		// 0x0394 (0x0170) [0x0000000000002000]              ( CPF_Transient )
	struct Fsqword                                     CustomizeInfoJoinGuild;                           		// 0x0504 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                GuildCustomMeshType[ 0x4 ];                       		// 0x050C (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 192 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIMeshWidget::pClassPointer = NULL;

// Class Engine.CustomUIListCtrl
// 0x002C (0x02FC - 0x02D0)
class UCustomUIListCtrl : public UCustomUIObject
{
public:
	unsigned long                                      AttachScrollBar : 1;                              		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoRename : 1;                                  		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                HorizontalItemCount;                              		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalItemCount;                                		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemHorizontalGap;                                		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemVerticalGap;                                  		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIScrollBar*                          ScrollBarCtrl;                                    		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIImage*                              TemplateWidget;                                   		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentCount;                                   		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FWidgetContainerSystemInfo                  ListCtrlContainerSystemInfo;                      		// 0x02F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 194 ];

		return pClassPointer;
	};

	void OnSelectedItem ( class UUIScreenObject* Sender );
	void OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset );
};

//UClass* UCustomUIListCtrl::pClassPointer = NULL;

// Class Engine.CustomUIListBox
// 0x001C (0x02EC - 0x02D0)
class UCustomUIListBox : public UCustomUIObject
{
public:
	class UCustomUIScrollBar*                          ScrollBarCtrl;                                    		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      AttachScrollBar : 1;                              		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PixelScrollValue;                                 		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtendedScrollValue;                              		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIComp_DrawImage*                     BackgroundComponent;                              		// 0x02E0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawStringList*                StringListRenderComponent;                        		// 0x02E4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	int                                                MaxStringListItemCount;                           		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 196 ];

		return pClassPointer;
	};

	void OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset );
};

//UClass* UCustomUIListBox::pClassPointer = NULL;

// Class Engine.CustomUILabel
// 0x0038 (0x0308 - 0x02D0)
class UCustomUILabel : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawString*                    StringRenderComponent;                            		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FString                                     LabelCaption;                                     		// 0x02D4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFontSet*                                    NormalFontSet;                                    		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    MouseOverFontSet;                                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    PressedFontSet;                                   		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    DisabledFontSet;                                  		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontSet*                                    ActiveOnlyFontSet;                                		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AutoResizeHorizontal : 1;                         		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AutoResizeVertical : 1;                           		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxAutoResizeHorizontal;                          		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoResizeVertical;                            		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeHorizontal;                          		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoResizeVertical;                            		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 198 ];

		return pClassPointer;
	};

};

//UClass* UCustomUILabel::pClassPointer = NULL;

// Class Engine.CustomUIEditBox
// 0x001C (0x02EC - 0x02D0)
class UCustomUIEditBox : public UCustomUIObject
{
public:
	class UCustomUIComp_DrawStringEditbox*             StringRenderComponent;                            		// 0x02D0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02D4 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UCustomUIComp_DrawImage*                     FocusedBackgroundImageComponent;                  		// 0x02D8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bEnableGlobalState : 1;                           		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReadOnly : 1;                                    		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPasswordMode : 1;                                		// 0x02DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsEditBoxFocus : 1;                              		// 0x02DC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                MaxCharacters;                                    		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSet;                                     		// 0x02E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KeyInputEvent;                                    		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 200 ];

		return pClassPointer;
	};

	bool KillFocusEx ( int PlayerIndex );
};

//UClass* UCustomUIEditBox::pClassPointer = NULL;

// Class Engine.CustomUIComboBox
// 0x0010 (0x02E0 - 0x02D0)
class UCustomUIComboBox : public UCustomUIObject
{
public:
	class UCustomUILabel*                              Label;                                            		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIButton*                             Button;                                           		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIListCtrl*                           ListCtrl;                                         		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIComp_DrawImage*                     BackgroundImageComponent;                         		// 0x02DC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 202 ];

		return pClassPointer;
	};

	void OnUpdateList ( class UUIScreenObject* Sender );
	void OnItemChanged ( class UUIScreenObject* Sender, int Index );
	void OnButtonClicked ( class UUIScreenObject* Sender );
};

//UClass* UCustomUIComboBox::pClassPointer = NULL;

// Class Engine.CustomUICaption
// 0x0014 (0x0310 - 0x02FC)
class UCustomUICaption : public UCustomUIImage
{
public:
	struct FString                                     CaptionString;                                    		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCustomUIComp_DrawString*                    StringRenderComponent;                            		// 0x0308 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bAttach : 1;                                      		// 0x030C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableMoveParent : 1;                             		// 0x030C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 204 ];

		return pClassPointer;
	};

};

//UClass* UCustomUICaption::pClassPointer = NULL;

// Class Engine.Engine
// 0x0534 (0x0574 - 0x0040)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     TinyFontName;                                     		// 0x0044 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UFont*                                       SmallFont;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     SmallFontName;                                    		// 0x0054 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UFont*                                       MediumFont;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     MediumFontName;                                   		// 0x0064 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UFont*                                       LargeFont;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     LargeFontName;                                    		// 0x0074 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UFontSet*                                    SubtitleFontSet;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     SubtitleFontSetName;                              		// 0x0084 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< class UFont* >                             AdditionalFonts;                                  		// 0x0090 (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           AdditionalFontNames;                              		// 0x009C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      ConsoleClass;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FString                                     ConsoleClassName;                                 		// 0x00AC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      GameViewportClientClass;                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FString                                     GameViewportClientClassName;                      		// 0x00BC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      DataStoreClientClass;                             		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     DataStoreClientClassName;                         		// 0x00CC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      LocalPlayerClass;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FString                                     LocalPlayerClassName;                             		// 0x00DC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   DefaultMaterial;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultMaterialName;                              		// 0x00EC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   DefaultDecalMaterial;                             		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultDecalMaterialName;                         		// 0x00FC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UTexture*                                    DefaultTexture;                                   		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultTextureName;                               		// 0x010C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   WireframeMaterial;                                		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FString                                     WireframeMaterialName;                            		// 0x011C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x012C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   GeomMaterial;                                     		// 0x0138 (0x0004) [0x0000000000000000]              
	struct FString                                     GeomMaterialName;                                 		// 0x013C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x0148 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x014C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   TickMaterial;                                     		// 0x0158 (0x0004) [0x0000000000000000]              
	struct FString                                     TickMaterialName;                                 		// 0x015C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   CrossMaterial;                                    		// 0x0168 (0x0004) [0x0000000000000000]              
	struct FString                                     CrossMaterialName;                                		// 0x016C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x0178 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x017C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x0188 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x018C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   LevelColorationUnlitTransMaterial;                		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationUnlitTransMaterialName;            		// 0x019C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationLitMaterialName;             		// 0x01AC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;               		// 0x01B8 (0x0004) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationUnlitMaterialName;           		// 0x01BC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x01C8 (0x0004) [0x0000000000000000]              
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x01CC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorMaterial;                              		// 0x01D8 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorMaterialName;                          		// 0x01DC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   CircularShadowMaterial;                           		// 0x01E8 (0x0004) [0x0000000000000000]              
	struct FString                                     CircularShadowMaterialName;                       		// 0x01EC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;            		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;        		// 0x01FC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;         		// 0x0208 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;     		// 0x020C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;              		// 0x0218 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;          		// 0x021C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;            		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;        		// 0x022C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;             		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;         		// 0x023C (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FColor >                            LightComplexityColors;                            		// 0x0248 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FColor >                            ShaderComplexityColors;                           		// 0x0254 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FColor >                            CullDistanceColors;                               		// 0x0260 (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bUsePixelShaderComplexity : 1;                    		// 0x026C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseAdditiveComplexity : 1;                       		// 0x026C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bUseSound : 1;                                    		// 0x026C (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseTextureStreaming : 1;                         		// 0x026C (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x026C (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x026C (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x026C (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x026C (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableMatrix : 1;                                		// 0x026C (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseControlTextureOverflow : 1;                   		// 0x026C (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bUseShaderCacheSave : 1;                          		// 0x026C (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bLogAnimInfo : 1;                                 		// 0x026C (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bUseCaptureBuffer : 1;                            		// 0x026C (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bUseGStar10KeyBlock : 1;                          		// 0x026C (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x026C (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x026C (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x026C (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x026C (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x026C (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;             		// 0x026C (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                 		// 0x026C (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x026C (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      bCheckParticleRenderSize : 1;                     		// 0x026C (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bEnableColorClear : 1;                            		// 0x026C (0x0004) [0x0000000000004002] [0x00800000] ( CPF_Const | CPF_Config )
	unsigned long                                      bEnableFoliageLimit : 1;                          		// 0x026C (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bEnableFoliageWarning : 1;                        		// 0x026C (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      bLockMouseOveride : 1;                            		// 0x026C (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bLockMouseState : 1;                              		// 0x026C (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxPixelShaderOpaqueComplexityCount;              		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxVertexShaderComplexityCount;                   		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinTextureDensity;                                		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IdealTextureDensity;                              		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxTextureDensity;                                		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FStatColorMapping >                 StatColorMappings;                                		// 0x0288 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FString                                     EditorBrushMaterialName;                          		// 0x0298 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPhysMaterialName;                          		// 0x02A8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x02B4 (0x0004) [0x0000000000000000]              
	struct FString                                     TerrainErrorMaterialName;                         		// 0x02B8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TerrainTessellationCheckCount;                    		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TerrainTessellationCheckDistance;                 		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      OnlineSubsystemClass;                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x02D4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x02E0 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPostProcessName;                           		// 0x02E4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x02F0 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x02F4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x0300 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x0304 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x0310 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x0314 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x0324 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x0330 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x0334 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x0340 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x0344 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x0350 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x0354 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x0360 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomAngleTextureName;                           		// 0x0364 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x0370 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomNormalTextureName;                          		// 0x0374 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UTexture2D*                                  RandomMirrorDiscTexture;                          		// 0x0380 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomMirrorDiscTextureName;                      		// 0x0384 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UTexture2D*                                  SpectrumTexture;                                  		// 0x0390 (0x0004) [0x0000000000000000]              
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x0394 (0x0004) [0x0000000000000000]              
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x0398 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class USoundNodeWave*                              DefaultSound;                                     		// 0x03A4 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultSoundName;                                 		// 0x03A8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x03B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UClient*                                     Client;                                           		// 0x03B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULocalPlayer* >                      GamePlayers;                                      		// 0x03BC (0x000C) [0x0000000000000000]              
	class UGameViewportClient*                         GameViewport;                                     		// 0x03C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           DeferredCommands;                                 		// 0x03CC (0x000C) [0x0000000000000000]              
	int                                                TickCycles;                                       		// 0x03D8 (0x0004) [0x0000000000000000]              
	int                                                GameCycles;                                       		// 0x03DC (0x0004) [0x0000000000000000]              
	int                                                ClientCycles;                                     		// 0x03E0 (0x0004) [0x0000000000000000]              
	class UDebugManager*                               DebugManager;                                     		// 0x03E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    RemoteControlExec;                                		// 0x03E8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    T1LevelObjManager;                                		// 0x03EC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FFrameInfo                                  AvgFPSInfo;                                       		// 0x03F0 (0x0030) [0x0000000000001000]              ( CPF_Native )
	struct FFrameAutoInfo                              FrameAutoCtrl;                                    		// 0x0420 (0x0030) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     IDSAddress;                                       		// 0x0450 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                IDSPort;                                          		// 0x045C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      C_WorldBox;                                       		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushWire;                                      		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_AddWire;                                        		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SubtractWire;                                   		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SemiSolidWire;                                  		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_NonSolidWire;                                   		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_WireBackground;                                 		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_VolumeCollision;                                		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BSPCollision;                                   		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_OrthoBackground;                                		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_Volume;                                         		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceFactor;                          		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScoutClassName;                                   		// 0x0494 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      TransitionType;                                   		// 0x04A0 (0x0001) [0x0000000000000000]              
	struct FString                                     TransitionDescription;                            		// 0x04A4 (0x000C) [0x0000000000000000]              
	struct FString                                     TransitionGameType;                               		// 0x04B0 (0x000C) [0x0000000000000000]              
	float                                              MeshLODRange;                                     		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraRotationThreshold;                          		// 0x04C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraTranslationThreshold;                       		// 0x04C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentUnoccludedRequeries;                       		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxFluidNumVerts;                                 		// 0x04D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSimulationTimeLimit;                         		// 0x04D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResize;                                		// 0x04D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResizeWarn;                            		// 0x04DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   TerrainCollisionMaterial;                         		// 0x04E0 (0x0004) [0x0000000000000000]              
	struct FString                                     TerrainCollisionMaterialName;                     		// 0x04E4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                BeginUPTryCount;                                  		// 0x04F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FDropNoteInfo >                     PendingDroppedNotes;                              		// 0x04F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x0500 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              NetClientTicksPerSecond;                          		// 0x050C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CullDistanceFadeRangeRatio;                       		// 0x0510 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DNearestScale;                               		// 0x0514 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DMidFixScale;                                		// 0x0518 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DFarthestScale;                              		// 0x051C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DNearBoundDist;                              		// 0x0520 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DMidBoundDist;                               		// 0x0524 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Text3DFarBoundDist;                               		// 0x0528 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                LimitFoliageMaxDensity;                           		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LimitFoliageMaxDrawRadius;                        		// 0x0530 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LimitFoliagePoly;                                 		// 0x0534 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LimitFoliageLayer;                                		// 0x0538 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LimitFoliageMeshPoly;                             		// 0x053C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                DefaultSelectedMaterialColor;                     		// 0x0540 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                SelectedMaterialColor;                            		// 0x0550 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                UnselectedMaterialColor;                          		// 0x0560 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              MotionBlurScale;                                  		// 0x0570 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 214 ];

		return pClassPointer;
	};

	void AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth );
	void AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered );
	void RemoveAllOverlays ( );
	void StopMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadMapMovie ( );
	struct FString GetLastMovieName ( );
	class UAudioDevice* GetAudioDevice ( );
	bool IsSplitScreen ( );
	class UFont* GetAdditionalFont ( int AdditionalFontIndex );
	class UFont* GetLargeFont ( );
	class UFont* GetMediumFont ( );
	class UFont* GetSmallFont ( );
	class UFont* GetTinyFont ( );
	struct FString GetBuildDate ( );
	class AWorldInfo* GetCurrentWorldInfo ( );
};

//UClass* UEngine::pClassPointer = NULL;

// Class Engine.GameEngine
// 0x010C (0x0680 - 0x0574)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                    		// 0x0574 (0x0004) [0x0000000000000000]              
	struct FURL                                        LastURL;                                          		// 0x0578 (0x0044) [0x0000000000000000]              
	struct FURL                                        LastRemoteURL;                                    		// 0x05BC (0x0044) [0x0000000000000000]              
	TArray< struct FString >                           ServerActors;                                     		// 0x0600 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     TravelURL;                                        		// 0x060C (0x000C) [0x0000000000000000]              
	unsigned char                                      TravelType;                                       		// 0x0618 (0x0001) [0x0000000000000000]              
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x061C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x061C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bShouldSkipLevelStartupEventOnMapCommit : 1;      		// 0x061C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bShouldSkipLevelBeginningEventOnMapCommit : 1;    		// 0x061C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bSmoothFrameRate : 1;                             		// 0x061C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x061C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0620 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             LevelsToLoadForPendingMapChange;                  		// 0x0624 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULevel* >                            LoadedLevelsForPendingMapChange;                  		// 0x0630 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x063C (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxSmoothedFrameRate;                             		// 0x0648 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinSmoothedFrameRate;                             		// 0x064C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FLevelStreamingStatus >             PendingLevelStreamingStatusUpdates;               		// 0x0650 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObjectReferencer* >                 ObjectReferencers;                                		// 0x065C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FFullyLoadedPackagesInfo >          PackagesToFullyLoad;                              		// 0x0668 (0x000C) [0x0000000000000000]              
	TArray< struct FNamedNetDriver >                   NamedNetDrivers;                                  		// 0x0674 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 216 ];

		return pClassPointer;
	};

	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void DestroyNamedNetDriver ( struct FName NetDriverName );
	bool CreateNamedNetDriver ( struct FName NetDriverName );
};

//UClass* UGameEngine::pClassPointer = NULL;

// Class Engine.Actor
// 0x01D4 (0x0210 - 0x003C)
class AActor : public UObject
{
public:
	TArray< class UActorComponent* >                   Components;                                       		// 0x003C (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class UActorComponent* >                   AllComponents;                                    		// 0x0048 (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	struct FVector                                     Location;                                         		// 0x0054 (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FRotator                                    Rotation;                                         		// 0x0060 (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	float                                              DrawScale;                                        		// 0x006C (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     DrawScale3D;                                      		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PrePivot;                                         		// 0x007C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MeshCullDistance;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRenderCommandFence                         DetachFence;                                      		// 0x008C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CustomTimeDilation;                               		// 0x0090 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ArchetypePreview;                                 		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Physics;                                          		// 0x0098 (0x0001) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned char                                      RemoteRole;                                       		// 0x0099 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Role;                                             		// 0x009A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CollisionType;                                    		// 0x009B (0x0001) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedCollisionType;                          		// 0x009C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x009D (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      OptExptionFlag;                                   		// 0x009E (0x0001) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x00A0 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AActor*                                      Base;                                             		// 0x00A4 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	TArray< struct FTimerData >                        Timers;                                           		// 0x00A8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FSectorInfo                                 ActorSectorInfo;                                  		// 0x00B4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bCulledTick : 1;                                  		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bStatic : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000023] [0x00000004] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bFilteredHidden : 1;                              		// 0x00C0 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNoDelete : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bDeleteMe : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bTicked : 1;                                      		// 0x00C0 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x00C0 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bStasis : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bWorldGeometry : 1;                               		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00C0 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bDestroyedByInterpActor : 1;                      		// 0x00C0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x00C0 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bIsMoving : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bAlwaysEncroachCheck : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasAlternateTargetLocation : 1;                  		// 0x00C0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bNetTemporary : 1;                                		// 0x00C0 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x00C0 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bNetDirty : 1;                                    		// 0x00C0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x00C0 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x00C0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x00C0 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                		// 0x00C0 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bDemoRecording : 1;                               		// 0x00C0 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bDemoOwner : 1;                                   		// 0x00C0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bForceDemoRelevant : 1;                           		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x00C4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x00C4 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1; 		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x00C4 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      BasePosOnly : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUseParentBoneAni : 1;                            		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000023] [0x00001000] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreBaseRotation : 1;                          		// 0x00C4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bShadowParented : 1;                              		// 0x00C4 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bCanBeAdheredTo : 1;                              		// 0x00C4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCanBeFrictionedTo : 1;                           		// 0x00C4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsLoadBlockable : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bHurtEntry : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMovable : 1;                                     		// 0x00C4 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x00C4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x00C4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x00C4 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x00C4 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x00C4 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x00C4 (0x0004) [0x0000000000002003] [0x10000000] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x00C4 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x00C4 (0x0004) [0x0000000000000022] [0x40000000] ( CPF_Const | CPF_Net )
	unsigned long                                      bCollideWorld : 1;                                		// 0x00C4 (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      bCollideComplex : 1;                              		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bProjTarget : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCollideWeather : 1;                              		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bComponentOutsideWorld : 1;                       		// 0x00C8 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRenderPosOnlyCollisionCheck : 1;                 		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEnableFootPlaceCollisionCheck : 1;               		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bJustSetLocation : 1;                             		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bPendingRelativeTM : 1;                           		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      OpacityMeshForCameraCollide : 1;                  		// 0x00C8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bBounce : 1;                                      		// 0x00C8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bJustTeleported : 1;                              		// 0x00C8 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bNetInitial : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bNetOwner : 1;                                    		// 0x00C8 (0x0004) [0x0000000000000022] [0x00010000] ( CPF_Const | CPF_Net )
	unsigned long                                      bHiddenEd : 1;                                    		// 0x00C8 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHiddenEdGroup : 1;                               		// 0x00C8 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHiddenEdCustom : 1;                              		// 0x00C8 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bTempEditor : 1;                                  		// 0x00C8 (0x0004) [0x0000000000002002] [0x00200000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPathColliding : 1;                               		// 0x00C8 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bPathTemp : 1;                                    		// 0x00C8 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bScriptInitialized : 1;                           		// 0x00C8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bLockLocation : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bDisableWallRun : 1;                              		// 0x00C8 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bWaterMesh : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bUpdateComponentBoundingBox : 1;                  		// 0x00C8 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bUIRenderMesh : 1;                                		// 0x00C8 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bPrioritySoundOutput : 1;                         		// 0x00C8 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	int                                                NetTag;                                           		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NetUpdateTime;                                    		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetUpdateFrequency;                               		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              NetPriority;                                      		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              LastNetUpdateTime;                                		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APawn*                                       Instigator;                                       		// 0x00E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWorldInfo*                                  WorldInfo;                                        		// 0x00E4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LifeSpan;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x00EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_CursorType;                                     		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       Tag;                                              		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialState;                                     		// 0x0100 (0x0008) [0x0000000000000000]              
	struct FName                                       Group;                                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Touching;                                         		// 0x0110 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class AActor* >                            Children;                                         		// 0x011C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LatentFloat;                                      		// 0x0128 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSequence*                           LatentSeqNode;                                    		// 0x012C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x0130 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Velocity;                                         		// 0x0134 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Acceleration;                                     		// 0x0140 (0x000C) [0x0000000000000000]              
	struct FVector                                     AngularVelocity;                                  		// 0x014C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x0158 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FName                                       BaseBoneName;                                     		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Attached;                                         		// 0x0164 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0170 (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RelativeRotation;                                 		// 0x017C (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x0188 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	int                                                OverlapTag;                                       		// 0x018C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FBaseRelativeOffsetInfo                     PendingRelativeData;                              		// 0x0190 (0x001C) [0x0000000000000000]              
	float                                              OpacityValueForCameraCollide;                     		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationRate;                                     		// 0x01B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredRotation;                                  		// 0x01BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PendingTouch;                                     		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              MinDistForNetRBCorrection;                        		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MessageClass;                                     		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                bCheckOverlapCollision;                           		// 0x01D4 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            SupportedEvents;                                  		// 0x01D8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequenceEvent* >                    GeneratedEvents;                                  		// 0x01E4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class USeqAct_Latent* >                    LatentActions;                                    		// 0x01F0 (0x000C) [0x0000000000000000]              
	int                                                NeedTickCount;                                    		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   Location2D;                                       		// 0x0200 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                UIRenderId;                                       		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PriorityShowPlayedFlagEndTime;                    		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 218 ];

		return pClassPointer;
	};

	bool IsInPersistentLevel ( );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool eventGetPlayingFaceFXFlag ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, int SoundTrackType, unsigned long InStopPrevious );
	void eventFinishAnimControl ( );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void OnMakeNoise ( class USeqAct_MakeNoise* Action );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnHealDamage ( class USeqAct_HealDamage* Action );
	void OnCauseDamage ( class USeqAct_CauseDamage* Action );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void ForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	float TimeSince ( float Time );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void SetGRI ( class AGameReplicationInfo* GRI );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void DebugFreezeGame ( );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class AActor** Actor );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** Actor );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickGroup ( unsigned char NewTickGroup );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation );
	bool Move ( struct FVector Delta );
	void UpdateLastNonRuleMoveLocationAndRotation ( );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

//UClass* AActor::pClassPointer = NULL;

// Class Engine.Channel
// 0x002C (0x0068 - 0x003C)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x003C (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 220 ];

		return pClassPointer;
	};

};

//UClass* UChannel::pClassPointer = NULL;

// Class Engine.ActorChannel
// 0x0064 (0x00CC - 0x0068)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x64 ];                            		// 0x0068 (0x0064) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 222 ];

		return pClassPointer;
	};

};

//UClass* UActorChannel::pClassPointer = NULL;

// Class Engine.ActorComponent
// 0x000E (0x0056 - 0x0048)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                            		// 0x0048 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      Owner;                                            		// 0x004C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAttached : 1;                                    		// 0x0050 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bTickInEditor : 1;                                		// 0x0050 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bNeedsReattach : 1;                               		// 0x0050 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x0050 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0054 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FilterTickGroup;                                  		// 0x0055 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 224 ];

		return pClassPointer;
	};

	void DetachFromAny ( );
	void ForceUpdate ( unsigned long bTransformOnly );
	void SetComponentRBFixed ( unsigned long bFixed );
	void SetTickGroup ( unsigned char NewTickGroup );
};

//UClass* UActorComponent::pClassPointer = NULL;

// Class Engine.ActorFactory
// 0x0028 (0x0064 - 0x003C)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                               		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x0040 (0x000C) [0x0000000000000000]              
	int                                                MenuPriority;                                     		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      NewActorClass;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlaceable : 1;                                   		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     SpecificGameName;                                 		// 0x0058 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 226 ];

		return pClassPointer;
	};

};

//UClass* UActorFactory::pClassPointer = NULL;

// Class Engine.ActorFactoryAI
// 0x0028 (0x008C - 0x0064)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PawnName;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            InventoryList;                                    		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeamIndex;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 228 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryAI::pClassPointer = NULL;

// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 230 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryAmbientSound::pClassPointer = NULL;

// Class Engine.ActorFactoryAmbientSoundMovable
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryAmbientSoundMovable : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 232 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryAmbientSoundMovable::pClassPointer = NULL;

// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 234 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryAmbientSoundSimple::pClassPointer = NULL;

// Class Engine.ActorFactoryArchetype
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 236 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryArchetype::pClassPointer = NULL;

// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 238 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryCoverLink::pClassPointer = NULL;

// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x0079 - 0x0064)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 240 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryDynamicSM::pClassPointer = NULL;

// Class Engine.ActorFactoryEmitter
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 242 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryEmitter::pClassPointer = NULL;

// Class Engine.ActorFactoryEmitterMovable
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryEmitterMovable : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 244 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryEmitterMovable::pClassPointer = NULL;

// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 246 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryFracturedStaticMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 248 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryLensFlare::pClassPointer = NULL;

// Class Engine.ActorFactoryLight
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 250 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryLight::pClassPointer = NULL;

// Class Engine.ActorFactoryMover
// 0x0000 (0x0079 - 0x0079)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 252 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryMover::pClassPointer = NULL;

// Class Engine.ActorFactoryPathNode
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 254 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryPathNode::pClassPointer = NULL;

// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x0088 - 0x0064)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 256 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryPhysicsAsset::pClassPointer = NULL;

// Class Engine.ActorFactoryPhysXDestructible
// 0x0010 (0x0074 - 0x0064)
class UActorFactoryPhysXDestructible : public UActorFactory
{
public:
	class UPhysXDestructible*                          PhysXDestructible;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 258 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryPhysXDestructible::pClassPointer = NULL;

// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 260 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryPlayerStart::pClassPointer = NULL;

// Class Engine.ActorFactoryRigidBody
// 0x0027 (0x00A0 - 0x0079)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x008C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x0090 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      RBChannel;                                        		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightTorqueFactor;                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 262 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryRigidBody::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSequenceName;                                 		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 264 ];

		return pClassPointer;
	};

};

//UClass* UActorFactorySkeletalMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 266 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryStaticMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryTrigger
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 268 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryTrigger::pClassPointer = NULL;

// Class Engine.ActorFactoryVehicle
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 270 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryVehicle::pClassPointer = NULL;

// Class Engine.ReachSpec
// 0x0054 (0x0090 - 0x003C)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                  		// 0x003C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                Distance;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FVector                                     Direction;                                        		// 0x0044 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            Start;                                            		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FActorReference                             End;                                              		// 0x0054 (0x0014) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CollisionRadius;                                  		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CollisionHeight;                                  		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                reachFlags;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MaxLandingVelocity;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned char                                      bPruned;                                          		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      PathColorIndex;                                   		// 0x0079 (0x0001) [0x0000000000000000]              
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x007C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bCanCutCorners : 1;                               		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x007C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisabled : 1;                                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	TArray< class UClass* >                            PruneSpecList;                                    		// 0x0080 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      BlockedBy;                                        		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 272 ];

		return pClassPointer;
	};

	bool IsBlockedFor ( class APawn* P );
	struct FVector GetDirection ( );
	class ANavigationPoint* GetEnd ( );
	int CostFor ( class APawn* P );
};

//UClass* UReachSpec::pClassPointer = NULL;

// Class Engine.AdvancedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 274 ];

		return pClassPointer;
	};

};

//UClass* UAdvancedReachSpec::pClassPointer = NULL;

// Class Engine.PostProcessEffect
// 0x0025 (0x0061 - 0x003C)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowInGame : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	struct FName                                       EffectName;                                       		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodePosY;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned char                                      SceneDPG;                                         		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 276 ];

		return pClassPointer;
	};

};

//UClass* UPostProcessEffect::pClassPointer = NULL;

// Class Engine.AmbientOcclusionEffect
// 0x0047 (0x00A8 - 0x0061)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                   		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionPower;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionScale;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionBias;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOcclusion;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAngleBasedSSAO : 1;                              		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              OcclusionRadius;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OcclusionQuality;                                 		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMinDistance;                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceThreshold;                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceScale;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryConvergenceTime;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryWeightConvergenceTime;                     		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 278 ];

		return pClassPointer;
	};

};

//UClass* UAmbientOcclusionEffect::pClassPointer = NULL;

// Class Engine.Brush
// 0x0024 (0x0234 - 0x0210)
class ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x0210 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BrushColor;                                       		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PolyFlags;                                        		// 0x0218 (0x0004) [0x0000000000000000]              
	unsigned long                                      bColored : 1;                                     		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x021C (0x0004) [0x0000000000000000] [0x00000002] 
	class UModel*                                      Brush;                                            		// 0x0220 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UBrushComponent*                             BrushComponent;                                   		// 0x0224 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< struct FGeomSelection >                    SavedSelections;                                  		// 0x0228 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 280 ];

		return pClassPointer;
	};

};

//UClass* ABrush::pClassPointer = NULL;

// Class Engine.Volume
// 0x0024 (0x0258 - 0x0234)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                  		// 0x0234 (0x0004) [0x0000000000000000]              
	int                                                LocationPriority;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LocationName;                                     		// 0x023C (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessAllActors : 1;                            		// 0x0248 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      BlendWithOutVolume : 1;                           		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      InVolume : 1;                                     		// 0x0248 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTraceCamera : 1;                                 		// 0x0248 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      OutVolumeType;                                    		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutVolumeScale;                                   		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVolume*                                     BlendingOutVolume;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 282 ];

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	bool Encompasses ( class AActor* Other );
};

//UClass* AVolume::pClassPointer = NULL;

// Class Engine.MusicVolume
// 0x0058 (0x02B0 - 0x0258)
class AMusicVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSoundSettings                              Settings;                                         		// 0x025C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FIntroTrack                                 IntroSlot;                                        		// 0x0264 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IntroSlotUse : 1;                                 		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayedIntro : 1;                                 		// 0x027C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bToggleMusicVolume : 1;                           		// 0x027C (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FMusicTrackBank >                   MusicTrackBanks;                                  		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlayedByCamera;                                   		// 0x028C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AMusicVolume*                                NextLowerPriorityVolume;                          		// 0x0290 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentPlayIndex;                                 		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      RandomSoundPlayList;                              		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    DelayMusicTime;                                   		// 0x02A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 284 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* AMusicVolume::pClassPointer = NULL;

// Class Engine.AmbientSoundVolume
// 0x0000 (0x02B0 - 0x02B0)
class AAmbientSoundVolume : public AMusicVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 286 ];

		return pClassPointer;
	};

};

//UClass* AAmbientSoundVolume::pClassPointer = NULL;

// Class Engine.Camera
// 0x02BC (0x04CC - 0x0210)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x0210 (0x0004) [0x0000000000000000]              
	struct FCameraTravelModeInfo                       TravelModeInfo;                                   		// 0x0214 (0x0078) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CameraStyle;                                      		// 0x028C (0x0008) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0294 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0298 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableFading : 1;                                		// 0x0298 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x0298 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x0298 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x0298 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bTargetIFOV : 1;                                  		// 0x0298 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              LockedFOV;                                        		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              ConstrainedAspectRatio;                           		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              DefaultAspectRatio;                               		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x02B0 (0x0134) [0x0000000000000000]              
	class UPostProcessParameter*                       CamPostParameterObject;                           		// 0x03E4 (0x0004) [0x0000000000000000]              
	struct FVector                                     ColorScale;                                       		// 0x03E8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredColorScale;                                		// 0x03F4 (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalColorScale;                               		// 0x0400 (0x000C) [0x0000000000000000]              
	float                                              ColorScaleInterpDuration;                         		// 0x040C (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpStartTime;                        		// 0x0410 (0x0004) [0x0000000000000000]              
	struct FTCameraCache                               CameraCache;                                      		// 0x0414 (0x0020) [0x0000000000000000]              
	struct FTViewTarget                                ViewTarget;                                       		// 0x0434 (0x002C) [0x0000000000000000]              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x0460 (0x002C) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x048C (0x0004) [0x0000000000000000]              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x0490 (0x000C) [0x0000000000000000]              
	TArray< class UCameraModifier* >                   ModifierList;                                     		// 0x049C (0x000C) [0x0000000000000000]              
	float                                              FreeCamDistance;                                  		// 0x04A8 (0x0004) [0x0000000000000000]              
	struct FVector                                     FreeCamOffset;                                    		// 0x04AC (0x000C) [0x0000000000000000]              
	float                                              fTargetIFOV;                                      		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTargetIFOVPerSec;                                		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fAdjustCamDist;                                   		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fAdjustCamDistPerSec;                             		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentAdjustCamDist;                            		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 288 ];

		return pClassPointer;
	};

	void eventStartCameraMove ( float Duration, float Pct, struct FRawDistributionVector* newRotAdjust, struct FRawDistributionVector* newLocAdjust, struct FRawDistributionFloat* newFovAdjust );
	void eventStartCameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency, unsigned long bRotRandom, unsigned long bLocRandom, unsigned long bFOVRandom );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool AllowPawnRotation ( );
	void eventApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void CheckViewTarget ( struct FTViewTarget* VT );
	void FillCameraCache ( struct FTPOV* NewPOV );
	struct FTPOV BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B );
	void eventUpdateCamera ( float DeltaTime );
	void SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime );
	void GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot );
	void eventeventSetFOV ( float NewFOV );
	void SetFOV ( float NewFOV );
	float GetFOVAngle ( );
	void SetFovInterpolation ( float fNewFOV, float fInterpolPerSec, float fNewAddDistance, unsigned long bJustChangeAddDist );
	void InitializeFor ( class APlayerController* PC );
};

//UClass* ACamera::pClassPointer = NULL;

// Class Engine.AnimatedCamera
// 0x0045 (0x0511 - 0x04CC)
class AAnimatedCamera : public ACamera
{
public:
	class UCameraAnimInst*                             AnimInstPool[ 0x8 ];                              		// 0x04CC (0x0020) [0x0000000000000000]              
	TArray< class UCameraAnimInst* >                   ActiveAnims;                                      		// 0x04EC (0x000C) [0x0000000000000000]              
	TArray< class UCameraAnimInst* >                   FreeAnims;                                        		// 0x04F8 (0x000C) [0x0000000000000000]              
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicCameraActor*                         AccumulatorCameraActor;                           		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPlayingAnim : 1;                                 		// 0x050C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      PostAnimSetting;                                  		// 0x0510 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 290 ];

		return pClassPointer;
	};

	void StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate );
	void StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate );
	class UCameraAnimInst* PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void ApplyCameraModifiersNative ( float DeltaTime, struct FTPOV* OutPOV );
	void eventApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	bool IsPlayingAnim ( );
};

//UClass* AAnimatedCamera::pClassPointer = NULL;

// Class Engine.AntiAliasingEffect
// 0x0007 (0x0068 - 0x0061)
class UAntiAliasingEffect : public UPostProcessEffect
{
public:
	float                                              EdgeDetectionThreshold;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 292 ];

		return pClassPointer;
	};

};

//UClass* UAntiAliasingEffect::pClassPointer = NULL;

// Class Engine.PrimitiveComponent
// 0x01BA (0x0210 - 0x0056)
class UPrimitiveComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x0058 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                DetachFence;                                      		// 0x005C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LocalToWorldDeterminant;                          		// 0x0060 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0064 (0x000C) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x0070 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MotionBlurInfoIndex;                              		// 0x00B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          DecalList;                                        		// 0x00B4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                Tag;                                              		// 0x00C0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPrimitiveComponent*                         ShadowParent;                                     		// 0x00C4 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x00C8 (0x0004) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	struct FBoxSphereBounds                            Bounds;                                           		// 0x00CC (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x00E8 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	unsigned long                                      bCullDistanceUseOrigin : 1;                       		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CullDistance;                                     		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CachedCullDistance;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EnableBeginWorldTime;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EnableEndWorldTime;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DepthPriorityGroup;                               		// 0x0100 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ViewOwnerDepthPriorityGroup;                      		// 0x0101 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      DetailMode;                                       		// 0x0102 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MotionBlurScale;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x0108 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x0108 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      HiddenGameFlag;                                   		// 0x010C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0110 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0110 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0110 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0110 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x0110 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x0110 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x0110 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSelectable : 1;                                  		// 0x0110 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceMipStreaming : 1;                           		// 0x0110 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDecals : 1;                               		// 0x0110 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                 		// 0x0110 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bAcceptsStaticDecals : 1;                         		// 0x0110 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicDecals : 1;                        		// 0x0110 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDecalsForNoCollision : 1;                 		// 0x0110 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceDecalLighting : 1;                          		// 0x0110 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsRefreshingDecals : 1;                          		// 0x0110 (0x0004) [0x0000000000003002] [0x00008000] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bAcceptsFoliage : 1;                              		// 0x0110 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	int                                                TranslucencySortPriority;                         		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0118 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0118 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0118 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x011C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x0124 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetDynamicShadowDistance : 1;                    		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DynamicShadowDistance;                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPrebSetDynamicShadowDistance : 1;                		// 0x012C (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )
	unsigned long                                      bNotUseFrustomShadowCull : 1;                     		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;              		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCullModulatedShadowOnEmissive : 1;               		// 0x012C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowAmbientOcclusion : 1;                       		// 0x012C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOutLineBloomEnable : 1;                          		// 0x012C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	struct FColor                                      OutLineBloomColor;                                		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutLineBloomAlpha;                                		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineBloomHeightByScale;                        		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutLineBloomScale;                                		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CollideActors : 1;                                		// 0x0140 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      CollideFX : 1;                                    		// 0x0140 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      CollideForMeshSlantControl : 1;                   		// 0x0140 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x0140 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0140 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0140 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0140 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0140 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      RigidBodyIgnorePawns : 1;                         		// 0x0140 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x0144 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer RBCollideWithChannels;                            		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x014C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipRBGeomCreation : 1;                          		// 0x014C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x014C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidDrain : 1;                                  		// 0x014C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x014C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x014C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x014C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x014C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x014C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x014C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x014C (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x014C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x014C (0x0004) [0x0000000000003002] [0x00001000] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      OctreeNodes;                                      		// 0x0150 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0160 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      RBDominanceGroup;                                 		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0xB ];                             		// 0x0165 (0x000B) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0170 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Translation;                                      		// 0x01B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x01BC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Scale;                                            		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale3D;                                          		// 0x01CC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AutoScale;                                        		// 0x01D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x01E4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x01E4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteScale : 1;                                		// 0x01E4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned char                                      FadingState;                                      		// 0x01E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadingValue;                                      		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoFading : 1;                                  		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              FadingLastTime;                                   		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fAddAmbBrightness;                                		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSubmitTime;                                   		// 0x01FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScriptRigidBodyCollisionThreshold;                		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                UIRenderId;                                       		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixedCullDistance;                                		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 294 ];

		return pClassPointer;
	};

	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void SetOutlineBloom ( unsigned long bOutLineFlag, struct FColor InColor, int InAlpha );
	void SetFadingAlpha ( float fAlpha );
	void SetFadingState ( int iType );
	void SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale );
	void SetScale3D ( struct FVector NewScale3D );
	void SetScale ( float NewScale );
	void SetRotation ( struct FRotator NewRotation );
	void SetTranslation ( struct FVector NewTranslation );
	void SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision );
	void SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent );
	void SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels );
	void SetCullDistance ( float NewCullDistance );
	void SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment );
	void SetShadowParent ( class UPrimitiveComponent* NewShadowParent );
	void SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetOwnerNoSee ( unsigned long bNewOwnerNoSee );
	void SetHidden ( unsigned long NewHidden );
	void SetRBDominanceGroup ( unsigned char InDomGroup );
	class URB_BodyInstance* GetRootBodyInstance ( );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void InitRBPhys ( );
	void SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision );
	void SetRBChannel ( unsigned char Channel );
	void SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	bool RigidBodyIsAwake ( struct FName BoneName );
	void PutRigidBodyToSleep ( struct FName BoneName );
	void WakeRigidBody ( struct FName BoneName );
	void SetRBRotation ( struct FRotator NewRot, struct FName BoneName );
	void SetRBPosition ( struct FVector NewPos, struct FName BoneName );
	void SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent );
	void SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent );
	void AddTorque ( struct FVector Torque, struct FName BoneName );
	void AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff );
	void AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange );
};

//UClass* UPrimitiveComponent::pClassPointer = NULL;

// Class Engine.ArrowComponent
// 0x000C (0x021C - 0x0210)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTreatAsASprite : 1;                              		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 296 ];

		return pClassPointer;
	};

};

//UClass* UArrowComponent::pClassPointer = NULL;

// Class Engine.AudioComponent
// 0x01CE (0x0224 - 0x0056)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  CueFirstNode;                                     		// 0x005C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FAudioComponentParam >              InstanceParameters;                               		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x006C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x006C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasPlaying : 1;                                  		// 0x006C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x006C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFinished : 1;                                    		// 0x006C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPreviewComponent : 1;                            		// 0x006C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x006C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bApplyEffects : 1;                                		// 0x006C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	float                                              WavePriority;                                     		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsUISound : 1;                                   		// 0x0074 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsMusic : 1;                                     		// 0x0074 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNoReverb : 1;                                    		// 0x0074 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBleedStereo : 1;                                 		// 0x0074 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	TArray< struct FPointer >                          WaveInstances;                                    		// 0x0078 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            SoundNodeData;                                    		// 0x0084 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0090 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x00CC (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Listener;                                         		// 0x0108 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              PlaybackTime;                                     		// 0x010C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class APortalVolume*                               PortalVolume;                                     		// 0x0110 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     Location;                                         		// 0x0114 (0x000C) [0x0000000000001000]              ( CPF_Native )
	struct FVector                                     ComponentLocation;                                		// 0x0120 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SubtitlePriority;                                 		// 0x012C (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              FadeInStartTime;                                  		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              FadeInStopTime;                                   		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              FadeInTargetVolume;                               		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStartTime;                                 		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              FadeOutStopTime;                                  		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              FadeOutTargetVolume;                              		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStartTime;                            		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStopTime;                             		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeTargetVolume;                         		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x0154 (0x0004) [0x0000000000000000]              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x0158 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentLocation;                                  		// 0x015C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolume;                                    		// 0x0168 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitch;                                     		// 0x016C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGain;                         		// 0x0170 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSpatialization;                         		// 0x0174 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSeamlessLooping;                        		// 0x0178 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolumeMultiplier;                          		// 0x017C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitchMultiplier;                           		// 0x0180 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x0184 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceRadioVolume;                          		// 0x0188 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              VolumeMultiplier;                                 		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayedStopTime;                                  		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              DelayedFadeTime;                                  		// 0x0198 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDelayedStopOn : 1;                               		// 0x019C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseFadeInForDelay : 1;                           		// 0x019C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              OcclusionCheckInterval;                           		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              LastOcclusionCheckTime;                           		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x01A8 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	unsigned long                                      bPrioritySoundOutput : 1;                         		// 0x01AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUseFixedSoundPosition : 1;                       		// 0x01AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              SpatializedSoundLastTickTime;                     		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDoNotFreeToPool : 1;                             		// 0x01B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIgnoreAsyncLoadWhenPlayed : 1;                   		// 0x01B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              AttenuationScale;                                 		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentAttenuationScale;                          		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     LastUpdateTime;                                   		// 0x01C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              SourceInteriorVolume;                             		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SourceInteriorLPF;                                		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInteriorVolume;                            		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInteriorLPF;                               		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHighFrequencyGainMultiplier;               		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastLocation;                                     		// 0x01DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FInteriorSettings                           LastInteriorSettings;                             		// 0x01E8 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastReverbVolumeIndex;                            		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsSignificantAudioComponent : 1;                 		// 0x0210 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSkipCulling : 1;                                 		// 0x0210 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIgnoreReplay : 1;                                		// 0x0210 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              PriorityDistance;                                 		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x0218 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 298 ];

		return pClassPointer;
	};

	void eventOcclusionChanged ( unsigned long bNowOccluded );
	void OnAudioFinished ( class UAudioComponent* AC );
	void ResetToDefaults ( );
	void SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave );
	void SetFloatParameter ( struct FName InName, float InFloat );
	void AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel );
	void FadeOut ( float FadeOutDuration, float FadeVolumeLevel );
	void FadeIn ( float FadeInDuration, float FadeVolumeLevel );
	bool IsPlaying ( );
	void Stop ( );
	void Play ( );
};

//UClass* UAudioComponent::pClassPointer = NULL;

// Class Engine.NavigationPoint
// 0x00EC (0x02FC - 0x0210)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                    		// 0x0210 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x0210 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x0210 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanReach : 1;                                    		// 0x0210 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlocked : 1;                                     		// 0x0210 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOneWayPath : 1;                                  		// 0x0210 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x0210 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x0210 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bSpecialMove : 1;                                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x0210 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNotBased : 1;                                    		// 0x0210 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bPathsChanged : 1;                                		// 0x0210 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDestinationOnly : 1;                             		// 0x0210 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bSourceOnly : 1;                                  		// 0x0210 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x0210 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x0210 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x0210 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x0210 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x0210 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bVehicleDestination : 1;                          		// 0x0210 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x0210 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x0210 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x0210 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x0210 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bCrowdPath : 1;                                   		// 0x0210 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x0210 (0x0004) [0x0000000000000002] [0x40000000] ( CPF_Const )
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x0214 (0x0034) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UReachSpec* >                        PathList;                                         		// 0x0248 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FActorReference >                   EditorProscribedPaths;                            		// 0x0254 (0x000C) [0x0000000000000000]              
	TArray< struct FActorReference >                   EditorForcedPaths;                                		// 0x0260 (0x000C) [0x0000000000000000]              
	TArray< struct FActorReference >                   Volumes;                                          		// 0x026C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AVolume* >                           VolumeList;                                       		// 0x0278 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                visitedWeight;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                bestPathWeight;                                   		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextOrdered;                                      		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            prevOrdered;                                      		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            previousPath;                                     		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Cost;                                             		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                ExtraCost;                                        		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransientCost;                                    		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FearCost;                                         		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugNavCost >                     CostArray;                                        		// 0x02AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ADroppedPickup*                              InventoryCache;                                   		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              InventoryDist;                                    		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              LastDetourWeight;                                 		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x02C4 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class AObjective*                                  NearestObjective;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              ObjectiveDistance;                                		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FCylinder                                   MaxPathSize;                                      		// 0x02D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FGuid                                       NavGuid;                                          		// 0x02D8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpriteComponent*                            GoodSprite;                                       		// 0x02E8 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class USpriteComponent*                            BadSprite;                                        		// 0x02EC (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	int                                                NetworkID;                                        		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class APawn*                                       AnchoredPawn;                                     		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnchoredPawnTime;                             		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 300 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

//UClass* ANavigationPoint::pClassPointer = NULL;

// Class Engine.Ladder
// 0x0008 (0x0304 - 0x02FC)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                         		// 0x02FC (0x0004) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x0300 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 302 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
};

//UClass* ALadder::pClassPointer = NULL;

// Class Engine.AutoLadder
// 0x0000 (0x0304 - 0x0304)
class AAutoLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 304 ];

		return pClassPointer;
	};

};

//UClass* AAutoLadder::pClassPointer = NULL;

// Class Engine.BlockingVolume
// 0x0004 (0x025C - 0x0258)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bClampFluid : 1;                                  		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockComplexCollision : 1;                       		// 0x0258 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseCellExport : 1;                               		// 0x0258 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseUpperBlocking : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlockFreecamPawn : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 306 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* ABlockingVolume::pClassPointer = NULL;

// Class Engine.BlockingVolumeResourceCheck
// 0x001C (0x0274 - 0x0258)
class ABlockingVolumeResourceCheck : public AVolume
{
public:
	TArray< struct FString >                           ResourceCheckName;                                		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Enable : 1;                                       		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CollisionCheck : 1;                               		// 0x0264 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FString                                     Description;                                      		// 0x0268 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 308 ];

		return pClassPointer;
	};

};

//UClass* ABlockingVolumeResourceCheck::pClassPointer = NULL;

// Class Engine.BloomEffect
// 0x0000 (0x0061 - 0x0061)
class UBloomEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 310 ];

		return pClassPointer;
	};

};

//UClass* UBloomEffect::pClassPointer = NULL;

// Class Engine.BookMark
// 0x0018 (0x0054 - 0x003C)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                         		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 312 ];

		return pClassPointer;
	};

};

//UClass* UBookMark::pClassPointer = NULL;

// Class Engine.BossVolume
// 0x001C (0x0274 - 0x0258)
class ABossVolume : public AVolume
{
public:
	struct FString                                     AreaVolumeName;                                   		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     BossVolumeDescription;                            		// 0x0268 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 314 ];

		return pClassPointer;
	};

};

//UClass* ABossVolume::pClassPointer = NULL;

// Class Engine.BrushComponent
// 0x0050 (0x0260 - 0x0210)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x0214 (0x0034) [0x0000000000000000]              
	struct FPointer                                    BrushPhysDesc;                                    		// 0x0248 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x024C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                CachedPhysBrushDataVersion;                       		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bBlockComplexCollisionTrace : 1;                  		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 316 ];

		return pClassPointer;
	};

};

//UClass* UBrushComponent::pClassPointer = NULL;

// Class Engine.CameraActor
// 0x0174 (0x0384 - 0x0210)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseMatineeAxisLocation : 1;                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSetSourceLocation : 1;                           		// 0x0210 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bTravelCamera : 1;                                		// 0x0210 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              AspectRatio;                                      		// 0x0214 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              FOVAngle;                                         		// 0x0218 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x021C (0x0134) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessParameter*                       CamPostParameterObject;                           		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MatineeAxisLocation;                              		// 0x0354 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SourceLocation;                                   		// 0x0360 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x036C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x0370 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< struct FSoundGroupVolumeCtrl >             SoundGroupVolControls;                            		// 0x0374 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TravelCameraID;                                   		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 318 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventGetCameraView ( float DeltaTime, struct FTPOV* OutPOV );
};

//UClass* ACameraActor::pClassPointer = NULL;

// Class Engine.CameraAnim
// 0x0041 (0x007D - 0x003C)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              AnimLength;                                       		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBox                                        BoundingBox;                                      		// 0x0044 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     InitialLocation;                                  		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    InitialRotation;                                  		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseForcedInitialLocationAndRotation : 1;         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      PostAnimSetting;                                  		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 320 ];

		return pClassPointer;
	};

};

//UClass* UCameraAnim::pClassPointer = NULL;

// Class Engine.CameraAnimInst
// 0x0059 (0x0095 - 0x003C)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x0040 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              CurTime;                                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x0048 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x0048 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBlendingIn : 1;                                  		// 0x0048 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0048 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUseIntialLocationAndRotation : 1;                		// 0x0048 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              CurBlendInTime;                                   		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurBlendOutTime;                                  		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              BasePlayScale;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              TransientScaleModifier;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendWeight;                               		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              RemainingTime;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x007C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0088 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PostAnimSetting;                                  		// 0x0094 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 322 ];

		return pClassPointer;
	};

	void ApplyTransientScaling ( float Scalar );
	void Stop ( unsigned long bImmediate );
	void AdvanceAnim ( float DeltaTime, unsigned long bJump );
	void Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration );
	void SetInitialLocationAndRotation ( unsigned long bUseInitial, unsigned char _PostAnimSetting, struct FVector InitialLoc, struct FRotator InitialRot );
	void Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration );
};

//UClass* UCameraAnimInst::pClassPointer = NULL;

// Class Engine.CameraConeComponent
// 0x0000 (0x0210 - 0x0210)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 324 ];

		return pClassPointer;
	};

};

//UClass* UCameraConeComponent::pClassPointer = NULL;

// Class Engine.CameraMode
// 0x0000 (0x003C - 0x003C)
class UCameraMode : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 326 ];

		return pClassPointer;
	};

	bool AllowPawnRotation ( );
	void ProcessViewRotation ( float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
};

//UClass* UCameraMode::pClassPointer = NULL;

// Class Engine.CameraModifier
// 0x0008 (0x0044 - 0x003C)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebug : 1;                                       		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class ACamera*                                     CameraOwner;                                      		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 328 ];

		return pClassPointer;
	};

	bool ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ToggleModifier ( );
	void EnableModifier ( );
	void DisableModifier ( );
	bool IsDisabled ( );
	bool RemoveCameraModifier ( class ACamera* Camera );
	bool AddCameraModifier ( class ACamera* Camera );
	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void Init ( );
};

//UClass* UCameraModifier::pClassPointer = NULL;

// Class Engine.PostProcessVolume
// 0x02C0 (0x0518 - 0x0258)
class APostProcessVolume : public AVolume
{
public:
	int                                                VolumeID;                                         		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        Settings;                                         		// 0x0260 (0x0134) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessParameter*                       ParameterObject;                                  		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseFixedTime : 1;                                		// 0x0398 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAreaVolume : 1;                               		// 0x0398 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0398 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnablePlayerMove : 1;                            		// 0x0398 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableSkeletalMeshRotation : 1;                  		// 0x0398 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableDuplicateSkeletalMeshMaterial : 1;         		// 0x0398 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableWeatherLightning : 1;                      		// 0x0398 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDisableSprintGroundEffect : 1;                   		// 0x0398 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      ReverseSunDir : 1;                                		// 0x0398 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	float                                              FixedTime;                                        		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSkyDomeInfo                                SkyDome[ 0x3 ];                                   		// 0x03A0 (0x00A8) [0x0000000000000001]              ( CPF_Edit )
	struct FLightFuncInfo                              LightFunc;                                        		// 0x0448 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomTimeInterpolSec;                            		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x045C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              WeatherBlendTime;                                 		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeatherDensity;                                   		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeatherDensity2;                                  		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeatherDensity3;                                  		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraSplashDensity;                              		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleDistance;                                 		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleDistance2;                                		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleDistance3;                                		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraSplashParticleDistance;                     		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkeletalMeshDistance;                             		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkeletalMeshTranslucencySortPriority;             		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FWeatherLightning                           LightningInfo;                                    		// 0x048C (0x0044) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SkeletalMeshRotation;                             		// 0x04D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          SkeletalMeshMaterial;                             		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FWeatherParticle                            WeatherParticleSystem;                            		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FWeatherParticle                            WeatherParticleSystem2;                           		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FWeatherParticle                            WeatherParticleSystem3;                           		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FWeatherParticle                            WeatherCameraSplashParticleSystem;                		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InterpolationType;                                		// 0x04F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVolumeInfo                           InterpVolumeA;                                    		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVolumeInfo                           InterpVolumeB;                                    		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpRotation;                                   		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    InterpRotator;                                    		// 0x0504 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVolumeInfo                           InterpAreaVolumeA;                                		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVolumeInfo                           InterpAreaVolumeB;                                		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 330 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* APostProcessVolume::pClassPointer = NULL;

// Class Engine.CameraPostProcessVolume
// 0x0000 (0x0518 - 0x0518)
class ACameraPostProcessVolume : public APostProcessVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 332 ];

		return pClassPointer;
	};

};

//UClass* ACameraPostProcessVolume::pClassPointer = NULL;

// Class Engine.Canvas
// 0x0058 (0x0094 - 0x003C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              OrgX;                                             		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              OrgY;                                             		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ClipX;                                            		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ClipY;                                            		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              CurX;                                             		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              CurY;                                             		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              CurYL;                                            		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCenter : 1;                                      		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                SizeX;                                            		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    Canvas;                                           		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SceneView;                                        		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0074 (0x000C) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x0080 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 334 ];

		return pClassPointer;
	};

	void DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL );
	void DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL );
	void Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor );
	void DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void DrawBox ( float Width, float Height );
	void DrawRect ( float RectX, float RectY, class UTexture* Tex );
	void DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale );
	void DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale );
	struct FCanvasIcon MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL );
	void DrawTexture ( class UTexture* Tex, float Scale );
	void SetClip ( float X, float Y );
	void SetOrigin ( float X, float Y );
	void SetPos ( float PosX, float PosY );
	void eventReset ( unsigned long bKeepOrigin );
	void DrawColorizedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor );
	void DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor );
	void PopTransform ( );
	void PushTranslationMatrix ( struct FVector TranslationVector );
	struct FVector Project ( struct FVector Location );
	void DrawTileClipped ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL );
	void DrawTextRA ( struct FString Text, unsigned long CR );
	void DrawTextClipped ( struct FString Text, unsigned long bCheckHotKey, float XScale, float YScale );
	void DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale );
	void TextSize ( struct FString String, float* XL, float* YL );
	void StrLen ( struct FString String, float* XL, float* YL );
	void DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL );
};

//UClass* UCanvas::pClassPointer = NULL;

// Class Engine.CeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 336 ];

		return pClassPointer;
	};

};

//UClass* UCeilingReachSpec::pClassPointer = NULL;

// Class Engine.Download
// 0x0A34 (0x0A70 - 0x003C)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xA34 ];                           		// 0x003C (0x0A34) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 338 ];

		return pClassPointer;
	};

};

//UClass* UDownload::pClassPointer = NULL;

// Class Engine.ChannelDownload
// 0x0004 (0x0A74 - 0x0A70)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0A70 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 340 ];

		return pClassPointer;
	};

};

//UClass* UChannelDownload::pClassPointer = NULL;

// Class Engine.Controller
// 0x0188 (0x0398 - 0x0210)
class AController : public AActor
{
public:
	class APawn*                                       Pawn;                                             		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0214 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PlayerNum;                                        		// 0x0218 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 NextController;                                   		// 0x021C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsPlayer : 1;                                    		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bGodMode : 1;                                     		// 0x0220 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAffectedByHitEffects : 1;                        		// 0x0220 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSoaking : 1;                                     		// 0x0220 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x0220 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x0220 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNotifyPostLanded : 1;                            		// 0x0220 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x0220 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x0220 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x0220 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x0220 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x0220 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x0220 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bUsePlayerHearing : 1;                            		// 0x0220 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bNotifyFallingHitWall : 1;                        		// 0x0220 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceDesiredRotation : 1;                        		// 0x0220 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0220 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x0220 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x0220 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned char                                      bFire;                                            		// 0x0224 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              MinHitWall;                                       		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              MoveTimer;                                        		// 0x022C (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveTarget;                                       		// 0x0230 (0x0004) [0x0000000000000000]              
	struct FBasedPosition                              DestinationPosition;                              		// 0x0234 (0x0034) [0x0000000000000000]              
	struct FBasedPosition                              FocalPosition;                                    		// 0x0268 (0x0034) [0x0000000000000000]              
	class AActor*                                      Focus;                                            		// 0x029C (0x0004) [0x0000000000000000]              
	class AActor*                                      GoalList[ 0x4 ];                                  		// 0x02A0 (0x0010) [0x0000000000000000]              
	struct FBasedPosition                              AdjustPosition;                                   		// 0x02B0 (0x0034) [0x0000000000000000]              
	class ANavigationPoint*                            StartSpot;                                        		// 0x02E4 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  RouteCache;                                       		// 0x02E8 (0x000C) [0x0000000000000000]              
	class UReachSpec*                                  CurrentPath;                                      		// 0x02F4 (0x0004) [0x0000000000000000]              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x02F8 (0x0004) [0x0000000000000000]              
	struct FVector                                     CurrentPathDir;                                   		// 0x02FC (0x000C) [0x0000000000000000]              
	class AActor*                                      RouteGoal;                                        		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              RouteDist;                                        		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              LastRouteFind;                                    		// 0x0310 (0x0004) [0x0000000000000000]              
	class AInterpActor*                                PendingMover;                                     		// 0x0314 (0x0004) [0x0000000000000000]              
	class AActor*                                      FailedMoveTarget;                                 		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                MoveFailureCount;                                 		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              GroundPitchTime;                                  		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FVector                                     ViewX;                                            		// 0x0324 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewY;                                            		// 0x0330 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewZ;                                            		// 0x033C (0x000C) [0x0000000000000000]              
	class APawn*                                       ShotTarget;                                       		// 0x0348 (0x0004) [0x0000000000000000]              
	class AActor*                                      LastFailedReach;                                  		// 0x034C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FailedReachTime;                                  		// 0x0350 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FailedReachLocation;                              		// 0x0354 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SightCounter;                                     		// 0x0360 (0x0004) [0x0000000000000000]              
	float                                              SightCounterInterval;                             		// 0x0364 (0x0004) [0x0000000000000000]              
	float                                              RespawnPredictionTime;                            		// 0x0368 (0x0004) [0x0000000000000000]              
	float                                              InUseNodeCostMultiplier;                          		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                HighJumpNodeCostModifier;                         		// 0x0370 (0x0004) [0x0000000000000000]              
	class APawn*                                       Enemy;                                            		// 0x0374 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0378 (0x0004) [0x0000000000000000]              
	TArray< struct FVisiblePortalInfo >                VisiblePortals;                                   		// 0x037C (0x000C) [0x0000000000000000]              
	float                                              LaneOffset;                                       		// 0x0388 (0x0004) [0x0000000000000000]              
	struct FRotator                                    OldBasedRotation;                                 		// 0x038C (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 342 ];

		return pClassPointer;
	};

	void ReadyForLift ( );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void eventCurrentLevelUnloaded ( );
	class AActor* GetRouteGoalAfter ( int RouteIdx );
	bool eventIsInCombat ( );
	bool eventIsSpectating ( );
	class AController* GetKillerController ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void NotifyAddInventory ( class AInventory* NewItem );
	void OnCauseDamage ( class USeqAct_CauseDamage* Action );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void eventNotifyCoverAdjusted ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnMakeNoise ( class USeqAct_MakeNoise* Action );
	bool IsDead ( );
	struct FString GetHumanReadableName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void StopLatentExecution ( );
	bool InLatentExecution ( int LatentActionNumber );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool LandingShake ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* Lift );
	bool eventMoverFinished ( );
	void WaitForMover ( class AInterpActor* M );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	void eventMayFall ( );
	void EndClimbLadder ( );
	void eventLongFall ( );
	void WaitForLanding ( float waitDuration );
	bool PickWallAdjust ( struct FVector HitNormal );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool ActorReachable ( class AActor* anActor );
	bool PointReachable ( struct FVector aPoint );
	class AActor* FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class ANavigationPoint* FindRandomDest ( );
	class AActor* FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial );
	void FinishRotation ( );
	void eventSetupSpecialPathAbilities ( );
	void MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk );
	void MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, unsigned long bShouldWalk );
	void eventEnemyNotVisible ( );
	void eventSeeMonster ( class APawn* Seen );
	void eventSeePlayer ( class APawn* Seen );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	class APawn* PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist );
	bool CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation );
	bool CanSee ( class APawn* Other );
	bool LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc );
	void WarnProjExplode ( class AProjectile* Proj );
	void NotifyProjLanded ( class AProjectile* Proj );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void SetCharacter ( struct FString inCharacter );
	void ServerGivePawn ( );
	void ServerRestartPlayer ( );
	unsigned char GetTeamNum ( );
	void InitPlayerReplicationInfo ( );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void EnemyJustTeleported ( );
	bool BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint );
	void Restart ( unsigned long bVehicleTransition );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void eventNotifyPostLanded ( );
	bool GamePlayEndedState ( );
	void PawnDied ( class APawn* inPawn );
	void eventUnPossess ( );
	void UpdateSex ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnPossess ( class USeqAct_Possess* inAction );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void Reset ( );
	void eventPostBeginPlay ( );
	struct FVector GetAdjustLocation ( );
	void SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase );
	struct FVector GetDestinationPosition ( );
	void SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase );
	struct FVector GetFocalPoint ( );
	void SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, struct FBasedPosition* BP );
	void RouteCache_RemoveIndex ( int InIndex, int Count );
	void RouteCache_RemoveItem ( class ANavigationPoint* Nav );
	void RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx );
	void RouteCache_AddItem ( class ANavigationPoint* Nav );
	void RouteCache_Empty ( );
	bool IsLocalPlayerController ( );
};

//UClass* AController::pClassPointer = NULL;

// Class Engine.PlayerController
// 0x0200 (0x0598 - 0x0398)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x0398 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACamera*                                     PlayerCamera;                                     		// 0x039C (0x0004) [0x0000000000000000]              
	class UClass*                                      CameraClass;                                      		// 0x03A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UClass*                                      DebugCameraControllerClass;                       		// 0x03A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFrozen : 1;                                      		// 0x03AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x03AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x03AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x03AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x03AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x03AC (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bCheatFlying : 1;                                 		// 0x03AC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x03AC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNoTextToSpeechVoiceMessages : 1;                 		// 0x03AC (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bTextToSpeechTeamMessagesOnly : 1;                		// 0x03AC (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bPendingDestroy : 1;                              		// 0x03AC (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bWasSaturated : 1;                                		// 0x03AC (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bDynamicNetSpeed : 1;                             		// 0x03AC (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bAimingHelp : 1;                                  		// 0x03AC (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                  		// 0x03AC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x03AC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x03AC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x03AC (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x03AC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x03AC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x03AC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x03AC (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x03AC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x03AC (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x03AC (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bReceivedUniqueId : 1;                            		// 0x03AC (0x0004) [0x0000000000000000] [0x02000000] 
	float                                              MaxResponseTime;                                  		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              WaitDelay;                                        		// 0x03B4 (0x0004) [0x0000000000000000]              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x03B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      DoubleClickDir;                                   		// 0x03BC (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x03BD (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreLookInput;                                 		// 0x03BE (0x0001) [0x0000000000000000]              
	unsigned char                                      bBlockZoom;                                       		// 0x03BF (0x0001) [0x0000000000000000]              
	unsigned char                                      bRun;                                             		// 0x03C0 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDuck;                                            		// 0x03C1 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      NetPlayerIndex;                                   		// 0x03C2 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      ViewTarget;                                       		// 0x03C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x03C8 (0x0004) [0x0000000000000000]              
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                          		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVAngle;                                         		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              DesiredFOV;                                       		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              LODDistanceFactor;                                		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    TargetViewRotation;                               		// 0x03E0 (0x000C) [0x0000000000000000]              
	float                                              TargetEyeHeight;                                  		// 0x03EC (0x0004) [0x0000000000000000]              
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x03F0 (0x000C) [0x0000000000000000]              
	class AHUD*                                        myHUD;                                            		// 0x03FC (0x0004) [0x0000000000000000]              
	class UClass*                                      SavedMoveClass;                                   		// 0x0400 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  SavedMoves;                                       		// 0x0404 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  FreeMoves;                                        		// 0x0408 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  PendingMove;                                      		// 0x040C (0x0004) [0x0000000000000000]              
	struct FVector                                     LastAckedAccel;                                   		// 0x0410 (0x000C) [0x0000000000000000]              
	float                                              CurrentTimeStamp;                                 		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              ServerTimeStamp;                                  		// 0x0424 (0x0004) [0x0000000000000000]              
	float                                              TimeMargin;                                       		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              ClientUpdateTime;                                 		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              MaxTimeMargin;                                    		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              LastActiveTime;                                   		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                ClientCap;                                        		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              DynamicPingThreshold;                             		// 0x043C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastPingUpdate;                                   		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              OldPing;                                          		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              LastSpeedHackLog;                                 		// 0x0448 (0x0004) [0x0000000000000000]              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x044C (0x0034) [0x0000000000000000]              
	struct FString                                     ProgressMessage[ 0x2 ];                           		// 0x0480 (0x0018) [0x0000000000000000]              
	float                                              ProgressTimeOut;                                  		// 0x0498 (0x0004) [0x0000000000000000]              
	struct FString                                     QuickSaveString;                                  		// 0x049C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NoPauseMessage;                                   		// 0x04A8 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     ViewingFrom;                                      		// 0x04B4 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     OwnCamera;                                        		// 0x04C0 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	int                                                GroundPitch;                                      		// 0x04CC (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFloor;                                         		// 0x04D0 (0x000C) [0x0000000000000000]              
	class UCheatManager*                               CheatManager;                                     		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CheatClass;                                       		// 0x04E0 (0x0004) [0x0000000000000000]              
	class UPlayerInput*                                PlayerInput;                                      		// 0x04E4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UClass*                                      InputClass;                                       		// 0x04E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     FailedPathStart;                                  		// 0x04EC (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x04F8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x04FC (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UInteraction* >                      Interactions;                                     		// 0x050C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUniqueNetId >                      VoicePacketFilter;                                		// 0x0518 (0x000C) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              InteractDistance;                                 		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FInputMatchRequest >                InputRequests;                                    		// 0x052C (0x000C) [0x0000000000000000]              
	TArray< struct FName >                             PendingMapChangeLevelNames;                       		// 0x0538 (0x000C) [0x0000000000000000]              
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x0544 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugTextInfo >                    DebugTextList;                                    		// 0x0548 (0x000C) [0x0000000000000000]              
	float                                              SpectatorCameraSpeed;                             		// 0x0554 (0x0004) [0x0000000000000000]              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x0558 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinRespawnDelay;                                  		// 0x055C (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentHearSounds;                          		// 0x0560 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UAudioComponent* >                   HearSoundActiveComponents;                        		// 0x0564 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UAudioComponent* >                   HearSoundPoolComponents;                          		// 0x0570 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class AActor* >                            HiddenActors;                                     		// 0x057C (0x000C) [0x0000000000000000]              
	float                                              LastSpectatorStateSynchTime;                      		// 0x0588 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x058C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 344 ];

		return pClassPointer;
	};

	void Sentinel_PostAcquireTravelTheWorldPoints ( );
	void Sentinel_PreAcquireTravelTheWorldPoints ( );
	void Sentinel_SetupForGamebasedTravelTheWorld ( );
	bool eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue );
	struct FString GetGameModeURLString ( unsigned long bIsSessionHost );
	struct FString GetPartyModeURLString ( unsigned long bIsPartyLeader, unsigned long bReturningFromMatch );
	struct FString GetPartyGameTypeName ( );
	struct FString GetPartyMapName ( );
	bool IsPartyLeader ( class APlayerReplicationInfo* PartyLeaderPRI );
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex ( int PlayerIndex );
	bool HasSplitscreenPlayer ( class APlayerReplicationInfo* PRI );
	bool IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex );
	void DelayedReturnToPartyLobby ( );
	void ClientReturnToParty ( );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void ShowSurvey ( struct FString QuestionId, struct FString Context );
	void ClientShowSurvey ( struct FString QuestionId, struct FString Context );
	void PathClear ( );
	void PathChild ( int Cnt );
	void PathStep ( int Cnt );
	void eventSoakPause ( class APawn* P );
	void IncrementNumberOfMatchesPlayed ( );
	bool CanViewUserCreatedContent ( );
	void ClientEndOnlineGame ( );
	void ClientStartOnlineGame ( );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void EnableDebugCamera ( );
	void eventRemoveDebugText ( class AActor* SrcActor );
	void eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck );
	void DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta );
	void SendToConsole ( struct FString Command );
	void ConsoleKey ( struct FName Key );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClientStartNetworkedVoice ( );
	void ClientStopNetworkedVoice ( );
	void ClientSetHostUniqueId ( struct FUniqueNetId InHostId );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass );
	void ClientWriteOnlinePlayerScores ( int LeaderboardId );
	void ClientArbitratedMatchEnded ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearInviteDelegates ( );
	bool CanAllPlayersPlayOnline ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	void OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings );
	void ServerRegisteredForArbitration ( unsigned long bWasSuccessful );
	void OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientRegisterForArbitration ( );
	void eventClientWasKicked ( );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	bool IsShowingSubtitles ( );
	void SetShowSubtitles ( unsigned long bValue );
	void eventNotifyDirectorControl ( unsigned long bNowControlling );
	void ClientVoiceHandshakeComplete ( );
	class APlayerController* GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId );
	void ClientSetOnlineStatus ( );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void SeamlessTravelTo ( class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	bool IsPlayerMuted ( struct FUniqueNetId* Sender );
	class UUIInteraction* GetUIController ( );
	void eventClientSetBlockOnAsyncLoading ( );
	void eventClientFlushLevelStreaming ( );
	void eventClientCommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent );
	void DelayedPrepareMapChange ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventClientForceGarbageCollection ( );
	void OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction );
	void ResetPlayerMovementInput ( );
	bool eventIsBlockZoom ( );
	void eventSetBlockZoom ( unsigned long bNewBlock );
	void BlockZoom ( unsigned long bNewBlock );
	bool eventIsLookInputIgnored ( );
	void eventSetIgnoreLookInput ( unsigned long bNewLookInput );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	bool eventIsMoveInputIgnored ( );
	void eventSetIgnoreMoveInput ( unsigned long bNewMoveInput );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action );
	void eventStopCinematicMode ( );
	void eventCameraMove ( float Duration, float Pct, struct FRawDistributionVector* newRotAdjust, struct FRawDistributionVector* newLocAdjust, struct FRawDistributionFloat* newFovAdjust );
	void eventCameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency, unsigned long bRotRandom, unsigned long bLocRandom, unsigned long bFOVRandom );
	void ClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void ClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void OnForceFeedback ( class USeqAct_ForceFeedback* Action );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ShowGameState ( );
	void ShowPlayerState ( );
	void ListCE ( );
	void ListConsoleEvents ( );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void ServerCauseEvent ( struct FName EventName );
	void OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DrawHUD ( class AHUD* H );
	bool CanRestartPlayer ( );
	void ServerSetSpectatorLocation ( struct FVector NewLoc );
	bool IsSpectating ( );
	void CheckJumpOrDuck ( );
	void ClearDoubleClick ( );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void UpdateRotation ( float DeltaTime );
	void ViewShake ( float DeltaTime );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSpawnPlayerCamera ( );
	void ServerVerifyViewTarget ( );
	class AActor* GetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	bool IsLocalPlayerController ( );
	float eventGetFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action );
	bool AimingHelp ( unsigned long bInstantHit );
	void PlayerMove ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientRestart ( class APawn* NewPawn );
	void EnterStartState ( );
	bool HasClientLoadedCurrentWorld ( );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void eventServerNotifyLoadedWorld ( struct FName WorldPackageName );
	void Restart ( unsigned long bVehicleTransition );
	void ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title );
	void SetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title );
	void ClientClearProgressMessages ( );
	void ClearProgressMessages ( );
	void SwitchLevel ( struct FString URL );
	void SetName ( struct FString S );
	void ServerSuicide ( );
	void Suicide ( );
	bool TriggerInteracted ( );
	bool PerformedUseAction ( );
	void ServerUse ( );
	void Use ( );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void UTrace ( );
	void ServerUTrace ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	void ShowMenu ( );
	bool IsPaused ( );
	void DebugPause ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	void LocalTravel ( struct FString URL );
	void RestartLevel ( );
	void ServerRestartGame ( );
	void HandleWalking ( );
	int CompressAccel ( int C );
	class USavedMove* GetFreeMove ( );
	void ClientUpdatePosition ( );
	void ClearAckedMoves ( );
	void ServerUpdatePing ( int NewPing );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	void UpdatePing ( float TimeStamp );
	void ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );
	void ClientAckGoodMove ( float TimeStamp );
	void ClientCapBandwidth ( int Cap );
	void ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	void ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump );
	void eventSendClientAdjustment ( );
	void ForceDeathUpdate ( );
	void ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageID );
	bool UsingFirstPersonCamera ( );
	void eventResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void ClientSetCameraMode ( struct FName NewCamMode );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ServerMutate ( struct FString MutateString );
	void Mutate ( struct FString MutateString );
	void FOV ( float F );
	void ResetFOV ( );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void eventDestroyed ( );
	void eventClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void PlayBeepSound ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI );
	void TeamTalk ( );
	void Talk ( );
	class USoundCue* CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI );
	bool AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI );
	bool CanCommunicate ( );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	class UAudioComponent* GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void HearSoundFinished ( class UAudioComponent* AC );
	void eventClientPlaySound ( class USoundCue* ASound );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void CleanupPRI ( );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void GivePawn ( class APawn* NewPawn );
	void AskForPawn ( );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	void SetControllerTiltDesiredIfAvailable ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	float GetRumbleScale ( );
	void SetRumbleScale ( float ScaleBy );
	void UnregisterStandardPlayerDataStores ( );
	void UnregisterPlayerDataStores ( );
	void RegisterStandardPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void ClientInitializeDataStores ( );
	void InitPartyLeaderId ( );
	void ServerSetUniquePlayerId ( struct FUniqueNetId UniqueId, unsigned long bWasInvited );
	void eventInitUniquePlayerId ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventInitInputSystem ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void CleanOutSavedMoves ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDefaultHUD ( );
	void EnableCheats ( );
	void AddCheats ( );
	void ResetTimeMargin ( );
	void eventPreRender ( class UCanvas* Canvas );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* SpawnCoverReplicator ( );
	bool CanUnpauseControllerConnected ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	bool CanUnpauseExternalUI ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void ForceClearUnpauseDelegates ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void CleanUpAudioComponents ( );
	int FindStairRotation ( float DeltaTime );
	bool CheckSpeedHack ( float DeltaTime );
	void eventServerProcessConvolve ( struct FString C, int H );
	void eventClientConvolve ( struct FString C, int H );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge );
	struct FString PasteFromClipboard ( );
	void CopyToClipboard ( struct FString Text );
	struct FString GetDefaultURL ( struct FString Option );
	void UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	struct FString GetServerNetworkAddress ( );
	struct FString GetPlayerNetworkAddress ( );
	void SetNetSpeed ( int NewSpeed );
	void ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
};

//UClass* APlayerController::pClassPointer = NULL;

// Class Engine.CheatManager
// 0x0000 (0x003C - 0x003C)
class UCheatManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 346 ];

		return pClassPointer;
	};

	void TestLevel ( );
	void ToggleDebugCamera ( );
	void StreamLevelOut ( struct FName PackageName );
	void OnlyLoadLevel ( struct FName PackageName );
	void StreamLevelIn ( struct FName PackageName );
	void SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible );
	void AllWeapons ( );
	void Loaded ( );
	void ViewClass ( class UClass* aClass );
	void ViewBot ( );
	void ViewFlag ( );
	void ViewActor ( struct FName ActorName );
	void ViewPlayer ( struct FString S );
	void ViewSelf ( unsigned long bQuiet );
	void RememberSpot ( );
	void DestroyFractures ( float Radius );
	void PlayersOnly ( );
	class AWeapon* GiveWeapon ( struct FString WeaponClassStr );
	void Summon ( struct FString ClassName );
	void Avatar ( struct FName ClassName );
	void KillPawns ( );
	void KillAllPawns ( class UClass* aClass );
	void KillAll ( class UClass* aClass );
	void SetSpeed ( float F );
	void SetGravity ( float F );
	void SetJumpZ ( float F );
	void SloMo ( float T );
	void AffectedByHitEffects ( );
	void God ( );
	void AllAmmo ( );
	void Ghost ( );
	void Walk ( );
	void Fly ( );
	void Amphibious ( );
	void EndPath ( );
	void ChangeSize ( float F );
	struct FRotator GetFRotatorFromString ( struct FString InStr );
	struct FVector GetFVectorFromString ( struct FString InStr );
	void BugIt ( struct FString ScreenShotDescription );
	void BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation );
	void BugItGoString ( struct FString TheLocation, struct FString TheRotation );
	void BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll );
	void Teleport ( );
	void KillViewedActor ( );
	void WriteToLog ( struct FString Param );
	void FreezeFrame ( float delay );
	void ListDynamicActors ( );
};

//UClass* UCheatManager::pClassPointer = NULL;

// Class Engine.Player
// 0x0024 (0x0060 - 0x003C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class APlayerController*                           Actor;                                            		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentNetSpeed;                                  		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConfiguredInternetSpeed;                          		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConfiguredLanSpeed;                               		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_DesaturationMultiplier;                        		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_HighlightsMultiplier;                          		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_MidTonesMultiplier;                            		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_ShadowsMultiplier;                             		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 348 ];

		return pClassPointer;
	};

	void SwitchController ( class APlayerController* PC );
};

//UClass* UPlayer::pClassPointer = NULL;

// Class Engine.NetConnection
// 0x4E00 (0x4E60 - 0x0060)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[ 0x4DC8 ];                          		// 0x0060 (0x4DC8) MISSED OFFSET
	TArray< class UChildConnection* >                  Children;                                         		// 0x4E28 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x2C ];                            		// 0x4E34 (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 350 ];

		return pClassPointer;
	};

};

//UClass* UNetConnection::pClassPointer = NULL;

// Class Engine.ChildConnection
// 0x0004 (0x4E64 - 0x4E60)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0x4E60 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 354 ];

		return pClassPointer;
	};

};

//UClass* UChildConnection::pClassPointer = NULL;

// Class Engine.Client
// 0x0014 (0x0050 - 0x003C)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisplayGamma;                                     		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialButtonRepeatDelay;                         		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonRepeatDelay;                                		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 357 ];

		return pClassPointer;
	};

};

//UClass* UClient::pClassPointer = NULL;

// Class Engine.Keypoint
// 0x0000 (0x0210 - 0x0210)
class AKeypoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 363 ];

		return pClassPointer;
	};

};

//UClass* AKeypoint::pClassPointer = NULL;

// Class Engine.ClipMarker
// 0x0000 (0x0210 - 0x0210)
class AClipMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 365 ];

		return pClassPointer;
	};

};

//UClass* AClipMarker::pClassPointer = NULL;

// Class Engine.ClipPadEntry
// 0x0018 (0x0054 - 0x003C)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Text;                                             		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 367 ];

		return pClassPointer;
	};

};

//UClass* UClipPadEntry::pClassPointer = NULL;

// Class Engine.Info
// 0x0000 (0x0210 - 0x0210)
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 369 ];

		return pClassPointer;
	};

};

//UClass* AInfo::pClassPointer = NULL;

// Class Engine.CloudInfo
// 0x0098 (0x02A8 - 0x0210)
class ACloudInfo : public AInfo
{
public:
	float                                              fElemMinSize;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fElemMaxSize;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocalPosLength;                                   		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                iElemNum;                                         		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iID;                                              		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MoveVector;                                       		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                iBlendMode;                                       		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCloudLayerSize;                                  		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAutoLayerSize : 1;                            		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseProximityFadeOut : 1;                         		// 0x0240 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      CloudIndependentColor : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      EnableTimeVisibility : 1;                         		// 0x0240 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreFognDistortion : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCloudIsImported : 1;                             		// 0x0240 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bUseFixedElementPosition : 1;                     		// 0x0240 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEnableGradation : 1;                             		// 0x0240 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	float                                              fCullBoxEpsilon;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  SampleTextureFourByFour;                          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CloudAmbient;                                     		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CloudShadow;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CloudLight;                                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VisibleStartTime;                                 		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VisibleEndTime;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementBoundaryRadius;                           		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           FixedElementPositions;                            		// 0x0264 (0x000C) [0x0000000000000000]              
	TArray< struct FFixedElementInfo >                 FixedElementInfos;                                		// 0x0270 (0x000C) [0x0000000000000000]              
	unsigned char                                      CloudTextureLayoutType;                           		// 0x027C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      TextureIndices;                                   		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudOpacity;                                     		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GradationDir;                                     		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      GradationStartColor;                              		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      GradationEndColor;                                		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CullDistanceByBound;                              		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 371 ];

		return pClassPointer;
	};

};

//UClass* ACloudInfo::pClassPointer = NULL;

// Class Engine.CodecMovie
// 0x0004 (0x0040 - 0x003C)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 373 ];

		return pClassPointer;
	};

};

//UClass* UCodecMovie::pClassPointer = NULL;

// Class Engine.CodecMovieBink
// 0x0020 (0x0060 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[ 0x20 ];                            		// 0x0040 (0x0020) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 375 ];

		return pClassPointer;
	};

};

//UClass* UCodecMovieBink::pClassPointer = NULL;

// Class Engine.CodecMovieFallback
// 0x0004 (0x0044 - 0x0040)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 377 ];

		return pClassPointer;
	};

};

//UClass* UCodecMovieFallback::pClassPointer = NULL;

// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x18 ];                            		// 0x0068 (0x0018) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 379 ];

		return pClassPointer;
	};

};

//UClass* UControlChannel::pClassPointer = NULL;

// Class Engine.CoverGroup
// 0x0014 (0x0224 - 0x0210)
class ACoverGroup : public AInfo
{
public:
	TArray< struct FActorReference >                   CoverLinkRefs;                                    		// 0x0210 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectRadius;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectHeight;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 381 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void ToggleGroup ( );
	void DisableGroup ( );
	void EnableGroup ( );
};

//UClass* ACoverGroup::pClassPointer = NULL;

// Class Engine.CoverLink
// 0x0075 (0x0371 - 0x02FC)
class ACoverLink : public ANavigationPoint
{
public:
	TArray< struct FCoverSlot >                        Slots;                                            		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APawn* >                             Claims;                                           		// 0x0308 (0x000C) [0x0000000000000000]              
	unsigned long                                      bDisabled : 1;                                    		// 0x0314 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x0314 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoSort : 1;                                    		// 0x0314 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x0314 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCircular : 1;                                    		// 0x0314 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLooped : 1;                                      		// 0x0314 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0314 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDynamicCover : 1;                                		// 0x0314 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x0314 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x0314 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDebug_DangerLinks : 1;                           		// 0x0314 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              InvalidateDistance;                               		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireLinkDist;                                  		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CircularOrigin;                                   		// 0x0320 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              CircularRadius;                                   		// 0x032C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x0330 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StandHeight;                                      		// 0x0334 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x0338 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StandingLeanOffset;                               		// 0x033C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x0348 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PopupOffset;                                      		// 0x0354 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SlipDist;                                         		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TurnDist;                                         		// 0x0364 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerScale;                                      		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACoverLink*                                  NextCoverLink;                                    		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      LocationDescription;                              		// 0x0370 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 383 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	unsigned char GetLocationDescription ( int SlotIdx );
	struct FString eventGetDebugString ( int SlotIdx );
	int AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate );
	bool GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverReference* out_Info );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsEnabled ( );
	bool AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans );
	void OnModifyCover ( class USeqAct_ModifyCover* Action );
	void eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable );
	void eventSetDisabled ( unsigned long bNewDisabled );
	void GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions );
	bool HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks );
	bool GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items );
	bool AllowLeftTransition ( int SlotIdx );
	bool AllowRightTransition ( int SlotIdx );
	bool IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx );
	bool IsStationarySlot ( int SlotIdx );
	bool IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool eventClaim ( class APawn* NewClaim, int SlotIdx );
	void eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid );
	bool IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale );
	class ACoverSlotMarker* GetSlotMarker ( int SlotIdx );
	struct FVector GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action );
	struct FRotator GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset );
	struct FVector GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset );
};

//UClass* ACoverLink::pClassPointer = NULL;

// Class Engine.ForcedReachSpec
// 0x000C (0x009C - 0x0090)
class UForcedReachSpec : public UReachSpec
{
public:
	TArray< struct FBakedVertex >                      BakedVertices;                                    		// 0x0090 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 385 ];

		return pClassPointer;
	};

};

//UClass* UForcedReachSpec::pClassPointer = NULL;

// Class Engine.CoverSlipReachSpec
// 0x0001 (0x009D - 0x009C)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 387 ];

		return pClassPointer;
	};

};

//UClass* UCoverSlipReachSpec::pClassPointer = NULL;

// Class Engine.CoverSlotMarker
// 0x000C (0x0308 - 0x02FC)
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x02FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreSizeLimits : 1;                            		// 0x0304 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 389 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	bool IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	void SetSlotEnabled ( unsigned long bEnable );
	struct FRotator GetSlotRotation ( );
	struct FVector GetSlotLocation ( );
	void eventPostBeginPlay ( );
};

//UClass* ACoverSlotMarker::pClassPointer = NULL;

// Class Engine.CrowdReplicationActor
// 0x000C (0x021C - 0x0210)
class ACrowdReplicationActor : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                          		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bSpawningActive : 1;                              		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	int                                                DestroyAllCount;                                  		// 0x0218 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 391 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* ACrowdReplicationActor::pClassPointer = NULL;

// Class Engine.CullDistanceVolume
// 0x0010 (0x0268 - 0x0258)
class ACullDistanceVolume : public AVolume
{
public:
	TArray< struct FCullDistanceSizePair >             CullDistances;                                    		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 393 ];

		return pClassPointer;
	};

};

//UClass* ACullDistanceVolume::pClassPointer = NULL;

// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0054 - 0x003C)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x003C (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	TArray< struct FPresetGeneratedPoint >             Points;                                           		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 395 ];

		return pClassPointer;
	};

};

//UClass* UCurveEdPresetCurve::pClassPointer = NULL;

// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 397 ];

		return pClassPointer;
	};

};

//UClass* UCustomPropertyItemHandler::pClassPointer = NULL;

// Class Engine.GameViewportClient
// 0x00D4 (0x0110 - 0x003C)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                          		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VfTable_FExec;                                    		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Viewport;                                         		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewportFrame;                                    		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UInteraction* >                      GlobalInteractions;                               		// 0x004C (0x000C) [0x0000000000000000]              
	class UClass*                                      UIControllerClass;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class UUIInteraction*                              UIController;                                     		// 0x005C (0x0004) [0x0000000000000000]              
	class UConsole*                                    ViewportConsole;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FExportShowFlags_Mirror                     ShowFlags;                                        		// 0x0064 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LoadingMessage;                                   		// 0x0074 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     SavingMessage;                                    		// 0x0080 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     ConnectingMessage;                                		// 0x008C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     PausedMessage;                                    		// 0x0098 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     PrecachingMessage;                                		// 0x00A4 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayingUIMouseCursor : 1;                     		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUIMouseCaptureOverride : 1;                      		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x00B4 (0x0010) [0x0000000000000000]              
	TArray< struct FSplitscreenData >                  SplitscreenInfo;                                  		// 0x00C4 (0x000C) [0x0000000000000000]              
	unsigned char                                      DesiredSplitscreenType;                           		// 0x00D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveSplitscreenType;                            		// 0x00D1 (0x0001) [0x0000000000000000]              
	unsigned char                                      Default2PSplitType;                               		// 0x00D2 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Default3PSplitType;                               		// 0x00D3 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FDebugDisplayProperty >             DebugProperties;                                  		// 0x00D4 (0x000C) [0x0000000000000000]              
	TArray< struct FScreenShotInfo >                   ScreenShotInfoArray;                              		// 0x00E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x00EC (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x00F8 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x0104 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 399 ];

		return pClassPointer;
	};

	void RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer );
	void AddLocalPlayer ( class ULocalPlayer* NewPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void DrawTransition ( class UCanvas* Canvas );
	void eventPostRender ( class UCanvas* Canvas );
	void DrawTitleSafeArea ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	void CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY );
	float CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent );
	void CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical );
	void GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height );
	bool HasRightSafeZone ( int LocalPlayerIndex );
	bool HasLeftSafeZone ( int LocalPlayerIndex );
	bool HasBottomSafeZone ( int LocalPlayerIndex );
	bool HasTopSafeZone ( int LocalPlayerIndex );
	int ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void eventLayoutPlayers ( );
	void UpdateActiveSplitscreenType ( );
	unsigned char GetSplitscreenConfiguration ( );
	void SetSplitscreenConfiguration ( unsigned char SplitType );
	void eventGameSessionEnded ( );
	int eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex );
	bool CreateInitialPlayer ( struct FString* OutError );
	bool eventInit ( struct FString* OutError );
	void SetConsoleTarget ( int PlayerIndex );
	void ShowTitleSafeArea ( );
	void SetSplit ( int Mode );
	void DebugRemovePlayer ( int ControllerId );
	void SSSwapControllers ( );
	void DebugCreatePlayer ( int ControllerId );
	class ULocalPlayer* eventFindPlayerByControllerId ( int ControllerId );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	bool IsFullScreenViewport ( );
	void GetViewportSize ( struct FVector2D* out_ViewportSize );
	struct FString ConsoleCommand ( struct FString Command );
	bool HandleInputChar ( int ControllerId, struct FString Unicode );
	bool HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

//UClass* UGameViewportClient::pClassPointer = NULL;

// Class Engine.CustomViewportClient
// 0x0004 (0x0114 - 0x0110)
class UCustomViewportClient : public UGameViewportClient
{
public:
	unsigned long                                      m_bIsMouseMoving : 1;                             		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bClickActive : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 401 ];

		return pClassPointer;
	};

	bool eventInit ( struct FString* OutError );
};

//UClass* UCustomViewportClient::pClassPointer = NULL;

// Class Engine.CylinderComponent
// 0x0010 (0x0220 - 0x0210)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              CollisionRadius;                                  		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FColor                                      CylinderColor;                                    		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDrawBoundingBox : 1;                             		// 0x021C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDrawNonColliding : 1;                            		// 0x021C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 403 ];

		return pClassPointer;
	};

	void SetCylinderSize ( float NewRadius, float NewHeight );
};

//UClass* UCylinderComponent::pClassPointer = NULL;

// Class Engine.DamageType
// 0x0050 (0x008C - 0x003C)
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                      		// 0x003C (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     FemaleSuicide;                                    		// 0x0048 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     MaleSuicide;                                      		// 0x0054 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bArmorStops : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysGibs : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeverGibs : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLocationalHit : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCausesBlood : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bKUseOwnDeathVel : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCausedByWorld : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x0060 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCausesFracture : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIgnoreDriverDamageMult : 1;                      		// 0x0060 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bDontHurtInstigator : 1;                          		// 0x0060 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bKRadialImpulse : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	float                                              GibModifier;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDamageImpulse;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathVel;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathUpKick;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KImpulseRadius;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialDamageImpulse;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleDamageScaling;                             		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              VehicleMomentumScaling;                           		// 0x0080 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x0084 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 405 ];

		return pClassPointer;
	};

	float VehicleDamageScalingFor ( class AVehicle* V );
	struct FString SuicideMessage ( class APlayerReplicationInfo* Victim );
	struct FString DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );
};

//UClass* UDamageType::pClassPointer = NULL;

// Class Engine.DebugManager
// 0x0004 (0x0040 - 0x003C)
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                  		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 407 ];

		return pClassPointer;
	};

};

//UClass* UDebugManager::pClassPointer = NULL;

// Class Engine.PhysicsVolume
// 0x003C (0x0294 - 0x0258)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                     		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPainCausing : 1;                                 		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEntryPain : 1;                                   		// 0x0264 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x0264 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDestructive : 1;                                 		// 0x0264 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNoInventory : 1;                                 		// 0x0264 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x0264 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bBounceVelocity : 1;                              		// 0x0264 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNeutralZone : 1;                                 		// 0x0264 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                    		// 0x0264 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x0264 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bWaterVolume : 1;                                 		// 0x0264 (0x0004) [0x0000000000000000] [0x00000800] 
	float                                              GroundFriction;                                   		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminalVelocity;                                 		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePerSec;                                     		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidFriction;                                    		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyDamping;                                 		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDampingForce;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInfo*                                       PainTimer;                                        		// 0x0288 (0x0004) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x028C (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 409 ];

		return pClassPointer;
	};

	void OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action );
	void NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC );
	void ModifyPlayer ( class APawn* PlayerPawn );
	void CausePainTo ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TimerPop ( class AVolumeTimer* T );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void eventActorLeavingVolume ( class AActor* Other );
	void eventActorEnteredVolume ( class AActor* Other );
	void eventPhysicsChangedFor ( class AActor* Other );
	void Reset ( );
	void eventPostBeginPlay ( );
	float GetGravityZ ( );
};

//UClass* APhysicsVolume::pClassPointer = NULL;

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0294 - 0x0294)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 411 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
};

//UClass* ADefaultPhysicsVolume::pClassPointer = NULL;

// Class Engine.LevelBase
// 0x0054 (0x0090 - 0x003C)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x54 ];                            		// 0x003C (0x0054) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 413 ];

		return pClassPointer;
	};

};

//UClass* ULevelBase::pClassPointer = NULL;

// Class Engine.PendingLevel
// 0x0030 (0x00C0 - 0x0090)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x30 ];                            		// 0x0090 (0x0030) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 415 ];

		return pClassPointer;
	};

};

//UClass* UPendingLevel::pClassPointer = NULL;

// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 417 ];

		return pClassPointer;
	};

};

//UClass* UDemoPlayPendingLevel::pClassPointer = NULL;

// Class Engine.DemoRecConnection
// 0x0000 (0x4E60 - 0x4E60)
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 419 ];

		return pClassPointer;
	};

};

//UClass* UDemoRecConnection::pClassPointer = NULL;

// Class Engine.NetDriver
// 0x0120 (0x0160 - 0x0040)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0x24 ];                            		// 0x0040 (0x0024) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialConnectTimeout;                            		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeepAliveTime;                                    		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RelevantTimeout;                                  		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnPrioritySeconds;                             		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ServerTravelPause;                                		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxClientRate;                                    		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxInternetClientRate;                            		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate;                             		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x0088 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowDownloads : 1;                               		// 0x008C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x14 ];                            		// 0x0090 (0x0014) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DownloadManagers;                                 		// 0x00A8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData02[ 0x88 ];                            		// 0x00B4 (0x0088) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x013C (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData03[ 0x18 ];                            		// 0x0148 (0x0018) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 421 ];

		return pClassPointer;
	};

};

//UClass* UNetDriver::pClassPointer = NULL;

// Class Engine.DemoRecDriver
// 0x00A0 (0x0200 - 0x0160)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x28 ];                            		// 0x0160 (0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x0188 (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x6C ];                            		// 0x0194 (0x006C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 438 ];

		return pClassPointer;
	};

};

//UClass* UDemoRecDriver::pClassPointer = NULL;

// Class Engine.DialogueSet
// 0x0028 (0x0064 - 0x003C)
class UDialogueSet : public UObject
{
public:
	class USoundCue*                                   Dialogue1;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue2;                                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue3;                                        		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue4;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue5;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue6;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue7;                                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue8;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue9;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Dialogue10;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 441 ];

		return pClassPointer;
	};

};

//UClass* UDialogueSet::pClassPointer = NULL;

// Class Engine.Light
// 0x0008 (0x0218 - 0x0210)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bEnabled : 1;                                     		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 443 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* ALight::pClassPointer = NULL;

// Class Engine.DirectionalLight
// 0x0000 (0x0218 - 0x0218)
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 445 ];

		return pClassPointer;
	};

};

//UClass* ADirectionalLight::pClassPointer = NULL;

// Class Engine.LightComponent
// 0x014A (0x01A0 - 0x0056)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x0058 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x005C (0x0004) MISSED OFFSET
	struct FMatrix                                     WorldToLight;                                     		// 0x0060 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     LightToWorld;                                     		// 0x00A0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       LightGuid;                                        		// 0x00E0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightmapGuid;                                     		// 0x00F0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	float                                              Brightness;                                       		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ULightFunction*                              Function;                                         		// 0x0108 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              LightEnv_BouncedLightBrightness;                  		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightEnv_BouncedModulationColor;                  		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0114 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadows : 1;                                  		// 0x0114 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastStaticShadows : 1;                            		// 0x0114 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x0114 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x0114 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RequireDynamicShadows : 1;                        		// 0x0114 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x0114 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x0114 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x0114 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;            		// 0x0114 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x0114 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseVolumes : 1;                                  		// 0x0114 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0118 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	TArray< struct FName >                             OtherLevelsToAffect;                              		// 0x011C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0128 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ABrush* >                            InclusionVolumes;                                 		// 0x0130 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ABrush* >                            ExclusionVolumes;                                 		// 0x013C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPointer >                          InclusionConvexVolumes;                           		// 0x0148 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          ExclusionConvexVolumes;                           		// 0x0154 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      LightAffectsClassification;                       		// 0x0160 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      LightShadowMode;                                  		// 0x0161 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ModShadowColor;                                   		// 0x0164 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightListIndex;                                   		// 0x017C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x0181 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EnableBeginWorldTime;                             		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EnableEndWorldTime;                               		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseCustomCullDistance : 1;                       		// 0x0198 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CustomCullDistance;                               		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 447 ];

		return pClassPointer;
	};

	void UpdateColorAndBrightness ( );
	struct FVector GetDirection ( );
	struct FVector GetOrigin ( );
	void SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction );
	void SetEnabled ( unsigned long bSetEnabled );
};

//UClass* ULightComponent::pClassPointer = NULL;

// Class Engine.DirectionalLightComponent
// 0x0008 (0x01A8 - 0x01A0)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseSelfDirection : 1;                            		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSelfColor : 1;                                		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 449 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
};

//UClass* UDirectionalLightComponent::pClassPointer = NULL;

// Class Engine.DirectionalLightToggleable
// 0x0000 (0x0218 - 0x0218)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 451 ];

		return pClassPointer;
	};

};

//UClass* ADirectionalLightToggleable::pClassPointer = NULL;

// Class Engine.DiscoverVolume
// 0x0028 (0x0280 - 0x0258)
class ADiscoverVolume : public AVolume
{
public:
	struct FString                                     LinkId;                                           		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AreaVolumeName;                                   		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DiscoverDescription;                              		// 0x0274 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 453 ];

		return pClassPointer;
	};

};

//UClass* ADiscoverVolume::pClassPointer = NULL;

// Class Engine.DistributionFloatConstant
// 0x0004 (0x0054 - 0x0050)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 455 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatConstant::pClassPointer = NULL;

// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 457 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionFloatConstantCurveResource
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatConstantCurveResource : public UDistributionFloatConstantCurve
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 459 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatConstantCurveResource::pClassPointer = NULL;

// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x006D - 0x0054)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinInput;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInput;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutput;                                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutput;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamMode;                                        		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 461 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatParameterBase::pClassPointer = NULL;

// Class Engine.DistributionFloatUniform
// 0x0008 (0x0058 - 0x0050)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 463 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatUniform::pClassPointer = NULL;

// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 465 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatUniformCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorConstant
// 0x0011 (0x0061 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 467 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorConstant::pClassPointer = NULL;

// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0065 - 0x0050)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 469 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorParameterBase
// 0x003E (0x009F - 0x0061)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinInput;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxInput;                                         		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinOutput;                                        		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxOutput;                                        		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamModes[ 0x3 ];                                		// 0x009C (0x0003) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 471 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorParameterBase::pClassPointer = NULL;

// Class Engine.DistributionVectorUniform
// 0x0020 (0x0070 - 0x0050)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Min;                                              		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      LockedAxes;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x006D (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 473 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorUniform::pClassPointer = NULL;

// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0069 - 0x0050)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      LockedAxes[ 0x2 ];                                		// 0x0064 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0066 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 475 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorUniformCurve::pClassPointer = NULL;

// Class Engine.DOFEffect
// 0x002F (0x0090 - 0x0061)
class UDOFEffect : public UPostProcessEffect
{
public:
	float                                              FalloffExponent;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusType;                                        		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 477 ];

		return pClassPointer;
	};

};

//UClass* UDOFEffect::pClassPointer = NULL;

// Class Engine.DOFAndBloomEffect
// 0x0008 (0x0098 - 0x0090)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneMultiplier;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 479 ];

		return pClassPointer;
	};

};

//UClass* UDOFAndBloomEffect::pClassPointer = NULL;

// Class Engine.DoorMarker
// 0x0010 (0x030C - 0x02FC)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DoorType;                                         		// 0x0300 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DoorTrigger;                                      		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x0308 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x0308 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x0308 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x0308 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x0308 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 481 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void MoverClosed ( );
	void MoverOpened ( );
	void eventPostBeginPlay ( );
};

//UClass* ADoorMarker::pClassPointer = NULL;

// Class Engine.DrawBoxComponent
// 0x0018 (0x0228 - 0x0210)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                         		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BoxMaterial;                                      		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxExtent;                                        		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 483 ];

		return pClassPointer;
	};

};

//UClass* UDrawBoxComponent::pClassPointer = NULL;

// Class Engine.DrawCapsuleComponent
// 0x0014 (0x0224 - 0x0210)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleHeight;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 485 ];

		return pClassPointer;
	};

};

//UClass* UDrawCapsuleComponent::pClassPointer = NULL;

// Class Engine.DrawConeComponent
// 0x0010 (0x0220 - 0x0210)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                        		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConeSides;                                        		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 487 ];

		return pClassPointer;
	};

};

//UClass* UDrawConeComponent::pClassPointer = NULL;

// Class Engine.DrawCylinderComponent
// 0x0020 (0x0230 - 0x0210)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CylinderMaterial;                                 		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadius;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderTopRadius;                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeightOffset;                             		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CylinderSides;                                    		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 489 ];

		return pClassPointer;
	};

};

//UClass* UDrawCylinderComponent::pClassPointer = NULL;

// Class Engine.DrawFrustumComponent
// 0x0018 (0x0228 - 0x0210)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAngle;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAspectRatio;                               		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumStartDist;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumEndDist;                                   		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Texture;                                          		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 491 ];

		return pClassPointer;
	};

};

//UClass* UDrawFrustumComponent::pClassPointer = NULL;

// Class Engine.DrawLightConeComponent
// 0x0000 (0x0220 - 0x0220)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 493 ];

		return pClassPointer;
	};

};

//UClass* UDrawLightConeComponent::pClassPointer = NULL;

// Class Engine.DrawSphereComponent
// 0x0014 (0x0224 - 0x0210)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                      		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   SphereMaterial;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereRadius;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 495 ];

		return pClassPointer;
	};

};

//UClass* UDrawSphereComponent::pClassPointer = NULL;

// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x0224 - 0x0224)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 497 ];

		return pClassPointer;
	};

};

//UClass* UDrawLightRadiusComponent::pClassPointer = NULL;

// Class Engine.DrawQuadComponent
// 0x000C (0x021C - 0x0210)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 499 ];

		return pClassPointer;
	};

};

//UClass* UDrawQuadComponent::pClassPointer = NULL;

// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x0224 - 0x0224)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 501 ];

		return pClassPointer;
	};

};

//UClass* UDrawSoundRadiusComponent::pClassPointer = NULL;

// Class Engine.DroppedPickup
// 0x0010 (0x0220 - 0x0210)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x0210 (0x0004) [0x0000000000000000]              
	class UClass*                                      InventoryClass;                                   		// 0x0214 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ANavigationPoint*                            PickupCache;                                      		// 0x0218 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x021C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 503 ];

		return pClassPointer;
	};

	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float DetourWeight ( class APawn* Other, float PathWeight );
	void eventEncroachedBy ( class AActor* Other );
	void eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void RemoveFromNavigation ( );
	void AddToNavigation ( );
};

//UClass* ADroppedPickup::pClassPointer = NULL;

// Class Engine.DynamicAnchor
// 0x0004 (0x0300 - 0x02FC)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x02FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 505 ];

		return pClassPointer;
	};

};

//UClass* ADynamicAnchor::pClassPointer = NULL;

// Class Engine.DynamicBlockingVolume
// 0x0000 (0x025C - 0x025C)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 507 ];

		return pClassPointer;
	};

};

//UClass* ADynamicBlockingVolume::pClassPointer = NULL;

// Class Engine.DynamicCameraActor
// 0x0000 (0x0384 - 0x0384)
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 509 ];

		return pClassPointer;
	};

};

//UClass* ADynamicCameraActor::pClassPointer = NULL;

// Class Engine.LightEnvironmentComponent
// 0x000A (0x0060 - 0x0056)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              LastRenderTime;                                   		// 0x005C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 511 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bNewEnabled );
};

//UClass* ULightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.DynamicLightEnvironmentComponent
// 0x0084 (0x00E4 - 0x0060)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                            		// 0x0060 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              InvisibleUpdateTime;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTimeBetweenFullUpdates;                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumVolumeVisibilitySamples;                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x0070 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientGlow;                                      		// 0x008C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDesaturation;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDistance;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowDistance;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCastShadows : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDynamic : 1;                                     		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bOverrideOwnerBounds : 1;                         		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000040] 
	float                                              ModShadowFadeoutTime;                             		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightShadowMode;                                  		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncedLightingFactor;                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBoxSphereBounds                            OverriddenBounds;                                 		// 0x00C8 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 513 ];

		return pClassPointer;
	};

};

//UClass* UDynamicLightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.DynamicSMActor
// 0x0038 (0x0248 - 0x0210)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x0218 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial;                               		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshTranslation;                        		// 0x0220 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ReplicatedMeshRotation;                           		// 0x022C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshScale3D;                            		// 0x0238 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 515 ];

		return pClassPointer;
	};

	void SetLightEnvironmentToNotBeDynamic ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	bool CanBasePawn ( class APawn* P );
	void SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnSetStaticMesh ( class USeqAct_SetStaticMesh* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* ADynamicSMActor::pClassPointer = NULL;

// Class Engine.EdCoordSystem
// 0x0050 (0x008C - 0x003C)
class UEdCoordSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                                		// 0x0040 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Desc;                                             		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 517 ];

		return pClassPointer;
	};

};

//UClass* UEdCoordSystem::pClassPointer = NULL;

// Class Engine.EditTextParser
// 0x0000 (0x003C - 0x003C)
class UEditTextParser : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 519 ];

		return pClassPointer;
	};

};

//UClass* UEditTextParser::pClassPointer = NULL;

// Class Engine.EmitterPool
// 0x0080 (0x0290 - 0x0210)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleSystemComponent* >          PoolComponents;                                   		// 0x0214 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class UParticleSystemComponent* >          ActiveComponents;                                 		// 0x0220 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                MaxActiveEffects;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x0230 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x0230 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	TArray< struct FEmitterBaseInfo >                  RelativePSCs;                                     		// 0x0234 (0x000C) [0x0000000000000000]              
	float                                              SMC_MIC_ReductionTime;                            		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IdealStaticMeshComponents;                        		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                IdealMaterialInstanceConstants;                   		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                IdealSkeletalMeshComponents;                      		// 0x0250 (0x0004) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              FreeSMComponents;                                 		// 0x0254 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class UMaterialInstanceConstant* >         FreeMatInstConsts;                                		// 0x0260 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class USkeletalMeshComponent* >            FreeSKComponents;                                 		// 0x026C (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class AActor* >                            FreePawns;                                        		// 0x0278 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class AActor* >                            PendingPawns;                                     		// 0x0284 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 521 ];

		return pClassPointer;
	};

	class UParticleSystemComponent* SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate );
	bool eventEOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	bool eventESpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor );
	class UParticleSystemComponent* GetPooledComponent ( class UParticleSystem* EmitterTemplate );
	class UMaterialInstanceConstant* GetFreeMatInstConsts ( unsigned long bCreateNewObject );
	void FreeMaterialInstanceConstant ( class UMaterialInstanceConstant* MIC );
	void FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC );
	class AActor* GetFreePawnActor ( struct FVector Loc, struct FRotator Rot, unsigned long bCreateNewObject );
	void FreePawnActor ( class AActor* PawnPtr );
	void FreeSKCMaterialInstanceConstants ( class USkeletalMeshComponent* SMC );
	class USkeletalMeshComponent* GetFreeSkeletalMeshComponent ( unsigned long bCreateNewObject );
	void FreeSkeletalMeshComponents ( class USkeletalMeshComponent* SKC );
	class UStaticMeshComponent* GetFreeStaticMeshComponent ( unsigned long bCreateNewObject );
	void FreeStaticMeshComponents ( class UParticleSystemComponent* PSC );
	void ReturnToPool ( class UParticleSystemComponent* PSC );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
};

//UClass* AEmitterPool::pClassPointer = NULL;

// Class Engine.EventJumpTemplate
// 0x0058 (0x0094 - 0x003C)
class UEventJumpTemplate : public UObject
{
public:
	float                                              PossibleAngle;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPawnDirRotate : 1;                          		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForcePawnVelocity : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForcePlayCustomAnim : 1;                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayCustomAnimLoop : 1;                          		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEForceCameraRotate : 1;                          		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FString                                     CustomAnimSeqName;                                		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EndPathAnimSeqName;                               		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EndPathAnimSeqName_Dash;                          		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fActionPTAcceleration;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NextMoveState;                                    		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActionPointMoveType;                              		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActionPointCancelType;                            		// 0x006E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartAreaExtent;                                  		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMoveActionPointInfo >              ActionPoints;                                     		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EventJumpActorScale;                              		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 523 ];

		return pClassPointer;
	};

};

//UClass* UEventJumpTemplate::pClassPointer = NULL;

// Class Engine.FaceFXAnimSet
// 0x0030 (0x006C - 0x003C)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    InternalFaceFXAnimSet;                            		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXAnimSetBytes;                            		// 0x0044 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXMiniSessionBytes;                        		// 0x0050 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x005C (0x000C) [0x0000000000000000]              
	int                                                NumLoadErrors;                                    		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 525 ];

		return pClassPointer;
	};

};

//UClass* UFaceFXAnimSet::pClassPointer = NULL;

// Class Engine.FaceFXAsset
// 0x0048 (0x0084 - 0x003C)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    FaceFXActor;                                      		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXActorBytes;                              		// 0x0044 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXSessionBytes;                            		// 0x0050 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UFaceFXAnimSet* >                    MountedFaceFXAnimSets;                            		// 0x0068 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x0074 (0x000C) [0x0000000000000000]              
	int                                                NumLoadErrors;                                    		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 527 ];

		return pClassPointer;
	};

	void UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
	void MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
};

//UClass* UFaceFXAsset::pClassPointer = NULL;

// Class Engine.FallAreaVolume
// 0x0004 (0x025C - 0x0258)
class AFallAreaVolume : public AVolume
{
public:
	class AFallAreaVolume*                             NextVolume;                                       		// 0x0258 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 529 ];

		return pClassPointer;
	};

};

//UClass* AFallAreaVolume::pClassPointer = NULL;

// Class Engine.FileChannel
// 0x0210 (0x0278 - 0x0068)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x210 ];                           		// 0x0068 (0x0210) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 531 ];

		return pClassPointer;
	};

};

//UClass* UFileChannel::pClassPointer = NULL;

// Class Engine.FileWriter
// 0x0018 (0x0228 - 0x0210)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                       		// 0x0210 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     Filename;                                         		// 0x0214 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FileType;                                         		// 0x0220 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 533 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void Logf ( struct FString logString );
	void CloseFile ( );
	bool OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp );
};

//UClass* AFileWriter::pClassPointer = NULL;

// Class Engine.FileLog
// 0x0000 (0x0228 - 0x0228)
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 535 ];

		return pClassPointer;
	};

	void CloseLog ( );
	void OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique );
};

//UClass* AFileLog::pClassPointer = NULL;

// Class Engine.FilterEffect
// 0x0000 (0x0098 - 0x0098)
class UFilterEffect : public UDOFAndBloomEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 537 ];

		return pClassPointer;
	};

};

//UClass* UFilterEffect::pClassPointer = NULL;

// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x009C - 0x009C)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 539 ];

		return pClassPointer;
	};

};

//UClass* UFloorToCeilingReachSpec::pClassPointer = NULL;

// Class Engine.Font
// 0x0160 (0x019C - 0x003C)
class UFont : public UObject
{
public:
	TArray< struct FFontCharacter >                    Characters;                                       		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.Attributes
	TArray< struct FFontGlyph >                        Glyph;                                            		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                FontTextureX;                                     		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FontTextureY;                                     		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FontTextureRowHeight;                             		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     FontFileName;                                     		// 0x009C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                InternalVersion;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                FontFilter;                                       		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTTFontManager : 1;                               		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x00B4 (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00C0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                Kerning;                                          		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x0104 (0x0088) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumCharacters;                                    		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaxCharHeight;                                    		// 0x0190 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 541 ];

		return pClassPointer;
	};

	float GetMaxCharHeight ( );
	float GetAuthoredViewportHeight ( float ViewportHeight );
	float GetScalingFactor ( float HeightTest );
	int GetResolutionPageIndex ( float HeightTest );
};

//UClass* UFont::pClassPointer = NULL;

// Class Engine.FontAttribute
// 0x0004 (0x0040 - 0x003C)
class UFontAttribute : public UObject
{
public:
	struct FUITextAttributes                           FontAttributes;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 543 ];

		return pClassPointer;
	};

};

//UClass* UFontAttribute::pClassPointer = NULL;

// Class Engine.FontColor
// 0x0044 (0x0080 - 0x003C)
class UFontColor : public UObject
{
public:
	struct FLinearColor                                FontColor;                                        		// 0x003C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FontOutLineColor;                                 		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FontShadowColor;                                  		// 0x005C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FontLineColor;                                    		// 0x006C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableLineColor : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 545 ];

		return pClassPointer;
	};

};

//UClass* UFontColor::pClassPointer = NULL;

// Class Engine.FontFace
// 0x000C (0x0048 - 0x003C)
class UFontFace : public UObject
{
public:
	struct FDrawFont                                   Font;                                             		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 547 ];

		return pClassPointer;
	};

};

//UClass* UFontFace::pClassPointer = NULL;

// Class Engine.FontImportOptions
// 0x0088 (0x00C4 - 0x003C)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x003C (0x0088) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 549 ];

		return pClassPointer;
	};

};

//UClass* UFontImportOptions::pClassPointer = NULL;

// Class Engine.FontResource
// 0x0024 (0x0060 - 0x003C)
class UFontResource : public UObject
{
public:
	TArray< struct FString >                           FontNameArray;                                    		// 0x003C (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            Buffer;                                           		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FString                                     FontName;                                         		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 551 ];

		return pClassPointer;
	};

};

//UClass* UFontResource::pClassPointer = NULL;

// Class Engine.FontSet
// 0x0010 (0x004C - 0x003C)
class UFontSet : public UObject
{
public:
	unsigned char                                      Filter;                                           		// 0x003C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UFontFace*                                   FontFace;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontAttribute*                              FontAttribute;                                    		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFontColor*                                  FontColors;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 553 ];

		return pClassPointer;
	};

};

//UClass* UFontSet::pClassPointer = NULL;

// Class Engine.ForceFallingVolume
// 0x0014 (0x026C - 0x0258)
class AForceFallingVolume : public AVolume
{
public:
	float                                              DelayTime;                                        		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ForceFall_Desc;                                   		// 0x025C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AForceFallingVolume*                         NextVolume;                                       		// 0x0268 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 555 ];

		return pClassPointer;
	};

};

//UClass* AForceFallingVolume::pClassPointer = NULL;

// Class Engine.ForceFeedbackManager
// 0x0014 (0x0050 - 0x003C)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                CurrentSample;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ScaleAllWaveformsBy;                              		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 557 ];

		return pClassPointer;
	};

	void eventPauseForceFeedback ( unsigned long bPause );
	void eventStopForceFeedback ( class UForceFeedbackWaveform* Waveform );
	void eventPlayForceFeedback ( class UForceFeedbackWaveform* Waveform );
	void PauseWaveform ( unsigned long bPause );
	void StopForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform );
	void PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform );
};

//UClass* UForceFeedbackManager::pClassPointer = NULL;

// Class Engine.ForceFeedbackWaveform
// 0x0010 (0x004C - 0x003C)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FWaveformSample >                   Samples;                                          		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 559 ];

		return pClassPointer;
	};

};

//UClass* UForceFeedbackWaveform::pClassPointer = NULL;

// Class Engine.StaticMesh
// 0x00F4 (0x0130 - 0x003C)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x003C (0x000C) MISSED OFFSET
	TArray< struct FStaticMeshLODInfo >                LODInfo;                                          		// 0x0048 (0x000C) [0x0000000000001041]              ( CPF_Edit | CPF_EditConstArray | CPF_Native )
	float                                              LODDistanceRatio;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOD0Distance;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOD1Distance;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOD2Distance;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOD3Distance;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillBoardMaterialIns;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreFootPlaceCollisionCheck : 1;               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRenderPosOnlyCollisionCheck : 1;                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x14 ];                            		// 0x0074 (0x0014) MISSED OFFSET
	int                                                LightMapResolution;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapCoordinateIndex;                          		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x1C ];                            		// 0x0090 (0x001C) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData03[ 0x34 ];                            		// 0x00B0 (0x0034) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsedForInstancing : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FName >                             ContentTags;                                      		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData04[ 0x28 ];                            		// 0x0108 (0x0028) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 561 ];

		return pClassPointer;
	};

};

//UClass* UStaticMesh::pClassPointer = NULL;

// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 577 ];

		return pClassPointer;
	};

	float GetSurfaceHeight ( );
	float GetSurfaceWidth ( );
};

//UClass* USurface::pClassPointer = NULL;

// Class Engine.MaterialInterface
// 0x000C (0x0048 - 0x003C)
class UMaterialInterface : public USurface
{
public:
	struct FString                                     PreviewMesh;                                      		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 579 ];

		return pClassPointer;
	};

	bool GetGroupName ( struct FName ParameterName, struct FName* GroupName );
	bool GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue );
	bool GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue );
	bool GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	class UMaterial* GetMaterial ( );
};

//UClass* UMaterialInterface::pClassPointer = NULL;

// Class Engine.KMeshProps
// 0x0040 (0x007C - 0x003C)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                         		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKAggregateGeom                             AggGeom;                                          		// 0x0048 (0x0034) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 595 ];

		return pClassPointer;
	};

};

//UClass* UKMeshProps::pClassPointer = NULL;

// Class Engine.RB_BodySetup
// 0x005C (0x00D8 - 0x007C)
class URB_BodySetup : public UKMeshProps
{
public:
	unsigned char                                      SleepFamily;                                      		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HitBoneType;                                      		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFixed : 1;                                       		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnablePick : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableNoiseForce : 1;                            		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoCollision : 1;                                 		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x0088 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bConsiderForBounds : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAutoMass : 1;                                    		// 0x0088 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	struct FName                                       bFixedBoneName;                                   		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNoiseScale;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassScale;                                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddDensity;                                       		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          CollisionGeom;                                    		// 0x00A4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           CollisionGeomScale3D;                             		// 0x00B0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           PreCachedPhysScale;                               		// 0x00BC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FKCachedConvexData >                PreCachedPhysData;                                		// 0x00C8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                PreCachedPhysDataVersion;                         		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 597 ];

		return pClassPointer;
	};

};

//UClass* URB_BodySetup::pClassPointer = NULL;

// Class Engine.FracturedStaticMesh
// 0x00C4 (0x01F4 - 0x0130)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0130 (0x0004) MISSED OFFSET
	class UStaticMesh*                                 SourceCoreMesh;                                   		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoreMeshScale;                                    		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x30 ];                            		// 0x013C (0x0030) MISSED OFFSET
	unsigned long                                      bSliceUsingCoreCollision : 1;                     		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UParticleSystem*                             FragmentDestroyEffect;                            		// 0x0170 (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystem* >                   FragmentDestroyEffects;                           		// 0x0174 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentDestroyEffectScale;                       		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentHealthScale;                              		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMinHealth;                                		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMaxHealth;                                		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUniformFragmentHealth : 1;                       		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChunkLinVel;                                      		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkAngVel;                                      		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkLinHorizontalScale;                          		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionVelScale;                                		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;              		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFixIsolatedChunks : 1;                           		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpawnPhysicsChunks : 1;                          		// 0x01AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChanceOfPhysicsChunk;                             		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionChanceOfPhysicsChunk;                    		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMin;                       		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMax;                       		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMin;                    		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMax;                    		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinConnectionSupportArea;                         		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DynamicOutsideMaterial;                           		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                         		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutsideMaterialIndex;                             		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x1C ];                            		// 0x01D8 (0x001C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 599 ];

		return pClassPointer;
	};

};

//UClass* UFracturedStaticMesh::pClassPointer = NULL;

// Class Engine.ParticleSystem
// 0x00C0 (0x00FC - 0x003C)
class UParticleSystem : public UObject
{
public:
	unsigned char                                      SystemUpdateMode;                                 		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODMethod;                                        		// 0x003D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_FPS;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_Delta;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleEmitter* >                  Emitters;                                         		// 0x004C (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x0058 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x005C (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              ThumbnailWarmup;                                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLit : 1;                                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAutoScaleMesh : 1;                               		// 0x0070 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bSystemParticle : 1;                              		// 0x0070 (0x0004) [0x0000000000000000] [0x00000100] 
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0074 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LODDistanceCheckTime;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    LODDistances;                                     		// 0x007C (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )
	int                                                EditorLODSetting;                                 		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x008C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondsBeforeInactive;                            		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FloorMesh;                                        		// 0x00AC (0x000C) [0x0000000000000000]              
	struct FVector                                     FloorPosition;                                    		// 0x00B8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    FloorRotation;                                    		// 0x00C4 (0x000C) [0x0000000000000000]              
	float                                              FloorScale;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FVector                                     FloorScale3D;                                     		// 0x00D4 (0x000C) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x00E0 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             ContentTags;                                      		// 0x00E4 (0x000C) [0x0000000000000000]              
	TArray< struct FLODSoloTrack >                     SoloTracking;                                     		// 0x00F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 602 ];

		return pClassPointer;
	};

	bool SetLODDistance ( int LODLevelIndex, float InDistance );
	void SetCurrentLODMethod ( unsigned char InMethod );
	float GetLODDistance ( int LODLevelIndex );
	int GetLODLevelCount ( );
	unsigned char GetCurrentLODMethod ( );
};

//UClass* UParticleSystem::pClassPointer = NULL;

// Class Engine.GameInfo
// 0x01E8 (0x03F8 - 0x0210)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x0210 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x0210 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x0210 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x0210 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x0210 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x0210 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bLoggingGame : 1;                                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x0210 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bGameRestarted : 1;                               		// 0x0210 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x0210 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bUsingArbitration : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x0210 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x0210 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x0210 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x0210 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x0210 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x0210 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bAutomatedTestingWithOpen : 1;                    		// 0x0210 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x0210 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x0210 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDoFearCostFallOff : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x0210 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x0210 (0x0004) [0x0000000000000002] [0x40000000] ( CPF_Const )
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;          		// 0x0210 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	int                                                AutomatedPerfRemainingTime;                       		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                AutomatedTestingMapIndex;                         		// 0x0218 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           AutomatedMapTestingList;                          		// 0x021C (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                NumAutomatedMapTestingCycles;                     		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumberOfMatchesPlayed;                            		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                NumMapListCyclesDone;                             		// 0x0230 (0x0004) [0x0000000000000000]              
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x0240 (0x000C) [0x0000000000000000]              
	struct FString                                     CauseEventCommand;                                		// 0x024C (0x000C) [0x0000000000000000]              
	struct FString                                     SentinelTaskDescription;                          		// 0x0258 (0x000C) [0x0000000000000000]              
	struct FString                                     SentinelTaskParameter;                            		// 0x0264 (0x000C) [0x0000000000000000]              
	struct FString                                     SentinelTagDesc;                                  		// 0x0270 (0x000C) [0x0000000000000000]              
	struct FString                                     BugLocString;                                     		// 0x027C (0x000C) [0x0000000000000000]              
	struct FString                                     BugRotString;                                     		// 0x0288 (0x000C) [0x0000000000000000]              
	TArray< class APlayerController* >                 PendingArbitrationPCs;                            		// 0x0294 (0x000C) [0x0000000000000000]              
	TArray< class APlayerController* >                 ArbitrationPCs;                                   		// 0x02A0 (0x000C) [0x0000000000000000]              
	float                                              ArbitrationHandshakeTimeout;                      		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GameDifficulty;                                   		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GoreLevel;                                        		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GameSpeed;                                        		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultPawnClass;                                 		// 0x02BC (0x0004) [0x0000000000000000]              
	class UClass*                                      ScoreBoardType;                                   		// 0x02C0 (0x0004) [0x0000000000000000]              
	class UClass*                                      HUDType;                                          		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxSpectatorsAllowed;                             		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                NumSpectators;                                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlayersAllowed;                                		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                NumPlayers;                                       		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                NumBots;                                          		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                NumTravellingPlayers;                             		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                CurrentID;                                        		// 0x02E8 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPlayerName;                                		// 0x02EC (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     GameName;                                         		// 0x02F8 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	float                                              FearCostFallOff;                                  		// 0x0304 (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxLives;                                         		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TimeLimit;                                        		// 0x0310 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      DeathMessageClass;                                		// 0x0314 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0318 (0x0004) [0x0000000000000000]              
	class AMutator*                                    BaseMutator;                                      		// 0x031C (0x0004) [0x0000000000000000]              
	class UClass*                                      AccessControlClass;                               		// 0x0320 (0x0004) [0x0000000000000000]              
	class AAccessControl*                              AccessControl;                                    		// 0x0324 (0x0004) [0x0000000000000000]              
	class AGameRules*                                  GameRulesModifiers;                               		// 0x0328 (0x0004) [0x0000000000000000]              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x032C (0x0004) [0x0000000000000000]              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x0330 (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerControllerClass;                            		// 0x0334 (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x0338 (0x0004) [0x0000000000000000]              
	struct FString                                     DialogueManagerClass;                             		// 0x033C (0x000C) [0x0000000000000000]              
	class ADialogueManager*                            DialogueManager;                                  		// 0x0348 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x0350 (0x0004) [0x0000000000000000]              
	float                                              MaxIdleTime;                                      		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxTimeMargin;                                    		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeMarginSlack;                                  		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinTimeMargin;                                    		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0364 (0x000C) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   Pausers;                                          		// 0x0370 (0x000C) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x037C (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0380 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0384 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                LeaderboardId;                                    		// 0x038C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ArbitratedLeaderboardId;                          		// 0x0390 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x0394 (0x0004) [0x0000000000000000]              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x0398 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ServerOptions;                                    		// 0x039C (0x000C) [0x0000000000000000]              
	int                                                AdjustedNetSpeed;                                 		// 0x03A8 (0x0004) [0x0000000000000000]              
	float                                              LastNetSpeedUpdateTime;                           		// 0x03AC (0x0004) [0x0000000000000000]              
	int                                                TotalNetBandwidth;                                		// 0x03B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MinDynamicBandwidth;                              		// 0x03B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxDynamicBandwidth;                              		// 0x03B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class APlayerController*                           SentinelPC;                                       		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       SentinelPawn;                                     		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ANavigationPoint* >                  SentinelNavArray;                                 		// 0x03C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           SentinelTravelArray;                              		// 0x03D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                SentinelNavigationIdx;                            		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SentinelIdx;                                      		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumRotationsIncrement;                            		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TravelPointsIncrement;                            		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x03EC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 631 ];

		return pClassPointer;
	};

	void DoTimeBasedSentinelStatGathering ( );
	void DoSentinel_PerfAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation );
	void DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation );
	void GetTravelLocations ( struct FName LevelName, class APlayerController* PC, TArray< struct FVector >* TravelPoints );
	void DoTravelTheWorld ( );
	void EndSentinelRun ( unsigned char RunResult );
	void AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation );
	void BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc );
	void TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellClientsToReturnToPartyHost ( class APlayerReplicationInfo* PartyLeader );
	void ShowSurveyForAllClients ( struct FString QuestionId, struct FString Context );
	void IncrementNumberOfMatchesPlayed ( );
	void IncrementAutomatedTestingMapIndex ( );
	void CloseAutomatedMapTestTimer ( );
	void StartAutomatedMapTestTimerWorker ( );
	void eventStartAutomatedMapTestTimer ( );
	void OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServer ( );
	void OnLoginChange ( );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void ClearAutoLoginDelegates ( );
	bool ProcessServerLogin ( );
	void eventMatineeCancelled ( );
	void RecalculateSkillRating ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void NotifyArbitratedMatchEnd ( );
	bool MatchIsInProgress ( );
	void ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServerForArbitration ( );
	void StartArbitratedMatch ( );
	void StartArbitrationRegistration ( );
	void ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful );
	void UpdateGameSettingsCounts ( );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void UpdateGameSettings ( );
	void eventPostSeamlessTravel ( );
	void SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostCommitMapChange ( );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	bool AllowPausing ( class APlayerController* PC );
	bool AllowCheats ( class APlayerController* P );
	bool AllowMutator ( struct FString MutatorClassName );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void KillBots ( );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	struct FString ParseMessageString ( class AController* Who, struct FString Message );
	void ModifyScoreKill ( class AController* Killer, class AController* Other );
	void ScoreKill ( class AController* Killer, class AController* Other );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	void AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void EndLogging ( struct FString Reason );
	void EndOnlineGame ( );
	void PerformEndGameHandling ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void WriteOnlinePlayerScores ( );
	void WriteOnlineStats ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void RestartGame ( );
	bool GetTravelType ( );
	struct FString GetNextAutomatedTestingMap ( );
	struct FString GetNextMap ( );
	void SendPlayer ( class APlayerController* aPlayer, struct FString URL );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup );
	bool ShouldRespawn ( class APickupFactory* Other );
	bool CheckRelevance ( class AActor* Other );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void KickBan ( struct FString S );
	void Kick ( struct FString S );
	struct FString ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventAddDefaultInventory ( class APawn* P );
	void eventAcceptInventory ( class APawn* PlayerPawn );
	void UnregisterPlayer ( class APlayerController* PC );
	void Logout ( class AController* Exiting );
	void eventPreExit ( );
	int CalculatedNetSpeed ( );
	void UpdateNetSpeeds ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void RestartPlayer ( class AController* NewPlayer );
	void StartBots ( );
	void StartHumans ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartMatch ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	bool AtCapacity ( unsigned long bSpectator );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	bool RequiresPassword ( );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	struct FString eventGetBeaconText ( );
	void RemoveMutator ( class AMutator* MutatorToRemove );
	void AddGameRules ( class UClass* GRClass );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void ParseAutomatedTestingOptions ( struct FString Options );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	bool HasOption ( struct FString Options, struct FString InKey );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	void GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value );
	bool GrabOption ( struct FString* Options, struct FString* Result );
	void SetGameSpeed ( float T );
	void DebugPause ( );
	void ForceClearUnpauseDelegates ( class APlayerController* PC );
	void eventClearPause ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	int GetServerPort ( );
	int GetNumPlayers ( );
	struct FString GetNetworkNumber ( );
	void InitGameReplicationInfo ( );
	void eventKickIdler ( class APlayerController* PC );
	void eventGameEnding ( );
	void NotifyNavigationChanged ( class ANavigationPoint* N );
	void DoNavFearCostFallOff ( );
	void eventTimer ( );
	void ResetLevel ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void Reset ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* GetCoverReplicator ( );
	bool UseLowGore ( class AWorldInfo* WI );
	struct FString FindPlayerByID ( int PlayerID );
	void eventPreBeginPlay ( );
};

//UClass* AGameInfo::pClassPointer = NULL;

// Class Engine.ReplicationInfo
// 0x0000 (0x0210 - 0x0210)
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 633 ];

		return pClassPointer;
	};

};

//UClass* AReplicationInfo::pClassPointer = NULL;

// Class Engine.GameReplicationInfo
// 0x0090 (0x02A0 - 0x0210)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                        		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bStopCountDown : 1;                               		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x0214 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x0214 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bNeedsOnlineCleanup : 1;                          		// 0x0214 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsArbitrated : 1;                                		// 0x0214 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bTrackStats : 1;                                  		// 0x0214 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	int                                                RemainingTime;                                    		// 0x0218 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ElapsedTime;                                      		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RemainingMinute;                                  		// 0x0220 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              SecondCount;                                      		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x0228 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TimeLimit;                                        		// 0x022C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxLives;                                         		// 0x0230 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class ATeamInfo* >                         Teams;                                            		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FString                                     ServerName;                                       		// 0x0240 (0x000C) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	struct FString                                     ShortName;                                        		// 0x024C (0x000C) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	struct FString                                     AdminName;                                        		// 0x0258 (0x000C) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	struct FString                                     AdminEmail;                                       		// 0x0264 (0x000C) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	int                                                ServerRegion;                                     		// 0x0270 (0x0004) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	struct FString                                     MessageOfTheDay;                                  		// 0x0274 (0x000C) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	class AActor*                                      Winner;                                           		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class APlayerReplicationInfo* >            PRIArray;                                         		// 0x0284 (0x000C) [0x0000000000000000]              
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0290 (0x000C) [0x0000000000000000]              
	int                                                MatchID;                                          		// 0x029C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 635 ];

		return pClassPointer;
	};

	bool ShouldShowGore ( );
	bool IsCoopMultiplayerGame ( );
	bool IsMultiplayerGame ( );
	void EndGame ( );
	void StartMatch ( );
	void CleanupGameDataStore ( );
	void InitializeGameDataStore ( );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SortPRIArray ( );
	bool InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );
	void GetPRIArray ( TArray< class APlayerReplicationInfo* >* pris );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* FindPlayerByID ( int PlayerID );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void eventTimer ( );
	void eventDestroyed ( );
	void Reset ( );
	void eventPostBeginPlay ( );
};

//UClass* AGameReplicationInfo::pClassPointer = NULL;

// Class Engine.GravityVolume
// 0x0004 (0x0298 - 0x0294)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 637 ];

		return pClassPointer;
	};

};

//UClass* AGravityVolume::pClassPointer = NULL;

// Class Engine.GuidCache
// 0x0048 (0x0084 - 0x003C)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x003C (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 639 ];

		return pClassPointer;
	};

};

//UClass* UGuidCache::pClassPointer = NULL;

// Class Engine.HeightFog
// 0x0008 (0x0218 - 0x0210)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bEnabled : 1;                                     		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 641 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* AHeightFog::pClassPointer = NULL;

// Class Engine.HeightFogComponent
// 0x0026 (0x007C - 0x0056)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Density;                                          		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightBrightness;                                  		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExtinctionDistance;                               		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DepthMaxDistance;                                 		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      DepthColor;                                       		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 643 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

//UClass* UHeightFogComponent::pClassPointer = NULL;

// Class Engine.HUD
// 0x0284 (0x0494 - 0x0210)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                       		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      GreenColor;                                       		// 0x0214 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      RedColor;                                         		// 0x0218 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerController*                           PlayerOwner;                                      		// 0x021C (0x0004) [0x0000000000000000]              
	class AHUD*                                        HudOwner;                                         		// 0x0220 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      ViewedInfo;                                       		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              ProgressFadeTime;                                 		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FColor                                      MOTDColor;                                        		// 0x022C (0x0004) [0x0000000000000000]              
	class AScoreBoard*                                 ScoreBoard;                                       		// 0x0230 (0x0004) [0x0000000000000000]              
	unsigned long                                      LostFocusPaused : 1;                              		// 0x0234 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowHUD : 1;                                     		// 0x0234 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowScores : 1;                                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x0234 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x0234 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bMessageBeep : 1;                                 		// 0x0234 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	float                                              HudCanvasScale;                                   		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FConsoleMessage >                   ConsoleMessages;                                  		// 0x023C (0x000C) [0x0000000000000000]              
	struct FColor                                      ConsoleColor;                                     		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsoleMessageCount;                              		// 0x024C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConsoleFontSize;                                  		// 0x0250 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MessageFontOffset;                                		// 0x0254 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxHUDAreaMessageCount;                           		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FHudLocalizedMessage                        LocalMessages[ 0x8 ];                             		// 0x025C (0x0200) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ConsoleMessagePosX;                               		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleMessagePosY;                               		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCanvas*                                     Canvas;                                           		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              LastHUDRenderTime;                                		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RenderDelta;                                      		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeX;                                            		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeY;                                            		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterX;                                          		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterY;                                          		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioX;                                           		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioY;                                           		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DebugDisplay;                                     		// 0x0488 (0x000C) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 645 ];

		return pClassPointer;
	};

	void eventOnLostFocusPause ( unsigned long Enable );
	void PlayerOwnerDied ( );
	struct FColor GetRYGColorRamp ( float Pct );
	class UFont* GetFontSizeIndex ( int FontSize );
	void DisplayLocalMessages ( );
	void DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY );
	void DrawMessage ( int I, float PosY, float* DX, float* DY );
	void GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage );
	void AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime );
	void DisplayConsoleMessages ( );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	void ClearMessage ( struct FHudLocalizedMessage* M );
	void DisplayBadConnectionAlert ( );
	void DisplayProgressMessage ( );
	void DrawEngineHUD ( );
	void DrawDemoHUD ( );
	void DrawHUD ( );
	void eventPostRender ( );
	void PreCalcValues ( );
	void DrawRoute ( class APawn* Target );
	void FXStop ( class UClass* aClass );
	void FXPlay ( class UClass* aClass, struct FString FXAnimPath );
	bool ShouldDisplayDebug ( struct FName DebugType );
	void ShowDebug ( struct FName DebugType );
	void SetShowScores ( unsigned long bNewValue );
	void ShowScores ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void eventDestroyed ( );
	void SpawnScoreBoard ( class UClass* ScoringType );
	void eventPostBeginPlay ( );
	void Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor );
	void Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
};

//UClass* AHUD::pClassPointer = NULL;

// Class Engine.ImageSet
// 0x001C (0x0058 - 0x003C)
class UImageSet : public UObject
{
public:
	class UTexture2D*                                  Image;                                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              U;                                                		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              V;                                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UL;                                               		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VL;                                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Size;                                             		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 647 ];

		return pClassPointer;
	};

};

//UClass* UImageSet::pClassPointer = NULL;

// Class Engine.IniLocPatcher
// 0x0020 (0x005C - 0x003C)
class UIniLocPatcher : public UObject
{
public:
	TArray< struct FIniLocFileEntry >                  Files;                                            		// 0x003C (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x0048 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x0050 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 649 ];

		return pClassPointer;
	};

	void ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddFileToDownload ( struct FString Filename );
	void ProcessIniLocFile ( struct FString Filename, TArray< unsigned char >* FileData );
	void OnReadFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DownloadFiles ( );
	void Init ( );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
};

//UClass* UIniLocPatcher::pClassPointer = NULL;

// Class Engine.InternetInfo
// 0x0000 (0x0210 - 0x0210)
class AInternetInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 651 ];

		return pClassPointer;
	};

	struct FString GetBeaconText ( int I );
	struct FString GetBeaconAddress ( int I );
};

//UClass* AInternetInfo::pClassPointer = NULL;

// Class Engine.InterpActor
// 0x002C (0x0274 - 0x0248)
class AInterpActor : public ADynamicSMActor
{
public:
	class ANavigationPoint*                            MyMarker;                                         		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMonitorMover : 1;                                		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x024C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x024C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x024C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              MaxZVelocity;                                     		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              StayOpenTime;                                     		// 0x0254 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   OpenSound;                                        		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpenedSound;                                      		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseSound;                                       		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosedSound;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x0270 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 653 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction );
	void PlayMovingSound ( unsigned long bClosing );
	void FinishedOpen ( );
	void Restart ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void SetShadowParentOnAllAttachedComponents ( );
	void eventPostBeginPlay ( );
};

//UClass* AInterpActor::pClassPointer = NULL;

// Class Engine.InterpCurveEdSetup
// 0x0010 (0x004C - 0x003C)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray< struct FCurveEdTab >                       Tabs;                                             		// 0x003C (0x000C) [0x0000000000000000]              
	int                                                ActiveTab;                                        		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 655 ];

		return pClassPointer;
	};

};

//UClass* UInterpCurveEdSetup::pClassPointer = NULL;

// Class Engine.InterpTrack
// 0x001C (0x0058 - 0x003C)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    CurveEdVTable;                                    		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UClass*                                      TrackInstClass;                                   		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     TrackTitle;                                       		// 0x0048 (0x000C) [0x0000000000000000]              
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x0054 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bVisible : 1;                                     		// 0x0054 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 657 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrack::pClassPointer = NULL;

// Class Engine.Inventory
// 0x004C (0x025C - 0x0210)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AInventoryManager*                           InvManager;                                       		// 0x0214 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     ItemName;                                         		// 0x0218 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bRenderOverlays : 1;                              		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x0224 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x0224 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x0224 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0224 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              RespawnTime;                                      		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDesireability;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	struct FString                                     PickupMessage;                                    		// 0x0230 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	class USoundCue*                                   PickupSound;                                      		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PickupForce;                                      		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DroppedPickupClass;                               		// 0x024C (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x0250 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x0254 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleSystemComponent*                    DroppedPickupParticles;                           		// 0x0258 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 659 ];

		return pClassPointer;
	};

	void OwnerEvent ( struct FName EventName );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void ItemRemovedFromInvManager ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void AnnouncePickup ( class APawn* Other );
	void GiveTo ( class APawn* Other );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void eventDestroyed ( );
	struct FString GetHumanReadableName ( );
	void ActiveRenderOverlays ( class AHUD* H );
	void RenderOverlays ( class AHUD* H );
};

//UClass* AInventory::pClassPointer = NULL;

// Class Engine.InventoryManager
// 0x001C (0x022C - 0x0210)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                   		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     PendingWeapon;                                    		// 0x0214 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x0218 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x021C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      PendingFire;                                      		// 0x0220 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 661 ];

		return pClassPointer;
	};

	void ClientSyncWeapon ( class AWeapon* NewWeapon );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ChangedWeapon ( );
	bool CancelWeaponChange ( );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	float GetWeaponRatingFor ( class AWeapon* W );
	bool IsActiveWeapon ( class AWeapon* ThisWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void DrawHUD ( class AHUD* H );
	void OwnerEvent ( struct FName EventName );
	int ModifyDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );
	void eventDiscardInventory ( );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class AInventory* eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	bool HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void eventDestroyed ( );
	void SetupFor ( class APawn* P );
	void DumpWeaponStats ( );
	void InventoryActors ( class UClass* BaseClass, class AInventory** Inv );
	void eventPostBeginPlay ( );
};

//UClass* AInventoryManager::pClassPointer = NULL;

// Class Engine.KillZDamageType
// 0x0000 (0x008C - 0x008C)
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 663 ];

		return pClassPointer;
	};

};

//UClass* UKillZDamageType::pClassPointer = NULL;

// Class Engine.LadderReachSpec
// 0x0000 (0x0090 - 0x0090)
class ULadderReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 665 ];

		return pClassPointer;
	};

};

//UClass* ULadderReachSpec::pClassPointer = NULL;

// Class Engine.LadderVolume
// 0x0030 (0x02C4 - 0x0294)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                          		// 0x0294 (0x000C) [0x0000000000000000]              
	struct FVector                                     LookDir;                                          		// 0x02A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     ClimbDir;                                         		// 0x02AC (0x000C) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x02B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bNoPhysicalLadder : 1;                            		// 0x02BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoPath : 1;                                    		// 0x02BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowLadderStrafing : 1;                         		// 0x02BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class APawn*                                       PendingClimber;                                   		// 0x02C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 667 ];

		return pClassPointer;
	};

	void eventPhysicsChangedFor ( class AActor* Other );
	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	bool InUse ( class APawn* Ignored );
	void eventPostBeginPlay ( );
};

//UClass* ALadderVolume::pClassPointer = NULL;

// Class Engine.Level
// 0x01DC (0x026C - 0x0090)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x1DC ];                           		// 0x0090 (0x01DC) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 669 ];

		return pClassPointer;
	};

};

//UClass* ULevel::pClassPointer = NULL;

// Class Engine.LevelStreaming
// 0x0054 (0x0090 - 0x003C)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ULevel*                                      LoadedLevel;                                      		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x0048 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OldOffset;                                        		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsVisible : 1;                                   		// 0x0060 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x0060 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x0060 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x0060 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x0060 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x0060 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x0060 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x0060 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x0060 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0060 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bSkipClearLevels : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x0060 (0x0004) [0x0000000000002002] [0x00000800] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSectorLevel : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bLoadlevel : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bLevelStreamLoad : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bCheckStreamingQuery : 1;                         		// 0x0060 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bIsDynamicallyLoaded : 1;                         		// 0x0060 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bPendingUnregisteration : 1;                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	struct FColor                                      DrawColor;                                        		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ALevelStreamingVolume* >             EditorStreamingVolumes;                           		// 0x0068 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVolumeUnloadRequestTime;                      		// 0x0078 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SectorIndexX;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                SectorIndexY;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                T1GroupId;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FDouble                                     UnregisterationTime;                              		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 671 ];

		return pClassPointer;
	};

};

//UClass* ULevelStreaming::pClassPointer = NULL;

// Class Engine.LevelStreamingDistance
// 0x0014 (0x00A4 - 0x0090)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                           		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CheckHeight : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 673 ];

		return pClassPointer;
	};

};

//UClass* ULevelStreamingDistance::pClassPointer = NULL;

// Class Engine.LevelStreamingKismet
// 0x0000 (0x0090 - 0x0090)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 675 ];

		return pClassPointer;
	};

};

//UClass* ULevelStreamingKismet::pClassPointer = NULL;

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0090 - 0x0090)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 677 ];

		return pClassPointer;
	};

};

//UClass* ULevelStreamingPersistent::pClassPointer = NULL;

// Class Engine.LevelStreamingVolume
// 0x0011 (0x0269 - 0x0258)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x0258 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      Usage;                                            		// 0x0268 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 679 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* ALevelStreamingVolume::pClassPointer = NULL;

// Class Engine.LiftCenter
// 0x0020 (0x031C - 0x02FC)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                           		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              MaxDist2D;                                        		// 0x0300 (0x0004) [0x0000000000000000]              
	struct FVector                                     LiftOffset;                                       		// 0x0304 (0x000C) [0x0000000000000000]              
	unsigned long                                      bJumpLift : 1;                                    		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CollisionHeight;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	class ATrigger*                                    LiftTrigger;                                      		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 681 ];

		return pClassPointer;
	};

	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostBeginPlay ( );
};

//UClass* ALiftCenter::pClassPointer = NULL;

// Class Engine.LiftExit
// 0x0008 (0x0304 - 0x02FC)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExitOnly : 1;                                    		// 0x0300 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 683 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	void WaitForLift ( class APawn* Other );
	bool CanBeReachedFromLiftBy ( class APawn* Other );
};

//UClass* ALiftExit::pClassPointer = NULL;

// Class Engine.LightFunction
// 0x0010 (0x004C - 0x003C)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 685 ];

		return pClassPointer;
	};

};

//UClass* ULightFunction::pClassPointer = NULL;

// Class Engine.Texture
// 0x007C (0x00B8 - 0x003C)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                         		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RGBE : 1;                                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      DeferCompression : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      NeverStream : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bNoTiling : 1;                                    		// 0x003C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x003C (0x0004) [0x0000000000002002] [0x00004000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bReImportIgnoreTimestampCheck : 1;                		// 0x003C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	float                                              UnpackMin[ 0x4 ];                                 		// 0x0040 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnpackMax[ 0x4 ];                                 		// 0x0050 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     SourceArt;                                        		// 0x0060 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      CompressionSettings;                              		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Filter;                                           		// 0x0091 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODGroup;                                         		// 0x0092 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CachedLODGroup;                                   		// 0x0093 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                LODBias;                                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedCombinedLODBias;                            		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SourceFilePath;                                   		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SourceFileTimestamp;                              		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Resource;                                         		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 687 ];

		return pClassPointer;
	};

};

//UClass* UTexture::pClassPointer = NULL;

// Class Engine.Texture2D
// 0x005C (0x0114 - 0x00B8)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x00B8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SizeX;                                            		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x00CC (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00CD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00CE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ManualLoadSwitchSettings;                         		// 0x00CF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsStreamable : 1;                                		// 0x00D0 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x00D0 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x00D0 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMiplevelsToBeResident : 1;                  		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x00D0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableLoadSwitch : 1;                           		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              TimeToForceMipLevelsToBeResident;                 		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TextureFileCacheName;                             		// 0x00D8 (0x0008) [0x0000000000000000]              
	struct FGuid                                       TextureFileCacheGuid;                             		// 0x00E0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                RequestedMips;                                    		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResidentMips;                                     		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x00F8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                           		// 0x00FC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MipTailBaseIdx;                                   		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ResourceMem;                                      		// 0x010C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstResourceMemMip;                              		// 0x0110 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 689 ];

		return pClassPointer;
	};

	class UTexture2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat );
};

//UClass* UTexture2D::pClassPointer = NULL;

// Class Engine.LightMapTexture2D
// 0x0000 (0x0114 - 0x0114)
class ULightMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 691 ];

		return pClassPointer;
	};

};

//UClass* ULightMapTexture2D::pClassPointer = NULL;

// Class Engine.LightVolume
// 0x0000 (0x0258 - 0x0258)
class ALightVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 693 ];

		return pClassPointer;
	};

};

//UClass* ALightVolume::pClassPointer = NULL;

// Class Engine.LineBatchComponent
// 0x0018 (0x0228 - 0x0210)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                   		// 0x0210 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FPrimitiveDrawInterfaceView;                      		// 0x0214 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          BatchedLines;                                     		// 0x0218 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              DefaultLifeTime;                                  		// 0x0224 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 695 ];

		return pClassPointer;
	};

};

//UClass* ULineBatchComponent::pClassPointer = NULL;

// Class Engine.LocalAxisMapVolume
// 0x002C (0x0284 - 0x0258)
class ALocalAxisMapVolume : public AVolume
{
public:
	int                                                Mapid;                                            		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AxisDescription;                                  		// 0x0260 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DiscoverVolumeName;                               		// 0x026C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DiscoverId;                                       		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 697 ];

		return pClassPointer;
	};

};

//UClass* ALocalAxisMapVolume::pClassPointer = NULL;

// Class Engine.LocalPlayer
// 0x04D1 (0x0531 - 0x0060)
class ULocalPlayer : public UPlayer
{
public:
	int                                                ControllerId;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   Origin;                                           		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Size;                                             		// 0x0070 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UPostProcessChain* >                 PlayerPostProcessChains;                          		// 0x007C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewState;                                        		// 0x0088 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bStartAnotherPawnMode : 1;                        		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableChangeUIBlurMasked : 1;                    		// 0x008C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bOverridePostProcessSettings : 1;                 		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x008C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bControledCamera : 1;                             		// 0x008C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMute : 1;                                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bBackupCamInfo : 1;                               		// 0x008C (0x0004) [0x0000000000000000] [0x00000040] 
	class AController*                                 BackupAnotherPawnController;                      		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       BackupMyPawn;                                     		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentBrightScale;                               		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x009C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     LastViewLocation;                                 		// 0x00A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCurrentUIBlurMaskInfo >            CurrentUIBlurMaskList;                            		// 0x00B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCurrentUIBlurMaskInfo >            CurrentUIBlurMaskListProxy;                       		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x00C8 (0x0284) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AVolume*                                     CurrentDeathSignalVolume;                         		// 0x034C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPostProcessSettings                        PostProcessSettingsOverride;                      		// 0x0350 (0x0134) [0x0000000000000000]              
	float                                              PPSettingsOverrideStartBlend;                     		// 0x0484 (0x0004) [0x0000000000000000]              
	class AMusicVolume*                                CurrentVolumeUsed;                                		// 0x0488 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              CurrentDelayTime;                                 		// 0x048C (0x0004) [0x0000000000000000]              
	int                                                CurrentPlayIndex;                                 		// 0x0490 (0x0004) [0x0000000000000000]              
	TArray< int >                                      RandomSoundPlayList;                              		// 0x0494 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    DelayMusicTime;                                   		// 0x04A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             SoundVolumePlayMusic[ 0x5 ];                      		// 0x04AC (0x0014) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	struct FName                                       CurrentUniqueBGMName;                             		// 0x04C0 (0x0008) [0x0000000000000000]              
	int                                                CurrentUniqueUserCount;                           		// 0x04C8 (0x0004) [0x0000000000000000]              
	float                                              UniqueBGMDelayedStopTime;                         		// 0x04CC (0x0004) [0x0000000000000000]              
	struct FName                                       CurrentDynamicBGMName;                            		// 0x04D0 (0x0008) [0x0000000000000000]              
	float                                              CurrentDynamicBGMPriorityValue;                   		// 0x04D8 (0x0004) [0x0000000000000000]              
	int                                                InstMusicSlotNext;                                		// 0x04DC (0x0004) [0x0000000000000000]              
	int                                                SoundVolumePlayMusicSlotNext;                     		// 0x04E0 (0x0004) [0x0000000000000000]              
	class ALocalAxisMapVolume*                         CurrentMapVolume;                                 		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADiscoverVolume*                             CurrentDiscoverVolume;                            		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABossVolume*                                 CurrentBossVolume;                                		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABlockingVolumeResourceCheck*                CurrentBlockingVolumeResourceCheck;               		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AUIModVolume*                                CurrentUIModVolume;                               		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AAmbientSoundVolume*                         CurrentAmbientVolumeUsed;                         		// 0x04F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              CurrentAmbientDelayTime;                          		// 0x04FC (0x0004) [0x0000000000000000]              
	int                                                CurrentAmbientPlayIndex;                          		// 0x0500 (0x0004) [0x0000000000000000]              
	TArray< int >                                      RandomAmbientSoundPlayList;                       		// 0x0504 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    AmbientDelayMusicTime;                            		// 0x0510 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             SoundVolumePlayAmbient[ 0x2 ];                    		// 0x051C (0x0008) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	int                                                SoundVolumePlayAmbientSlotNext;                   		// 0x0524 (0x0004) [0x0000000000000000]              
	class AMusicOnceVolume*                            CurrentMusicOnceVolumeUsed;                       		// 0x0528 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fBackupFreeCamDistance;                           		// 0x052C (0x0004) [0x0000000000000000]              
	unsigned char                                      BackupCharacterFit_Status;                        		// 0x0530 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 699 ];

		return pClassPointer;
	};

	void TouchPlayerPostProcessChain ( );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	bool RemoveAllPostProcessingChains ( );
	bool RemovePostProcessingChain ( int InIndex );
	bool InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone );
	void SetControllerId ( int NewControllerId );
	void ClearPostProcessSettingsOverride ( );
	void UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings );
	void ResetSoundGroupVolOnstop ( class UAudioComponent* AC );
	void OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime );
	bool GetActorVisibility ( class AActor* TestActor );
	void SendSplitJoin ( );
	bool SpawnPlayActor ( struct FString URL, struct FString* OutError );
};

//UClass* ULocalPlayer::pClassPointer = NULL;

// Class Engine.MantleMarker
// 0x0008 (0x0304 - 0x02FC)
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x02FC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 701 ];

		return pClassPointer;
	};

};

//UClass* AMantleMarker::pClassPointer = NULL;

// Class Engine.MantleReachSpec
// 0x0000 (0x009C - 0x009C)
class UMantleReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 703 ];

		return pClassPointer;
	};

};

//UClass* UMantleReachSpec::pClassPointer = NULL;

// Class Engine.MapInfo
// 0x0000 (0x003C - 0x003C)
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 705 ];

		return pClassPointer;
	};

};

//UClass* UMapInfo::pClassPointer = NULL;

// Class Engine.Material
// 0x02C4 (0x030C - 0x0048)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PhysicalMaterial;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x0050 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x0074 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x0098 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x00BC (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        Normal;                                           		// 0x00E0 (0x002C) [0x0000000000000000]              
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x010C (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0130 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x0154 (0x0024) [0x0000000000000000]              
	float                                              OpacityMaskClipValue;                             		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2MaterialInput                       Distortion;                                       		// 0x017C (0x0028) [0x0000000000000000]              
	unsigned char                                      BlendMode;                                        		// 0x01A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightingModel;                                    		// 0x01A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x01A8 (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        AnisotropicDirection;                             		// 0x01CC (0x002C) [0x0000000000000000]              
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x01F8 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x021C (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        WorldPositionOffset;                              		// 0x0240 (0x002C) [0x0000000000000000]              
	unsigned long                                      TwoSided : 1;                                     		// 0x026C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x026C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x026C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x026C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x026C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x026C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFracturedMeshes : 1;                     		// 0x026C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x026C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x026C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x026C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x026C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFoliage : 1;                             		// 0x026C (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x026C (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x026C (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x026C (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x026C (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x026C (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x026C (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMaterialEffect : 1;                      		// 0x026C (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      Wireframe : 1;                                    		// 0x026C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bAcceptRenderDecal : 1;                           		// 0x026C (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x026C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bUsesDistortion : 1;                              		// 0x026C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x026C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSupportsSinglePassSHLight : 1;                   		// 0x026C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x026C (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	class UMaterial*                                   FallbackMaterial;                                 		// 0x0270 (0x0004) [0x0000000000000000]              
	struct FPointer                                    MaterialResources[ 0x2 ];                         		// 0x0274 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DefaultMaterialInstances[ 0x2 ];                  		// 0x027C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                EditorX;                                          		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                EditorPitch;                                      		// 0x028C (0x0004) [0x0000000000000000]              
	int                                                EditorYaw;                                        		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialExpression* >               Expressions;                                      		// 0x0294 (0x000C) [0x0000000000000000]              
	TArray< class UMaterialExpressionComment* >        EditorComments;                                   		// 0x02A0 (0x000C) [0x0000000000000000]              
	TArray< class UMaterialExpressionCompound* >       EditorCompounds;                                  		// 0x02AC (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x02B8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x02F4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             ContentTags;                                      		// 0x0300 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 707 ];

		return pClassPointer;
	};

	TArray< class UTexture* > GetTextures ( );
};

//UClass* UMaterial::pClassPointer = NULL;

// Class Engine.MaterialEffect
// 0x000B (0x006C - 0x0061)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSignalMaterialEffect : 1;                        		// 0x0068 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 709 ];

		return pClassPointer;
	};

};

//UClass* UMaterialEffect::pClassPointer = NULL;

// Class Engine.MaterialExpression
// 0x0028 (0x0064 - 0x003C)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRealtimePreview : 1;                             		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsParameterExpression : 1;                       		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowOutputNameOnPin : 1;                         		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHidePreviewWindow : 1;                           		// 0x0044 (0x0004) [0x0000000000000000] [0x00000008] 
	class UMaterialExpressionCompound*                 Compound;                                         		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     Desc;                                             		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             MenuCategories;                                   		// 0x0058 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 711 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpression::pClassPointer = NULL;

// Class Engine.MaterialInstanceActor
// 0x0004 (0x0214 - 0x0210)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 713 ];

		return pClassPointer;
	};

};

//UClass* AMaterialInstanceActor::pClassPointer = NULL;

// Class Engine.MatineeActor
// 0x0010 (0x0220 - 0x0210)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x0210 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0214 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPaused : 1;                                      		// 0x0214 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	float                                              PlayRate;                                         		// 0x0218 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Position;                                         		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 715 ];

		return pClassPointer;
	};

	void eventUpdate ( );
};

//UClass* AMatineeActor::pClassPointer = NULL;

// Class Engine.MeshComponent
// 0x0018 (0x0228 - 0x0210)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0210 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMaterialInterface* >                BackupMaterials;                                  		// 0x021C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 717 ];

		return pClassPointer;
	};

	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex );
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	int GetNumElements ( );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
};

//UClass* UMeshComponent::pClassPointer = NULL;

// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0040 - 0x003C)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x003C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x003C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x003C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x003C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 719 ];

		return pClassPointer;
	};

};

//UClass* UPrimitiveComponentFactory::pClassPointer = NULL;

// Class Engine.MeshComponentFactory
// 0x000C (0x004C - 0x0040)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 721 ];

		return pClassPointer;
	};

};

//UClass* UMeshComponentFactory::pClassPointer = NULL;

// Class Engine.Model
// 0x0B6C (0x0BA8 - 0x003C)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xB6C ];                           		// 0x003C (0x0B6C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 723 ];

		return pClassPointer;
	};

};

//UClass* UModel::pClassPointer = NULL;

// Class Engine.ModelComponent
// 0x0030 (0x0240 - 0x0210)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x0210 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ZoneIndex;                                        		// 0x0214 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ComponentIndex;                                   		// 0x0218 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          Nodes;                                            		// 0x021C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          Edges;                                            		// 0x0228 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          Elements;                                         		// 0x0234 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 725 ];

		return pClassPointer;
	};

};

//UClass* UModelComponent::pClassPointer = NULL;

// Class Engine.MotionBlurEffect
// 0x002B (0x008C - 0x0061)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RadialBlur : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialCenterX;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialCenterY;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurScale;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurAmount;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialSampleCount;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 727 ];

		return pClassPointer;
	};

};

//UClass* UMotionBlurEffect::pClassPointer = NULL;

// Class Engine.MoveActionPoint
// 0x0058 (0x0268 - 0x0210)
class AMoveActionPoint : public AActor
{
public:
	class USpriteComponent*                            ActorSprite;                                      		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                ZoneID;                                           		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ObjectID;                                         		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PossibleAngle;                                    		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPawnDirRotate : 1;                          		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForcePawnVelocity : 1;                           		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForcePlayCustomAnim : 1;                         		// 0x0220 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCameraRotate : 1;                           		// 0x0220 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPlayCustomAnimLoop : 1;                          		// 0x0220 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FString                                     CustomAnimSeqName;                                		// 0x0224 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EndPathAnimSeqName;                               		// 0x0230 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EndPathAnimSeqName_Dash;                          		// 0x023C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fActionPTAcceleration;                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NextMoveState;                                    		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActionPointMoveType;                              		// 0x024D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActionPointCancelType;                            		// 0x024E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartAreaExtent;                                  		// 0x0250 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMoveActionPointInfo >              ActionPoints;                                     		// 0x025C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 729 ];

		return pClassPointer;
	};

};

//UClass* AMoveActionPoint::pClassPointer = NULL;

// Class Engine.MoveActionPointCylinerComponent
// 0x0000 (0x0220 - 0x0220)
class UMoveActionPointCylinerComponent : public UCylinderComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 731 ];

		return pClassPointer;
	};

};

//UClass* UMoveActionPointCylinerComponent::pClassPointer = NULL;

// Class Engine.MultiFont
// 0x000C (0x01A8 - 0x019C)
class UMultiFont : public UFont
{
public:
	TArray< float >                                    ResolutionTestTable;                              		// 0x019C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 733 ];

		return pClassPointer;
	};

	int GetResolutionTestTableIndex ( float HeightTest );
};

//UClass* UMultiFont::pClassPointer = NULL;

// Class Engine.MusicOnceVolume
// 0x0000 (0x02B0 - 0x02B0)
class AMusicOnceVolume : public AMusicVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 735 ];

		return pClassPointer;
	};

};

//UClass* AMusicOnceVolume::pClassPointer = NULL;

// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 737 ];

		return pClassPointer;
	};

};

//UClass* UMusicTrackDataStructures::pClassPointer = NULL;

// Class Engine.Mutator
// 0x0014 (0x0224 - 0x0210)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           GroupNames;                                       		// 0x0214 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUserAdded : 1;                                   		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 739 ];

		return pClassPointer;
	};

	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	struct FString ParseChatPercVar ( class AController* Who, struct FString Cmd );
	void GetServerPlayers ( struct FServerResponseLine* ServerState );
	void GetServerDetails ( struct FServerResponseLine* ServerState );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

//UClass* AMutator::pClassPointer = NULL;

// Class Engine.NetPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 741 ];

		return pClassPointer;
	};

};

//UClass* UNetPendingLevel::pClassPointer = NULL;

// Class Engine.Note
// 0x000C (0x021C - 0x0210)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x0210 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 743 ];

		return pClassPointer;
	};

};

//UClass* ANote::pClassPointer = NULL;

// Class Engine.NoticeBoardActor
// 0x001C (0x022C - 0x0210)
class ANoticeBoardActor : public AActor
{
public:
	float                                              MarkAreaRadius;                                   		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NoticeText;                                       		// 0x0214 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NoticeID;                                         		// 0x0220 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDrawSphereComponent*                        AreaSphere;                                       		// 0x0228 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 745 ];

		return pClassPointer;
	};

};

//UClass* ANoticeBoardActor::pClassPointer = NULL;

// Class Engine.Objective
// 0x0000 (0x02FC - 0x02FC)
class AObjective : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 747 ];

		return pClassPointer;
	};

};

//UClass* AObjective::pClassPointer = NULL;

// Class Engine.ObjectNote
// 0x003C (0x0078 - 0x003C)
class UObjectNote : public UObject
{
public:
	TArray< struct FString >                           Key;                                              		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           Value;                                            		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      State;                                            		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      CommonAsset;                                      		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           SubValue;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 749 ];

		return pClassPointer;
	};

};

//UClass* UObjectNote::pClassPointer = NULL;

// Class Engine.ObjectReferencer
// 0x000C (0x0048 - 0x003C)
class UObjectReferencer : public UObject
{
public:
	TArray< class UObject* >                           ReferencedObjects;                                		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 751 ];

		return pClassPointer;
	};

};

//UClass* UObjectReferencer::pClassPointer = NULL;

// Class Engine.OceanVolume
// 0x0004 (0x025C - 0x0258)
class AOceanVolume : public AVolume
{
public:
	class AOceanVolume*                                NextVolume;                                       		// 0x0258 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 753 ];

		return pClassPointer;
	};

};

//UClass* AOceanVolume::pClassPointer = NULL;

// Class Engine.OnlineGameplayEvents
// 0x0050 (0x008C - 0x003C)
class UOnlineGameplayEvents : public UObject
{
public:
	TArray< struct FPlayerInformation >                PlayerList;                                       		// 0x003C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           EventDescList;                                    		// 0x0048 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             EventNames;                                       		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPlayerEvent >                      PlayerEvents;                                     		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     GameplaySessionStartTime;                         		// 0x006C (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bGameplaySessionInProgress : 1;                   		// 0x0078 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	struct FGuid                                       GameplaySessionID;                                		// 0x007C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 755 ];

		return pClassPointer;
	};

};

//UClass* UOnlineGameplayEvents::pClassPointer = NULL;

// Class Engine.Settings
// 0x0048 (0x0084 - 0x003C)
class USettings : public UObject
{
public:
	TArray< struct FLocalizedStringSetting >           LocalizedSettings;                                		// 0x003C (0x000C) [0x0000000000000000]              
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0048 (0x000C) [0x0000000000000000]              
	TArray< struct FLocalizedStringSettingMetaData >   LocalizedSettingsMappings;                        		// 0x0054 (0x000C) [0x0000000000000000]              
	TArray< struct FSettingsPropertyPropertyMetaData > PropertyMappings;                                 		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;            		// 0x006C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __NotifyPropertyValueUpdated__Delegate;           		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 757 ];

		return pClassPointer;
	};

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* URL );
	void AppendContextsToURL ( struct FString* URL );
	void AppendPropertiesToURL ( struct FString* URL );
	void AppendDataBindingsToURL ( struct FString* URL );
	void GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings );
	void GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps );
	bool GetRangedPropertyValue ( int PropertyId, float* OutValue );
	bool SetRangedPropertyValue ( int PropertyId, float NewValue );
	bool GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetPropertyMappingType ( int PropertyId, unsigned char* OutType );
	bool HasStringSetting ( int SettingId );
	bool HasProperty ( int PropertyId );
	void UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props );
	void UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings );
	unsigned char GetPropertyType ( int PropertyId );
	bool GetPropertyValueId ( int PropertyId, int* ValueId );
	bool SetPropertyValueId ( int PropertyId, int ValueId );
	bool GetStringProperty ( int PropertyId, struct FString* Value );
	void SetStringProperty ( int PropertyId, struct FString Value );
	bool GetIntProperty ( int PropertyId, int* Value );
	void SetIntProperty ( int PropertyId, int Value );
	bool GetFloatProperty ( int PropertyId, float* Value );
	void SetFloatProperty ( int PropertyId, float Value );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	struct FString GetPropertyAsStringByName ( struct FName PropertyName );
	struct FString GetPropertyAsString ( int PropertyId );
	struct FString GetPropertyColumnHeader ( int PropertyId );
	struct FName GetPropertyName ( int PropertyId );
	bool GetPropertyId ( struct FName PropertyName, int* PropertyId );
	bool SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue );
	struct FName GetStringSettingValueNameByName ( struct FName StringSettingName );
	struct FName GetStringSettingValueName ( int StringSettingId, int ValueIndex );
	bool IsWildcardStringSetting ( int StringSettingId );
	struct FString GetStringSettingColumnHeader ( int StringSettingId );
	struct FName GetStringSettingName ( int StringSettingId );
	bool GetStringSettingId ( struct FName StringSettingName, int* StringSettingId );
	bool GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex );
	void SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd );
	bool GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values );
	bool IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap );
	bool GetStringSettingValue ( int StringSettingId, int* ValueIndex );
	void SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd );
	void GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 );
	void GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob );
	int GetSettingsDataInt ( struct FSettingsData* Data );
	float GetSettingsDataFloat ( struct FSettingsData* Data );
	struct FString GetSettingsDataString ( struct FSettingsData* Data );
	void EmptySettingsData ( struct FSettingsData* Data );
	void SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy );
	void SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob );
	void SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data );
	void SetSettingsDataInt ( int InInt, struct FSettingsData* Data );
	void SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data );
	void SetSettingsDataString ( struct FString InString, struct FSettingsData* Data );
	void NotifyPropertyValueUpdated ( struct FName PropertyName );
	void NotifySettingValueUpdated ( struct FName SettingName );
};

//UClass* USettings::pClassPointer = NULL;

// Class Engine.OnlineGameSearch
// 0x0088 (0x010C - 0x0084)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FLocalizedStringSetting                     Query;                                            		// 0x0088 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsListPlayQuery : 1;                             		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsesArbitration : 1;                             		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x0094 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIsListPlaySearchInProgress : 1;                  		// 0x0094 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	int                                                NumListPlayServersAvailable;                      		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                NumGoldOnlyListPlayServersAvailable;              		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                NumJoinableListPlayServersAvailable;              		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameSettingsClass;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineGameSearchResult >           Results;                                          		// 0x00A8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FOverrideSkill                              ManualSkillOverride;                              		// 0x00B4 (0x0028) [0x0000000000000000]              
	TArray< struct FNamedObjectProperty >              NamedProperties;                                  		// 0x00DC (0x000C) [0x0000000000000000]              
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x00E8 (0x0018) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     AdditionalSearchCriteria;                         		// 0x0100 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 759 ];

		return pClassPointer;
	};

	void eventSortSearchResults ( );
	void SetSkillOverride ( int LeaderboardId, TArray< struct FUniqueNetId >* Players );
};

//UClass* UOnlineGameSearch::pClassPointer = NULL;

// Class Engine.OnlineGameSettings
// 0x0040 (0x00C4 - 0x0084)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                             		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                NumPrivateConnections;                            		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                NumOpenPublicConnections;                         		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                NumOpenPrivateConnections;                        		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FQWord                                      ServerNonce;                                      		// 0x0094 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsesStats : 1;                                   		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAllowInvites : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUsesPresence : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x009C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bUsesArbitration : 1;                             		// 0x009C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bWasFromInvite : 1;                               		// 0x009C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bIsDedicated : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsListPlay : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsGoldOnlyListPlay : 1;                          		// 0x009C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x009C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	struct FString                                     OwningPlayerName;                                 		// 0x00A0 (0x000C) [0x0000000000000000]              
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x00AC (0x0008) [0x0000000000000000]              
	int                                                PingInMs;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              MatchQuality;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      GameState;                                        		// 0x00BC (0x0001) [0x0000000000000002]              ( CPF_Const )
	int                                                BuildUniqueId;                                    		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 761 ];

		return pClassPointer;
	};

};

//UClass* UOnlineGameSettings::pClassPointer = NULL;

// Class Engine.OnlinePlaylistManager
// 0x0038 (0x0074 - 0x003C)
class UOnlinePlaylistManager : public UObject
{
public:
	TArray< struct FPlaylist >                         Playlists;                                        		// 0x003C (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           PlaylistFileNames;                                		// 0x0048 (0x000C) [0x0000000000000000]              
	TArray< struct FName >                             DatastoresToRefresh;                              		// 0x0054 (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                DownloadCount;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                SuccessfulCount;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadPlaylistComplete__Delegate;               		// 0x0068 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 763 ];

		return pClassPointer;
	};

	void GetContentIdsFromPlaylist ( int PlaylistId, TArray< int >* ContentIds );
	void GetTeamInfoFromPlaylist ( int PlaylistId, int* TeamSize, int* TeamCount );
	class UOnlineGameSettings* GetGameSettings ( int PlaylistId, int GameSettingsId );
	void FinalizePlaylistObjects ( );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DetermineFilesToDownload ( );
	void DownloadPlaylist ( );
	void OnReadPlaylistComplete ( );
};

//UClass* UOnlinePlaylistManager::pClassPointer = NULL;

// Class Engine.OnlineProfileSettings
// 0x0050 (0x008C - 0x003C)
class UOnlineProfileSettings : public UObject
{
public:
	int                                                VersionNumber;                                    		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ProfileSettingIds;                                		// 0x0040 (0x000C) [0x0000000000000000]              
	TArray< struct FOnlineProfileSetting >             ProfileSettings;                                  		// 0x004C (0x000C) [0x0000000000000000]              
	TArray< struct FOnlineProfileSetting >             DefaultSettings;                                  		// 0x0058 (0x000C) [0x0000000000000000]              
	TArray< struct FIdToStringMapping >                OwnerMappings;                                    		// 0x0064 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FSettingsPropertyPropertyMetaData > ProfileMappings;                                  		// 0x0070 (0x000C) [0x0000000000000000]              
	unsigned char                                      AsyncState;                                       		// 0x007C (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;            		// 0x0080 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 765 ];

		return pClassPointer;
	};

	void eventModifyAvailableProfileSettings ( );
	bool GetRangedProfileSettingValue ( int ProfileId, float* OutValue );
	bool SetRangedProfileSettingValue ( int ProfileId, float NewValue );
	bool GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType );
	void SetDefaultVersionNumber ( );
	int GetVersionNumber ( );
	void AppendVersionToSettings ( );
	void AppendVersionToReadIds ( );
	void eventSetToDefaults ( );
	bool GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat );
	bool GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt );
	bool GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex );
	bool SetProfileSettingValueFloat ( int ProfileSettingId, float Value );
	bool SetProfileSettingValueInt ( int ProfileSettingId, int Value );
	bool SetProfileSettingValueId ( int ProfileSettingId, int Value );
	bool GetProfileSettingValueFloat ( int ProfileSettingId, float* Value );
	bool GetProfileSettingValueInt ( int ProfileSettingId, int* Value );
	bool GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex );
	bool SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue );
	bool SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue );
	bool GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value );
	bool GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values );
	struct FName GetProfileSettingValueName ( int ProfileSettingId );
	bool GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value );
	bool IsProfileSettingIdMapped ( int ProfileSettingId );
	int FindProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndex ( int ProfileSettingId );
	int FindProfileSettingIndex ( int ProfileSettingId );
	struct FString GetProfileSettingColumnHeader ( int ProfileSettingId );
	struct FName GetProfileSettingName ( int ProfileSettingId );
	bool GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId );
	void NotifySettingValueUpdated ( struct FName SettingName );
};

//UClass* UOnlineProfileSettings::pClassPointer = NULL;

// Class Engine.OnlineStats
// 0x000C (0x0048 - 0x003C)
class UOnlineStats : public UObject
{
public:
	TArray< struct FStringIdToStringMapping >          ViewIdMappings;                                   		// 0x003C (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 767 ];

		return pClassPointer;
	};

	struct FName GetViewName ( int ViewId );
	bool GetViewId ( struct FName ViewName, int* ViewId );
};

//UClass* UOnlineStats::pClassPointer = NULL;

// Class Engine.OnlineStatsRead
// 0x004C (0x0094 - 0x0048)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                           		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SortColumnId;                                     		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ColumnIds;                                        		// 0x0050 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                TotalRowsInView;                                  		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineStatsRow >                   Rows;                                             		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FColumnMetaData >                   ColumnMappings;                                   		// 0x006C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ViewName;                                         		// 0x0078 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                TitleId;                                          		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnStatsReadComplete__Delegate;                  		// 0x0088 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 769 ];

		return pClassPointer;
	};

	void OnStatsReadComplete ( );
};

//UClass* UOnlineStatsRead::pClassPointer = NULL;

// Class Engine.OnlineStatsWrite
// 0x0040 (0x0088 - 0x0048)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray< struct FStringIdToStringMapping >          StatMappings;                                     		// 0x0048 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ViewIds;                                          		// 0x0060 (0x000C) [0x0000000000000000]              
	TArray< int >                                      ArbitratedViewIds;                                		// 0x006C (0x000C) [0x0000000000000000]              
	int                                                RatingId;                                         		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x007C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 771 ];

		return pClassPointer;
	};

	void DecrementIntStat ( int StatId, int DecBy );
	void DecrementFloatStat ( int StatId, float DecBy );
	void IncrementIntStat ( int StatId, int IncBy );
	void IncrementFloatStat ( int StatId, float IncBy );
	void SetIntStat ( int StatId, int Value );
	void SetFloatStat ( int StatId, float Value );
	struct FName GetStatName ( int StatId );
	bool GetStatId ( struct FName StatName, int* StatId );
	void OnStatsWriteComplete ( );
};

//UClass* UOnlineStatsWrite::pClassPointer = NULL;

// Class Engine.OnlineSubsystem
// 0x0088 (0x00C4 - 0x003C)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0044 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0048 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x0050 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0054 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x0058 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x0068 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x006C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x007C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x0080 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FNamedInterface >                   NamedInterfaces;                                  		// 0x0088 (0x000C) [0x0000000000000000]              
	TArray< struct FNamedInterfaceDef >                NamedInterfaceDefs;                               		// 0x0094 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FNamedSession >                     Sessions;                                         		// 0x00A0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bUseBuildIdOverride : 1;                          		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                BuildIdOverride;                                  		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IniLocPatcherClassName;                           		// 0x00B4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class UIniLocPatcher*                              Patcher;                                          		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 773 ];

		return pClassPointer;
	};

	void DumpSessionState ( );
	int GetBuildUniqueId ( );
	bool AreUniqueNetIdsEqual ( struct FUniqueNetId* NetIdA, struct FUniqueNetId* NetIdB );
	bool StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId );
	struct FString UniqueNetIdToString ( struct FUniqueNetId* IdToConvert );
	class UObject* eventGetNamedInterface ( struct FName InterfaceName );
	void eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface );
	bool eventSetNewsInterface ( class UObject* NewInterface );
	bool eventSetStatsInterface ( class UObject* NewInterface );
	bool eventSetVoiceInterface ( class UObject* NewInterface );
	bool eventSetContentInterface ( class UObject* NewInterface );
	bool eventSetGameInterface ( class UObject* NewInterface );
	bool eventSetSystemInterface ( class UObject* NewInterface );
	bool eventSetPlayerInterfaceEx ( class UObject* NewInterface );
	bool eventSetPlayerInterface ( class UObject* NewInterface );
	bool eventSetAccountInterface ( class UObject* NewInterface );
	void eventExit ( );
	bool eventPostInit ( );
	bool eventInit ( );
};

//UClass* UOnlineSubsystem::pClassPointer = NULL;

// Class Engine.OutLineBloomEffect
// 0x0000 (0x0061 - 0x0061)
class UOutLineBloomEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 775 ];

		return pClassPointer;
	};

};

//UClass* UOutLineBloomEffect::pClassPointer = NULL;

// Class Engine.PackageMapLevel
// 0x0004 (0x00C4 - 0x00C0)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C0 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 777 ];

		return pClassPointer;
	};

};

//UClass* UPackageMapLevel::pClassPointer = NULL;

// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 779 ];

		return pClassPointer;
	};

};

//UClass* UPackageMapSeekFree::pClassPointer = NULL;

// Class Engine.ParticleSet
// 0x0024 (0x0060 - 0x003C)
class UParticleSet : public UObject
{
public:
	TArray< struct FWeaponParticleInfo >               HitParticles;                                     		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepParticleInfo >                 StepParticles;                                    		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepParticleInfo >                 GroundParticles;                                  		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 781 ];

		return pClassPointer;
	};

};

//UClass* UParticleSet::pClassPointer = NULL;

// Class Engine.PathBlockingVolume
// 0x0000 (0x0258 - 0x0258)
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 783 ];

		return pClassPointer;
	};

};

//UClass* APathBlockingVolume::pClassPointer = NULL;

// Class Engine.PathEngine_FederationFile
// 0x0030 (0x006C - 0x003C)
class UPathEngine_FederationFile : public UObject
{
public:
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x003C (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 785 ];

		return pClassPointer;
	};

};

//UClass* UPathEngine_FederationFile::pClassPointer = NULL;

// Class Engine.PathNode
// 0x002C (0x0328 - 0x02FC)
class APathNode : public ANavigationPoint
{
public:
	float                                              Width;                                            		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Tessellation;                                     		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IgnoreAutoHeight : 1;                             		// 0x0308 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSubNode : 1;                                     		// 0x0308 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDebugNode : 1;                                   		// 0x0308 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                OneWayDepth;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Alias;                                            		// 0x0310 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Description;                                      		// 0x031C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 787 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};

//UClass* APathNode::pClassPointer = NULL;

// Class Engine.Pawn
// 0x043C (0x064C - 0x0210)
class APawn : public AActor
{
public:
	float                                              MaxStepHeight;                                    		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxJumpHeight;                                    		// 0x0214 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WalkableFloorZ;                                   		// 0x0218 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 Controller;                                       		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       NextPawn;                                         		// 0x0220 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetRelevancyTime;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	class APlayerController*                           LastRealViewer;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	class AActor*                                      LastViewer;                                       		// 0x022C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpAndOut : 1;                                    		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x0230 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x0230 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x0230 (0x0004) [0x0000000000000022] [0x00000008] ( CPF_Const | CPF_Net )
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x0230 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bCanCrouch : 1;                                   		// 0x0230 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCrawler : 1;                                     		// 0x0230 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x0230 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bJumpCapable : 1;                                 		// 0x0230 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanJump : 1;                                     		// 0x0230 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x0230 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x0230 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanFly : 1;                                      		// 0x0230 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanClimbLadders : 1;                             		// 0x0230 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x0230 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x0230 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x0230 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSimulateGravity : 1;                             		// 0x0230 (0x0004) [0x0000000000000022] [0x00020000] ( CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreForces : 1;                                		// 0x0230 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x0230 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x0230 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x0230 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bDirectHitWall : 1;                               		// 0x0230 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x0230 (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x0230 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x0230 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x0230 (0x0004) [0x0000000000004000] [0x04000000] ( CPF_Config )
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x0230 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x0230 (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      bCanLeap : 1;                                     		// 0x0230 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x0230 (0x0004) [0x0000000000004000] [0x40000000] ( CPF_Config )
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x0230 (0x0004) [0x0000000000004000] [0x80000000] ( CPF_Config )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0234 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x0234 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x0234 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x0234 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMuffledHearing : 1;                              		// 0x0234 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDontPossess : 1;                                 		// 0x0234 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAutoFire : 1;                                    		// 0x0234 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRollToDesired : 1;                               		// 0x0234 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bStationary : 1;                                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x0234 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSpecialHUD : 1;                                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x0234 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanUse : 1;                                      		// 0x0234 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x0234 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x0234 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0234 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0234 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x0234 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x0234 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMakeMoveHistory : 1;                             		// 0x0234 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bBlockJump : 1;                                   		// 0x0234 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bBlockJumpWhileDive : 1;                          		// 0x0234 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bBlockDoubleJump : 1;                             		// 0x0234 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0234 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bDoubleJumpAnimStart : 1;                         		// 0x0234 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bDashingStartAnimStart : 1;                       		// 0x0234 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bDashingChangeInJump : 1;                         		// 0x0234 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bBlockMoveHistory : 1;                            		// 0x0234 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bBlockGlide : 1;                                  		// 0x0234 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bGlideEnable : 1;                                 		// 0x0234 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bGliding : 1;                                     		// 0x0234 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bBoost : 1;                                       		// 0x0238 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bGlidingAnimStart : 1;                            		// 0x0238 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDropStartAnimPlay : 1;                           		// 0x0238 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDropEndAnimPlay : 1;                             		// 0x0238 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBoostStartAnimPlay : 1;                          		// 0x0238 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCheckBoostEndAnimPlay : 1;                       		// 0x0238 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bGlideChange : 1;                                 		// 0x0238 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bInWater : 1;                                     		// 0x0238 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bInSwimArea : 1;                                  		// 0x0238 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bProcessingPhysic : 1;                            		// 0x0238 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDashing : 1;                                     		// 0x0238 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDashingPending : 1;                              		// 0x0238 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDashingEffectReset : 1;                          		// 0x0238 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bDashingGroundEffectReset : 1;                    		// 0x0238 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bVipPawn : 1;                                     		// 0x0238 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bVipSpecialEffect : 1;                            		// 0x0238 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bEnableBMEffect : 1;                              		// 0x0238 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bMagnet : 1;                                      		// 0x0238 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bBlockMagnet : 1;                                 		// 0x0238 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bBlockDive : 1;                                   		// 0x0238 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bBlockBoost : 1;                                  		// 0x0238 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bIgnoreFallGravity : 1;                           		// 0x0238 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bPauseTick : 1;                                   		// 0x0238 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bPauseAnimTick : 1;                               		// 0x0238 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bForceFallAnimMode : 1;                           		// 0x0238 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bSetBeforeDashingGroundSpeed : 1;                 		// 0x0238 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bBlockDashing : 1;                                		// 0x0238 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bBlockWaterDashing : 1;                           		// 0x0238 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bBlockRocketStart : 1;                            		// 0x0238 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bBlockEventJump : 1;                              		// 0x0238 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bJumping : 1;                                     		// 0x0238 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bWallJumping : 1;                                 		// 0x0238 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bCreatePlayerJumpEvent : 1;                       		// 0x023C (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned long                                      bGroggy : 1;                                      		// 0x023C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bForceInSight : 1;                                		// 0x023C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bForceEventJumpAnim : 1;                          		// 0x023C (0x0004) [0x0000000000003000] [0x00000008] ( CPF_Native | CPF_Transient )
	unsigned long                                      bPlayActionMovePoint : 1;                         		// 0x023C (0x0004) [0x0000000000003000] [0x00000010] ( CPF_Native | CPF_Transient )
	unsigned long                                      bStuckFastPawn : 1;                               		// 0x023C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInWaterCellArea : 1;                           		// 0x023C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bEnableFallingSlide : 1;                          		// 0x023C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bStartFalling : 1;                                		// 0x023C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	float                                              UncrouchTime;                                     		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchHeight;                                     		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              CrouchRadius;                                     		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                FullHeight;                                       		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned char                                      PathSearchType;                                   		// 0x0254 (0x0001) [0x0000000000000000]              
	unsigned char                                      RemoteViewPitch;                                  		// 0x0255 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      FlashCount;                                       		// 0x0256 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      FiringMode;                                       		// 0x0257 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class UPathConstraint*                             PathConstraintList;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              DesiredSpeed;                                     		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              MaxDesiredSpeed;                                  		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Alertness;                                        		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRadius;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeripheralVision;                                 		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvgPhysicsTime;                                   		// 0x0278 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Mass;                                             		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              MeleeRange;                                       		// 0x0284 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            Anchor;                                           		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            LastAnchor;                                       		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FindAnchorFailedTime;                             		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              LastValidAnchorTime;                              		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              DestinationOffset;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              NextPathRadius;                                   		// 0x029C (0x0004) [0x0000000000000000]              
	struct FVector                                     SerpentineDir;                                    		// 0x02A0 (0x000C) [0x0000000000000000]              
	float                                              SerpentineDist;                                   		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              SerpentineTime;                                   		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              SpawnTime;                                        		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchLimit;                                    		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x02BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WaterSpeed;                                       		// 0x02C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AirSpeed;                                         		// 0x02C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LadderSpeed;                                      		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              JumpZ;                                            		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              OutofWaterZ;                                      		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              AirControl;                                       		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WalkingPct;                                       		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              CrouchedPct;                                      		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              MaxFallSpeed;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              AIMaxFallSpeedFactor;                             		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              BaseEyeHeight;                                    		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeHeight;                                        		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Floor;                                            		// 0x02F8 (0x000C) [0x0000000000000000]              
	float                                              SplashTime;                                       		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x0308 (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              HeadVolume;                                       		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Health;                                           		// 0x0310 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                HealthMax;                                        		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BreathTime;                                       		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              UnderWaterTime;                                   		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              LastPainTime;                                     		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x0324 (0x000C) [0x0000000000000000]              
	struct FVector                                     noise1spot;                                       		// 0x0330 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1time;                                       		// 0x033C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise1other;                                      		// 0x0340 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1loudness;                                   		// 0x0344 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     noise2spot;                                       		// 0x0348 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2time;                                       		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise2other;                                      		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2loudness;                                   		// 0x035C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundDampening;                                   		// 0x0360 (0x0004) [0x0000000000000000]              
	float                                              DamageScaling;                                    		// 0x0364 (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x0368 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	class UClass*                                      ControllerClass;                                  		// 0x0374 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0378 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ALadderVolume*                               OnLadder;                                         		// 0x037C (0x0004) [0x0000000000000000]              
	struct FName                                       LandMovementState;                                		// 0x0380 (0x0008) [0x0000000000000000]              
	struct FName                                       WaterMovementState;                               		// 0x0388 (0x0008) [0x0000000000000000]              
	class APlayerStart*                                LastStartSpot;                                    		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              LastStartTime;                                    		// 0x0394 (0x0004) [0x0000000000000000]              
	struct FVector                                     TakeHitLocation;                                  		// 0x0398 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      HitDamageType;                                    		// 0x03A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TearOffMomentum;                                  		// 0x03A8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x03B4 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x03B8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              RBPushRadius;                                     		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPushStrength;                                   		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle*                                    DrivenVehicle;                                    		// 0x03C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              VehicleCheckRadius;                               		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 LastHitBy;                                        		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              ViewPitchMin;                                     		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewPitchMax;                                     		// 0x03D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedYawError;                                  		// 0x03DC (0x0004) [0x0000000000000000]              
	class UClass*                                      InventoryManagerClass;                            		// 0x03E0 (0x0004) [0x0000000000000000]              
	class AInventoryManager*                           InvManager;                                       		// 0x03E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     Weapon;                                           		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlashLocation;                                    		// 0x03EC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastFiringFlashLocation;                          		// 0x03F8 (0x000C) [0x0000000000000000]              
	int                                                ShotCount;                                        		// 0x0404 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x0408 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FPointer                                    PhysicsPushBody;                                  		// 0x040C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                FailedLandingCount;                               		// 0x0410 (0x0004) [0x0000000000000000]              
	TArray< struct FMoveHistroyObj >                   MoveHistory;                                      		// 0x0414 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEventJumpHistory >                 EventJumpHistorys;                                		// 0x0420 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fEventJumpPlayTime;                               		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentEventJumpIndex;                            		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     EventJumpStartLocation;                           		// 0x0434 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     EventJumpDir;                                     		// 0x0440 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fEventJumpUnitTime;                               		// 0x044C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EventJumpType;                                    		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingWalkingTime;                               		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingFallingTime;                               		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingChangeInJumpTime;                          		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastMoveHistoryLocation;                          		// 0x0460 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              JumpStartHeight;                                  		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlideXYForce;                                     		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlideXYForceDefault;                              		// 0x0474 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlideBoostValue;                                  		// 0x0478 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlideBoostValueZ;                                 		// 0x047C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlideXYForceAccel;                                		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlideXYForceAccelUnit;                            		// 0x0484 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideZForce;                                     		// 0x0488 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideDropForce;                                  		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGlideDropingTime;                                		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGlideDropUnit;                                   		// 0x0494 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideDiveXYScale;                                		// 0x0498 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideRandUnit;                                   		// 0x049C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideRandTime;                                   		// 0x04A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGlideCurrentRandTime;                            		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGlideChangeTime;                                 		// 0x04A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     GlideRightLeftWeight;                             		// 0x04AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlideSlideMaxTime;                                		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fHoldInputTime;                                   		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fHoldInputTimeUnit;                               		// 0x04C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLandingDashingPlayTime;                          		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fWaterLineHeight;                                 		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fWaterLineOffset;                                 		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    DashingParticle;                                  		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    DashingSpecialParticle[ 0x3 ];                    		// 0x04D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    DashingSpecialGroundParticle;                     		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    DashingGroundParticle;                            		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    DashingGroundParticle2;                           		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DashingGroundParticleSlot;                        		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DashingNormal;                                    		// 0x04F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DashingApplyNormal;                               		// 0x04FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                DashingJumpIndex;                                 		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MagnetRightLeftWeight;                            		// 0x050C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MagnetHitNormal;                                  		// 0x0518 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MagnetApplyNormal;                                		// 0x0524 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MagnetBeforeVelocity;                             		// 0x0530 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MagnetAverageVelocity;                            		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MagnetSpeedScale;                                 		// 0x0540 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetJumpXYScale;                                		// 0x0544 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetCheckEndXYSize;                             		// 0x0548 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetGravity;                                    		// 0x054C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetApproachAngle;                              		// 0x0550 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetEndWalkValue;                               		// 0x0554 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetLimitValue;                                 		// 0x0558 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagnetGapLimitValue;                              		// 0x055C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoveEventDelayTime;                               		// 0x0560 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentMoveEventTime;                             		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DashingJumpRandPercent1;                          		// 0x0568 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DashingJumpRandPercent2;                          		// 0x056C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DashingJumpRandPercent3;                          		// 0x0570 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WalknRunAniMode;                                  		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeDashingGroundSpeed;                         		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingSpeedScale;                                		// 0x057C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DashingSlideScale;                                		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingJumpXYScale;                               		// 0x0584 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DashingJumpZScale;                                		// 0x0588 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DashingLastTime;                                  		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingLastTimeLimit;                             		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashingCameraAdjust;                              		// 0x0594 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FightCameraAdjust;                                		// 0x0598 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidDashRandPercentge;                           		// 0x059C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidDashForce;                                   		// 0x05A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidDashForceRadius;                             		// 0x05A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSwimRandPercentge;                           		// 0x05A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSwimForce;                                   		// 0x05AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSwimForceRadius;                             		// 0x05B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidIdleRandPercentge;                           		// 0x05B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidIdleForce;                                   		// 0x05B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidIdleForceRadius;                             		// 0x05BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidShallowRandPercentge;                        		// 0x05C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidShallowForce;                                		// 0x05C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidShallowForceRadius;                          		// 0x05C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualRandPercentge;                       		// 0x05CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualForce;                               		// 0x05D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualForceRadius;                         		// 0x05D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualMoveForce;                           		// 0x05D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualMoveForceRadius;                     		// 0x05DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidHighQualUnderWaterForce;                     		// 0x05E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iCurrentCellIndexX;                               		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurrentCellIndexY;                               		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PreMagnetSendLocation;                            		// 0x05EC (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     PreMagnetPhysLocation;                            		// 0x05F8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                CurActionPointIndex;                              		// 0x0604 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                MaxCountActionPoint;                              		// 0x0608 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fFirstActionPTVelocity;                           		// 0x060C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fCurActionPTPlayTime;                             		// 0x0610 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fActinoPointTakeTime;                             		// 0x0614 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fCurActionPTAccelIntepTime;                       		// 0x0618 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fMoveActionPTAccelIntepTime;                      		// 0x061C (0x0004) [0x0000000000000000]              
	class AMoveActionPoint*                            CurrentActionPoint;                               		// 0x0620 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AMoveActionPoint*                            OtherActionPoint;                                 		// 0x0624 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     StartActionPointPos;                              		// 0x0628 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     ActionPointMoveDir;                               		// 0x0634 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fFallingStartHeight;                              		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BackWalkingPct;                                   		// 0x0644 (0x0004) [0x0000000000000000]              
	float                                              BackRunPct;                                       		// 0x0648 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 789 ];

		return pClassPointer;
	};

	void GlideDrop ( );
	void StopGlide ( );
	void StartGlide ( );
	void StopGroggy ( );
	void StartGroggy ( );
	void DoFalling ( );
	void StopWallJump ( );
	void StopMagnet ( );
	void StartMagnet ( class AActor* HitActor );
	void EndDive ( );
	void StartDive ( );
	void UnDashing ( );
	void Dashing ( );
	bool NativeJump ( );
	void SetForceFallAnimMode ( unsigned long bFlag );
	bool IsIgnoreInputKey ( struct FName Key, unsigned long bPressedW );
	bool IsCheckReleasedKey ( struct FName Key );
	void ReleaseDoubleClicked ( );
	void ClearPathStep ( );
	void DrawPathStep ( class UCanvas* C );
	void IncrementPathChild ( int Cnt, class UCanvas* C );
	void IncrementPathStep ( int Cnt, class UCanvas* C );
	void AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UPathConstraint* Constraint );
	void ClearConstraints ( );
	void eventSoakPause ( );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void AdjustCameraScale ( unsigned long bMoveCameraIn );
	void eventMessagePlayer ( struct FString msg );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void eventOnSetMaterial ( class USeqAct_SetMaterial* Action );
	bool InCombat ( );
	bool PoweredUp ( );
	float GetDamageScaling ( );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventSpawnedByKismet ( );
	bool IsStationary ( );
	struct FVector GetCollisionExtent ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void SetActiveWeapon ( class AWeapon* NewWeapon );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity, class UClass* DamageType );
	void ThrowActiveWeapon ( class UClass* DamageType );
	void DrawHUD ( class AHUD* H );
	class AInventory* FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	class AInventory* eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate );
	void AddDefaultInventory ( );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V );
	void Suicide ( );
	class AVehicle* GetVehicleBase ( );
	void PlayLanded ( float ImpactVel );
	bool CannotJumpNow ( );
	void eventPlayFootStepSound ( int FootDown );
	void eventTornOff ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void TurnOff ( );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void PlayDyingSound ( );
	bool DoJump ( unsigned long bUpdating );
	bool CheckWaterJump ( struct FVector* WallNormal );
	void TakeDrowningDamage ( );
	void eventBreathTimer ( );
	bool IsInPain ( );
	bool TouchingWaterVolume ( );
	void eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventFalling ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool eventIsSameTeam ( class APawn* Other );
	class ATeamInfo* GetTeam ( );
	unsigned char GetTeamNum ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones );
	void PruneDamagedBoneList ( TArray< struct FName >* Bones );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void SetMovementPhysics ( );
	void Gasp ( );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	void OnAssignController ( class USeqAct_AssignController* inAction );
	void SpawnDefaultController ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void DetachFromController ( unsigned long bDestroyController );
	void CrushedBy ( class APawn* OtherPawn );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventBaseChange ( );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void JumpOffPawn ( );
	void gibbedBy ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void ClientSetRotation ( struct FRotator NewRotation );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void ClientRestart ( );
	void Restart ( );
	void TakeFallingDamage ( );
	void KilledBy ( class APawn* EventInstigator );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void RestartPlayer ( );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void UnCrouch ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity );
	void JumpOutOfWater ( struct FVector jumpDir );
	void FinishedInterpolation ( );
	void eventClientMessage ( struct FString S, struct FName Type );
	void ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	float AdjustedStrength ( );
	bool LineOfSightTo ( class AActor* Other );
	void SetMoveTarget ( class AActor* NewTarget );
	class AActor* GetMoveTarget ( );
	bool NearMoveTarget ( );
	bool AffectedByHitEffects ( );
	bool InGodMode ( );
	bool PawnCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetViewRotation ( struct FRotator NewRotation );
	bool eventInFreeCam ( );
	struct FRotator eventGetBaseAimRotation ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetPawnViewLocation ( );
	struct FRotator eventGetViewRotation ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool IsFirstPerson ( );
	bool WasPlayerPawn ( );
	bool IsPlayerRealClientPawn ( );
	bool IsPlayerPawn ( );
	bool IsLocallyControlled ( );
	bool IsHumanControlled ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClimbLadder ( class ALadderVolume* L );
	void EndClimbLadder ( class ALadderVolume* OldLadder );
	bool CanSplash ( );
	void eventSetWalking ( unsigned long bNewIsWalking );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool CanGrabLadder ( );
	void DropToGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void UnPossessed ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifyTeamChanged ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	struct FString GetHumanReadableName ( );
	bool NeedToTurn ( struct FVector targ );
	bool IsFiring ( );
	bool HasRangedAttack ( );
	bool FireOnRelease ( );
	bool TooCloseToAttack ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	unsigned char ChooseFireMode ( );
	bool BotFire ( unsigned long bFinished );
	void WeaponStoppedFiring ( unsigned long bViaReplication );
	void WeaponFired ( unsigned long bViaReplication, struct FVector HitLocation );
	void FlashLocationUpdated ( unsigned long bViaReplication );
	void FlashCountUpdated ( unsigned long bViaReplication );
	void ClearFlashLocation ( class AWeapon* Who );
	void SetFlashLocation ( class AWeapon* Who, unsigned char FireModeNum, struct FVector NewLoc );
	void ClearFlashCount ( class AWeapon* Who );
	void IncrementFlashCount ( class AWeapon* Who, unsigned char FireModeNum );
	void FiringModeUpdated ( unsigned long bViaReplication );
	void SetFiringMode ( unsigned char FiringModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void Reset ( );
	void PlayerChangedTeam ( );
	void SetBaseEyeheight ( );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsValidEnemy ( );
	int SpecialCostForPath ( class UReachSpec* Path );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void SetTickPauseFlag ( unsigned long bPause );
	bool IsAnimTickPause ( );
	void SetAnimTickPauseFlag ( unsigned long bPause );
	void SetPushesRigidBodies ( unsigned long NewPush );
	void ForceCrouch ( );
	bool ReachedPoint ( struct FVector Point, class AActor* NewAnchor );
	bool ReachedDestination ( class AActor* Goal );
	class ANavigationPoint* GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist );
	void SetAnchor ( class ANavigationPoint* NewAnchor );
	void SetRemoteViewPitch ( int NewRemoteViewPitch );
	bool IsInvisible ( );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	bool IsValidTargetFor ( class AController* C );
	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity );
	void ResetToDefaults ( );
	bool ValidAnchor ( );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* APawn::pClassPointer = NULL;

// Class Engine.PickupFactory
// 0x001C (0x0318 - 0x02FC)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x02FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x02FC (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPredictRespawns : 1;                             		// 0x02FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x02FC (0x0004) [0x0000000000000000] [0x00000008] 
	class UClass*                                      InventoryType;                                    		// 0x0300 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RespawnEffectTime;                                		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              MaxDesireability;                                 		// 0x0308 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x030C (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	class APickupFactory*                              ReplacementFactory;                               		// 0x0310 (0x0004) [0x0000000000000000]              
	class APickupFactory*                              OriginalFactory;                                  		// 0x0314 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 791 ];

		return pClassPointer;
	};

	bool ShouldRespawn ( );
	void eventDestroyed ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void RespawnEffect ( );
	float GetRespawnTime ( );
	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	bool ReadyToPickup ( float MaxWait );
	void SpawnCopyFor ( class APawn* Recipient );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	void StartSleeping ( );
	void SetRespawn ( );
	bool CheckForErrors ( );
	void Reset ( );
	void StaticPrecache ( class AWorldInfo* W );
	void SetPickupMesh ( );
	void ShutDown ( );
	void eventSetInitialState ( );
	void InitializePickup ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* APickupFactory::pClassPointer = NULL;

// Class Engine.PlayerCameraAnim
// 0x0014 (0x0050 - 0x003C)
class UPlayerCameraAnim : public UObject
{
public:
	unsigned char                                      PlayerCameraAnimType;                             		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreLocation : 1;                              		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreRotation : 1;                              		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreFOV : 1;                                   		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class UPlayerCameraSample* >               Samples;                                          		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 793 ];

		return pClassPointer;
	};

};

//UClass* UPlayerCameraAnim::pClassPointer = NULL;

// Class Engine.PlayerCameraAnimInstance
// 0x0044 (0x0080 - 0x003C)
class UPlayerCameraAnimInstance : public UObject
{
public:
	unsigned long                                      bPlaying : 1;                                     		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTrackTargetPawnLocation : 1;                     		// 0x003C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRetainLastState : 1;                             		// 0x003C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLockAfterAnim : 1;                               		// 0x003C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      SaveUseNearCameraFadingState : 1;                 		// 0x003C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              CurrentTime;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxTime;                                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerCameraAnim*                           CameraAnimTemplate;                               		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BasisDirection;                                   		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialDist;                                      		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InitialPitch;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InitialDirection;                                 		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialFOV;                                       		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TargetPawnLocation;                               		// 0x0060 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AffectUserCamDist;                                		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendInTimeLength;                                		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendOutTimeLength;                               		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlayTag;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      ExplicitTarget;                                   		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 795 ];

		return pClassPointer;
	};

};

//UClass* UPlayerCameraAnimInstance::pClassPointer = NULL;

// Class Engine.PlayerCameraSample
// 0x0018 (0x0054 - 0x003C)
class UPlayerCameraSample : public UObject
{
public:
	float                                              Time;                                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CatmullromFactor;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Influencer_Location;                              		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Influencer_Rotation;                              		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Influencer_FOV;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 797 ];

		return pClassPointer;
	};

};

//UClass* UPlayerCameraSample::pClassPointer = NULL;

// Class Engine.PlayerCameraFreeSample
// 0x0019 (0x006D - 0x0054)
class UPlayerCameraFreeSample : public UPlayerCameraSample
{
public:
	struct FVector                                     Location;                                         		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotationRelativity;                               		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 799 ];

		return pClassPointer;
	};

};

//UClass* UPlayerCameraFreeSample::pClassPointer = NULL;

// Class Engine.PlayerCameraLockedSample
// 0x0010 (0x0064 - 0x0054)
class UPlayerCameraLockedSample : public UPlayerCameraSample
{
public:
	float                                              Distance;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Direction;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Pitch;                                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRelativeDistance : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRelativeDirection : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRelativePitch : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 801 ];

		return pClassPointer;
	};

};

//UClass* UPlayerCameraLockedSample::pClassPointer = NULL;

// Class Engine.PlayerReplicationInfo
// 0x00B0 (0x02C0 - 0x0210)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Deaths;                                           		// 0x0214 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Ping;                                             		// 0x0218 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TTSSpeaker;                                       		// 0x0219 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PacketLoss;                                       		// 0x021A (0x0001) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      PlayerLocationHint;                               		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                NumLives;                                         		// 0x0220 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x0224 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     PlayerAlias;                                      		// 0x0230 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     OldName;                                          		// 0x023C (0x000C) [0x0000000000000000]              
	int                                                PlayerID;                                         		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATeamInfo*                                   Team;                                             		// 0x024C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamID;                                           		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SplitscreenIndex;                                 		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bAdmin : 1;                                       		// 0x0258 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0258 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsSpectator : 1;                                 		// 0x0258 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bOnlySpectator : 1;                               		// 0x0258 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x0258 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x0258 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bOutOfLives : 1;                                  		// 0x0258 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bBot : 1;                                         		// 0x0258 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bHasFlag : 1;                                     		// 0x0258 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x0258 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsInactive : 1;                                  		// 0x0258 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x0258 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bControllerVibrationAllowed : 1;                  		// 0x0258 (0x0004) [0x0000000000000000] [0x00001000] 
	int                                                StartTime;                                        		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     StringDead;                                       		// 0x0260 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     StringSpectating;                                 		// 0x026C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     StringUnknown;                                    		// 0x0278 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	int                                                Kills;                                            		// 0x0284 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              ExactPing;                                        		// 0x028C (0x0004) [0x0000000000000000]              
	struct FString                                     SavedNetworkAddress;                              		// 0x0290 (0x000C) [0x0000000000000000]              
	struct FUniqueNetId                                UniqueId;                                         		// 0x029C (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                PlayerSkill;                                      		// 0x02A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FUniqueNetId                                PartyLeaderNetId;                                 		// 0x02A8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       SessionName;                                      		// 0x02B0 (0x0008) [0x0000000000000000]              
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x02B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 803 ];

		return pClassPointer;
	};

	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	void SetPlayerAlias ( struct FString NewAlias );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	void ServerSetPartyLeaderId ( struct FUniqueNetId PartyLeaderId );
	void SetPartyLeaderId ( struct FUniqueNetId PartyLeaderId );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void ServerSetSplitscreenIndex ( unsigned char PlayerIndex );
	void SetSplitscreenIndex ( unsigned char PlayerIndex );
	bool IsPartyMember ( struct FUniqueNetId* TestPartyLeaderId );
	bool IsPartyLeader ( );
	bool IsLocalPlayerPRI ( );
	void BindPlayerOwnerDataProvider ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamDataProvider ( );
	void UpdatePlayerDataProvider ( struct FName PropertyName );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	void eventTimer ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void UpdatePlayerLocation ( );
	struct FString GetLocationName ( );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
	struct FString GetPlayerAlias ( );
	bool AreUniqueNetIdsEqual ( class APlayerReplicationInfo* OtherPRI );
};

//UClass* APlayerReplicationInfo::pClassPointer = NULL;

// Class Engine.PlayerStart
// 0x0008 (0x0304 - 0x02FC)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPrimaryStart : 1;                                		// 0x02FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                T1LocalPlayIndex;                                 		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 805 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* APlayerStart::pClassPointer = NULL;

// Class Engine.PointLight
// 0x0008 (0x0220 - 0x0218)
class APointLight : public ALight
{
public:
	unsigned long                                      bIndexingEnabled : 1;                             		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                TypeIndex;                                        		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 807 ];

		return pClassPointer;
	};

};

//UClass* APointLight::pClassPointer = NULL;

// Class Engine.PointLightComponent
// 0x0078 (0x0218 - 0x01A0)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                           		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowFalloffExponent;                            		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowFalloffRadius;                           		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x01B4 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01C0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Translation;                                      		// 0x0200 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bLightShaft : 1;                                  		// 0x020C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LightShaftPower;                                  		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x0214 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 809 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
	void SetTranslation ( struct FVector NewTranslation );
};

//UClass* UPointLightComponent::pClassPointer = NULL;

// Class Engine.PointLightMovable
// 0x0000 (0x0220 - 0x0220)
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 811 ];

		return pClassPointer;
	};

};

//UClass* APointLightMovable::pClassPointer = NULL;

// Class Engine.PointLightToggleable
// 0x0000 (0x0220 - 0x0220)
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 813 ];

		return pClassPointer;
	};

};

//UClass* APointLightToggleable::pClassPointer = NULL;

// Class Engine.PolyMarker
// 0x0000 (0x0210 - 0x0210)
class APolyMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 815 ];

		return pClassPointer;
	};

};

//UClass* APolyMarker::pClassPointer = NULL;

// Class Engine.Polys
// 0x0010 (0x004C - 0x003C)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x003C (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 817 ];

		return pClassPointer;
	};

};

//UClass* UPolys::pClassPointer = NULL;

// Class Engine.PortalMarker
// 0x0004 (0x0300 - 0x02FC)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x02FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 819 ];

		return pClassPointer;
	};

	bool CanTeleport ( class AActor* A );
};

//UClass* APortalMarker::pClassPointer = NULL;

// Class Engine.SceneCaptureActor
// 0x0004 (0x0214 - 0x0210)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 821 ];

		return pClassPointer;
	};

};

//UClass* ASceneCaptureActor::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x021C - 0x0214)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 823 ];

		return pClassPointer;
	};

};

//UClass* ASceneCaptureReflectActor::pClassPointer = NULL;

// Class Engine.SceneCapturePortalActor
// 0x0000 (0x021C - 0x021C)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 825 ];

		return pClassPointer;
	};

};

//UClass* ASceneCapturePortalActor::pClassPointer = NULL;

// Class Engine.PortalTeleporter
// 0x0014 (0x0230 - 0x021C)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionX;                               		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionY;                               		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APortalMarker*                               MyMarker;                                         		// 0x0228 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMovablePortal : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x022C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x022C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 827 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	class UTextureRenderTarget2D* CreatePortalTexture ( );
	struct FVector TransformHitLocation ( struct FVector HitLocation );
	struct FVector TransformVectorDir ( struct FVector V );
	bool TransformActor ( class AActor* A );
};

//UClass* APortalTeleporter::pClassPointer = NULL;

// Class Engine.PortalVolume
// 0x000C (0x0264 - 0x0258)
class APortalVolume : public AVolume
{
public:
	TArray< class APortalTeleporter* >                 Portals;                                          		// 0x0258 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 829 ];

		return pClassPointer;
	};

};

//UClass* APortalVolume::pClassPointer = NULL;

// Class Engine.PostProcessChain
// 0x000C (0x0048 - 0x003C)
class UPostProcessChain : public UObject
{
public:
	TArray< class UPostProcessEffect* >                Effects;                                          		// 0x003C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 831 ];

		return pClassPointer;
	};

	class UPostProcessEffect* FindPostProcessEffect ( struct FName EffectName );
};

//UClass* UPostProcessChain::pClassPointer = NULL;

// Class Engine.PostProcessParameter
// 0x3720 (0x375C - 0x003C)
class UPostProcessParameter : public UObject
{
public:
	unsigned long                                      bEnableBloom : 1;                                 		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableDOF : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableMotionBlur : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableSceneEffect : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      MotionBlur_FullMotionBlur : 1;                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RadialBlur : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      UseCustomTime : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              Bloom_Scale;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Bloom_InterpolationDuration;                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FalloffExponent;                              		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_BlurKernelSize;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_MaxNearBlurAmount;                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_MaxFarBlurAmount;                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DOF_ModulateBlurColor;                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DOF_FocusType;                                    		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FocusInnerRadius;                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FocusDistance;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DOF_FocusPosition;                                		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_InterpolationDuration;                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlur_MaxVelocity;                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlur_Amount;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlur_CameraRotationThreshold;               		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlur_CameraTranslationThreshold;            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlur_InterpolationDuration;                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialCenterX;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialCenterY;                                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurScale;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurAmount;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialSampleCount;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FilterEffectThold;                                		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FilterEffectDistThold;                            		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FilterEffectLimitColor;                           		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterEffectAlpha;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterEffectType;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterEffectPower;                                		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FIlterEffectRotPower;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterEffectMaskPower;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterEffectUnitSize;                             		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scene_Desaturation;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Scene_HighLights;                                 		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Scene_MidTones;                                   		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Scene_Shadows;                                    		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scene_InterpolationDuration;                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneColorBrightness;                             		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneColorAdd;                                    		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneSaturation;                                  		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneHue;                                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneContrast;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AOMaskBrightness;                                 		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AOPower;                                          		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AORadius;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneColorMaskValue;                              		// 0x0138 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneCyanRed;                                     		// 0x0144 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMagentaGreen;                                		// 0x0150 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneYellowBlue;                                  		// 0x015C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          SceneMaterial1;                                   		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          SceneMaterial2;                                   		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTimeTableObj                               TimeObj[ 0x1E ];                                  		// 0x0170 (0x35E8) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    ColorGrading_LookupTable;                         		// 0x3758 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 833 ];

		return pClassPointer;
	};

};

//UClass* UPostProcessParameter::pClassPointer = NULL;

// Class Engine.PotentialClimbWatcher
// 0x0000 (0x0210 - 0x0210)
class APotentialClimbWatcher : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 835 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

//UClass* APotentialClimbWatcher::pClassPointer = NULL;

// Class Engine.ProgressControler
// 0x0004 (0x0040 - 0x003C)
class UProgressControler : public UObject
{
public:
	class UProgressiveEffect*                          ProgressEffect;                                   		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 837 ];

		return pClassPointer;
	};

};

//UClass* UProgressControler::pClassPointer = NULL;

// Class Engine.ProgressControler_FixedValue
// 0x000C (0x004C - 0x0040)
class UProgressControler_FixedValue : public UProgressControler
{
public:
	unsigned long                                      bForceBlend : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RateValue;                                        		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 839 ];

		return pClassPointer;
	};

};

//UClass* UProgressControler_FixedValue::pClassPointer = NULL;

// Class Engine.ProgressControler_InternalValue
// 0x0010 (0x0050 - 0x0040)
class UProgressControler_InternalValue : public UProgressControler
{
public:
	unsigned char                                      ProgValueType;                                    		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FFProgControlExtent                         ControlExtent;                                    		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentValue;                                     		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 841 ];

		return pClassPointer;
	};

};

//UClass* UProgressControler_InternalValue::pClassPointer = NULL;

// Class Engine.ProgressControler_Time
// 0x0008 (0x0048 - 0x0040)
class UProgressControler_Time : public UProgressControler
{
public:
	float                                              Duration;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 843 ];

		return pClassPointer;
	};

};

//UClass* UProgressControler_Time::pClassPointer = NULL;

// Class Engine.ProgressEffectProperty
// 0x0010 (0x004C - 0x003C)
class UProgressEffectProperty : public UObject
{
public:
	class UProgressiveEffect*                          ProgressEffect;                                   		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseRestore : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRestore : 1;                                     		// 0x0040 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              RestoreBlendTime;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestoreCurTime;                                   		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 845 ];

		return pClassPointer;
	};

};

//UClass* UProgressEffectProperty::pClassPointer = NULL;

// Class Engine.ProgressEffectProperty_Anim
// 0x002C (0x0078 - 0x004C)
class UProgressEffectProperty_Anim : public UProgressEffectProperty
{
public:
	unsigned char                                      EnvTypeState;                                     		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PawnTypeState;                                    		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FProgressEffectAnimPropery                  AnimProperty;                                     		// 0x0050 (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 847 ];

		return pClassPointer;
	};

};

//UClass* UProgressEffectProperty_Anim::pClassPointer = NULL;

// Class Engine.ProgressEffectProperty_MatInst
// 0x0054 (0x00A0 - 0x004C)
class UProgressEffectProperty_MatInst : public UProgressEffectProperty
{
public:
	struct FName                                       MatParameterName;                                 		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MaterialInstParamType;                            		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FProgEffectMaterialExtent                   MaterialParamExtent;                              		// 0x0058 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurScalarParamValue;                              		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                CurVectorParamValue;                              		// 0x0084 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FProgEffectMatRestoreInfo >         RestoreMatInstInfo;                               		// 0x0094 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 849 ];

		return pClassPointer;
	};

};

//UClass* UProgressEffectProperty_MatInst::pClassPointer = NULL;

// Class Engine.ProgressEffectProperty_Particle
// 0x002C (0x0078 - 0x004C)
class UProgressEffectProperty_Particle : public UProgressEffectProperty
{
public:
	unsigned long                                      bBeginPlay : 1;                                   		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTransitToggle : 1;                               		// 0x004C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              TogglePointRate;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ProgParticleType;                                 		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleSystem;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFProgEffectParticleRate                    RateValue;                                        		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FProgEffectParticleDynamicParam >   ParticleDynamicParams;                            		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 851 ];

		return pClassPointer;
	};

};

//UClass* UProgressEffectProperty_Particle::pClassPointer = NULL;

// Class Engine.ProgressEffectProperty_Sound
// 0x0024 (0x0070 - 0x004C)
class UProgressEffectProperty_Sound : public UProgressEffectProperty
{
public:
	unsigned long                                      bBeginPlay : 1;                                   		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTransitToggle : 1;                               		// 0x004C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              TogglePointRate;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FProgEffectFadeInOut                        FadeInfo;                                         		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FProgEffectVolumeRate                       VolumeRate;                                       		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCue;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlayType;                                         		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AudioComponent;                                   		// 0x006C (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 853 ];

		return pClassPointer;
	};

};

//UClass* UProgressEffectProperty_Sound::pClassPointer = NULL;

// Class Engine.ProgressiveEffect
// 0x001C (0x0058 - 0x003C)
class UProgressiveEffect : public UObject
{
public:
	struct FName                                       EffectTagName;                                    		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ProgressEffectType;                               		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ProgressControlType;                              		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UProgressEffectProperty*                     ProgressPropery;                                  		// 0x0048 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UProgressControler*                          ProgControler;                                    		// 0x004C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      bFixedControlValue : 1;                           		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivate : 1;                                    		// 0x0050 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0054 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 855 ];

		return pClassPointer;
	};

};

//UClass* UProgressiveEffect::pClassPointer = NULL;

// Class Engine.Projectile
// 0x003C (0x024C - 0x0210)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x0210 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0214 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x0218 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x0218 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0218 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x0218 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNotBlockedByShield : 1;                          		// 0x0218 (0x0004) [0x0000000000000000] [0x00000010] 
	class AActor*                                      ZeroCollider;                                     		// 0x021C (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x0220 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              Damage;                                           		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              DamageRadius;                                     		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              MomentumTransfer;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	class UClass*                                      MyDamageType;                                     		// 0x0230 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpawnSound;                                       		// 0x0234 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ImpactSound;                                      		// 0x0238 (0x0004) [0x0000000000000000]              
	class AController*                                 InstigatorController;                             		// 0x023C (0x0004) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              NetCullDistanceSquared;                           		// 0x0244 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0248 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 857 ];

		return pClassPointer;
	};

	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsStationary ( );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventEncroachedBy ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
};

//UClass* AProjectile::pClassPointer = NULL;

// Class Engine.ProscribedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 859 ];

		return pClassPointer;
	};

};

//UClass* UProscribedReachSpec::pClassPointer = NULL;

// Class Engine.ReverbVolume
// 0x0040 (0x0298 - 0x0258)
class AReverbVolume : public AVolume
{
public:
	struct FInteriorSettings                           AmbientZoneSettings;                              		// 0x0258 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FReverbSettings                             Settings;                                         		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x028C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReverbVolumeID;                                   		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRequiresInteriorRecompute : 1;                   		// 0x0294 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 861 ];

		return pClassPointer;
	};

};

//UClass* AReverbVolume::pClassPointer = NULL;

// Class Engine.Route
// 0x0020 (0x0230 - 0x0210)
class ARoute : public AInfo
{
public:
	unsigned char                                      RouteType;                                        		// 0x0210 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FNavReference >                     NavList;                                          		// 0x0214 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorReference >                   RouteList;                                        		// 0x0220 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FudgeFactor;                                      		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 863 ];

		return pClassPointer;
	};

	int MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor );
	int ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse );
};

//UClass* ARoute::pClassPointer = NULL;

// Class Engine.SavedMove
// 0x009C (0x00D8 - 0x003C)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              TimeStamp;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              Delta;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRun : 1;                                         		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0048 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0048 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      DoubleClickMove;                                  		// 0x004C (0x0001) [0x0000000000000000]              
	unsigned char                                      SavedPhysics;                                     		// 0x004D (0x0001) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0050 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartRelativeLocation;                            		// 0x005C (0x000C) [0x0000000000000000]              
	struct FVector                                     StartVelocity;                                    		// 0x0068 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFloor;                                       		// 0x0074 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedLocation;                                    		// 0x0080 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedVelocity;                                    		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedRelativeLocation;                            		// 0x0098 (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x00A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     Acceleration;                                     		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x00BC (0x000C) [0x0000000000000000]              
	class AActor*                                      StartBase;                                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	class AActor*                                      EndBase;                                          		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              CustomTimeDilation;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              AccelDotThreshold;                                		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 865 ];

		return pClassPointer;
	};

	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void SetInitialPosition ( class APawn* P );
	struct FVector GetStartLocation ( );
	bool IsImportantMove ( struct FVector CompareAccel );
	void PostUpdate ( class APlayerController* P );
	void Clear ( );
};

//UClass* USavedMove::pClassPointer = NULL;

// Class Engine.SaveGameSummary
// 0x0014 (0x0050 - 0x003C)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                        		// 0x003C (0x0008) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 867 ];

		return pClassPointer;
	};

};

//UClass* USaveGameSummary::pClassPointer = NULL;

// Class Engine.SceneCapture2DActor
// 0x0004 (0x0218 - 0x0214)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0214 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 869 ];

		return pClassPointer;
	};

};

//UClass* ASceneCapture2DActor::pClassPointer = NULL;

// Class Engine.SceneCaptureComponent
// 0x002A (0x0080 - 0x0056)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableFog : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseMainScenePostProcessSettings : 1;             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedsSceneUpdate : 1;                            		// 0x0058 (0x0004) [0x0000000000003002] [0x00000010] ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      ClearColor;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ViewMode;                                         		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneLOD;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           PostProcess;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxUpdateDist;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStreamingUpdateDist;                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CaptureInfo;                                      		// 0x0078 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ViewState;                                        		// 0x007C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 871 ];

		return pClassPointer;
	};

	bool NeedsUpdate ( );
	void SetFrameRate ( float NewFrameRate );
};

//UClass* USceneCaptureComponent::pClassPointer = NULL;

// Class Engine.SceneCapture2DComponent
// 0x00A0 (0x0120 - 0x0080)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearPlane;                                        		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FarPlane;                                         		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0094 (0x000C) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                       		// 0x00A0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     ProjMatrix;                                       		// 0x00E0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 873 ];

		return pClassPointer;
	};

	void SetView ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane );
};

//UClass* USceneCapture2DComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x021C - 0x0214)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0214 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 875 ];

		return pClassPointer;
	};

};

//UClass* ASceneCaptureCubeMapActor::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x0098 - 0x0080)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearPlane;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldLocation;                                    		// 0x008C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 877 ];

		return pClassPointer;
	};

};

//UClass* USceneCaptureCubeMapComponent::pClassPointer = NULL;

// Class Engine.SceneCapturePortalComponent
// 0x000C (0x008C - 0x0080)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleFOV;                                         		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ViewDestination;                                  		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 879 ];

		return pClassPointer;
	};

	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest );
};

//UClass* USceneCapturePortalComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x0088 - 0x0080)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFOV;                                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 881 ];

		return pClassPointer;
	};

};

//UClass* USceneCaptureReflectComponent::pClassPointer = NULL;

// Class Engine.Scout
// 0x0028 (0x0674 - 0x064C)
class AScout : public APawn
{
public:
	TArray< struct FPathSizeInfo >                     PathSizes;                                        		// 0x064C (0x000C) [0x0000000000000000]              
	float                                              TestJumpZ;                                        		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              TestGroundSpeed;                                  		// 0x065C (0x0004) [0x0000000000000000]              
	float                                              TestMaxFallSpeed;                                 		// 0x0660 (0x0004) [0x0000000000000000]              
	float                                              TestFallSpeed;                                    		// 0x0664 (0x0004) [0x0000000000000000]              
	float                                              MaxLandingVelocity;                               		// 0x0668 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinNumPlayerStarts;                               		// 0x066C (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultReachSpecClass;                            		// 0x0670 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 883 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

//UClass* AScout::pClassPointer = NULL;

// Class Engine.TextureRenderTarget
// 0x0004 (0x00BC - 0x00B8)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderOnce : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 885 ];

		return pClassPointer;
	};

};

//UClass* UTextureRenderTarget::pClassPointer = NULL;

// Class Engine.TextureRenderTarget2D
// 0x001C (0x00D8 - 0x00BC)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeY;                                            		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Format;                                           		// 0x00C4 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00C6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ClearColor;                                       		// 0x00C8 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 887 ];

		return pClassPointer;
	};

	class UTextureRenderTarget2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce );
};

//UClass* UTextureRenderTarget2D::pClassPointer = NULL;

// Class Engine.ScriptedTexture
// 0x0010 (0x00E8 - 0x00D8)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSkipNextClear : 1;                               		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x00DC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 889 ];

		return pClassPointer;
	};

	void Render ( class UCanvas* C );
};

//UClass* UScriptedTexture::pClassPointer = NULL;

// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 891 ];

		return pClassPointer;
	};

};

//UClass* UServerCommandlet::pClassPointer = NULL;

// Class Engine.ShaderCache
// 0x00BC (0x00F8 - 0x003C)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xBC ];                            		// 0x003C (0x00BC) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 893 ];

		return pClassPointer;
	};

};

//UClass* UShaderCache::pClassPointer = NULL;

// Class Engine.ShaderObject
// 0x003C (0x0078 - 0x003C)
class UShaderObject : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.ShaderObject.ShaderMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 895 ];

		return pClassPointer;
	};

};

//UClass* UShaderObject::pClassPointer = NULL;

// Class Engine.ShadowMap1D
// 0x0040 (0x007C - 0x003C)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x40 ];                            		// 0x003C (0x0040) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 897 ];

		return pClassPointer;
	};

};

//UClass* UShadowMap1D::pClassPointer = NULL;

// Class Engine.ShadowMap2D
// 0x0024 (0x0060 - 0x003C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateScale;                                  		// 0x0040 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateBias;                                   		// 0x0048 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightGuid;                                        		// 0x0050 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 899 ];

		return pClassPointer;
	};

};

//UClass* UShadowMap2D::pClassPointer = NULL;

// Class Engine.ShadowMapTexture2D
// 0x0000 (0x0114 - 0x0114)
class UShadowMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 901 ];

		return pClassPointer;
	};

};

//UClass* UShadowMapTexture2D::pClassPointer = NULL;

// Class Engine.SignalInfo
// 0x0064 (0x00A0 - 0x003C)
class USignalInfo : public UObject
{
public:
	class UTexture2D*                                  Texture;                                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   ResourceMat;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSignalData >                       SignalList;                                       		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSignalTypeData >                   SignalTypeList;                                   		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSignalConfig                               Config;                                           		// 0x005C (0x0038) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSignalAnimInfo >                   AnimList;                                         		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 903 ];

		return pClassPointer;
	};

};

//UClass* USignalInfo::pClassPointer = NULL;

// Class Engine.SkeletalMesh
// 0x0414 (0x0450 - 0x003C)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x003C (0x001C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0058 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FVector                                     Origin;                                           		// 0x0064 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FRotator                                    RotOrigin;                                        		// 0x0070 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FVector                                     Scale;                                            		// 0x007C (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	float                                              AniScale;                                         		// 0x0088 (0x0004) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	float                                              AutoScale;                                        		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectScale;                                      		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkeletalMeshFactorSet*                      MeshFactorSet;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundSet*                                   PlaySoundSet;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSet*                                PlayParticleSet;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect2;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect3;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             PhysicsResetBones;                                		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnorePhysicalHit : 1;                           		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAutoAnimset : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              AddFootOffsetValue;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddFootOffsetValue2;                              		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimNameHeight;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalNameHeight;                                 		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowNameHeight;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomizeDefaultType;                             		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ItemPreviewLocType;                               		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewLocUpperOffset;                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewLocLowerOffset;                        		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewScale;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProgressiveEffect* >                ProgressEffects;                                  		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderAllSections : 1;                           		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceCharacterLight : 1;                         		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              ShowEffectDistanceScale;                          		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      RefSkeleton;                                      		// 0x00FC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SkeletalDepth;                                    		// 0x0108 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x010C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0148 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.SocketNameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x0184 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FMatrix >                           RefBasesInvMatrix;                                		// 0x0190 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBoneMirrorInfo >                   SkelMirrorTable;                                  		// 0x019C (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )
	unsigned char                                      SkelMirrorAxis;                                   		// 0x01A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x01A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkeletalMeshSocket* >               Sockets;                                          		// 0x01AC (0x000C) [0x0000000000000000]              
	TArray< struct FSkeletalMeshLODInfo >              LODInfo;                                          		// 0x01B8 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )
	TArray< struct FName >                             PerPolyCollisionBones;                            		// 0x01C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             AddToParentPerPolyCollisionBone;                  		// 0x01D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      PerPolyBoneKDOPs;                                 		// 0x01DC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x01E8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x01E8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               BoundsPreviewAsset;                               		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPC;                                        		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPS3;                                       		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasXbox360;                                   		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          ClothMesh;                                        		// 0x0200 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    ClothMeshScale;                                   		// 0x020C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothToGraphicsVertMap;                           		// 0x0218 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothWeldingMap;                                  		// 0x0224 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                ClothWeldingDomain;                               		// 0x0230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothWeldedIndices;                               		// 0x0234 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bForceNoWelding : 1;                              		// 0x0240 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                NumFreeClothVerts;                                		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothIndexBuffer;                                 		// 0x0248 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             ClothBones;                                       		// 0x0254 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x0260 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x0260 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x0260 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              ClothStretchStiffness;                            		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothBendStiffness;                               		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDensity;                                     		// 0x026C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothThickness;                                   		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDamping;                                     		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothIterations;                                  		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothFriction;                                    		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothRelativeGridSpacing;                         		// 0x0280 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothPressure;                                    		// 0x0284 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothCollisionResponseCoefficient;                		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentResponseCoefficient;               		// 0x028C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentTearFactor;                        		// 0x0290 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothSleepLinearVelocity;                         		// 0x0294 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x0298 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x0298 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x0298 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x0298 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	TArray< struct FClothSpecialBoneInfo >             ClothSpecialBones;                                		// 0x029C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x02A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothMetal : 1;                                  		// 0x02A8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ClothMetalImpulseThreshold;                       		// 0x02AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalPenetrationDepth;                       		// 0x02B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x02B8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              ClothTearFactor;                                  		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothTearReserve;                                 		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x02C4 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      SoftBodySurfaceToGraphicsVertMap;                 		// 0x0300 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      SoftBodySurfaceIndices;                           		// 0x030C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FVector >                           SoftBodyTetraVertsUnscaled;                       		// 0x0318 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      SoftBodyTetraIndices;                             		// 0x0324 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FSoftBodyTetraLink >                SoftBodyTetraLinks;                               		// 0x0330 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          CachedSoftBodyMeshes;                             		// 0x033C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    CachedSoftBodyMeshScales;                         		// 0x0348 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FName >                             SoftBodyBones;                                    		// 0x0354 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FSoftBodySpecialBoneInfo >          SoftBodySpecialBones;                             		// 0x0360 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyVolumeStiffness;                          		// 0x036C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyStretchingStiffness;                      		// 0x0370 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDensity;                                  		// 0x0374 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyParticleRadius;                           		// 0x0378 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDamping;                                  		// 0x037C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySolverIterations;                         		// 0x0380 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyFriction;                                 		// 0x0384 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x0388 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodySleepLinearVelocity;                      		// 0x038C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x0390 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentResponse;                       		// 0x0394 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyCollisionResponse;                        		// 0x0398 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDetailLevel;                              		// 0x039C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySubdivisionLevel;                         		// 0x03A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x03A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x03A4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x03A4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentThreshold;                      		// 0x03A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x03AC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x03B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x03B4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                ReleaseResourcesFence;                            		// 0x03B8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       SkelMeshGUID;                                     		// 0x03BC (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bAutoScaleMesh : 1;                               		// 0x03CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FSkeletalMeshBodyPartRatio >        NameplateMeshScaleRatio;                          		// 0x03D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  NameplateHeightRatio;                             		// 0x03DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSkeletalMeshBodyPartRatio >        MeshScaleRatio;                                   		// 0x03E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  HeightRatio;                                      		// 0x03F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  HandRatio;                                        		// 0x0400 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x040C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.FixedEdgeParentMap
	unsigned char                                      CommonPhysicsUseFlag;                             		// 0x0448 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              PhysicalHitScale;                                 		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 905 ];

		return pClassPointer;
	};

};

//UClass* USkeletalMesh::pClassPointer = NULL;

// Class Engine.SkeletalMeshComponent
// 0x1330 (0x1558 - 0x0228)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x022C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNode*                                   Animations;                                       		// 0x0234 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x0238 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UAnimNode* >                         AnimNodeFindCaches;                               		// 0x0244 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMutationMaterialObj >              MutationMaterials;                                		// 0x0250 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FPointer >                          ProgressEffects;                                  		// 0x025C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x026C (0x0004) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	float                                              PhysicsWeight;                                    		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAnimRateScale;                              		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseCustomAnimRateScale : 1;                      		// 0x0278 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )
	float                                              CustomAnimRateScale;                              		// 0x027C (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              BackupAnimRateScale;                              		// 0x0280 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CustomAnimRateScaleTime;                          		// 0x0284 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              CustomAnimRateScalePlayTime;                      		// 0x0288 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolAdjust : 1;                              		// 0x028C (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	float                                              fAdjustAniScale;                                  		// 0x0290 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fTargetAdjustAniScale;                            		// 0x0294 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fSourceAdjustAniScale;                            		// 0x0298 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fInterpolAdjustAS;                                		// 0x029C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fCurrentAdjustAS;                                 		// 0x02A0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fAdjustMeshScale;                                 		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTargetAdjustMeshScale;                           		// 0x02A8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fSourceAdjustMeshScale;                           		// 0x02AC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 CustomSetNameMap;                                 		// 0x02B0 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class AActor*                                      TargetActor;                                      		// 0x02EC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                TargetMeshIndex;                                  		// 0x02F0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       TargetBoneName;                                   		// 0x02F4 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    MeshObject;                                       		// 0x02FC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMatrix >                           SpaceBases;                                       		// 0x0304 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           BoneCustomizeScales;                              		// 0x0310 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FVector >                           BoneCustomizeTranslation;                         		// 0x031C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FVector >                           BoneCustomizeRelativeScales;                      		// 0x0328 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FVector >                           BoneCustomizeTranslationAddValue;                 		// 0x0334 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< float >                                    CustomizeSetBoneScaleInst;                        		// 0x0340 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< float >                                    CustomizeSetMorphWeightInst;                      		// 0x034C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< float >                                    BoneCustomizeRotScales;                           		// 0x0358 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FVector >                           BoneCustomizeRotAddValue;                         		// 0x0364 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< float >                                    BoneCustomizeRotAddApplySize;                     		// 0x0370 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseCustomizeInstance : 1;                        		// 0x037C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNonPhysicBrst : 1;                               		// 0x037C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class USkeletalMeshCustomizeSet*                   CustomizeSet;                                     		// 0x0380 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CustomizeInitial;                                 		// 0x0384 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UVoiceSet*                                   VoiceSet;                                         		// 0x0388 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UDialogueSet*                                DialogueSet;                                      		// 0x038C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CustomizeLowerScale;                              		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeUpperScale;                              		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeWeaponScale;                             		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeTotalScale;                              		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CustomizeAttachedScale;                           		// 0x03A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeNamplteScale;                            		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeBip01Scale;                              		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomizeCameraScale;                             		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseCustomizedFootOffset : 1;                     		// 0x03B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              CustomizeFootOffset;                              		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseStopShakingBone : 1;                          		// 0x03C0 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	TArray< struct FMatrix >                           StopShakingSpaceBases;                            		// 0x03C4 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FQuat >                             BoneDynamicFixedRot;                              		// 0x03D0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           BoneDynamicFixedVector;                           		// 0x03DC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      IgnoreMeshWidget : 1;                             		// 0x03E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIgnoreDistanceCheck : 1;                         		// 0x03E8 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	int                                                SkipTickCount;                                    		// 0x03EC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                TickGrade;                                        		// 0x03F0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fAddSkipTickDeltaTime;                            		// 0x03F4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bPlayerComponent : 1;                             		// 0x03F8 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned long                                      bSkipTickForParticle : 1;                         		// 0x03F8 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         LocalAtoms;                                       		// 0x03FC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0408 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            RequiredBonesSearchSet;                           		// 0x0414 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x0420 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	TArray< int >                                      ParentBoneMap;                                    		// 0x0424 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0430 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          TemporarySavedAnimSets;                           		// 0x043C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x0448 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActiveMorph >                      ActiveMorphs;                                     		// 0x0454 (0x000C) [0x0000000000000000]              
	TArray< struct FAttachment >                       Attachments;                                      		// 0x0460 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FDynamicParamPlayObj >              DynamicParamPlays;                                		// 0x046C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< unsigned char >                            SkelControlIndex;                                 		// 0x0478 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ForcedLodModel;                                   		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinLodModel;                                      		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredictedLODLevel;                                		// 0x048C (0x0004) [0x0000000000000000]              
	int                                                OldPredictedLODLevel;                             		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              MaxDistanceFactor;                                		// 0x0494 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bForceWireframe;                                  		// 0x0498 (0x0004) [0x0000000000000000]              
	int                                                bForceRefpose;                                    		// 0x049C (0x0004) [0x0000000000000000]              
	int                                                bOldForceRefPose;                                 		// 0x04A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x04A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                bDisplayBones;                                    		// 0x04A8 (0x0004) [0x0000000000000000]              
	int                                                bShowPrePhysBones;                                		// 0x04AC (0x0004) [0x0000000000000000]              
	int                                                bHideSkin;                                        		// 0x04B0 (0x0004) [0x0000000000000000]              
	int                                                bForceRawOffset;                                  		// 0x04B4 (0x0004) [0x0000000000000000]              
	int                                                bIgnoreControllers;                               		// 0x04B8 (0x0004) [0x0000000000000000]              
	int                                                bTransformFromAnimParent;                         		// 0x04BC (0x0004) [0x0000000000000000]              
	int                                                TickTag;                                          		// 0x04C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CachedAtomsTag;                                   		// 0x04C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bUseSingleBodyPhysics;                            		// 0x04C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bRequiredBonesUpToDate;                           		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x04D0 (0x0004) [0x0000000000000000]              
	struct FName                                       PhysicsBlendZeroDriftBoneName;                    		// 0x04D4 (0x0008) [0x0000000000000000]              
	int                                                FramesPhysicsAsleep;                              		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                  		// 0x04E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x04E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAttachedSkeletalMesh : 1;                        		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSetSkeletalPhysics : 1;                          		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FSoundNotiType                              CharacterSoundType;                               		// 0x04E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipSoundNotify : 1;                             		// 0x04EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseStaticMeshLightSetting : 1;                   		// 0x04EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              fInstanceAnimScale;                               		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x04F4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x04F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x04F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x04F4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x04F4 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMeshObjectUpdate : 1;                       		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x04F4 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x04F4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x04F4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x04F4 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x04F4 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x04F4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x04F4 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x04F4 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x04F4 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bUseRawData : 1;                                  		// 0x04F4 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x04F4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x04F4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bPauseAnims : 1;                                  		// 0x04F4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x04F4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x04F4 (0x0004) [0x0000000000000000] [0x00400000] 
	struct FVector                                     LineCheckBoundsScale;                             		// 0x04F8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bFilteredHidden : 1;                              		// 0x0504 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x0504 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x0504 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothFrozen : 1;                                 		// 0x0504 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x0504 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x0504 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x0504 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x0504 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRecentlyRendered : 1;                            		// 0x0504 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x0504 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bForceMeshObjectUpdates : 1;                      		// 0x0504 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x0504 (0x0004) [0x0000000000002002] [0x00000800] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x0504 (0x0004) [0x0000000000002002] [0x00001000] ( CPF_Const | CPF_Transient )
	TArray< struct FBonePair >                         InstanceVertexWeightBones;                        		// 0x0508 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     ClothExternalForce;                               		// 0x0514 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ClothWind;                                        		// 0x0520 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClothBaseVelClampRange;                           		// 0x052C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendWeight;                                 		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ClothSim;                                         		// 0x053C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0540 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshPosData;                                 		// 0x0544 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FVector >                           ClothMeshNormalData;                              		// 0x0550 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothMeshIndexData;                               		// 0x055C (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                NumClothMeshVerts;                                		// 0x0568 (0x0004) [0x0000000000000000]              
	int                                                NumClothMeshIndices;                              		// 0x056C (0x0004) [0x0000000000000000]              
	TArray< int >                                      ClothMeshParentData;                              		// 0x0570 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                NumClothMeshParentIndices;                        		// 0x057C (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           ClothMeshWeldedPosData;                           		// 0x0580 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshWeldedNormalData;                        		// 0x058C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothMeshWeldedIndexData;                         		// 0x0598 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ClothDirtyBufferFlag;                             		// 0x05A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClothRBChannel;                                   		// 0x05A8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer ClothRBCollideWithChannels;                       		// 0x05AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothForceScale;                                  		// 0x05B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothImpulseScale;                                		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothAttachmentTearFactor;                        		// 0x05B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothUseCompartment : 1;                         		// 0x05BC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              MinDistanceForClothReset;                         		// 0x05C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LastClothLocation;                                		// 0x05C4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    SoftBodySim;                                      		// 0x05D0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SoftBodySceneIndex;                               		// 0x05D4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x05D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FVector >                           SoftBodyTetraPosData;                             		// 0x05DC (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      SoftBodyTetraIndexData;                           		// 0x05E8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSoftBodyTetraVerts;                            		// 0x05F4 (0x0004) [0x0000000000000000]              
	int                                                NumSoftBodyTetraIndices;                          		// 0x05F8 (0x0004) [0x0000000000000000]              
	float                                              SoftBodyImpulseScale;                             		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x0600 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x0600 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x0600 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSoftBodyUseCompartment : 1;                      		// 0x0600 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      SoftBodyRBChannel;                                		// 0x0604 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer SoftBodyRBCollideWithChannels;                    		// 0x0608 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodyASVPlane;                                 		// 0x060C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterial*                                   LimitMaterial;                                    		// 0x0610 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   AddSkelMaterial;                                  		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceBlendParentPhysics : 1;                     		// 0x0618 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPhysicalHitStart : 1;                            		// 0x0618 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPhysicalBackupFullWeight : 1;                    		// 0x0618 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              PhysicalHitInterpolation;                         		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitAccel;                                 		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitForceDirX;                             		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitForceDirY;                             		// 0x0628 (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitForceDirZ;                             		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitForce;                                 		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              PhysicalHitStopTime;                              		// 0x0634 (0x0004) [0x0000000000000000]              
	int                                                PhysicalHitBoneIndex;                             		// 0x0638 (0x0004) [0x0000000000000000]              
	int                                                PhysicalHitChildBone[ 0x82 ];                     		// 0x063C (0x0208) [0x0000000000002000]              ( CPF_Transient )
	float                                              PhysicalHitChildWeight[ 0x82 ];                   		// 0x0844 (0x0208) [0x0000000000002000]              ( CPF_Transient )
	int                                                PhysicalHitChildBoneNum;                          		// 0x0A4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PhysicalHitChildInterpolation[ 0x82 ];            		// 0x0A50 (0x0208) [0x0000000000002000]              ( CPF_Transient )
	float                                              PhysicalHitChildAccel[ 0x82 ];                    		// 0x0C58 (0x0208) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PhysicalRot[ 0x82 ];                              		// 0x0E60 (0x0618) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAlwaysUpdateKismetSkelMesh : 1;                  		// 0x1478 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              AnimCullDistanceForActor;                         		// 0x147C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInitDependencyParticle : 1;                      		// 0x1480 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitDependencyTrail : 1;                         		// 0x1480 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayPhysicNoise : 1;                             		// 0x1480 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	struct FVector                                     PhysicNoiseDir;                                   		// 0x1484 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicNoiseScale;                                 		// 0x1490 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicNoiseDuration;                              		// 0x1494 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicNoiseDurationScale;                         		// 0x1498 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicNoisePlayTime;                              		// 0x149C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicNoiseCurrentPlayTime;                       		// 0x14A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PhysicDurationWeight;                             		// 0x14A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PhysicNoiseSpace;                                 		// 0x14A8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    RenderRotation;                                   		// 0x14AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ActorRotation;                                    		// 0x14B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseRenderRotation : 1;                           		// 0x14C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< int >                                      OncePlayedNotifyIndices;                          		// 0x14C8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x14D4 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionVelocity;                               		// 0x14F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootBoneTranslation;                              		// 0x1500 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionAccelScale;                             		// 0x150C (0x000C) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x1518 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousRMM;                                      		// 0x1519 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PendingRMM;                                       		// 0x151A (0x0001) [0x0000000000000000]              
	unsigned char                                      OldPendingRMM;                                    		// 0x151B (0x0001) [0x0000000000000000]              
	int                                                bRMMOneFrameDelay;                                		// 0x151C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RootMotionRotationMode;                           		// 0x1520 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FaceFXBlendMode;                                  		// 0x1521 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    FaceFXActorInstance;                              		// 0x1524 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x1528 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< unsigned char >                            BoneVisibility;                                   		// 0x152C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     CacheDrawScale;                                   		// 0x1538 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MotionBlurType;                                   		// 0x1544 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPerBoneMotionBlur : 1;                           		// 0x1548 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDisableSoundNotifies : 1;                        		// 0x1548 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FMovableSocketInfo >                MovableSocketInfos;                               		// 0x154C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 907 ];

		return pClassPointer;
	};

	void StopAnim ( );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying );
	void CalcDrawScale ( );
	bool IsBoneHidden ( int BoneIndex );
	void UnHideBone ( int BoneIndex );
	void HideBone ( int BoneIndex, unsigned long bTermBodiesBelow );
	void SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );
	void SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration );
	float GetFaceFXRegister ( struct FString RegName );
	void DeclareFaceFXRegister ( struct FString RegName );
	bool IsPlayingFaceFXAnim ( );
	void StopFaceFXAnim ( );
	bool PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, int SoundTrackType, unsigned long InStopPrevious );
	void InitialFindAnimNodeCahce ( );
	void ToggleInstanceVertexWeights ( unsigned long bEnable );
	void UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs );
	int FindInstanceVertexweightBonePair ( struct FBonePair Bones );
	void RemoveInstanceVertexWeightBoneParented ( struct FName BoneName );
	void AddInstanceVertexWeightBoneParented ( struct FName BoneName );
	bool GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones );
	void UpdateAnimations ( );
	void ForceSkelUpdate ( );
	void UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport );
	void SetHasPhysicsAssetInstance ( unsigned long bHasInstance );
	class URB_BodyInstance* FindBodyInstanceNamed ( struct FName BoneName );
	struct FName FindConstraintBoneName ( int ConstraintIndex );
	int FindConstraintIndex ( struct FName ConstraintName );
	void InitSkelControls ( );
	void UpdateParentBoneMap ( );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	struct FVector GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent );
	struct FName FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation );
	void TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	void TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	struct FVector GetBoneAxis ( struct FName BoneName, unsigned char Axis );
	struct FVector GetRefPosePosition ( int BoneIndex );
	bool BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName );
	void GetBoneNames ( TArray< struct FName >* BoneNames );
	struct FName GetParentBone ( struct FName BoneName );
	struct FMatrix GetBoneMatrix ( int BoneIndex, unsigned long bForRender, unsigned long bWorldSpace );
	struct FName GetBoneName ( int BoneIndex );
	int MatchRefBone ( struct FName BoneName );
	void DestroyProgressEffect ( );
	void InitializeProgressEffect ( class USkeletalMesh* SkelMesh );
	void UpdateCustomSetNameIndexMap ( );
	struct FVector GetRefBoneLocation ( struct FName BoneName, int Space );
	struct FVector GetBoneLocation ( struct FName BoneName, int Space );
	struct FQuat GetBoneQuaternion ( struct FName BoneName, int Space );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
	float GetAnimLength ( struct FName AnimSeqName );
	float GetAnimRateByDuration ( struct FName AnimSeqName, float Duration );
	void RestoreSavedAnimSets ( );
	void SaveAnimSets ( );
	class UAnimSequence* FindAnimSequence ( struct FName AnimSeqName );
	void WakeSoftBody ( );
	void SetSoftBodyFrozen ( unsigned long bNewFrozen );
	void UpdateSoftBodyParams ( );
	void SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax );
	void EnableClothValidBounds ( unsigned long IfEnableClothValidBounds );
	void AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable );
	void SetClothVelocity ( struct FVector VelocityOffSet );
	void SetClothPosition ( struct FVector ClothOffSet );
	void SetClothSleep ( unsigned long IfClothSleep );
	void SetClothThickness ( float ClothThickness );
	void SetClothTearFactor ( float ClothTearFactor );
	void SetClothStretchingStiffness ( float ClothStretchingStiffness );
	void SetClothSolverIterations ( int ClothSolverIterations );
	void SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity );
	void SetClothPressure ( float ClothPressure );
	void SetClothFriction ( float ClothFriction );
	void SetClothFlags ( int ClothFlags );
	void SetClothDampingCoefficient ( float ClothDampingCoefficient );
	void SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient );
	void SetClothBendingStiffness ( float ClothBendingStiffness );
	void SetClothAttachmentTearFactor ( float ClothAttachTearFactor );
	void SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient );
	float GetClothThickness ( );
	float GetClothTearFactor ( );
	float GetClothStretchingStiffness ( );
	int GetClothSolverIterations ( );
	float GetClothSleepLinearVelocity ( );
	float GetClothPressure ( );
	float GetClothFriction ( );
	int GetClothFlags ( );
	float GetClothDampingCoefficient ( );
	float GetClothCollisionResponseCoefficient ( );
	float GetClothBendingStiffness ( );
	float GetClothAttachmentTearFactor ( );
	float GetClothAttachmentResponseCoefficient ( );
	void ResetClothVertsToRefPose ( );
	void SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts );
	void SetClothExternalForce ( struct FVector InForce );
	void UpdateClothParams ( );
	void SetClothFrozen ( unsigned long bNewFrozen );
	void SetEnableClothSimulation ( unsigned long bInEnable );
	void SetForceRefPose ( unsigned long bNewForceRefPose );
	void SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit );
	void SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases );
	void AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	bool IsComponentAttached ( class UActorComponent* Component, struct FName BoneName );
	class UActorComponent* FindComponentAttachedToBone ( struct FName InBoneName );
	struct FName GetSocketBoneName ( struct FName InSocketName );
	class USkeletalMeshSocket* GetSocketByName ( struct FName InSocketName );
	struct FMatrix GetSocketWorldMatrix ( struct FName InSocketName );
	bool GetSocketLocalLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetSocketWorldLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool IsExistAttachMents ( class UActorComponent* Component );
	bool DetachComponent ( class UActorComponent* Component );
	bool AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale, unsigned long bUseSocketRelativeValue );
};

//UClass* USkeletalMeshComponent::pClassPointer = NULL;

// Class Engine.SkeletalMeshFactorSet
// 0x0098 (0x00D4 - 0x003C)
class USkeletalMeshFactorSet : public UObject
{
public:
	struct FVector                                     Origin;                                           		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AniScale;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoScale;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectScale;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttachedMeshScale;                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddFootOffsetValue;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddFootOffsetValue2;                              		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimNameHeight;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalNameHeight;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowNameHeight;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ItemPreviewLocType;                               		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CommonPhysicsUseFlag;                             		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewLocUpperOffset;                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewLocLowerOffset;                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemPreviewScale;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSet*                                PlayParticleSet;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseSkeletalMeshSocketSet : 1;                    		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FSkeletalMeshSocketInfo >           SkeletalMeshSocketSet;                            		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSkeletalMeshBodyPartRatio >        NameplateMeshScaleRatio;                          		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  NameplateHeightRatio;                             		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSkeletalMeshBodyPartRatio >        MeshScaleRatio;                                   		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  HeightRatio;                                      		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshBodyPartRatio                  HandRatio;                                        		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMatOverride;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PhysicalHitScale;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 909 ];

		return pClassPointer;
	};

};

//UClass* USkeletalMeshFactorSet::pClassPointer = NULL;

// Class Engine.SkeletalMeshSocket
// 0x007C (0x00B8 - 0x003C)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneName;                                         		// 0x0044 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeScale;                                    		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x0074 (0x0004) [0x000000000000200B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Transient )
	class UStaticMesh*                                 PreviewStaticMesh;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DependencyParticleName;                           		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DependencyParticleSystem;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bParticleAttachPosOnly : 1;                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bParticleApplyAutoScale : 1;                      		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      UseCustomizeScaleZ : 1;                           		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FDependencyTrailInfo                        DependencyTrailTemplate;                          		// 0x0090 (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 911 ];

		return pClassPointer;
	};

};

//UClass* USkeletalMeshSocket::pClassPointer = NULL;

// Class Engine.SkyLight
// 0x0000 (0x0218 - 0x0218)
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 913 ];

		return pClassPointer;
	};

};

//UClass* ASkyLight::pClassPointer = NULL;

// Class Engine.SkyLightComponent
// 0x0008 (0x01A8 - 0x01A0)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LowerColor;                                       		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 915 ];

		return pClassPointer;
	};

};

//UClass* USkyLightComponent::pClassPointer = NULL;

// Class Engine.SkyLightToggleable
// 0x0000 (0x0218 - 0x0218)
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 917 ];

		return pClassPointer;
	};

};

//UClass* ASkyLightToggleable::pClassPointer = NULL;

// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x009D - 0x009C)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 919 ];

		return pClassPointer;
	};

};

//UClass* USlotToSlotReachSpec::pClassPointer = NULL;

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 921 ];

		return pClassPointer;
	};

};

//UClass* USmokeTestCommandlet::pClassPointer = NULL;

// Class Engine.SoundCue
// 0x00AC (0x00E8 - 0x003C)
class USoundCue : public UObject
{
public:
	struct FName                                       SoundGroup;                                       		// 0x003C (0x0008) [0x0000000000000000]              
	class USoundNode*                                  FirstNode;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                               		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VolumeMultiplier;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0090 (0x0004) [0x0000000000000000]              
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXAnimName;                                   		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxConcurrentPlayCount;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPlayCount;                                 		// 0x00B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              FadeInDuration;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDuration;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAbsoluteAmbientSound : 1;                      		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDynamicCaching : 1;                              		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      MusicVolModifierType;                             		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntervalConcurrentTime;                           		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IntervalMaxConcurrentPlayCount;                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentIntervalTime;                              		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentIntervalPlayCount;                         		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USoundNodeWave* >                    WaveList;                                         		// 0x00D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxAudibleDistanceAttNodeOnly;                    		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 923 ];

		return pClassPointer;
	};

	float GetCueDuration ( );
};

//UClass* USoundCue::pClassPointer = NULL;

// Class Engine.SoundSet
// 0x00D8 (0x0114 - 0x003C)
class USoundSet : public UObject
{
public:
	TArray< struct FStepSoundInfo >                    StepSounds;                                       		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepSoundInfo >                    LandSounds;                                       		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepSoundInfo >                    JumpSounds;                                       		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAttachSoundInfo >                  AttachSounds;                                     		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FWeaponSoundInfo >                  HitSounds;                                        		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FWeaponSoundInfo >                  WeaponSounds;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepSoundInfo >                    ScuffSounds;                                      		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStepSoundInfo >                    BodyfallSounds;                                   		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BFType1;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BFType1Volume;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BFType2;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BFType2Volume;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BFType3;                                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BFType3Volume;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BFType4;                                          		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BFType4Volume;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuffType1;                                       		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuffType1Volume;                                 		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuffType2;                                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuffType2Volume;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuffSp1;                                         		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuffSp1Volume;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuffSp2;                                         		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuffSp2Volume;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonStep;                                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonStepVolume;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPNor1;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPNor1Volume;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPNor2;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPNor2Volume;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPNor3;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPNor3Volume;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPSp1;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPSp1Volume;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPSp2;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPSp2Volume;                                   		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MonWPSp3;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MonWPSp3Volume;                                   		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 925 ];

		return pClassPointer;
	};

};

//UClass* USoundSet::pClassPointer = NULL;

// Class Engine.SpeechRecognition
// 0x0088 (0x00C4 - 0x003C)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                         		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConfidenceThreshhold;                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecogVocabulary >                  Vocabularies;                                     		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            VoiceData;                                        		// 0x0058 (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            WorkingVoiceData;                                 		// 0x0064 (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            UserData;                                         		// 0x0070 (0x000C) [0x0000000000000000]              
	struct FRecogUserData                              InstanceData[ 0x4 ];                              		// 0x007C (0x0040) [0x0000000000000000]              
	unsigned long                                      bDirty : 1;                                       		// 0x00BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialised : 1;                                 		// 0x00BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FPointer                                    FnxVoiceData;                                     		// 0x00C0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 927 ];

		return pClassPointer;
	};

};

//UClass* USpeechRecognition::pClassPointer = NULL;

// Class Engine.SphericalHarmonicLightComponent
// 0x0094 (0x0234 - 0x01A0)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x01A0 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 929 ];

		return pClassPointer;
	};

};

//UClass* USphericalHarmonicLightComponent::pClassPointer = NULL;

// Class Engine.SpotLight
// 0x0000 (0x0218 - 0x0218)
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 931 ];

		return pClassPointer;
	};

};

//UClass* ASpotLight::pClassPointer = NULL;

// Class Engine.SpotLightComponent
// 0x0010 (0x0228 - 0x0218)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterConeAngle;                                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0220 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0224 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 933 ];

		return pClassPointer;
	};

};

//UClass* USpotLightComponent::pClassPointer = NULL;

// Class Engine.SpotLightMovable
// 0x0000 (0x0218 - 0x0218)
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 935 ];

		return pClassPointer;
	};

};

//UClass* ASpotLightMovable::pClassPointer = NULL;

// Class Engine.SpotLightToggleable
// 0x0000 (0x0218 - 0x0218)
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 937 ];

		return pClassPointer;
	};

};

//UClass* ASpotLightToggleable::pClassPointer = NULL;

// Class Engine.SpriteComponent
// 0x000C (0x021C - 0x0210)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScreenSize;                                       		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 939 ];

		return pClassPointer;
	};

};

//UClass* USpriteComponent::pClassPointer = NULL;

// Class Engine.StandaloneComponentHolder
// 0x0000 (0x0210 - 0x0210)
class AStandaloneComponentHolder : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 941 ];

		return pClassPointer;
	};

};

//UClass* AStandaloneComponentHolder::pClassPointer = NULL;

// Class Engine.StaticLightCollectionActor
// 0x0010 (0x0228 - 0x0218)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray< class ULightComponent* >                   LightComponents;                                  		// 0x0218 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	int                                                MaxLightComponents;                               		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 943 ];

		return pClassPointer;
	};

};

//UClass* AStaticLightCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMeshActorBase
// 0x0000 (0x0210 - 0x0210)
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 945 ];

		return pClassPointer;
	};

};

//UClass* AStaticMeshActorBase::pClassPointer = NULL;

// Class Engine.StaticMeshActor
// 0x0030 (0x0240 - 0x0210)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UBillboardComponent*                         BillBoardMeshComponent;                           		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FString                                     MileStoneName;                                    		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBox                                        CachedComponentsBoundingBox;                      		// 0x0224 (0x001C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 947 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
};

//UClass* AStaticMeshActor::pClassPointer = NULL;

// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x0220 - 0x0210)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray< class UStaticMeshComponent* >              StaticMeshComponents;                             		// 0x0210 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	int                                                MaxStaticMeshComponents;                          		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 949 ];

		return pClassPointer;
	};

};

//UClass* AStaticMeshCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMeshComponent
// 0x0048 (0x0270 - 0x0228)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousLODLevel;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVertexCollisionForCamera : 1;                    		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideLightMapResolution : 1;                  		// 0x0238 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	int                                                OverriddenLightMapResolution;                     		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SubDivisionStepSize;                              		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MinSubDivisions;                                  		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxSubDivisions;                                  		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x024C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x0250 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FStaticMeshComponentLODInfo >       LODData;                                          		// 0x025C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                VertexPositionVersionNumber;                      		// 0x0268 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SelectLODElementIndex;                            		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 951 ];

		return pClassPointer;
	};

	void DisableRBCollisionWithSMC ( class UStaticMeshComponent* OtherSMC, unsigned long bDisabled );
	bool SetStaticMesh ( class UStaticMesh* NewMesh );
};

//UClass* UStaticMeshComponent::pClassPointer = NULL;

// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0050 - 0x004C)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 953 ];

		return pClassPointer;
	};

};

//UClass* UStaticMeshComponentFactory::pClassPointer = NULL;

// Class Engine.SwatTurnReachSpec
// 0x0001 (0x009D - 0x009C)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 955 ];

		return pClassPointer;
	};

};

//UClass* USwatTurnReachSpec::pClassPointer = NULL;

// Class Engine.TeamInfo
// 0x001C (0x022C - 0x0210)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x0210 (0x000C) [0x0000000000008022]              ( CPF_Const | CPF_Net | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	int                                                Size;                                             		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              Score;                                            		// 0x0220 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamIndex;                                        		// 0x0224 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      TeamColor;                                        		// 0x0228 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 957 ];

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
	struct FColor GetTextColor ( );
	struct FColor GetHUDColor ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void UnbindTeamDataProvider ( );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* ATeamInfo::pClassPointer = NULL;

// Class Engine.Teleporter
// 0x0028 (0x0324 - 0x02FC)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x02FC (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       ProductRequired;                                  		// 0x0308 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangesVelocity : 1;                             		// 0x0310 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bChangesYaw : 1;                                  		// 0x0310 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesX : 1;                                   		// 0x0310 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesY : 1;                                   		// 0x0310 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesZ : 1;                                   		// 0x0310 (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnabled : 1;                                     		// 0x0310 (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0310 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FVector                                     TargetVelocity;                                   		// 0x0314 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LastFired;                                        		// 0x0320 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 959 ];

		return pClassPointer;
	};

	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	void eventPostBeginPlay ( );
	bool CanTeleport ( class AActor* A );
};

//UClass* ATeleporter::pClassPointer = NULL;

// Class Engine.TeleportReachSpec
// 0x0000 (0x0090 - 0x0090)
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 961 ];

		return pClassPointer;
	};

};

//UClass* UTeleportReachSpec::pClassPointer = NULL;

// Class Engine.TextParser
// 0x0000 (0x003C - 0x003C)
class UTextParser : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 963 ];

		return pClassPointer;
	};

};

//UClass* UTextParser::pClassPointer = NULL;

// Class Engine.Texture2DComposite
// 0x0010 (0x00C8 - 0x00B8)
class UTexture2DComposite : public UTexture
{
public:
	TArray< struct FSourceTexture2DRegion >            SourceRegions;                                    		// 0x00B8 (0x000C) [0x0000000000000000]              
	int                                                MaxTextureSize;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 965 ];

		return pClassPointer;
	};

	void ResetSourceRegions ( );
	void UpdateCompositeTexture ( int NumMipsToGenerate );
	bool SourceTexturesFullyStreamedIn ( );
};

//UClass* UTexture2DComposite::pClassPointer = NULL;

// Class Engine.Texture2DDynamic
// 0x0014 (0x00CC - 0x00B8)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00B8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SizeY;                                            		// 0x00BC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x00C0 (0x0001) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                NumMips;                                          		// 0x00C4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bIsResolveTarget : 1;                             		// 0x00C8 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 967 ];

		return pClassPointer;
	};

	class UTexture2DDynamic* Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
	void Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
};

//UClass* UTexture2DDynamic::pClassPointer = NULL;

// Class Engine.Texture2DExternalStreamed
// 0x0024 (0x0138 - 0x0114)
class UTexture2DExternalStreamed : public UTexture2D
{
public:
	unsigned char                                      ExternalMode;                                     		// 0x0114 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            ExternalData;                                     		// 0x0118 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ExternalFilename;                                 		// 0x0124 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                ExternalFileSize;                                 		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bGeneratedMips : 1;                               		// 0x0134 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 969 ];

		return pClassPointer;
	};

};

//UClass* UTexture2DExternalStreamed::pClassPointer = NULL;

// Class Engine.TextureCube
// 0x002C (0x00E4 - 0x00B8)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00B8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SizeY;                                            		// 0x00BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x00C0 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumMips;                                          		// 0x00C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x00C8 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	class UTexture2D*                                  FacePosX;                                         		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegX;                                         		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosY;                                         		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegY;                                         		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosZ;                                         		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegZ;                                         		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 971 ];

		return pClassPointer;
	};

};

//UClass* UTextureCube::pClassPointer = NULL;

// Class Engine.TextureFlipBook
// 0x0040 (0x0154 - 0x0114)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0114 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeIntoMovie;                                    		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastFrame;                               		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              HorizontalScale;                                  		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VerticalScale;                                    		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x0128 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStopped : 1;                                     		// 0x0128 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x0128 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0128 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                HorizontalImages;                                 		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalImages;                                   		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FBMethod;                                         		// 0x0134 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameTime;                                        		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                CurrentRow;                                       		// 0x0140 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentColumn;                                    		// 0x0144 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetU;                                    		// 0x0148 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetV;                                    		// 0x014C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0150 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 973 ];

		return pClassPointer;
	};

	void SetCurrentFrame ( int Row, int Col );
	void Stop ( );
	void Pause ( );
	void Play ( );
};

//UClass* UTextureFlipBook::pClassPointer = NULL;

// Class Engine.TextureMovie
// 0x004C (0x0104 - 0x00B8)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x00C0 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovieStreamSource;                                		// 0x00C3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DecoderClass;                                     		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCodecMovie*                                 Decoder;                                          		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      Paused : 1;                                       		// 0x00CC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      Stopped : 1;                                      		// 0x00CC (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      Looping : 1;                                      		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AutoPlay : 1;                                     		// 0x00CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x00D0 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ReleaseCodecFence;                                		// 0x0100 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 975 ];

		return pClassPointer;
	};

	void Stop ( );
	void Resume ( );
	void Pause ( );
	void Play ( );
};

//UClass* UTextureMovie::pClassPointer = NULL;

// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00C1 - 0x00BC)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x00C0 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 977 ];

		return pClassPointer;
	};

};

//UClass* UTextureRenderTargetCube::pClassPointer = NULL;

// Class Engine.TopViewRenderingActor
// 0x0090 (0x02A0 - 0x0210)
class ATopViewRenderingActor : public AActor
{
public:
	class UTextureRenderTarget2D*                      renderTarget;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0214 (0x000C) MISSED OFFSET
	struct FMatrix                                     mViewMatrix;                                      		// 0x0220 (0x0040) [0x0000000000000000]              
	struct FMatrix                                     mProjMatrix;                                      		// 0x0260 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 979 ];

		return pClassPointer;
	};

};

//UClass* ATopViewRenderingActor::pClassPointer = NULL;

// Class Engine.Trigger
// 0x000C (0x021C - 0x0210)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AITriggerDelay;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 981 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	bool StopsProjectile ( class AProjectile* P );
	void UnTrigger ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

//UClass* ATrigger::pClassPointer = NULL;

// Class Engine.TriggerVolume
// 0x0000 (0x0258 - 0x0258)
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 983 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

//UClass* ATriggerVolume::pClassPointer = NULL;

// Class Engine.UberPostProcessEffect
// 0x002C (0x00C4 - 0x0098)
class UUberPostProcessEffect : public UDOFAndBloomEffect
{
public:
	struct FVector                                     SceneShadows;                                     		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneHighLights;                                  		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMidTones;                                    		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneDesaturation;                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseColorBalanceLUT : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 985 ];

		return pClassPointer;
	};

};

//UClass* UUberPostProcessEffect::pClassPointer = NULL;

// Class Engine.UIActionData
// 0x000C (0x0048 - 0x003C)
class UUIActionData : public UObject
{
public:
	struct FString                                     ActionData;                                       		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 987 ];

		return pClassPointer;
	};

};

//UClass* UUIActionData::pClassPointer = NULL;

// Class Engine.UIActionGroupData
// 0x000C (0x0048 - 0x003C)
class UUIActionGroupData : public UObject
{
public:
	TArray< struct FUIActionDataEntry >                UIActionDataEntryArray;                           		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 989 ];

		return pClassPointer;
	};

};

//UClass* UUIActionGroupData::pClassPointer = NULL;

// Class Engine.UIModVolume
// 0x001C (0x0274 - 0x0258)
class AUIModVolume : public AVolume
{
public:
	struct FString                                     UIModVolumeName;                                  		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     UIModVolumeDescription;                           		// 0x0268 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 991 ];

		return pClassPointer;
	};

};

//UClass* AUIModVolume::pClassPointer = NULL;

// Class Engine.Vehicle
// 0x0074 (0x06C0 - 0x064C)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                           		// 0x064C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bDriving : 1;                                     		// 0x0650 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x0650 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x0650 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x0650 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x0650 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x0650 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x0650 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x0650 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDuckObstacles : 1;                               		// 0x0650 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x0650 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x0650 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x0650 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x0650 (0x0004) [0x0000000000000000] [0x00001000] 
	TArray< struct FVector >                           ExitPositions;                                    		// 0x0654 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExitRadius;                                       		// 0x0660 (0x0004) [0x0000000000000000]              
	struct FVector                                     ExitOffset;                                       		// 0x0664 (0x000C) [0x0000000000000000]              
	float                                              Steering;                                         		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rise;                                             		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetLocationAdjustment;                         		// 0x067C (0x000C) [0x0000000000000000]              
	float                                              DriverDamageMult;                                 		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              MomentumMult;                                     		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      CrushedDamageType;                                		// 0x0690 (0x0004) [0x0000000000000000]              
	float                                              MinCrushSpeed;                                    		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              ForceCrushPenetration;                            		// 0x0698 (0x0004) [0x0000000000000000]              
	unsigned char                                      StuckCount;                                       		// 0x069C (0x0001) [0x0000000000000000]              
	float                                              ThrottleTime;                                     		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              StuckTime;                                        		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              OldSteering;                                      		// 0x06A8 (0x0004) [0x0000000000000000]              
	float                                              OnlySteeringStartTime;                            		// 0x06AC (0x0004) [0x0000000000000000]              
	float                                              OldThrottle;                                      		// 0x06B0 (0x0004) [0x0000000000000000]              
	float                                              AIMoveCheckTime;                                  		// 0x06B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VehicleMovingTime;                                		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              TurnTime;                                         		// 0x06BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 993 ];

		return pClassPointer;
	};

	void NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventReplicatedEvent ( struct FName VarName );
	void DrivingStatusChanged ( );
	void HandleDeadVehicleDriver ( );
	void SetDriving ( unsigned long B );
	struct FVector GetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	void PancakeOther ( class APawn* Other );
	bool eventEncroachingOn ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DriverDied ( class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowActiveWeapon ( class UClass* DamageType );
	void AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void DriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool eventDriverLeave ( unsigned long bForceLeave );
	bool eventContinueOnFoot ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	bool AnySeatAvailable ( );
	bool CanEnterVehicle ( class APawn* P );
	void Destroyed_HandleDriver ( );
	void eventDestroyed ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void Suicide ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void NotifyTeamChanged ( );
};

//UClass* AVehicle::pClassPointer = NULL;

// Class Engine.VoiceChannel
// 0x000C (0x0074 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0068 (0x000C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 995 ];

		return pClassPointer;
	};

};

//UClass* UVoiceChannel::pClassPointer = NULL;

// Class Engine.VoiceSet
// 0x0120 (0x015C - 0x003C)
class UVoiceSet : public UObject
{
public:
	class USoundCue*                                   AType1;                                           		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AType2;                                           		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HAType1;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HAType2;                                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HAType3;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PAShort;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PALong;                                           		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DNormal;                                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DHeavy;                                           		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DHeavyR;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DNormal2;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Death;                                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Death2;                                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Death3;                                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   bRun;                                             		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BStun;                                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BNormal;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BAngry;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BWalk;                                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MEvade;                                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MJump;                                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MBounce;                                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SGreet;                                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SLove;                                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSit;                                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SStand;                                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SStretch;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   STrade;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   STradeGet;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SDrink;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SLaugh;                                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSpeak;                                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SRoar;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SVictory;                                         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSearch;                                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   STease;                                           		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SEat;                                             		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSlot1;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSlot2;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SSlot3;                                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PCastType1;                                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PCastType2;                                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PCastType3;                                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PCastType4;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MCastType1;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MCastType2;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MCastType3;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MCastType4;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CSTType1;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CSTType2;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CSTType3;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CSTType4;                                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ASTType1;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ASTType2;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ASTType3;                                         		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ASTType4;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SASTType1;                                        		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SASTType2;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SASTType3;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SASTType4;                                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KBStart;                                          		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KBLoop;                                           		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KBStandUp;                                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Idle1;                                            		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Idle2;                                            		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Idle3;                                            		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SPAType1;                                         		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SPAType2;                                         		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SPAType3;                                         		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CombatPreemptAttack;                              		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CombatSOS;                                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CombatFlee;                                       		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 997 ];

		return pClassPointer;
	};

};

//UClass* UVoiceSet::pClassPointer = NULL;

// Class Engine.VolumePathNode
// 0x0008 (0x0330 - 0x0328)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartingHeight;                                   		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 999 ];

		return pClassPointer;
	};

};

//UClass* AVolumePathNode::pClassPointer = NULL;

// Class Engine.WallTransReachSpec
// 0x0000 (0x009C - 0x009C)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1001 ];

		return pClassPointer;
	};

};

//UClass* UWallTransReachSpec::pClassPointer = NULL;

// Class Engine.Weapon
// 0x00A4 (0x0300 - 0x025C)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                  		// 0x025C (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             FiringStatesArray;                                		// 0x0260 (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            WeaponFireTypes;                                  		// 0x026C (0x000C) [0x0000000000000000]              
	TArray< class UClass* >                            WeaponProjectiles;                                		// 0x0278 (0x000C) [0x0000000000000000]              
	TArray< float >                                    FireInterval;                                     		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Spread;                                           		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    InstantHitDamage;                                 		// 0x029C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    InstantHitMomentum;                               		// 0x02A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            InstantHitDamageTypes;                            		// 0x02B4 (0x000C) [0x0000000000000000]              
	float                                              EquipTime;                                        		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PutDownTime;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FireOffset;                                       		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              WeaponRange;                                      		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x02DC (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	float                                              DefaultAnimSpeed;                                 		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AAIController*                               AIController;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            ShouldFireOnRelease;                              		// 0x02EC (0x000C) [0x0000000000000000]              
	float                                              AIRating;                                         		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              CachedMaxRange;                                   		// 0x02FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1003 ];

		return pClassPointer;
	};

	bool StillFiring ( unsigned char FireMode );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool TryPutDown ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector eventGetMuzzleLoc ( );
	void CustomFire ( );
	class AProjectile* ProjectileFire ( );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact );
	void InstantFire ( );
	bool PassThroughDamage ( class AActor* HitActor );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList );
	class AActor* GetTraceOwner ( );
	float eventGetTraceRange ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void FireAmmunition ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void SetCurrentFireMode ( unsigned char FiringModeNum );
	void SendToFiringState ( unsigned char FireModeNum );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerStartFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	float AdjustFOVAngle ( float FOVAngle );
	void GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	void WeaponEmpty ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void PutDownWeapon ( );
	void Activate ( );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	void RefireCheckTimer ( );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void PlayFiringSound ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopWeaponAnimation ( );
	void PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh );
	void WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness );
	class UAnimNodeSequence* GetWeaponAnimNodeSeq ( );
	bool FireOnRelease ( );
	float SuggestDefenseStyle ( );
	float SuggestAttackStyle ( );
	bool CanAttack ( class AActor* Other );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool FocusOnLeader ( unsigned long bLeaderFiring );
	bool RecommendRangedAttack ( );
	float GetWeaponRating ( );
	float RelativeStrengthVersus ( class APawn* P, float Dist );
	float GetAIRating ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	float GetDamageRadius ( );
	float MaxRange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class UClass* GetProjectileClass ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void WeaponLog ( struct FString msg, struct FString FuncStr );
	void DumpWeaponDebugToLog ( );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool DenyClientWeaponSet ( );
	bool eventIsFiring ( );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	void HolderDied ( );
	bool IsActiveWeapon ( );
	void ItemRemovedFromInvManager ( );
	void eventDestroyed ( );
};

//UClass* AWeapon::pClassPointer = NULL;

// Class Engine.WebTexture
// 0x0008 (0x00C0 - 0x00B8)
class UWebTexture : public UTexture
{
public:
	int                                                OriginSizeX;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OriginSizeY;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1005 ];

		return pClassPointer;
	};

};

//UClass* UWebTexture::pClassPointer = NULL;

// Class Engine.WindDirectionalSource
// 0x0004 (0x0214 - 0x0210)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1007 ];

		return pClassPointer;
	};

};

//UClass* AWindDirectionalSource::pClassPointer = NULL;

// Class Engine.WindDirectionalSourceComponent
// 0x0076 (0x00CC - 0x0056)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x0058 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      Windtype;                                         		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FWindRoad                                   Road;                                             		// 0x0060 (0x0060) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Strength;                                         		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1009 ];

		return pClassPointer;
	};

};

//UClass* UWindDirectionalSourceComponent::pClassPointer = NULL;

// Class Engine.World
// 0x0288 (0x02C4 - 0x003C)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x288 ];                           		// 0x003C (0x0288) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1011 ];

		return pClassPointer;
	};

};

//UClass* UWorld::pClassPointer = NULL;

// Class Engine.ZoneInfo
// 0x0010 (0x0220 - 0x0210)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                            		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftKill;                                         		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      KillZDamageType;                                  		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1013 ];

		return pClassPointer;
	};

};

//UClass* AZoneInfo::pClassPointer = NULL;

// Class Engine.WorldInfo
// 0x04E8 (0x0708 - 0x0220)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x0220 (0x0134) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SquintModeKernelSize;                             		// 0x0354 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x0358 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APostProcessVolume*                          HighestPriorityCameraPPVolume;                    		// 0x035C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AOceanVolume*                                HighestOceanVolume;                               		// 0x0360 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AFallAreaVolume*                             HighestFallVolume;                                		// 0x0364 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     OceanSignalPostProcess;                           		// 0x0368 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     FallAreaSignalPostProcess;                        		// 0x0374 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              fForceFallMaxDelayTime;                           		// 0x0380 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bInForceFallingArea : 1;                          		// 0x0384 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x0384 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0384 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x0384 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x0384 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x0384 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bStartup : 1;                                     		// 0x0384 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x0384 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      PathSmoothEdge : 1;                               		// 0x0384 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x0384 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x0384 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x0384 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x0384 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x0384 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;          		// 0x0384 (0x0004) [0x0000000000004001] [0x00040000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitExplosionChunkSize : 1;                     		// 0x0384 (0x0004) [0x0000000000004001] [0x00080000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitDamageChunkSize : 1;                        		// 0x0384 (0x0004) [0x0000000000004001] [0x00100000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowModulateBetterShadows : 1;                  		// 0x0384 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bAllowLightEnvSphericalHarmonicLights : 1;        		// 0x0384 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	class AForceFallingVolume*                         HighestForceFallingVolume;                        		// 0x0388 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     ForceFallingSignalPostProcess;                    		// 0x038C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x0398 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FInteriorSettings                           DefaultInteriorSettings;                          		// 0x03A4 (0x0024) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x03C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AMusicVolume*                                HighestPrioritySoundVolume;                       		// 0x03CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AAmbientSoundVolume*                         HighestPriorityAmbientSoundVolume;                		// 0x03D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AMusicOnceVolume*                            HighestPriorityMusicOnceVolume;                   		// 0x03D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class APortalVolume* >                     PortalVolumes;                                    		// 0x03D8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x03E4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fShadowVolumeCullDistance;                        		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWorldDynamicShadowDistance;                      		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShadowVolumeCullDistanceEditor;                  		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBookMark*                                   BookMarks[ 0xA ];                                 		// 0x03FC (0x0028) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClipPadEntry* >                     ClipPadEntries;                                   		// 0x0424 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeDilation;                                     		// 0x0430 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DemoPlayTimeDilation;                             		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              TimeSeconds;                                      		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              RealTimeSeconds;                                  		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              AudioTimeSeconds;                                 		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              DeltaSeconds;                                     		// 0x0444 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PauseDelay;                                       		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              RealTimeToUnPause;                                		// 0x044C (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x0450 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     VisibleGroups;                                    		// 0x0454 (0x000C) [0x0000000000000000]              
	struct FString                                     SelectedGroups;                                   		// 0x0460 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  DefaultTexture;                                   		// 0x046C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x0470 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x0474 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  LargeVertex;                                      		// 0x0478 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  BSPVertex;                                        		// 0x047C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DeferredExecs;                                    		// 0x0480 (0x000C) [0x0000000000000000]              
	class AGameReplicationInfo*                        GRI;                                              		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NetMode;                                          		// 0x0490 (0x0001) [0x0000000000000000]              
	struct FString                                     ComputerName;                                     		// 0x0494 (0x000C) [0x0000000000000000]              
	struct FString                                     EngineVersion;                                    		// 0x04A0 (0x000C) [0x0000000000000000]              
	struct FString                                     MinNetVersion;                                    		// 0x04AC (0x000C) [0x0000000000000000]              
	class AGameInfo*                                   Game;                                             		// 0x04B8 (0x0004) [0x0000000000000000]              
	float                                              StallZ;                                           		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldGravityZ;                                    		// 0x04C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefaultGravityZ;                                  		// 0x04C4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              GlobalGravityZ;                                   		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ANavigationPoint*                            NavigationPointList;                              		// 0x04D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PathWidth;                                        		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PathTessellation;                                 		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                PathMaterials;                                    		// 0x04DC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PathHeight;                                       		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PathCollisionHeight;                              		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PathParticle;                                     		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PathParticleHeight;                               		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AEmitter*                                    PathParticleEmitter;                              		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 ControllerList;                                   		// 0x04FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PawnList;                                         		// 0x0500 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CoverList;                                        		// 0x0504 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MoveRepSize;                                      		// 0x0508 (0x0004) [0x0000000000000000]              
	TArray< struct FNetViewer >                        ReplicationViewers;                               		// 0x050C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     NextURL;                                          		// 0x0518 (0x000C) [0x0000000000000000]              
	float                                              NextSwitchCountdown;                              		// 0x0524 (0x0004) [0x0000000000000000]              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DefaultColorScale;                                		// 0x052C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            GameTypesSupportedOnThisMap;                      		// 0x0538 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            ClientDestroyedActorTypes;                        		// 0x0544 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             PreparingLevelNames;                              		// 0x0550 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FName >                             CommittedLevelNames;                              		// 0x055C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAudioComponent*                             MusicComp;                                        		// 0x0568 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	struct FMusicTrackStruct                           CurrentMusicTrack;                                		// 0x056C (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                             		// 0x0584 (0x0018) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     Title;                                            		// 0x059C (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     Author;                                           		// 0x05A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMapInfo*                                    MyMapInfo;                                        		// 0x05B4 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FString                                     EmitterPoolClassPath;                             		// 0x05B8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x05C4 (0x0004) [0x0000000000000000]              
	struct FString                                     DecalManagerClassPath;                            		// 0x05C8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class ADecalManager*                               MyDecalManager;                                   		// 0x05D4 (0x0004) [0x0000000000000000]              
	struct FString                                     CircularShadowManagerClassPath;                   		// 0x05D8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class ACircularShadowManager*                      MyCircalShadowManager;                            		// 0x05E4 (0x0004) [0x0000000000000000]              
	struct FString                                     FractureManagerClassPath;                         		// 0x05E8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	class AFractureManager*                            MyFractureManager;                                		// 0x05F4 (0x0004) [0x0000000000000000]              
	float                                              MaxPhysicsDeltaTime;                              		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPhysicsSubsteps;                               		// 0x05FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x0600 (0x003C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCompartmentRunList >               CompartmentRunFrames;                             		// 0x063C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x0648 (0x0004) [0x0000000000000000]              
	class UPhysicsLODVerticalDestructible*             DestructibleVertical;                             		// 0x064C (0x0004) [0x0000000000000000]              
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x0650 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChanceOfPhysicsChunkOverride;                     		// 0x0668 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxExplosionChunkSize;                            		// 0x066C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxDamageChunkSize;                               		// 0x0670 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FracturedMeshWeaponDamage;                        		// 0x0674 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FMap_Mirror                                 ScreenMessages;                                   		// 0x0678 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FScreenMessageString >              PriorityScreenMessages;                           		// 0x06B4 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FT1LevelTreeNode >                  T1LevelGroupTree;                                 		// 0x06C0 (0x000C) [0x0000000000000000]              
	struct FMap_Mirror                                 RegisteredDynamicStreamLevels;                    		// 0x06CC (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1015 ];

		return pClassPointer;
	};

	void AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage );
	void DoMemoryTracking ( );
	bool IsPlayingDemo ( );
	bool IsRecordingDemo ( );
	unsigned char GetDetailMode ( );
	struct FString GetMapName ( unsigned long bIncludePrefix );
	void SetMapInfo ( class UMapInfo* NewMapInfo );
	class UMapInfo* GetMapInfo ( );
	void SetSeamlessTravelMidpointPause ( unsigned long bNowPaused );
	bool IsInSeamlessTravel ( );
	void SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid );
	void CommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent );
	bool IsMapChangeReady ( );
	bool IsPreparingMapChange ( );
	void PrepareMapChange ( TArray< struct FName >* LevelNames );
	void NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents );
	void AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P );
	void AllControllers ( class UClass* BaseClass, class AController** C );
	void NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs );
	void RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N );
	void AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N );
	void Reset ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute );
	class UClass* GetGameClass ( );
	struct FString GetAddressURL ( );
	void VerifyNavList ( );
	void DelayGarbageCollection ( float InDelayedTime );
	void ForceGarbageCollection ( unsigned long bFullPurge );
	bool IsPlayInEditor ( );
	bool IsConsoleBuild ( unsigned char ConsoleType );
	bool IsDemoBuild ( );
	struct FString GetLocalURL ( );
	void SetLevelRBGravity ( struct FVector NewGrav );
	class USequence* GetGameSequence ( );
	float GetGravityZ ( );
	bool IsServer ( );
	void UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack );
	void eventReplicatedEvent ( struct FName VarName );
};

//UClass* AWorldInfo::pClassPointer = NULL;

// Class Engine.ZoneTeleport
// 0x0060 (0x0270 - 0x0210)
class AZoneTeleport : public AActor
{
public:
	int                                                teleportid;                                       		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                ZoneID;                                           		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TeleportAlias;                                    		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                ZoneTeleportYaw;                                  		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeleportMoneyCost;                                		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FString                                     ZoneTeleportName;                                 		// 0x022C (0x000C) [0x0000000000000000]              
	struct FString                                     ZoneTeleportDescription;                          		// 0x0238 (0x000C) [0x0000000000000000]              
	struct FString                                     RefMapinfo;                                       		// 0x0244 (0x000C) [0x0000000000000000]              
	struct FString                                     ClinetDescription;                                		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FString                                     TeleportActivateFaction;                          		// 0x025C (0x000C) [0x0000000000000000]              
	class USpriteComponent*                            IconSpriteComponent;                              		// 0x0268 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UArrowComponent*                             SpawnDirectionArrow;                              		// 0x026C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1017 ];

		return pClassPointer;
	};

};

//UClass* AZoneTeleport::pClassPointer = NULL;

// Class Engine.ZoneTeleportSwitch
// 0x0038 (0x0248 - 0x0210)
class AZoneTeleportSwitch : public AActor
{
public:
	int                                                teleportSwitchid;                                 		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ZoneID;                                           		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TeleportSwitchAlias;                              		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                SwitchActive_Radius;                              		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ZoneTeleportDescription;                          		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SwitchActive_TeleportAlias;                       		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AZoneTeleport*                               SwitchActive_Teleport;                            		// 0x0240 (0x0004) [0x0000000000000000]              
	class USpriteComponent*                            IconSpriteComponent;                              		// 0x0244 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1019 ];

		return pClassPointer;
	};

};

//UClass* AZoneTeleportSwitch::pClassPointer = NULL;

// Class Engine.AIController
// 0x0018 (0x03B0 - 0x0398)
class AAIController : public AController
{
public:
	unsigned long                                      bHunting : 1;                                     		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x0398 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x0398 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              Skill;                                            		// 0x039C (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedMoveTarget;                               		// 0x03A0 (0x0004) [0x0000000000000000]              
	class ARoute*                                      ScriptedRoute;                                    		// 0x03A4 (0x0004) [0x0000000000000000]              
	int                                                ScriptedRouteIndex;                               		// 0x03A8 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedFocus;                                    		// 0x03AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1021 ];

		return pClassPointer;
	};

	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSetTeam ( int inTeamIdx );
	bool PriorityObjective ( );
	struct FName GetOrders ( );
	class AActor* GetOrderObject ( );
	void SetOrders ( struct FName NewOrders, class AController* OrderGiver );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void Reset ( );
	void eventPreBeginPlay ( );
};

//UClass* AAIController::pClassPointer = NULL;

// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1023 ];

		return pClassPointer;
	};

};

//UClass* UCoverGroupRenderingComponent::pClassPointer = NULL;

// Class Engine.CoverMeshComponent
// 0x0024 (0x0294 - 0x0270)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FCoverMeshes >                      Meshes;                                           		// 0x0270 (0x000C) [0x0000000000000000]              
	struct FVector                                     LocationOffset;                                   		// 0x027C (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOn;                                     		// 0x0288 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOff;                                    		// 0x028C (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 Disabled;                                         		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1025 ];

		return pClassPointer;
	};

};

//UClass* UCoverMeshComponent::pClassPointer = NULL;

// Class Engine.PathGoalEvaluator
// 0x000C (0x0048 - 0x003C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxPathVisits;                                    		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1027 ];

		return pClassPointer;
	};

};

//UClass* UPathGoalEvaluator::pClassPointer = NULL;

// Class Engine.Goal_AtActor
// 0x000C (0x0054 - 0x0048)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1029 ];

		return pClassPointer;
	};

	bool AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial );
};

//UClass* UGoal_AtActor::pClassPointer = NULL;

// Class Engine.PathConstraint
// 0x0004 (0x0040 - 0x003C)
class UPathConstraint : public UObject
{
public:
	class UPathConstraint*                             NextConstraint;                                   		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1031 ];

		return pClassPointer;
	};

};

//UClass* UPathConstraint::pClassPointer = NULL;

// Class Engine.Path_AlongLine
// 0x000C (0x004C - 0x0040)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0040 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1033 ];

		return pClassPointer;
	};

	bool AlongLine ( class APawn* P, struct FVector Dir );
};

//UClass* UPath_AlongLine::pClassPointer = NULL;

// Class Engine.Path_TowardGoal
// 0x0004 (0x0044 - 0x0040)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1035 ];

		return pClassPointer;
	};

	bool TowardGoal ( class APawn* P, class AActor* Goal );
};

//UClass* UPath_TowardGoal::pClassPointer = NULL;

// Class Engine.Path_WithinTraversalDist
// 0x000C (0x004C - 0x0040)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1037 ];

		return pClassPointer;
	};

	bool DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft );
};

//UClass* UPath_WithinTraversalDist::pClassPointer = NULL;

// Class Engine.PathRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1039 ];

		return pClassPointer;
	};

};

//UClass* UPathRenderingComponent::pClassPointer = NULL;

// Class Engine.RouteRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1041 ];

		return pClassPointer;
	};

};

//UClass* URouteRenderingComponent::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm
// 0x001C (0x0058 - 0x003C)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x003C (0x000C) [0x0000000000000000]              
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      TranslationCompressionFormat;                     		// 0x004C (0x0001) [0x0000000000000000]              
	unsigned char                                      RotationCompressionFormat;                        		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxZOnlyDiff;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRLEDiff;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1043 ];

		return pClassPointer;
	};

};

//UClass* UAnimationCompressionAlgorithm::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0000 (0x0058 - 0x0058)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1045 ];

		return pClassPointer;
	};

};

//UClass* UAnimationCompressionAlgorithm_BitwiseCompressOnly::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x0008 (0x0060 - 0x0058)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1047 ];

		return pClassPointer;
	};

};

//UClass* UAnimationCompressionAlgorithm_RemoveEverySecondKey::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x0008 (0x0060 - 0x0058)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1049 ];

		return pClassPointer;
	};

};

//UClass* UAnimationCompressionAlgorithm_RemoveTrivialKeys::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0000 (0x0058 - 0x0058)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1051 ];

		return pClassPointer;
	};

};

//UClass* UAnimationCompressionAlgorithm_RevertToRaw::pClassPointer = NULL;

// Class Engine.AnimNode
// 0x0078 (0x00B4 - 0x003C)
class UAnimNode : public UObject
{
public:
	unsigned long                                      bRelevant : 1;                                    		// 0x003C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x003C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                NodeTickTag;                                      		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeCachedAtomsTag;                               		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeTotalWeight;                                  		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TotalWeightAccumulator;                           		// 0x004C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0050 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	TArray< class UAnimNodeBlendBase* >                ParentNodes;                                      		// 0x0054 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       NodeName;                                         		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         CachedBoneAtoms;                                  		// 0x0068 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x0074 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                bCachedHasRootMotion;                             		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DrawWidth;                                        		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                NodePosY;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                InstanceVersionNumber;                            		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SearchTag;                                        		// 0x00B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1053 ];

		return pClassPointer;
	};

	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime, float EndTime );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventOnInit ( );
};

//UClass* UAnimNode::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBase
// 0x0011 (0x00C5 - 0x00B4)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray< struct FAnimBlendChild >                   Children;                                         		// 0x00B4 (0x000C) [0x0000000000000048]              ( CPF_ExportObject | CPF_EditConstArray )
	unsigned long                                      bFixNumChildren : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      BlendType;                                        		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1055 ];

		return pClassPointer;
	};

	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime, float EndTime );
};

//UClass* UAnimNodeBlendBase::pClassPointer = NULL;

// Class Engine.AnimNodeBlend
// 0x0013 (0x00D8 - 0x00C5)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              Child2WeightTarget;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1057 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

//UClass* UAnimNodeBlend::pClassPointer = NULL;

// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x00DC - 0x00D8)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1059 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeAdditiveBlending::pClassPointer = NULL;

// Class Engine.AnimNodeAimOffset
// 0x004B (0x0110 - 0x00C5)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceAimDir : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForcedAimDir;                                     		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x00E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      BoneToAimCpnt;                                    		// 0x00F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAimOffsetProfile >                 Profiles;                                         		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentProfileIndex;                              		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1061 ];

		return pClassPointer;
	};

	void SetActiveProfileByIndex ( int ProfileIndex );
	void SetActiveProfileByName ( struct FName ProfileName );
};

//UClass* UAnimNodeAimOffset::pClassPointer = NULL;

// Class Engine.AnimNodeBlendList
// 0x001F (0x00E4 - 0x00C5)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray< float >                                    TargetWeight;                                     		// 0x00C8 (0x000C) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              SliderPosition;                                   		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1063 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

//UClass* UAnimNodeBlendList::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x00FC - 0x00E4)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	unsigned char                                      Type;                                             		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActorTag;                                         		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ActorClass;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CachedBase;                                       		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1065 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendByBase::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByEnvType
// 0x0000 (0x00E4 - 0x00E4)
class UAnimNodeBlendByEnvType : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1067 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendByEnvType::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x00E4 - 0x00E4)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1069 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendByPhysics::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x00E4 - 0x00E4)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1071 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendByPosture::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBySpeed
// 0x0024 (0x0108 - 0x00E4)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                LastChannel;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              BlendUpTime;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Constraints;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceLowerCustomAnim : 1;                        		// 0x0104 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreLowerDoubleJump : 1;                       		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1073 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeBlendDirectional
// 0x000F (0x00D4 - 0x00C5)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1075 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendDirectional::pClassPointer = NULL;

// Class Engine.AnimNodeBlendList_AutoNextStep
// 0x0044 (0x0128 - 0x00E4)
class UAnimNodeBlendList_AutoNextStep : public UAnimNodeBlendList
{
public:
	unsigned long                                      bListIndexRepeat : 1;                             		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyActivatePlay : 1;                            		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsActivate : 1;                                  		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                UpdateAnimNodeSeqIndex;                           		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00EC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimNodeBlendList_AutoNextStep.SeqNodeChildIndex

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1077 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

//UClass* UAnimNodeBlendList_AutoNextStep::pClassPointer = NULL;

// Class Engine.AnimNodeBlendMultiBone
// 0x001B (0x00E0 - 0x00C5)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray< struct FChildBoneBlendInfo >               BlendTargetList;                                  		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            SourceRequiredBones;                              		// 0x00D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1079 ];

		return pClassPointer;
	};

	void SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease );
};

//UClass* UAnimNodeBlendMultiBone::pClassPointer = NULL;

// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x0100 - 0x00D8)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x00D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSyncUpperFromLower : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FName >                             BranchStartBoneName;                              		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x00E8 (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x00F4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1081 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeBlendPerBone::pClassPointer = NULL;

// Class Engine.AnimNodeSequence
// 0x0058 (0x010C - 0x00B4)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x00B4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Rate;                                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaying : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bNoNotifies : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSynchronize : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;     		// 0x00C0 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bSetEndTime : 1;                                  		// 0x00C0 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	float                                              CurrentTime;                                      		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviousTime;                                     		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               AnimSeq;                                          		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimLinkupIndex;                                  		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NotifyWeightThreshold;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SynchGroupName;                                   		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SynchPosOffset;                                   		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DebugTrack;                                       		// 0x00E4 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DebugCarat;                                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraAnimScale;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimPlayRate;                               		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneOption[ 0x3 ];                            		// 0x00FC (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootRotationOption[ 0x3 ];                        		// 0x00FF (0x0003) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFreezeElapsedTime;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              fEndTime;                                         		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1083 ];

		return pClassPointer;
	};

	float GetTimeLeft ( );
	float GetAnimPlaybackLength ( );
	float GetGlobalPlayRate ( );
	float FindNormalizedPositionFromGroupRelativePosition ( float GroupRelativePosition );
	float GetNormalizedPosition ( );
	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime, float EndTime );
	void SetAnim ( struct FName Sequence );
};

//UClass* UAnimNodeSequence::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendBase
// 0x000C (0x0118 - 0x010C)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	TArray< struct FAnimBlendInfo >                    Anims;                                            		// 0x010C (0x000C) [0x0000000000000049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1085 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeSequenceBlendBase::pClassPointer = NULL;

// Class Engine.AnimNodeByMoveState
// 0x0270 (0x0388 - 0x0118)
class UAnimNodeByMoveState : public UAnimNodeSequenceBlendBase
{
public:
	float                                              DirAngle;                                         		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              Speed;                                            		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              BlendSpeed;                                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JtoMBlendSpeed;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LtoRtoLBlendSpeed;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunBlendSpeed;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefautlBlendSpeed;                                		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                BlendYaw;                                         		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentMoveState;                                 		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BeforeMovePhysicsState;                           		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChangeAnimPlayTime;                               		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      MoveStateChanging : 1;                            		// 0x0144 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsUpper : 1;                                     		// 0x0144 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                BeforePhysicsState;                               		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NodeEventJumpPointIndex;                          		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentPhysicsState;                              		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeFowardWeight;                               		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeRightWeight;                                		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeLeftWeight;                                 		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeLeftBackWeight;                             		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeRightBackWeight;                            		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeforeBackWeight;                                 		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChangeAnimLockSlot;                               		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              ForceCurrentTime[ 0x40 ];                         		// 0x0170 (0x0100) [0x0000000000002000]              ( CPF_Transient )
	int                                                UseForceTimeFlag[ 0x40 ];                         		// 0x0270 (0x0100) [0x0000000000002000]              ( CPF_Transient )
	float                                              CheckMovingTime;                                  		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MainSequenceName;                                 		// 0x0374 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    Contraints;                                       		// 0x037C (0x000C) [0x0000000000000049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1087 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeByMoveState::pClassPointer = NULL;

// Class Engine.AnimNodeByMoveState_Pet
// 0x0028 (0x0140 - 0x0118)
class UAnimNodeByMoveState_Pet : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector                                     Velocity;                                         		// 0x0118 (0x000C) [0x0000000000000000]              
	unsigned long                                      bStepBackward : 1;                                		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              IdleThrasholdSpeed;                               		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              BlendSpeed;                                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentMoveState;                                 		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BeforeMovePhysicsState;                           		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MainSequenceName;                                 		// 0x0138 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1089 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeByMoveState_Pet::pClassPointer = NULL;

// Class Engine.AnimNodeCrossfader
// 0x0010 (0x00E8 - 0x00D8)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x00E0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              PendingBlendOutTimeOneShot;                       		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1091 ];

		return pClassPointer;
	};

	class UAnimNodeSequence* GetActiveChild ( );
	struct FName GetAnimName ( );
	void BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate );
	void PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate );
};

//UClass* UAnimNodeCrossfader::pClassPointer = NULL;

// Class Engine.AnimNodeMirror
// 0x0007 (0x00CC - 0x00C5)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1093 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeMirror::pClassPointer = NULL;

// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x00E0 - 0x00D8)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CustomPendingBlendOutTime;                        		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1095 ];

		return pClassPointer;
	};

	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

//UClass* UAnimNodePlayCustomAnim::pClassPointer = NULL;

// Class Engine.AnimNodeRandom
// 0x0018 (0x00FC - 0x00E4)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray< struct FRandomAnimInfo >                   RandomInfo;                                       		// 0x00E4 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )
	unsigned long                                      bSkipPendingAnimEnd : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1097 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeRandom::pClassPointer = NULL;

// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x00CC - 0x00C5)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1099 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeScalePlayRate::pClassPointer = NULL;

// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x00D0 - 0x00CC)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1101 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeSeqBlendByEnvState
// 0x0301 (0x0419 - 0x0118)
class UAnimNodeSeqBlendByEnvState : public UAnimNodeSequenceBlendBase
{
public:
	int                                                ChangeAnimIndex;                                  		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceCurrentTime[ 0x5D ];                         		// 0x011C (0x0174) [0x0000000000002000]              ( CPF_Transient )
	int                                                UseForceTimeFlag[ 0x5D ];                         		// 0x0290 (0x0174) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveEnvstateindex;                              		// 0x0404 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                ActivatedEnvAnimIndex;                            		// 0x0408 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      IsPlayUnderAttackAnim : 1;                        		// 0x040C (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	int                                                PreEnvAnimIndex;                                  		// 0x0410 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                CheckedEnvState;                                  		// 0x0414 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      CheckedEnvActive;                                 		// 0x0418 (0x0001) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1103 ];

		return pClassPointer;
	};

	void PlayAnim ( unsigned long bLoop, float InfRate, float InfStartTime, float InfEndTime );
	bool IsChangedEnvState ( );
	int GetTransitAnimIndex ( );
};

//UClass* UAnimNodeSeqBlendByEnvState::pClassPointer = NULL;

// Class Engine.AnimNodeSeqBlendByProgress
// 0x001C (0x0134 - 0x0118)
class UAnimNodeSeqBlendByProgress : public UAnimNodeSequenceBlendBase
{
public:
	unsigned char                                      AnimType;                                         		// 0x0118 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      AnimWeightType;                                   		// 0x0119 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceCurrentTime[ 0x3 ];                          		// 0x011C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                UseForceTimeFlag[ 0x3 ];                          		// 0x0128 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1105 ];

		return pClassPointer;
	};

};

//UClass* UAnimNodeSeqBlendByProgress::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x0188 - 0x0118)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   PreviousAim;                                      		// 0x0120 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   HorizontalRange;                                  		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   VerticalRange;                                    		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LU;                                      		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LC;                                      		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LD;                                      		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CU;                                      		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CC;                                      		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CD;                                      		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RU;                                      		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RC;                                      		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RD;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1107 ];

		return pClassPointer;
	};

	void CheckAnimsUpToDate ( );
};

//UClass* UAnimNodeSequenceBlendByAim::pClassPointer = NULL;

// Class Engine.AnimNodeSlot
// 0x0027 (0x00EC - 0x00C5)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00C8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              PendingBlendOutTime;                              		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CustomChildIndex;                                 		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TargetChildIndex;                                 		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< float >                                    TargetWeight;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x00E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1109 ];

		return pClassPointer;
	};

	void AddToSynchGroup ( struct FName GroupName );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	struct FName GetPlayedAnimation ( );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

//UClass* UAnimNodeSlot::pClassPointer = NULL;

// Class Engine.AnimNodeSynch
// 0x000F (0x00D4 - 0x00C5)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray< struct FSynchGroup >                       Groups;                                           		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1111 ];

		return pClassPointer;
	};

	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetRelativePosition ( struct FName GroupName );
	void ForceRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetMasterNodeOfGroup ( struct FName GroupName );
	void RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
	void AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
};

//UClass* UAnimNodeSynch::pClassPointer = NULL;

// Class Engine.AnimNotify
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify : public UObject
{
public:
	unsigned long                                      bPlayOnce : 1;                                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1113 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify::pClassPointer = NULL;

// Class Engine.AnimNotify_AdjustAniScale
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_AdjustAniScale : public UAnimNotify
{
public:
	unsigned long                                      ReturnBackDefault : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              InterpolationSec;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetAniScale;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetMeshScale;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1115 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_AdjustAniScale::pClassPointer = NULL;

// Class Engine.AnimNotify_AttachAni
// 0x001C (0x005C - 0x0040)
class UAnimNotify_AttachAni : public UAnimNotify
{
public:
	struct FName                                       AnimName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimFadeInSec;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimFadeOutSec;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimExpSec;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetWithoutFace : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayOnlyWithLookAtControl : 1;                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                RandomPlayPercent;                                		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1117 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_AttachAni::pClassPointer = NULL;

// Class Engine.AnimNotify_DependencyParticle
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_DependencyParticle : public UAnimNotify
{
public:
	unsigned long                                      bUseDependencyParticle : 1;                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1119 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_DependencyParticle::pClassPointer = NULL;

// Class Engine.AnimNotify_DialogueSound
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_DialogueSound : public UAnimNotify
{
public:
	unsigned char                                      PlayType;                                         		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Volume;                                           		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1121 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_DialogueSound::pClassPointer = NULL;

// Class Engine.AnimNotify_DynamicParam
// 0x002C (0x006C - 0x0040)
class UAnimNotify_DynamicParam : public UAnimNotify
{
public:
	struct FName                                       MaterialName;                                     		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParameterName;                                    		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vecStartValue;                                    		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vecEndValue;                                      		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPlayTime;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1123 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_DynamicParam::pClassPointer = NULL;

// Class Engine.AnimNotify_GroundParticle
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_GroundParticle : public UAnimNotify
{
public:
	float                                              Duration;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomFactor;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FollowingBoneName;                                		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalOffset;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1125 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_GroundParticle::pClassPointer = NULL;

// Class Engine.AnimNotify_IgnoreWeaponC
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_IgnoreWeaponC : public UAnimNotify
{
public:
	unsigned long                                      bIgnoreCustomAni : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1127 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_IgnoreWeaponC::pClassPointer = NULL;

// Class Engine.AnimNotify_ParticleSet
// 0x0028 (0x0068 - 0x0040)
class UAnimNotify_ParticleSet : public UAnimNotify
{
public:
	struct FPlayParticleMaterialType                   PlayTypeList;                                     		// 0x0040 (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1129 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_ParticleSet::pClassPointer = NULL;

// Class Engine.AnimNotify_PhysicNoiseForce
// 0x0020 (0x0060 - 0x0040)
class UAnimNotify_PhysicNoiseForce : public UAnimNotify
{
public:
	unsigned char                                      NoiseSpace;                                       		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NoiseDir;                                         		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseScale;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseDuration;                                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseDurationScale;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoisePlayTime;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1131 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_PhysicNoiseForce::pClassPointer = NULL;

// Class Engine.AnimNotify_PlayPostProcess
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_PlayPostProcess : public UAnimNotify
{
public:
	class UPostProcessParameter*                       PostProcessParameter;                             		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iExtraTimeIndex;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseExtraTime : 1;                                		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fPlayTime;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeInTime;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeOutTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1133 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_PlayPostProcess::pClassPointer = NULL;

// Class Engine.AnimNotify_ResetPhysicsBones
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_ResetPhysicsBones : public UAnimNotify
{
public:
	unsigned long                                      bResetInList : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                ResetBoneMaxCount;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1135 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_ResetPhysicsBones::pClassPointer = NULL;

// Class Engine.AnimNotify_RtoLMoveEvent
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_RtoLMoveEvent : public UAnimNotify
{
public:
	unsigned long                                      bRtoLEventEnable : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLtoREventEnable : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1137 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_RtoLMoveEvent::pClassPointer = NULL;

// Class Engine.AnimNotify_Script
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1139 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_Script::pClassPointer = NULL;

// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1141 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

//UClass* UAnimNotify_Scripted::pClassPointer = NULL;

// Class Engine.AnimNotify_SESound
// 0x0068 (0x00A8 - 0x0040)
class UAnimNotify_SESound : public UAnimNotify
{
public:
	struct FPlaySESoundType                            PlayTypeList;                                     		// 0x0040 (0x0060) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerRelationOnly : 1;                          		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1143 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_SESound::pClassPointer = NULL;

// Class Engine.AnimNotify_Sound
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayerRelationOnly : 1;                          		// 0x0044 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundVolume;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1145 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_Sound::pClassPointer = NULL;

// Class Engine.AnimNotify_VehicleAni
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_VehicleAni : public UAnimNotify
{
public:
	struct FName                                       AnimName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimSpeed;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendIn;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendOut;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Loop : 1;                                         		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1147 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_VehicleAni::pClassPointer = NULL;

// Class Engine.AnimNotify_VoiceSound
// 0x00DC (0x011C - 0x0040)
class UAnimNotify_VoiceSound : public UAnimNotify
{
public:
	struct FAttackVoice                                AttackVoicePlayInfo;                              		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FHeavyAttackVoice                           HeavyAttackVoicePlayInfo;                         		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPreAttackVoice                             PreAttackVoicePlayInfo;                           		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FDamageVoice                                DamageVoicePlayInfo;                              		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FDeathVoice                                 DeathVoicePlayInfo;                               		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBreathVoice                                BreathVoicePlayInfo;                              		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FMoveVoice                                  MoveVoicePlayInfo;                                		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSocialVoice                                SocialVoicePlayInfo;                              		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FCastVoice                                  PhysicalCastVoicePlayInfo;                        		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FCastVoice                                  MagicalCastVoicePlayInfo;                         		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKnockBackVoice                             KnockBackVoicePlayInfo;                           		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSPAttackVoice                              SPAttackVoicePlayInfo;                            		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FIdleVoice                                  IdleVoicePlayInfo;                                		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FShotVoice                                  CastShotVoicePlayInfo;                            		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FShotVoice                                  ActShotVoicePlayInfo;                             		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FShotVoice                                  ShortActShotVoicePlayInfo;                        		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FCombatVoice                                CombatVoicePlayInfo;                              		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerRelationOnly : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1149 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_VoiceSound::pClassPointer = NULL;

// Class Engine.AnimNotify_Wrinkle
// 0x001C (0x005C - 0x0040)
class UAnimNotify_Wrinkle : public UAnimNotify
{
public:
	float                                              FadeInSec;                                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutSec;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpSec;                                           		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightR;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightG;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightB;                                          		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightA;                                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1151 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_Wrinkle::pClassPointer = NULL;

// Class Engine.AnimSequence
// 0x0084 (0x00C0 - 0x003C)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x003C (0x0008) [0x0000000000000000]              
	TArray< struct FAnimNotifyEvent >                  Notifies;                                         		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SequenceLength;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                NumFrames;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              RateScale;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseDynamicFixedBone : 1;                         		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseStopShakingBone : 1;                          		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCustomAttachAnim : 1;                         		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreFootAimControl : 1;                        		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIgnoreAimControl : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseSlopeRotation : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bNotUseIgnoreBoneInfo : 1;                        		// 0x005C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseAdjustAniScale : 1;                           		// 0x005C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseCustomForceAnim : 1;                          		// 0x005C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseForceCurrentTime : 1;                         		// 0x005C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bUseHandToSocketPlacement : 1;                    		// 0x005C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIsAdditive : 1;                                  		// 0x005C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bServiced : 1;                                    		// 0x005C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	float                                              ForceCurrentTime;                                 		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRawAnimSequenceTrack >             RawAnimData;                                      		// 0x0064 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FTranslationTrack >                 TranslationData;                                  		// 0x0070 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FRotationTrack >                    RotationData;                                     		// 0x007C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TranslationCompressionFormat;                     		// 0x008C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RotationCompressionFormat;                        		// 0x008D (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      WeaponRLocType;                                   		// 0x008E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponLLocType;                                   		// 0x008F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraInterpolMode;                               		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraSetting;                                    		// 0x0091 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NamePlateControlMode;                             		// 0x0092 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AttachHideTypeFlag;                               		// 0x0093 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      CompressedTrackOffsets;                           		// 0x0094 (0x000C) [0x0000000000000000]              
	TArray< unsigned char >                            CompressedByteStream;                             		// 0x00A0 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBoneAtom >                         AdditiveRefPose;                                  		// 0x00AC (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       AdditiveRefName;                                  		// 0x00B8 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1153 ];

		return pClassPointer;
	};

};

//UClass* UAnimSequence::pClassPointer = NULL;

// Class Engine.AnimSet
// 0x01C8 (0x0204 - 0x003C)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      WeaponHiddenForNameNone : 1;                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bServiced : 1;                                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSetSeqNameIndexMap : 1;                          		// 0x003C (0x0004) [0x0000000000001000] [0x00000008] ( CPF_Native )
	TArray< struct FName >                             TrackBoneNames;                                   		// 0x0040 (0x000C) [0x0000000000000000]              
	TArray< class UAnimSequence* >                     Sequences;                                        		// 0x004C (0x000C) [0x0000000000000000]              
	TArray< struct FAnimSetMeshLinkup >                LinkupCache;                                      		// 0x0058 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             UseTranslationBoneNames;                          		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             UseMovementBoneNames;                             		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             NonAniScaleBoneNames;                             		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             AdjustAniScaleBoneNames;                          		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStopShaking >                      StopShakingBones;                                 		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             DynamicFixedBones;                                		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRefAnimSequence >                  RefSequences;                                     		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          RefAnimSetGroup;                                  		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             PhysicalHitBoneNames;                             		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             IgnoreAnimBoneNames;                              		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             WeaponSlotSocketNames;                            		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ArmPhysicsBoneNames;                              		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             LegPhysicsBoneNames;                              		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             BodyPhysicsBoneNames;                             		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x010C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SeqNameIndexMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0148 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.RefSeqNameIndexMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x0184 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.RefSourceInstanceMap
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x01C0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.RefAnimSetIndexMap
	struct FName                                       PreviewSkelMeshName;                              		// 0x01FC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1155 ];

		return pClassPointer;
	};

};

//UClass* UAnimSet::pClassPointer = NULL;

// Class Engine.AnimTree
// 0x009F (0x0164 - 0x00C5)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	TArray< struct FAnimGroup >                        AnimGroups;                                       		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             PrioritizedSkelBranches;                          		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            PriorityList;                                     		// 0x00E0 (0x000C) [0x0000000000000000]              
	TArray< class UMorphNodeBase* >                    RootMorphNodes;                                   		// 0x00EC (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< struct FSkelControlListHead >              SkelControlLists;                                 		// 0x00F8 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                MorphConnDrawY;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBeingEdited : 1;                                 		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              PreviewPlayRate;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SocketSkelMesh;                                   		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 SocketStaticMesh;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          PreviewAnimSets;                                  		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PreviewCamPos;                                    		// 0x013C (0x000C) [0x0000000000000000]              
	struct FRotator                                    PreviewCamRot;                                    		// 0x0148 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviewFloorPos;                                  		// 0x0154 (0x000C) [0x0000000000000000]              
	int                                                PreviewFloorYaw;                                  		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1157 ];

		return pClassPointer;
	};

	int GetGroupIndex ( struct FName GroupName );
	float GetGroupRateScale ( struct FName GroupName );
	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetGroupRelativePosition ( struct FName GroupName );
	void ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetGroupNotifyMaster ( struct FName GroupName );
	class UAnimNodeSequence* GetGroupSynchMaster ( struct FName GroupName );
	bool SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
};

//UClass* UAnimTree::pClassPointer = NULL;

// Class Engine.CrowdAgent
// 0x0088 (0x0298 - 0x0210)
class ACrowdAgent : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                          		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned char                                      AgentState;                                       		// 0x0214 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndActionTime;                                    		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              NextActionTime;                                   		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              VelDamping;                                       		// 0x0220 (0x0004) [0x0000000000000000]              
	struct FRotator                                    ToTargetRot;                                      		// 0x0224 (0x000C) [0x0000000000000000]              
	unsigned long                                      bRotateToTargetRot : 1;                           		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHadNearbyTarget : 1;                             		// 0x0230 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTargetZPosInitialized : 1;                       		// 0x0230 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVector                                     CurrentMoveTargetPos;                             		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FVector                                     ExternalForce;                                    		// 0x0240 (0x000C) [0x0000000000000000]              
	float                                              InterpZTranslation;                               		// 0x024C (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0250 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UAnimNodeBlend*                              SpeedBlendNode;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              ActionBlendNode;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           ActionSeqNode;                                    		// 0x025C (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           WalkSeqNode;                                      		// 0x0260 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           RunSeqNode;                                       		// 0x0264 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   AgentTree;                                        		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x026C (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0270 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	int                                                ConformTraceFrameCount;                           		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AwareUpdateFrameCount;                            		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACrowdAgent* >                       NearbyAgents;                                     		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACrowdAttractor* >                   RelevantAttractors;                               		// 0x0288 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UReachSpec*                                  NearestPath;                                      		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1159 ];

		return pClassPointer;
	};

	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayDeath ( );
};

//UClass* ACrowdAgent::pClassPointer = NULL;

// Class Engine.CrowdAttractor
// 0x0029 (0x0239 - 0x0210)
class ACrowdAttractor : public AActor
{
public:
	float                                              Attraction;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttractorEnabled : 1;                            		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttractionFalloff : 1;                           		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActionAtThisAttractor : 1;                       		// 0x0214 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bKillWhenReached : 1;                             		// 0x0214 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              ActionRadiusScale;                                		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x021C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	float                                              AttractionRadius;                                 		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              AttractionHeight;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FOctreeElementId                            OctreeId;                                         		// 0x0228 (0x0008) [0x0000000000001000]              ( CPF_Native )
	float                                              KillDist;                                         		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ActionTarget;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Mode;                                             		// 0x0238 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1161 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* ACrowdAttractor::pClassPointer = NULL;

// Class Engine.MorphNodeBase
// 0x0024 (0x0060 - 0x003C)
class UMorphNodeBase : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawSlider : 1;                                  		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0048 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                NodePosX;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                NodePosY;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1163 ];

		return pClassPointer;
	};

};

//UClass* UMorphNodeBase::pClassPointer = NULL;

// Class Engine.MorphNodePose
// 0x0010 (0x0070 - 0x0060)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MorphName;                                        		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Weight;                                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1165 ];

		return pClassPointer;
	};

	void SetMorphTarget ( struct FName MorphTargetName );
};

//UClass* UMorphNodePose::pClassPointer = NULL;

// Class Engine.MorphNodeWeightBase
// 0x000C (0x006C - 0x0060)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray< struct FMorphNodeConn >                    NodeConns;                                        		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1167 ];

		return pClassPointer;
	};

};

//UClass* UMorphNodeWeightBase::pClassPointer = NULL;

// Class Engine.MorphNodeWeight
// 0x0004 (0x0070 - 0x006C)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1169 ];

		return pClassPointer;
	};

	void SetNodeWeight ( float NewWeight );
};

//UClass* UMorphNodeWeight::pClassPointer = NULL;

// Class Engine.MorphTarget
// 0x000C (0x0048 - 0x003C)
class UMorphTarget : public UObject
{
public:
	TArray< int >                                      MorphLODModels;                                   		// 0x003C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1171 ];

		return pClassPointer;
	};

};

//UClass* UMorphTarget::pClassPointer = NULL;

// Class Engine.MorphTargetSet
// 0x0010 (0x004C - 0x003C)
class UMorphTargetSet : public UObject
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x003C (0x000C) [0x0000000000000000]              
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1173 ];

		return pClassPointer;
	};

	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
};

//UClass* UMorphTargetSet::pClassPointer = NULL;

// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1175 ];

		return pClassPointer;
	};

};

//UClass* UMorphWeightSequence::pClassPointer = NULL;

// Class Engine.SkeletalMeshActor
// 0x0034 (0x0244 - 0x0210)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      IsActorCustomizedFromPostEdit : 1;                		// 0x0210 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      IsActorCustomized : 1;                            		// 0x0210 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      IsPlayingKismet : 1;                              		// 0x0210 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0210 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSkipTickCulling : 1;                             		// 0x0210 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      SkelPhysicsInitialFlag : 1;                       		// 0x0210 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FName                                       CustomizeApperanceAlias;                          		// 0x0214 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CustomizeBodyPartFlag;                            		// 0x021C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0220 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0224 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0228 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x022C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     OldSkelLocation;                                  		// 0x0230 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SkelPhysicsInitialTime;                           		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttachedAniDuration;                              		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1177 ];

		return pClassPointer;
	};

	void SetCustomizeSkelMeshActor ( );
	void SetMaterialVectorParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, struct FLinearColor InColor, struct FName MaterialName );
	void SetMaterialTextureParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, class UTexture* InTexture, struct FName MaterialName );
	void SetMaterialScalarParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, float fValue, struct FName MaterialName );
	void ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventOnSetMaterial ( class USeqAct_SetMaterial* Action );
	void eventOnSetSkeletalMesh ( class USeqAct_SetSkeletalMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, int SoundTrackType, unsigned long InStopPrevious );
	void eventFinishAnimControl ( );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* ASkeletalMeshActor::pClassPointer = NULL;

// Class Engine.NpcAppDummyMeshActor
// 0x001C (0x0260 - 0x0244)
class ANpcAppDummyMeshActor : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                      CustomSkelMeshComponents[ 0x7 ];                  		// 0x0244 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1179 ];

		return pClassPointer;
	};

};

//UClass* ANpcAppDummyMeshActor::pClassPointer = NULL;

// Class Engine.SkelControlBase
// 0x0058 (0x0094 - 0x003C)
class USkelControlBase : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x003C (0x0004) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	struct FName                                       ControlName;                                      		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlStrength;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrengthTarget;                                   		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x005C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableEaseInOut : 1;                             		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableControl : 1;                               		// 0x005C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	TArray< struct FName >                             StrengthAnimNodeNameList;                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimNode* >                         CachedNodeList;                                   		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              BoneScale;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControlTickTag;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                IgnoreAtOrAboveLOD;                               		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlBase*                            NextControl;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                ControlPosX;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                ControlPosY;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1181 ];

		return pClassPointer;
	};

	void SetSkelControlStrength ( float NewStrength, float InBlendTime );
	void SetSkelControlActive ( unsigned long bInActive );
};

//UClass* USkelControlBase::pClassPointer = NULL;

// Class Engine.SkelControlLimb
// 0x0030 (0x00C4 - 0x0094)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointTargetLocationSpace;                         		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x00A2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointAxis;                                        		// 0x00A3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointTargetLocation;                              		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1183 ];

		return pClassPointer;
	};

};

//UClass* USkelControlLimb::pClassPointer = NULL;

// Class Engine.SkelControlFootPlacement
// 0x002C (0x00F0 - 0x00C4)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	unsigned char                                      MeshFootOffsetType;                               		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x00C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FootOffset;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FootRotOffset;                                    		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              MaxUpAdjustment;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjustYaw;                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjustPitch;                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjustRoll;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1185 ];

		return pClassPointer;
	};

};

//UClass* USkelControlFootPlacement::pClassPointer = NULL;

// Class Engine.SkelControlLookAt
// 0x0070 (0x0104 - 0x0094)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetLocationSpace;                              		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LookAtAxis;                                       		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpAxis;                                           		// 0x00A2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllowRotationSpace;                               		// 0x00A3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetSpaceBoneName;                              		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLimit : 1;                                 		// 0x00AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x00AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x00AC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x00AC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowLimit : 1;                                   		// 0x00AC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowRotationX : 1;                              		// 0x00AC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowRotationY : 1;                              		// 0x00AC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x00AC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredTargetLocation;                            		// 0x00B4 (0x000C) [0x0000000000000000]              
	float                                              MaxAngle;                                         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZoneAngle;                                    		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAlpha;                                      		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaTarget;                                		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x00D8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LimitLookDir;                                     		// 0x00DC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseLookDir;                                      		// 0x00E8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseBonePos;                                      		// 0x00F4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastCalcTime;                                     		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1187 ];

		return pClassPointer;
	};

	bool CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst );
	void SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime );
	void InterpolateTargetLocation ( float DeltaTime );
	void SetTargetLocation ( struct FVector NewTargetLocation );
};

//UClass* USkelControlLookAt::pClassPointer = NULL;

// Class Engine.SkelControlLookAtTarget
// 0x0034 (0x00C8 - 0x0094)
class USkelControlLookAtTarget : public USkelControlBase
{
public:
	float                                              LookAtBlendInTime;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtBlendOutTime;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtTime;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAddDeltaUpAxis;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                YawRangeApplyValue;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetDistance;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomMinTime;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomMaxTime;                                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtElapsedTime;                                		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LookAtBlendTime;                                  		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLookAtTarget : 1;                              		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsDistnaceOutside : 1;                           		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                RandomAimPercent;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1189 ];

		return pClassPointer;
	};

};

//UClass* USkelControlLookAtTarget::pClassPointer = NULL;

// Class Engine.SkelControlMeshSlant
// 0x0010 (0x00A4 - 0x0094)
class USkelControlMeshSlant : public USkelControlBase
{
public:
	unsigned long                                      bIgnoreRoll : 1;                                  		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     PrevSlopeRotation;                                		// 0x0098 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1191 ];

		return pClassPointer;
	};

};

//UClass* USkelControlMeshSlant::pClassPointer = NULL;

// Class Engine.SkelControlSingleBone
// 0x0030 (0x00C4 - 0x0094)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     BoneTranslation;                                  		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotationSpace;                                		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1193 ];

		return pClassPointer;
	};

};

//UClass* USkelControlSingleBone::pClassPointer = NULL;

// Class Engine.SkelControlSpline
// 0x0014 (0x00A8 - 0x0094)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x0099 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EndSplineTension;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartSplineTension;                               		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1195 ];

		return pClassPointer;
	};

};

//UClass* USkelControlSpline::pClassPointer = NULL;

// Class Engine.SkelControlTrail
// 0x007C (0x0110 - 0x0094)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainBoneAxis;                                    		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitStretch : 1;                                		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActorSpaceFakeVel : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHadValidStrength : 1;                            		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TrailRelaxation;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StretchLimit;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FakeVelocity;                                     		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThisTimstep;                                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           TrailBoneLocations;                               		// 0x00B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x00C4 (0x000C) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                  		// 0x00D0 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1197 ];

		return pClassPointer;
	};

};

//UClass* USkelControlTrail::pClassPointer = NULL;

// Class Engine.SkelControlWheel
// 0x0018 (0x00DC - 0x00C4)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x00C4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRoll;                                        		// 0x00CC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelRollAxis;                                    		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WheelSteeringAxis;                                		// 0x00D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteering;                                    		// 0x00D4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1199 ];

		return pClassPointer;
	};

};

//UClass* USkelControlWheel::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x0250 - 0x0244)
class ASkeletalMeshActorMAT : public ASkeletalMeshActor
{
public:
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x0244 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1201 ];

		return pClassPointer;
	};

	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventFinishAnimControl ( );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_FinishAnimControl ( );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
};

//UClass* ASkeletalMeshActorMAT::pClassPointer = NULL;

// Class Engine.SkeletalMeshCustomizeSet
// 0x0018 (0x0054 - 0x003C)
class USkeletalMeshCustomizeSet : public UObject
{
public:
	TArray< struct FCustomizeBoneInfo >                BoneScaleInfos;                                   		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCustomizeMorphInfo >               MorphInfos;                                       		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1203 ];

		return pClassPointer;
	};

};

//UClass* USkeletalMeshCustomizeSet::pClassPointer = NULL;

// Class Engine.AnimNotify_Trail
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_Trail : public UAnimNotify
{
public:
	class UTrailTemplate*                              TrailTemplate;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1205 ];

		return pClassPointer;
	};

};

//UClass* UAnimNotify_Trail::pClassPointer = NULL;

// Class Engine.TrailComponent
// 0x0080 (0x0290 - 0x0210)
class UTrailComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      State;                                            		// 0x0210 (0x0001) [0x0000000000000000]              
	float                                              TimeElapsedSinceGeneratingBegin;                  		// 0x0214 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkelMeshComponent;                                		// 0x0218 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class USkeletalMeshComponent*                      SecondSkelMeshComponent;                          		// 0x021C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                RopeSimulationIndex;                              		// 0x0220 (0x0004) [0x0000000000000000]              
	TArray< struct FPhysicalTrailSample >              PhysicalTrailSamples;                             		// 0x0224 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTrailDataPerSample >               TrailSamples;                                     		// 0x0230 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StoredPointSamplerPosition_Average;               		// 0x023C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SotredPointSamplerPosition_Distance;              		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SamplingCountRemainder;                           		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              LastSamplingTime;                                 		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              DistanceByPlayer;                                 		// 0x0254 (0x0004) [0x0000000000000000]              
	class UTrailTemplate*                              Template;                                         		// 0x0258 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          TrailMaterial;                                    		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          AddTrailMaterial;                                 		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDynamicParamPlayObj >              DynamicParamPlays;                                		// 0x0264 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsDependencyTrail : 1;                           		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     DependencyTrailName;                              		// 0x0274 (0x000C) [0x0000000000000000]              
	float                                              TrailPushForceAppllyTime;                         		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTrailPushForceElement >            TrailPushForceElement_List;                       		// 0x0284 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1207 ];

		return pClassPointer;
	};

	void ResetToDefaults ( );
	void BeginGenerating ( );
	void SetTemplate ( class UTrailTemplate* InTemplate );
};

//UClass* UTrailComponent::pClassPointer = NULL;

// Class Engine.TrailTemplate
// 0x02B0 (0x02EC - 0x003C)
class UTrailTemplate : public UObject
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TessellationType;                                 		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TilingOption;                                     		// 0x0041 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OnePointAxisType;                                 		// 0x0042 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ExtraPositionType;                                		// 0x0043 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrappingAddition;                                 		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrappingScaler;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTrailPointSamplerInfo >            PointSamplerInfo;                                 		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTrailPointSamplerInfo >            SecondPointSamplerInfo;                           		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SamplesPerSec;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnforceSamplingLimit : 1;                         		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CorrectDistortion : 1;                            		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableRopeSimulation : 1;                         		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      EnableDoubleConnection : 1;                       		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnableDynamicHorizontalRopeParticles : 1;         		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              FadingInTime;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadingOutTime;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HorizontalRopeParticles;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RopeWidth;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RopeHeight;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RopeMass;                                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConstraintCount;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConstraintFactor;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampingCoeff;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeScaler;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeStep;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLoopCount;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GravityAcceleration;                              		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundFrictionConstant;                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundAbsorptionConstant;                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundRepulsionConstant;                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTrailPushForceInfo                         TrailPushForce;                                   		// 0x00B0 (0x0038) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseHeight;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GrabDuration;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GrabDurationSecond;                               		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestricValue_PointSamplerPositionDiff;            		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lifetime;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GeneratingTime;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartColor;                                       		// 0x0100 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x011C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0138 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0154 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorScaleOverGenTime;                            		// 0x0170 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaScaleOverGenTime;                            		// 0x018C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      OuterLocalVelocity;                               		// 0x01A8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      PostgenVelocity;                                  		// 0x01C4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NormalDirectionVelocityFactor;                    		// 0x01E0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TangentDirectionVelocityFactor;                   		// 0x01FC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NormalFactorOverLifetime;                         		// 0x0218 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TangentFactorOverLifetime;                        		// 0x0234 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       OuterLocalFactorOverLifetime;                     		// 0x0250 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ExtraSize;                                        		// 0x026C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ExtraSizeScaleOverLife;                           		// 0x0288 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       OffsetOverGenTime;                                		// 0x02A4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       OffsetOverLifeTime;                               		// 0x02C0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UTrailTemplate*                              RefParent;                                        		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTrailTemplate* >                    Children;                                         		// 0x02E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1209 ];

		return pClassPointer;
	};

};

//UClass* UTrailTemplate::pClassPointer = NULL;

// Class Engine.ActorFactoryDecal
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1211 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryDecal::pClassPointer = NULL;

// Class Engine.CircularShadowManager
// 0x003C (0x024C - 0x0210)
class ACircularShadowManager : public AActor
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0210 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CircularShadowManager.ActiveDecalIndexMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1213 ];

		return pClassPointer;
	};

};

//UClass* ACircularShadowManager::pClassPointer = NULL;

// Class Engine.DecalActorBase
// 0x0004 (0x0214 - 0x0210)
class ADecalActorBase : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1215 ];

		return pClassPointer;
	};

};

//UClass* ADecalActorBase::pClassPointer = NULL;

// Class Engine.DecalActor
// 0x0000 (0x0214 - 0x0214)
class ADecalActor : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1217 ];

		return pClassPointer;
	};

};

//UClass* ADecalActor::pClassPointer = NULL;

// Class Engine.DecalActorMovable
// 0x0000 (0x0214 - 0x0214)
class ADecalActorMovable : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1219 ];

		return pClassPointer;
	};

};

//UClass* ADecalActorMovable::pClassPointer = NULL;

// Class Engine.DecalComponent
// 0x0114 (0x0324 - 0x0210)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Width;                                            		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileX;                                            		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileY;                                            		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetX;                                          		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetY;                                          		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalRotation;                                    		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FieldOfView;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              NearPlane;                                        		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideVertexColor : 1;                         		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckedDynamicHeight : 1;                        		// 0x023C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNoClip : 1;                                      		// 0x023C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bStaticDecal : 1;                                 		// 0x023C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x023C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x023C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x023C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x023C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x023C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x023C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x023C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	struct FLinearColor                                VertexColorOverride;                              		// 0x0240 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                DrawType;                                         		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              MaxPercent;                                       		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MinPercent;                                       		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              MaxAngle;                                         		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              DrawAlpha;                                        		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              fCheckedHeightValue;                              		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Location;                                         		// 0x0268 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Orientation;                                      		// 0x0274 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitLocation;                                      		// 0x0280 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitNormal;                                        		// 0x028C (0x000C) [0x0000000000000000]              
	struct FVector                                     HitTangent;                                       		// 0x0298 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitBinormal;                                      		// 0x02A4 (0x000C) [0x0000000000000000]              
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x02B0 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )
	struct FName                                       HitBone;                                          		// 0x02B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitNodeIndex;                                     		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitLevelIndex;                                    		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      HitNodeIndices;                                   		// 0x02C4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FDecalReceiver >                    DecalReceivers;                                   		// 0x02D0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          StaticReceivers;                                  		// 0x02DC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x02E8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPlane >                            Planes;                                           		// 0x02EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              DepthBias;                                        		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeScaleDepthBias;                              		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SortOrder;                                        		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackfaceAngle;                                    		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FilterMode;                                       		// 0x0308 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Filter;                                           		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UPrimitiveComponent* >               ReceiverImages;                                   		// 0x0318 (0x000C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1221 ];

		return pClassPointer;
	};

	class UMaterialInterface* GetDecalMaterial ( );
	void SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial );
	void ResetToDefaults ( );
};

//UClass* UDecalComponent::pClassPointer = NULL;

// Class Engine.DecalManager
// 0x0024 (0x0234 - 0x0210)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                    		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UDecalComponent* >                   PoolDecals;                                       		// 0x0214 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                MaxActiveDecals;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              DecalLifeSpan;                                    		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FActiveDecalInfo >                  ActiveDecals;                                     		// 0x0228 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1223 ];

		return pClassPointer;
	};

	class UDecalComponent* eventSpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan );
	void SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan );
	bool CanSpawnDecals ( );
	void eventDecalFinished ( class UDecalComponent* Decal );
	bool AreDynamicDecalsEnabled ( );
};

//UClass* ADecalManager::pClassPointer = NULL;

// Class Engine.DecalMaterial
// 0x0000 (0x030C - 0x030C)
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1225 ];

		return pClassPointer;
	};

};

//UClass* UDecalMaterial::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1227 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1229 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1231 ];

		return pClassPointer;
	};

};

//UClass* UActorFactoryFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeDensityComponent
// 0x0046 (0x009C - 0x0056)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FLinearColor                                SimpleLightColor;                                 		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartDistance;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            FogVolumeActors;                                  		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DepthMaxDistance;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DepthColor;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1233 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

//UClass* UFogVolumeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00C4 - 0x009C)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeVertex;                                       		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeAxis;                                         		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeMaxAngle;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x00C0 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1235 ];

		return pClassPointer;
	};

};

//UClass* UFogVolumeConeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeDensityInfo
// 0x000C (0x021C - 0x0210)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x0210 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x0214 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      bEnabled : 1;                                     		// 0x0218 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1237 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* AFogVolumeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x021C - 0x021C)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1239 ];

		return pClassPointer;
	};

};

//UClass* AFogVolumeConeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x00A0 - 0x009C)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1241 ];

		return pClassPointer;
	};

};

//UClass* UFogVolumeConstantDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x021C - 0x021C)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1243 ];

		return pClassPointer;
	};

};

//UClass* AFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0014 (0x00B0 - 0x009C)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPlane                                      HalfspacePlane;                                   		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1245 ];

		return pClassPointer;
	};

};

//UClass* UFogVolumeLinearHalfspaceDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x021C - 0x021C)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1247 ];

		return pClassPointer;
	};

};

//UClass* AFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x00B4 - 0x009C)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SphereCenter;                                     		// 0x00A0 (0x000C) [0x0000000000000000]              
	float                                              SphereRadius;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x00B0 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1249 ];

		return pClassPointer;
	};

};

//UClass* UFogVolumeSphericalDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x021C - 0x021C)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1251 ];

		return pClassPointer;
	};

};

//UClass* AFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.FracturedBaseComponent
// 0x0020 (0x0290 - 0x0270)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                           		// 0x0270 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            VisibleFragments;                                 		// 0x0278 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bVisibilityHasChanged : 1;                        		// 0x0284 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVisibilityReset : 1;                             		// 0x0284 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bInitialVisibilityValue : 1;                      		// 0x0284 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bUseDynamicIndexBuffer : 1;                       		// 0x0284 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bUseDynamicIBWithHiddenFragments : 1;             		// 0x0284 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	int                                                NumResourceIndices;                               		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ComponentIndexBufferSize;                         		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1253 ];

		return pClassPointer;
	};

	int GetNumVisibleFragments ( );
	int GetNumFragments ( );
	bool IsFragmentVisible ( int FragmentIndex );
	TArray< unsigned char > GetVisibleFragments ( );
	bool SetStaticMesh ( class UStaticMesh* NewMesh );
};

//UClass* UFracturedBaseComponent::pClassPointer = NULL;

// Class Engine.FracturedSkinnedMeshComponent
// 0x0020 (0x02B0 - 0x0290)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct FPointer                                    ComponentSkinResources;                           		// 0x0290 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FMatrix >                           FragmentTransforms;                               		// 0x0294 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UFracturedStaticMeshComponent* >     DependentComponents;                              		// 0x02A0 (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	unsigned long                                      bBecameVisible : 1;                               		// 0x02AC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bFragmentTransformsChanged : 1;                   		// 0x02AC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1255 ];

		return pClassPointer;
	};

};

//UClass* UFracturedSkinnedMeshComponent::pClassPointer = NULL;

// Class Engine.FracturedStaticMeshActor
// 0x0060 (0x0270 - 0x0210)
class AFracturedStaticMeshActor : public AActor
{
public:
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                     		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x0214 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< int >                                      ChunkHealth;                                      		// 0x0218 (0x000C) [0x0000000000000000]              
	unsigned long                                      bBreakChunksOnPawnTouch : 1;                      		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            FracturedByDamageType;                            		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkHealthScale;                                 		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleSystem* >                   OverrideFragmentDestroyEffects;                   		// 0x0238 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FractureCullMinDistance;                          		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FractureCullMaxDistance;                          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDeferredPartToSpawn >              DeferredPartsToSpawn;                             		// 0x024C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FPhysEffectInfo                             PartImpactEffect;                                 		// 0x0258 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   ExplosionFractureSound;                           		// 0x0268 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SingleChunkFractureSound;                         		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1257 ];

		return pClassPointer;
	};

	void eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles );
	void eventExplode ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool FractureEffectIsRelevant ( unsigned long bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles );
	bool IsFracturedByDamageType ( class UClass* dmgType );
	bool eventSpawnDeferredParts ( );
	void eventBreakOffIsolatedIslands ( TArray< int > IgnoreFrags, struct FVector ChunkDir, TArray< class AFracturedStaticMeshPart* > DisableCollWithPart, unsigned long bWantPhysChunks, TArray< unsigned char >* FragmentVis );
	void eventResetHealth ( );
	void eventPostBeginPlay ( );
	class UPhysicalMaterial* GetFracturedMeshPhysMaterial ( );
	void RecreatePhysState ( );
	class AFracturedStaticMeshPart* SpawnPartMulti ( TArray< int > ChunkIndices, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
	class AFracturedStaticMeshPart* SpawnPart ( int ChunkIndex, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
};

//UClass* AFracturedStaticMeshActor::pClassPointer = NULL;

// Class Engine.FracturedStaticMeshComponent
// 0x0040 (0x02D0 - 0x0290)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	TArray< unsigned char >                            FragmentNeighborsVisible;                         		// 0x0290 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FBox                                        VisibleBox;                                       		// 0x029C (0x001C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bUseSkinnedRendering : 1;                         		// 0x02B8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bUseVisibleVertsForBounds : 1;                    		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTopFragmentsRootNonDestroyable : 1;              		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBottomFragmentsRootNonDestroyable : 1;           		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              TopBottomFragmentDistThreshold;                   		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;                 		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentBoundsMaxZ;                               		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              FragmentBoundsMinZ;                               		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x02CC (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1259 ];

		return pClassPointer;
	};

	TArray< struct FFragmentGroup > GetFragmentGroups ( TArray< int > IgnoreFragments, float MinConnectionArea );
	int GetCoreFragmentIndex ( );
	struct FVector GetFragmentAverageExteriorNormal ( int FragmentIndex );
	struct FBox GetFragmentBox ( int FragmentIndex );
	bool IsNoPhysFragment ( int FragmentIndex );
	bool IsRootFragment ( int FragmentIndex );
	bool IsFragmentDestroyable ( int FragmentIndex );
	void SetVisibleFragments ( TArray< unsigned char > VisibilityFactors );
};

//UClass* UFracturedStaticMeshComponent::pClassPointer = NULL;

// Class Engine.FracturedStaticMeshPart
// 0x0030 (0x02A0 - 0x0270)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	float                                              DestroyPartRadiusFactor;                          		// 0x0270 (0x0004) [0x0000000000000000]              
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                           		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasBeenRecycled : 1;                             		// 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bChangeRBChannelWhenAsleep : 1;                   		// 0x0278 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCompositeThatExplodesOnImpact : 1;               		// 0x0278 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              LastSpawnTime;                                    		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                PartPoolIndex;                                    		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              FracPartGravScale;                                		// 0x0284 (0x0004) [0x0000000000000000]              
	unsigned char                                      AsleepRBChannel;                                  		// 0x0288 (0x0001) [0x0000000000000000]              
	struct FVector                                     OldVelocity;                                      		// 0x028C (0x000C) [0x0000000000000000]              
	float                                              CurrentVibrationLevel;                            		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              LastImpactSoundTime;                              		// 0x029C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1261 ];

		return pClassPointer;
	};

	void eventFellOutOfWorld ( class UClass* dmgType );
	void TryToCleanUp ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void RecyclePart ( unsigned long bAddToFreePool );
	void Initialize ( );
};

//UClass* AFracturedStaticMeshPart::pClassPointer = NULL;

// Class Engine.FractureManager
// 0x0034 (0x0244 - 0x0210)
class AFractureManager : public AActor
{
public:
	int                                                FSMPartPoolSize;                                  		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnableAntiVibration : 1;                         		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              DestroyVibrationLevel;                            		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestroyMinAngVel;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AFracturedStaticMeshPart* >          PartPool;                                         		// 0x0220 (0x000C) [0x0000000000000000]              
	TArray< int >                                      FreeParts;                                        		// 0x022C (0x000C) [0x0000000000000000]              
	TArray< class AFracturedStaticMeshActor* >         ActorsWithDeferredPartsToSpawn;                   		// 0x0238 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1263 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void SpawnDeferredParts ( );
	void eventReturnPartActor ( class AFracturedStaticMeshPart* Part );
	class AFracturedStaticMeshPart* eventSpawnPartActor ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class AFracturedStaticMeshPart* GetFSMPart ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void CreateFSMParts ( );
	void CleanUpFSMParts ( );
	void eventDestroyed ( );
	void eventPreBeginPlay ( );
	float GetFSMFractureCullDistanceScale ( );
	float GetFSMRadialSpawnChanceScale ( );
	float GetFSMDirectSpawnChanceScale ( );
	float GetNumFSMPartsScale ( );
	void eventSpawnChunkDestroyEffect ( class UParticleSystem* Effect, struct FBox ChunkBox, struct FVector ChunkDir, float Scale );
};

//UClass* AFractureManager::pClassPointer = NULL;

// Class Engine.PhysXDestructible
// 0x004C (0x0088 - 0x003C)
class UPhysXDestructible : public UObject
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                              		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< class UPhysXDestructibleAsset* >           DestructibleAssets;                               		// 0x0040 (0x000C) [0x0000000000000000]              
	struct FPhysXDestructibleParameters                DestructibleParameters;                           		// 0x004C (0x0030) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           CookingScales;                                    		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1265 ];

		return pClassPointer;
	};

};

//UClass* UPhysXDestructible::pClassPointer = NULL;

// Class Engine.PhysXDestructibleActor
// 0x0085 (0x02F5 - 0x0270)
class APhysXDestructibleActor : public AFracturedStaticMeshActor
{
public:
	class UPhysXDestructibleComponent*                 DestructibleComponent;                            		// 0x0270 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0274 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UPhysXDestructible*                          PhysXDestructible;                                		// 0x0278 (0x0004) [0x0000000000000000]              
	class UPhysXDestructibleStructure*                 Structure;                                        		// 0x027C (0x0004) [0x0000000000000000]              
	TArray< int >                                      PartFirstChunkIndices;                            		// 0x0280 (0x000C) [0x0000000000000000]              
	TArray< class APhysXDestructiblePart* >            Parts;                                            		// 0x028C (0x000C) [0x0000000000000000]              
	TArray< int >                                      Neighbors;                                        		// 0x0298 (0x000C) [0x0000000000000000]              
	struct FPhysXDestructibleParameters                DestructibleParameters;                           		// 0x02A4 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearSize;                                       		// 0x02D4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bPlayFractureSound : 1;                           		// 0x02D8 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned long                                      bSupportChunksTouchWorld : 1;                     		// 0x02D8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportChunksInSupportFragment : 1;              		// 0x02D8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	TArray< struct FSpawnBasis >                       EffectBases;                                      		// 0x02DC (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    VolumeFill;                                       		// 0x02E8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                PerFrameProcessBudget;                            		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SupportDepth;                                     		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      NumPartsRemaining;                                		// 0x02F4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1267 ];

		return pClassPointer;
	};

	void eventExplode ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void NativeTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void NativeSpawnEffects ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventSpawnEffects ( );
	void Term ( );
	void Init ( );
};

//UClass* APhysXDestructibleActor::pClassPointer = NULL;

// Class Engine.PhysXDestructibleAsset
// 0x0028 (0x0064 - 0x003C)
class UPhysXDestructibleAsset : public UObject
{
public:
	TArray< struct FPhysXDestructibleAssetChunk >      ChunkTree;                                        		// 0x003C (0x000C) [0x0000000000000000]              
	TArray< class USkeletalMesh* >                     Meshes;                                           		// 0x0048 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UPhysicsAsset* >                     Assets;                                           		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxDepth;                                         		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1269 ];

		return pClassPointer;
	};

};

//UClass* UPhysXDestructibleAsset::pClassPointer = NULL;

// Class Engine.PhysXDestructibleComponent
// 0x0028 (0x0238 - 0x0210)
class UPhysXDestructibleComponent : public UPrimitiveComponent
{
public:
	class URB_BodySetup*                               DetailedCollision;                                		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            Fragmented;                                       		// 0x0214 (0x000C) [0x0000000000000000]              
	TArray< int >                                      BoxElemStart;                                     		// 0x0220 (0x000C) [0x0000000000000000]              
	TArray< int >                                      ConvexElemStart;                                  		// 0x022C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1271 ];

		return pClassPointer;
	};

};

//UClass* UPhysXDestructibleComponent::pClassPointer = NULL;

// Class Engine.PhysXDestructiblePart
// 0x0031 (0x0241 - 0x0210)
class APhysXDestructiblePart : public AActor
{
public:
	int                                                FirstChunk;                                       		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumChunks;                                        		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysXDestructibleStructure*                 Structure;                                        		// 0x0218 (0x0004) [0x0000000000000000]              
	class APhysXDestructibleActor*                     DestructibleActor;                                		// 0x021C (0x0004) [0x0000000000000000]              
	class UPhysXDestructibleAsset*                     DestructibleAsset;                                		// 0x0220 (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0224 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class USkeletalMeshComponent* >            SkeletalMeshComponents;                           		// 0x0228 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< unsigned char >                            NumChunksRemaining;                               		// 0x0234 (0x000C) [0x0000000000000000]              
	unsigned char                                      NumMeshesRemaining;                               		// 0x0240 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1273 ];

		return pClassPointer;
	};

	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

//UClass* APhysXDestructiblePart::pClassPointer = NULL;

// Class Engine.PhysXDestructibleStructure
// 0x009C (0x00D8 - 0x003C)
class UPhysXDestructibleStructure : public UObject
{
public:
	struct FPointer                                    Manager;                                          		// 0x003C (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< class APhysXDestructibleActor* >           Actors;                                           		// 0x0040 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class APhysXDestructibleActor* >           ActorKillList;                                    		// 0x004C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPhysXDestructibleChunk >           Chunks;                                           		// 0x0058 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPhysXDestructibleOverlap >         Overlaps;                                         		// 0x0064 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      Active;                                           		// 0x0070 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      PseudoSupporterFifo;                              		// 0x007C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                PseudoSupporterFifoStart;                         		// 0x0088 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      FractureOriginFifo;                               		// 0x008C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                FractureOriginFifoStart;                          		// 0x0098 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      FractureOriginChunks;                             		// 0x009C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      RouteUpdateArea;                                  		// 0x00A8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                PerFrameProcessBudget;                            		// 0x00B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      PassiveFractureChunks;                            		// 0x00B8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      RouteUpdateFifo;                                  		// 0x00C4 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                RouteUpdateFifoStart;                             		// 0x00D0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SupportDepth;                                     		// 0x00D4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1275 ];

		return pClassPointer;
	};

	struct FVector GetChunkCentroid ( int ChunkIndex );
	struct FMatrix GetChunkMatrix ( int ChunkIndex );
	void CrumbleChunk ( int ChunkIndex );
	void FractureChunk ( int ChunkIndex, struct FVector Point, struct FVector Impulse, unsigned long bInheritRootVel );
	bool DamageChunk ( int ChunkIndex, struct FVector Point, float BaseDamage, float Radius, unsigned long bFullDamage, TArray< int >* Output );
};

//UClass* UPhysXDestructibleStructure::pClassPointer = NULL;

// Class Engine.InterpFilter
// 0x000C (0x0048 - 0x003C)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x003C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1277 ];

		return pClassPointer;
	};

};

//UClass* UInterpFilter::pClassPointer = NULL;

// Class Engine.InterpFilter_Classes
// 0x0010 (0x0058 - 0x0048)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            TrackClasses;                                     		// 0x004C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1279 ];

		return pClassPointer;
	};

};

//UClass* UInterpFilter_Classes::pClassPointer = NULL;

// Class Engine.InterpFilter_Custom
// 0x000C (0x0054 - 0x0048)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray< class UInterpGroup* >                      GroupsToInclude;                                  		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1281 ];

		return pClassPointer;
	};

};

//UClass* UInterpFilter_Custom::pClassPointer = NULL;

// Class Engine.InterpGroup
// 0x002C (0x0068 - 0x003C)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UInterpTrack* >                      InterpTracks;                                     		// 0x0040 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	struct FName                                       GroupName;                                        		// 0x004C (0x0008) [0x0000000000000000]              
	struct FColor                                      GroupColor;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          GroupAnimSets;                                    		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCollapsed : 1;                                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsFolder : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsParented : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1283 ];

		return pClassPointer;
	};

};

//UClass* UInterpGroup::pClassPointer = NULL;

// Class Engine.InterpGroupDirector
// 0x0004 (0x006C - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:
	unsigned long                                      OffCamera : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1285 ];

		return pClassPointer;
	};

};

//UClass* UInterpGroupDirector::pClassPointer = NULL;

// Class Engine.InterpGroupInst
// 0x0014 (0x0050 - 0x003C)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	class AActor*                                      GroupActor;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class UInterpTrackInst* >                  TrackInst;                                        		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1287 ];

		return pClassPointer;
	};

};

//UClass* UInterpGroupInst::pClassPointer = NULL;

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1289 ];

		return pClassPointer;
	};

};

//UClass* UInterpGroupInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackFloatBase
// 0x0014 (0x006C - 0x0058)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x0058 (0x0010) [0x0000000000000000]              
	float                                              CurveTension;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1291 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFloatBase::pClassPointer = NULL;

// Class Engine.InterpTrackAnimControl
// 0x0020 (0x008C - 0x006C)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FName                                       SlotName;                                         		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimControlTrackKey >              AnimSeqs;                                         		// 0x0080 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1293 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackVectorBase
// 0x0014 (0x006C - 0x0058)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x0058 (0x0010) [0x0000000000000000]              
	float                                              CurveTension;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1295 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackVectorBase::pClassPointer = NULL;

// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x006C - 0x006C)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1297 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackAudioMaster::pClassPointer = NULL;

// Class Engine.InterpTrackBooleanBase
// 0x000C (0x0064 - 0x0058)
class UInterpTrackBooleanBase : public UInterpTrack
{
public:
	TArray< struct FBooleanTrackKey >                  BooleanTrack;                                     		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1299 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackBooleanBase::pClassPointer = NULL;

// Class Engine.InterpTrackColorProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1301 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackColorScale
// 0x0000 (0x006C - 0x006C)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1303 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackDirector
// 0x0010 (0x0068 - 0x0058)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray< struct FDirectorTrackCut >                 CutTrack;                                         		// 0x0058 (0x000C) [0x0000000000000000]              
	float                                              TerminationTime;                                  		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1305 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackDirector::pClassPointer = NULL;

// Class Engine.InterpTrackEvent
// 0x0010 (0x0068 - 0x0058)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray< struct FEventTrackKey >                    EventTrack;                                       		// 0x0058 (0x000C) [0x0000000000000000]              
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1307 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackEvent::pClassPointer = NULL;

// Class Engine.InterpTrackFaceFX
// 0x0020 (0x0078 - 0x0058)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFaceFXTrackKey >                   FaceFXSeqs;                                       		// 0x0064 (0x000C) [0x0000000000000000]              
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseFixedSoundPosition : 1;                       		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1309 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackFade
// 0x0004 (0x0070 - 0x006C)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1311 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFade::pClassPointer = NULL;

// Class Engine.InterpTrackFloatMaterialParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1313 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1315 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1317 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1319 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInst::pClassPointer = NULL;

// Class Engine.InterpTrackInstAnimControl
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1321 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1323 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstAudioMaster::pClassPointer = NULL;

// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                           		// 0x003C (0x0004) [0x0000000000000000]              
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1325 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstProperty::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FColor                                      ResetColor;                                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1327 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1329 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstDirector
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1331 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1333 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstEvent::pClassPointer = NULL;

// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1335 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1337 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstFade::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1339 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1341 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ResetFloat;                                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1343 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1345 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackInstMove
// 0x0074 (0x00B0 - 0x003C)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x003C (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x0048 (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0054 (0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                        		// 0x0060 (0x0040) [0x0000000000000000]              
	struct FQuat                                       InitialQuat;                                      		// 0x00A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1347 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstMove::pClassPointer = NULL;

// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1349 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstParticleReplay::pClassPointer = NULL;

// Class Engine.InterpTrackInstParticleSystemToggle
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstParticleSystemToggle : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1351 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstParticleSystemToggle::pClassPointer = NULL;

// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1353 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1355 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackInstSound
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0040 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1357 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstSound::pClassPointer = NULL;

// Class Engine.InterpTrackInstToggle
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1359 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstToggle::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                      		// 0x003C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1361 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0054 - 0x0044)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     ResetVector;                                      		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1363 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstVectorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1365 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstVisibility::pClassPointer = NULL;

// Class Engine.InterpTrackInstVoice
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstVoice : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0040 (0x0004) [0x0000000000002008]              ( CPF_ExportObject | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1367 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackInstVoice::pClassPointer = NULL;

// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1369 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackMove
// 0x0042 (0x009A - 0x0058)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x0058 (0x0010) [0x0000000000000000]              
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x0068 (0x0010) [0x0000000000000000]              
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FName                                       LookAtGroupName;                                  		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinCurveTension;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngCurveTension;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMovement : 1;                             		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x0094 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      MoveFrame;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotMode;                                          		// 0x0099 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1371 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackMove::pClassPointer = NULL;

// Class Engine.InterpTrackParticleReplay
// 0x0014 (0x006C - 0x0058)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray< struct FParticleReplayTrackKey >           TrackKeys;                                        		// 0x0058 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsCapturingReplay : 1;                           		// 0x0064 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              FixedTimeStep;                                    		// 0x0068 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1373 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackParticleReplay::pClassPointer = NULL;

// Class Engine.InterpTrackParticleSystemToggle
// 0x0000 (0x0064 - 0x0064)
class UInterpTrackParticleSystemToggle : public UInterpTrackBooleanBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1375 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackParticleSystemToggle::pClassPointer = NULL;

// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1377 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackSlomo
// 0x0000 (0x006C - 0x006C)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1379 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackSound
// 0x0014 (0x0080 - 0x006C)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray< struct FSoundTrackKey >                    Sounds;                                           		// 0x006C (0x000C) [0x0000000000000000]              
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseFixedSoundPosition : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayOnlyWhenIsPawn : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              bMatineeEndFadeOutTime;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1381 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackSound::pClassPointer = NULL;

// Class Engine.InterpTrackToggle
// 0x0010 (0x0068 - 0x0058)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray< struct FToggleTrackKey >                   ToggleTrack;                                      		// 0x0058 (0x000C) [0x0000000000000000]              
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1383 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackToggle::pClassPointer = NULL;

// Class Engine.InterpTrackVectorMaterialParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct FName                                       ParamName;                                        		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1385 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1387 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackVectorProp::pClassPointer = NULL;

// Class Engine.InterpTrackVisibility
// 0x000C (0x0064 - 0x0058)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray< struct FVisibilityTrackKey >               VisibilityTrack;                                  		// 0x0058 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1389 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackVisibility::pClassPointer = NULL;

// Class Engine.InterpTrackVoice
// 0x0010 (0x007C - 0x006C)
class UInterpTrackVoice : public UInterpTrackVectorBase
{
public:
	TArray< struct FVoiceTrackKey >                    Voices;                                           		// 0x006C (0x000C) [0x0000000000000000]              
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseFixedSoundPosition : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1391 ];

		return pClassPointer;
	};

};

//UClass* UInterpTrackVoice::pClassPointer = NULL;

// Class Engine.MaterialExpressionAbs
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1393 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionAbs::pClassPointer = NULL;

// Class Engine.MaterialExpressionAdd
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1395 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionAdd::pClassPointer = NULL;

// Class Engine.MaterialExpressionAppendVector
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1397 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionAppendVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionAtan
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionAtan : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1399 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionAtan::pClassPointer = NULL;

// Class Engine.MaterialExpressionAtan2
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionAtan2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1401 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionAtan2::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpMapping
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionBumpMapping : public UMaterialExpression
{
public:
	struct FExpressionInput                            Texture;                                          		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Strength;                                         		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1403 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionBumpMapping::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpOffset
// 0x0040 (0x00A4 - 0x0064)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Height;                                           		// 0x0080 (0x001C) [0x0000000000000000]              
	float                                              HeightRatio;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1405 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionBumpOffset::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1407 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCameraVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1409 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCameraWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionCeil
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1411 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCeil::pClassPointer = NULL;

// Class Engine.MaterialExpressionCircleSystemDecal
// 0x0054 (0x00B8 - 0x0064)
class UMaterialExpressionCircleSystemDecal : public UMaterialExpression
{
public:
	struct FExpressionInput                            Size;                                             		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Angle;                                            		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Opacity;                                          		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1413 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCircleSystemDecal::pClassPointer = NULL;

// Class Engine.MaterialExpressionClamp
// 0x0054 (0x00B8 - 0x0064)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Min;                                              		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Max;                                              		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1415 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionComment
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                             		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                SizeY;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     Text;                                             		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1417 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionComment::pClassPointer = NULL;

// Class Engine.MaterialExpressionComponentMask
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned long                                      R : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      G : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      A : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1419 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionComponentMask::pClassPointer = NULL;

// Class Engine.MaterialExpressionCompound
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray< class UMaterialExpression* >               MaterialExpressions;                              		// 0x0064 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     Caption;                                          		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExpanded : 1;                                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1421 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCompound::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0068 - 0x0064)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1423 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstant::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x006C - 0x0064)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1425 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstant2Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0070 - 0x0064)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1427 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstant3Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0074 - 0x0064)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              A;                                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1429 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstant4Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0024 (0x0088 - 0x0064)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	float                                              Bias;                                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1431 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstantBiasScale::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstantClamp
// 0x0024 (0x0088 - 0x0064)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	float                                              Min;                                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1433 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionConstantClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionCosine
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1435 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCosine::pClassPointer = NULL;

// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1437 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionCrossProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSample
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Coordinates;                                      		// 0x0068 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1439 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0024 (0x00A8 - 0x0084)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Bias;                                             		// 0x008C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1441 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDepthBiasBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0040 (0x00A4 - 0x0064)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Alpha;                                            		// 0x006C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x0088 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1443 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDepthBiasedAlpha::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x005C (0x00C0 - 0x0064)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            RGB;                                              		// 0x006C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x0088 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x00A4 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1445 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDepthBiasedBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthMaskValue
// 0x008C (0x00F0 - 0x0064)
class UMaterialExpressionDepthMaskValue : public UMaterialExpression
{
public:
	struct FExpressionInput                            MaxLength;                                        		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            MaxPercent;                                       		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            MinPercent;                                       		// 0x009C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Size;                                             		// 0x00B8 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            DotMaskValue;                                     		// 0x00D4 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1447 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDepthMaskValue::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthScale
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionDepthScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Max;                                              		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1449 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDepthScale::pClassPointer = NULL;

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1451 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDeriveNormalZ::pClassPointer = NULL;

// Class Engine.MaterialExpressionDesaturation
// 0x0048 (0x00AC - 0x0064)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Percent;                                          		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FLinearColor                                LuminanceFactors;                                 		// 0x009C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1453 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDesaturation::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1455 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDestColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0068 - 0x0064)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1457 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDestDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionDistance
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1459 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionDivide
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1461 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDivide::pClassPointer = NULL;

// Class Engine.MaterialExpressionDotMaskValue
// 0x0054 (0x00B8 - 0x0064)
class UMaterialExpressionDotMaskValue : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                        		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Center;                                           		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Angle;                                            		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1463 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDotMaskValue::pClassPointer = NULL;

// Class Engine.MaterialExpressionDotProduct
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1465 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDotProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionDynamicParameter
// 0x000C (0x0070 - 0x0064)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray< struct FString >                           ParamNames;                                       		// 0x0064 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1467 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionDynamicParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x0084 - 0x0084)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1469 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFlipBookSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionFloor
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1471 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFloor::pClassPointer = NULL;

// Class Engine.MaterialExpressionFluidNormal
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1473 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFluidNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionFmod
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1475 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFmod::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x006C - 0x0064)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FontTexturePage;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1477 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFontSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x0084 - 0x006C)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0074 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1479 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFontSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionFrac
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1481 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFrac::pClassPointer = NULL;

// Class Engine.MaterialExpressionFresnel
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x0068 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1483 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionFresnel::pClassPointer = NULL;

// Class Engine.MaterialExpressionIf
// 0x008C (0x00F0 - 0x0064)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x009C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AEqualsB;                                         		// 0x00B8 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            ALessThanB;                                       		// 0x00D4 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1485 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionIf::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1487 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLensFlareIntensity::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1489 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLensFlareOcclusion::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLensFlareRadialDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLensFlareRayDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLensFlareSourceDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLightVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightVector2
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionLightVector2 : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLightVector2::pClassPointer = NULL;

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0054 (0x00B8 - 0x0064)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionLinearInterpolate::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionMeshEmitterVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x0084 - 0x0084)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionMeshSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionMultiply
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionMultiply::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalize
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionNormalize::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalMesh
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionNormalMesh : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionNormalMesh::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalTexture
// 0x003C (0x00A0 - 0x0064)
class UMaterialExpressionNormalTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Strength;                                         		// 0x0080 (0x001C) [0x0000000000000000]              
	class UTexture*                                    Texture;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionNormalTexture::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x009C - 0x0084)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x008C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalTextureParameter
// 0x001C (0x00B8 - 0x009C)
class UMaterialExpressionNormalTextureParameter : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FExpressionInput                            Strength;                                         		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionNormalTextureParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionObjectRadius::pClassPointer = NULL;

// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionObjectWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionOneMinus
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionOneMinus::pClassPointer = NULL;

// Class Engine.MaterialExpressionPanner
// 0x0040 (0x00A4 - 0x0064)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0080 (0x001C) [0x0000000000000000]              
	float                                              SpeedX;                                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedY;                                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPanner::pClassPointer = NULL;

// Class Engine.MaterialExpressionParameter
// 0x0018 (0x007C - 0x0064)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x0084 - 0x0084)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionParticleSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0068 - 0x0064)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPixelDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionPixelDepthToCenter
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionPixelDepthToCenter : public UMaterialExpression
{
public:
	struct FExpressionInput                            Center;                                           		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPixelDepthToCenter::pClassPointer = NULL;

// Class Engine.MaterialExpressionPixelDepthToFront
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionPixelDepthToFront : public UMaterialExpression
{
public:
	struct FExpressionInput                            Center;                                           		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Dir;                                              		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPixelDepthToFront::pClassPointer = NULL;

// Class Engine.MaterialExpressionPostProcessVolume
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionPostProcessVolume : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPostProcessVolume::pClassPointer = NULL;

// Class Engine.MaterialExpressionPower
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Exponent;                                         		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionPower::pClassPointer = NULL;

// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionReflectionVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0054 (0x00B8 - 0x0064)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                   		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            PositionOnAxis;                                   		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Position;                                         		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionRotateAboutAxis::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotator
// 0x0044 (0x00A8 - 0x0064)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0080 (0x001C) [0x0000000000000000]              
	float                                              CenterX;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterY;                                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionRotator::pClassPointer = NULL;

// Class Engine.MaterialExpressionScalarParameter
// 0x000C (0x0088 - 0x007C)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Group;                                            		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionScalarParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneDepth
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned long                                      bNormalize : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSceneDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneTexture
// 0x0024 (0x0088 - 0x0064)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned char                                      SceneTextureType;                                 		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSceneTexture::pClassPointer = NULL;

// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0068 - 0x0064)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionScreenPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionSine
// 0x0020 (0x0084 - 0x0064)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSine::pClassPointer = NULL;

// Class Engine.MaterialExpressionSquareRoot
// 0x001C (0x0080 - 0x0064)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSquareRoot::pClassPointer = NULL;

// Class Engine.MaterialExpressionSquareSystemDecal
// 0x0070 (0x00D4 - 0x0064)
class UMaterialExpressionSquareSystemDecal : public UMaterialExpression
{
public:
	struct FExpressionInput                            FrontDist;                                        		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            BackDist;                                         		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Width;                                            		// 0x009C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Opacity;                                          		// 0x00B8 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSquareSystemDecal::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0024 (0x00A0 - 0x007C)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x007C (0x001C) [0x0000000000000000]              
	unsigned long                                      DefaultR : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DefaultG : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DefaultB : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DefaultA : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FPointer                                    InstanceOverride;                                 		// 0x009C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionStaticComponentMaskParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0040 (0x00BC - 0x007C)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FExpressionInput                            A;                                                		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x009C (0x001C) [0x0000000000000000]              
	struct FPointer                                    InstanceOverride;                                 		// 0x00B8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionStaticSwitchParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionSubtract
// 0x0038 (0x009C - 0x0064)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSubtract::pClassPointer = NULL;

// Class Engine.MaterialExpressionSunLightDirection
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionSunLightDirection : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionSunLightDirection::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0074 - 0x0064)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Tiling;                                           		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              UTiling;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VTiling;                                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureCoordinate::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x009C - 0x009C)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSampleParameter2D::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x009C - 0x009C)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSampleParameterCube::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x009C - 0x009C)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSampleParameterMovie::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x009C - 0x009C)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTextureSampleParameterSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionTime
// 0x0004 (0x0068 - 0x0064)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTime::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransform
// 0x001D (0x0081 - 0x0064)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTransform::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransformMatrix
// 0x001D (0x0081 - 0x0064)
class UMaterialExpressionTransformMatrix : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTransformMatrix::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransformPosition
// 0x001E (0x0082 - 0x0064)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformSourceType;                              		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TransformType;                                    		// 0x0081 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTransformPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionTwoSideSampler
// 0x0058 (0x00BC - 0x0064)
class UMaterialExpressionTwoSideSampler : public UMaterialExpression
{
public:
	float                                              DotBias;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x0068 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            F;                                                		// 0x0084 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x00A0 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionTwoSideSampler::pClassPointer = NULL;

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x008C - 0x007C)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x007C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionVectorParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWindDirectionAndSpeed::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldLightVector
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionWorldLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWorldLightVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWorldNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldTime
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionWorldTime : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWorldTime::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldTwoSideSampler
// 0x0058 (0x00BC - 0x0064)
class UMaterialExpressionWorldTwoSideSampler : public UMaterialExpression
{
public:
	float                                              DotBias;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x0068 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            F;                                                		// 0x0084 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x00A0 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

};

//UClass* UMaterialExpressionWorldTwoSideSampler::pClassPointer = NULL;

// Class Engine.MaterialInstance
// 0x0030 (0x0078 - 0x0048)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Parent;                                           		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptRenderDecal : 1;                           		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x0050 (0x0004) [0x0000000000003000] [0x00000004] ( CPF_Native | CPF_Transient )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x0050 (0x0004) [0x0000000000001002] [0x00000008] ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticParameters[ 0x2 ];                          		// 0x0054 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticPermutationResources[ 0x2 ];                		// 0x005C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Resources[ 0x2 ];                                 		// 0x0064 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x006C (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

	bool IsInMapOrTransientPackage ( );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

//UClass* UMaterialInstance::pClassPointer = NULL;

// Class Engine.MaterialInstanceConstant
// 0x0038 (0x00B0 - 0x0078)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray< struct FFontParameterValue >               FontParameterValues;                              		// 0x0078 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FScalarParameterValue >             ScalarParameterValues;                            		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FTextureParameterValue >            TextureParameterValues;                           		// 0x0090 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVectorParameterValue >             VectorParameterValues;                            		// 0x009C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MaterialTagName;                                  		// 0x00A8 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetMaterialInstTagName ( struct FName TagName );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

//UClass* UMaterialInstanceConstant::pClassPointer = NULL;

// Class Engine.MaterialInstanceTimeVarying
// 0x0038 (0x00B0 - 0x0078)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Duration;                                         		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFontParameterValueOverTime >       FontParameterValues;                              		// 0x0080 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FScalarParameterValueOverTime >     ScalarParameterValues;                            		// 0x008C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FTextureParameterValueOverTime >    TextureParameterValues;                           		// 0x0098 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVectorParameterValueOverTime >     VectorParameterValues;                            		// 0x00A4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorStartTime ( struct FName ParameterName, float Value );
	void SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetDuration ( float Value );
	void SetScalarStartTime ( struct FName ParameterName, float Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

//UClass* UMaterialInstanceTimeVarying::pClassPointer = NULL;

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x006D - 0x006D)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatParticleParameter::pClassPointer = NULL;

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x009F - 0x009F)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

};

//UClass* UDistributionVectorParticleParameter::pClassPointer = NULL;

// Class Engine.Emitter
// 0x0009 (0x0219 - 0x0210)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPostUpdateTickGroup : 1;                         		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0214 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned char                                      GhostModeViewType;                                		// 0x0218 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

//UClass* AEmitter::pClassPointer = NULL;

// Class Engine.EmitterMovable
// 0x0000 (0x0219 - 0x0219)
class AEmitterMovable : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

};

//UClass* AEmitterMovable::pClassPointer = NULL;

// Class Engine.ParticleEmitter
// 0x0094 (0x00D0 - 0x003C)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseLocalSpace : 1;                                		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      KillOnDeactivate : 1;                             		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ScaleUV : 1;                                      		// 0x0044 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      DirectUV : 1;                                     		// 0x0044 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0044 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0044 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCollapsed : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsSoloing : 1;                                   		// 0x0044 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0048 (0x001C) [0x0000000000000000]              
	float                                              EmitterDuration;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                EmitterLoops;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned char                                      ParticleBurstMethod;                              		// 0x006C (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x006D (0x0001) [0x0000000000000000]              
	unsigned char                                      EmitterRenderMode;                                		// 0x006E (0x0001) [0x0000000000000000]              
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x0070 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                SubImages_Horizontal;                             		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                SubImages_Vertical;                               		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              RandomImageTime;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                SubUVDataOffset;                                  		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      EmitterEditorColor;                               		// 0x0090 (0x0004) [0x0000000000000000]              
	TArray< class UParticleLODLevel* >                 LODLevels;                                        		// 0x0094 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x00A0 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModule*                             TypeDataModule;                                   		// 0x00AC (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x00B0 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x00BC (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                InitialAllocationCount;                           		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

};

//UClass* UParticleEmitter::pClassPointer = NULL;

// Class Engine.ParticleLODLevel
// 0x0068 (0x00A4 - 0x003C)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LevelSetting;                                     		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x0048 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x004C (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModule*                             TypeDataModule;                                   		// 0x0058 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x005C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x0060 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModuleSpawnBase* >          SpawningModules;                                  		// 0x0064 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x0070 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x007C (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleOrbit* >              OrbitModules;                                     		// 0x0088 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleEventReceiverBase* >  EventReceiverModules;                             		// 0x0094 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

};

//UClass* UParticleLODLevel::pClassPointer = NULL;

// Class Engine.ParticleModule
// 0x0018 (0x0054 - 0x003C)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEditable : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000080] 
	struct FColor                                      ModuleEditorColor;                                		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODValidity;                                      		// 0x0044 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             IdenticalIgnoreProperties;                        		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

};

//UClass* UParticleModule::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAccelerationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAcceleration
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAcceleration::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0070 - 0x0054)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAccelerationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAttractorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x00A4 - 0x0054)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                        		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndPoint1;                                        		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Range;                                            		// 0x006C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x0088 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAttractorLine::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x00A0 - 0x0054)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0054 (0x0008) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       Range;                                            		// 0x005C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenewSource : 1;                                 		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSelIndex;                                     		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAttractorParticle::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x00AC - 0x0054)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Range;                                            		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x008C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      StrengthByDistance : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleAttractorPoint::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleBeamBase::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00BC - 0x0054)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	unsigned char                                      ModifierType;                                     		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Position;                                         		// 0x005C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Tangent;                                          		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00A0 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleBeamModifier::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSmooth : 1;                                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoiseLock : 1;                                   		// 0x0054 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bOscillate : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTargetNoise : 1;                                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                Frequency;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Frequency_LowRange;                               		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x0098 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockRadius;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockTime;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseTension;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x00C0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                NoiseTessellation;                                		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyDistance;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x00E4 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleBeamNoise::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00B8 - 0x0054)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceTangentMethod;                              		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockSource : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      Source;                                           		// 0x0064 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x0080 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x009C (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleBeamSource::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00BC - 0x0054)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	unsigned char                                      TargetMethod;                                     		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTangentMethod;                              		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetName;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Target;                                           		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockTarget : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockTargetStength : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x0080 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x009C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockRadius;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleBeamTarget::pClassPointer = NULL;

// Class Engine.ParticleModuleCloneBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleCloneBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleCloneBase::pClassPointer = NULL;

// Class Engine.ParticleModuleClone
// 0x0055 (0x00A9 - 0x0054)
class UParticleModuleClone : public UParticleModuleCloneBase
{
public:
	struct FRawDistributionFloat                       Radius;                                           		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Radius3D;                                         		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Density;                                          		// 0x008C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Shape;                                            		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleClone::pClassPointer = NULL;

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleCollisionBase::pClassPointer = NULL;

// Class Engine.ParticleModuleCollision
// 0x009C (0x00F0 - 0x0054)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x008C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CollisionCompletionOption;                        		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPhysics : 1;                                		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropDetail : 1;                                  		// 0x00AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x00B0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirScalar;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalFudgeFactor;                              		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x00D4 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleCollision::pClassPointer = NULL;

// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleColorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleColor
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleColor::pClassPointer = NULL;

// Class Engine.ParticleModuleColorByParameter
// 0x0010 (0x0064 - 0x0054)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	unsigned char                                      ColorParameterMode;                               		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ColorParam;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultColor;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleColorByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleColorOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEmitterTime : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleColorScaleOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleDecalBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalBase::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalAngle
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalAngle : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       Angle;                                            		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalAngle::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalAngleRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalAngleRate : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       AngleRate;                                        		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalAngleRate::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalMax
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalMax : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       Max;                                              		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalMax::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalMaxRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalMaxRate : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       MaxRate;                                          		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalMaxRate::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalMin
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalMin : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       Min;                                              		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalMin::pClassPointer = NULL;

// Class Engine.ParticleModuleDecalMinRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleDecalMinRate : public UParticleModuleDecalBase
{
public:
	struct FRawDistributionFloat                       MinRate;                                          		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleDecalMinRate::pClassPointer = NULL;

// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleEventBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0060 - 0x0054)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray< struct FParticleEvent_GenerateInfo >       Events;                                           		// 0x0054 (0x000C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleEventGenerator::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleEventReceiverBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0048 (0x009C - 0x0054)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      EventGeneratorType;                               		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseParticleTime : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocity : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x0080 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleEventReceiverSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleKillBase::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBox
// 0x003C (0x0090 - 0x0054)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAbsolute : 1;                                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleKillBox::pClassPointer = NULL;

// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAbsolute : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleKillHeight::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLifetimeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetime
// 0x001C (0x0070 - 0x0054)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleLocationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocation
// 0x0024 (0x0078 - 0x0054)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableTerrainCheck : 1;                          		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fBaseAddHeight;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocation::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationDirect
// 0x0074 (0x00C8 - 0x0054)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x008C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Direction;                                        		// 0x00A8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableRotation : 1;                              		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x006C - 0x0054)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0054 (0x0008) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      SelectionMethod;                                  		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InheritSourceVelocityScale;                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InheritSourceRotationScale;                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationEmitter::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0009 (0x005D - 0x0054)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0054 (0x0008) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      SelectionMethod;                                  		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationEmitterDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0090 - 0x0054)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Positive_Y : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Positive_Z : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Negative_X : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Negative_Y : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      Negative_Z : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      Velocity : 1;                                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0074 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationPrimitiveBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0041 (0x00D1 - 0x0090)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                               		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableTerrainCheck : 1;                          		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0094 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x00B0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBaseAddHeight;                                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HeightAxis;                                       		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationPrimitiveCylinder::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0024 (0x00B4 - 0x0090)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0090 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableTerrainCheck : 1;                          		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fBaseAddHeight;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationPrimitiveSphere::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationSkeletalMeshDirect
// 0x0010 (0x0064 - 0x0054)
class UParticleModuleLocationSkeletalMeshDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneName;                                         		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationSkeletalMeshDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationSkeletalMeshEmitter
// 0x0010 (0x0064 - 0x0054)
class UParticleModuleLocationSkeletalMeshEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneName;                                         		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationSkeletalMeshEmitter::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationStaticMesh
// 0x0078 (0x00CC - 0x0054)
class UParticleModuleLocationStaticMesh : public UParticleModuleLocationBase
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MeshTexture;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextureChannel;                                   		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      MeshScale;                                        		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      MeshLocation;                                     		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      MeshRotation;                                     		// 0x0098 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                VertexInterval;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TexSizeX;                                         		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TexSizeY;                                         		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            SpawnRateBuffer;                                  		// 0x00C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleLocationStaticMesh::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMaterialBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x006C - 0x0054)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray< struct FName >                             MaterialParameters;                               		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                DefaultMaterials;                                 		// 0x0060 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMaterialByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0060 - 0x0054)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray< class UMaterialInterface* >                MeshMaterials;                                    		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMeshMaterial::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInheritParent : 1;                               		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMeshRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotationRateBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMeshRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0070 - 0x0054)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleMeshRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleOrbitBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbit
// 0x00A4 (0x00FC - 0x0058)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	unsigned long                                      bInheritRotation : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableScaleByLife : 1;                           		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseOrbitMovDirectionRotate : 1;                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseOffsetToOrigin : 1;                           		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      ScaleByLife_OffsetAmount;                         		// 0x005C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ScaleByLife_RotationRateAmount;                   		// 0x0078 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOrbitMovDirectionSensitive;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainMode;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x009C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x00BC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FOrbitOptions                               RotationOptions;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x00DC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleOrbit::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleOrientationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0055 - 0x0054)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleOrientationAxisLock::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleParameterBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleParameterBase::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterDecalDynamicParam
// 0x000C (0x0060 - 0x0054)
class UParticleModuleParameterDecalDynamicParam : public UParticleModuleParameterBase
{
public:
	TArray< struct FEmitterDecalDynamicParameter >     DynamicParams;                                    		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleParameterDecalDynamicParam::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterDynamic
// 0x000C (0x0060 - 0x0054)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray< struct FEmitterDynamicParameter >          DynamicParams;                                    		// 0x0054 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleParameterDynamic::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterMeshDynamicParam
// 0x000C (0x0060 - 0x0054)
class UParticleModuleParameterMeshDynamicParam : public UParticleModuleParameterBase
{
public:
	TArray< struct FEmitterMeshDynamicParameter >      DynamicParams;                                    		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleParameterMeshDynamicParam::pClassPointer = NULL;

// Class Engine.ParticleModulePointLightMovable
// 0x002C (0x0080 - 0x0054)
class UParticleModulePointLightMovable : public UParticleModuleColorBase
{
public:
	struct FColor                                      LightColor;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRange;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightBrightness;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      LightCurve;                                       		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMoveLight : 1;                                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

};

//UClass* UParticleModulePointLightMovable::pClassPointer = NULL;

// Class Engine.ParticleModuleRequired
// 0x0060 (0x00B4 - 0x0054)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScreenAlignment;                                  		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Priority;                                         		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x005A (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x005B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EmitterRenderMode;                                		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreLocalSpaceAxisZ : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyTerrainNormal : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRequiresSorting : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bHitForce : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bScaleUV : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDirectUV : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	float                                              EmitterDuration;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDurationLow;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmitterLoops;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0070 (0x001C) [0x0000000000000000]              
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x008C (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              EmitterDelay;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Horizontal;                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Vertical;                               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomImageTime;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDrawCount;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmitterEditorColor;                               		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRequired::pClassPointer = NULL;

// Class Engine.ParticleModuleRotation
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Scale : 1;                                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSizeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSize
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSize::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyDistance
// 0x0028 (0x007C - 0x0054)
class UParticleModuleSizeMultiplyDistance : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      DistanceMultiplier;                               		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApplyDistance_Near;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApplyDistance_Far;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSizeMultiplyDistance::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSizeMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                               		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSizeMultiplyVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableX : 1;                                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableY : 1;                                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableZ : 1;                                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSizeScale::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessBurstList : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSpawnBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawn
// 0x0048 (0x00A0 - 0x0058)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0074 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x0094 (0x000C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0028 (0x0080 - 0x0058)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x005C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MovementTolerance;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSpawnPerUnit::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSubUVBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUV
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSubUV::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x008C - 0x0054)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      SubUVSize;                                        		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSubUVDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                   		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleSubUVSelect::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTrailBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0090 - 0x0054)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSourceApplyAllTrailParticle : 1;                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                SourceOffsetCount;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SourceOffsetDefaults;                             		// 0x0084 (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTrailSource::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x005C - 0x0054)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x0054 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	float                                              MinSpawnVelocity;                                 		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTrailSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	unsigned char                                      TaperMethod;                                      		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTrailTaper::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00F0 - 0x0054)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndPointMethod;                                   		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      EndPoint;                                         		// 0x0074 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x0094 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00B0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      EndPointDirection;                                		// 0x00CC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataBeam::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam2
// 0x00A0 (0x00F4 - 0x0054)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TaperMethod;                                      		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextureTileDistance;                              		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBeamCount;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InterpolationPoints;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DisableCameraVector : 1;                          		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0070 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0070 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      CurveApplyOn : 1;                                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	int                                                UpVectorStepSize;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BranchParentName;                                 		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0080 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x009C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00B8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      CurveOffsetPoints;                                		// 0x00D4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurveTessellation;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataBeam2::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataDecal
// 0x0048 (0x009C - 0x0054)
class UParticleModuleTypeDataDecal : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      DrawType;                                         		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShapeType;                                        		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoRotation : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSystemDecal : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              CullDistance;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OpacityAngle;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WidthBlurSize;                                    		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OutlineSize;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Angle;                                            		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Width;                                            		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Front;                                            		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Back;                                             		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataDecal::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMesh
// 0x0009 (0x005D - 0x0054)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DoCollisions : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataMesh::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0023 (0x0080 - 0x005D)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysXRotationMethod;                              		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidRotationCoefficient;                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    RenderInstance;                                   		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0070 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataMeshPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x0068 - 0x0054)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0058 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataSkeletalMesh
// 0x0015 (0x0069 - 0x0054)
class UParticleModuleTypeDataSkeletalMesh : public UParticleModuleTypeDataBase
{
public:
	class USkeletalMesh*                               Mesh;                                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSets;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSeqName;                                      		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlaying : 1;                                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSinkToLifeTime : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataSkeletalMesh::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0084 - 0x0054)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                               		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Tapered : 1;                                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SpawnByDistance : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Tension;                                          		// 0x005C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnDistance;                                    		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataTrail::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail2
// 0x0088 (0x00DC - 0x0054)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationFactorDistance;                       		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              TessellationStrength;                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                MaxTrailCount;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EdgeType;                                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TrailHistoryNum;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseGhostTrail : 1;                               		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      GhostTrailRotShakeRandomValue : 1;                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      GhostTrailApplyOwnerRot : 1;                      		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0078 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              GhostTrailRotShakeValue;                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GhostTrailRotShakeRandomSec;                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GhostTrailControlPointNum;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GhostTrailForceVector;                            		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              GhostTrailUnitLength;                             		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GhostTrailRollUpdateSec;                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GhostTrailRollRange;                              		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fForceLengthDiv;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMoveLengthDiv;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fForceLoseForUnit;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTangentLength;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TangentUnitSize;                                  		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGhostTrailBoundRadius;                           		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FollowEmitterName;                                		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FollowLastPoint;                                  		// 0x00D0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleTypeDataTrail2::pClassPointer = NULL;

// Class Engine.ParticleModuleUberBase
// 0x000C (0x0060 - 0x0054)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray< struct FName >                             RequiredModules;                                  		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberBase::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x0108 - 0x0060)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0098 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B4 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D0 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00EC (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberLTISIVCL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0124 - 0x0060)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0098 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B4 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D0 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00EC (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0108 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberLTISIVCLIL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x017C - 0x0060)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0098 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B4 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D0 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00EC (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0108 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0124 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x0140 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x015C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0160 (0x001C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberLTISIVCLILIRSSBLIRR::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00E8 - 0x0060)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMax;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMin;                                     		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMax;                                     		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMin;                                 		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMax;                                 		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMin;                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMax;                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ColorOverLife;                                    		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOverLife;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              PC_VelocityScale;                                 		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PC_StartLocation;                                 		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartRadius;                                   		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartHeight;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMin;                                 		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMax;                                 		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberRainDrops::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0180 - 0x0060)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0098 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInheritParent : 1;                               		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00B8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x00D4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x00F0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x010C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x0128 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x0144 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0148 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0164 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberRainImpacts::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x010C - 0x0060)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0098 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInheritParent : 1;                               		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00B8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00F0 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberRainSplashA::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x010C - 0x0060)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      StartSize;                                        		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0098 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00B4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00D0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x00F0 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleUberRainSplashB::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleVelocityBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleVelocityBase::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocity
// 0x0038 (0x008C - 0x0054)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0070 - 0x0054)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleVelocityInheritParent::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Absolute : 1;                                     		// 0x0070 (0x0004) [0x0000000000000009] [0x00000001] ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      UseWorldAxis : 1;                                 		// 0x0070 (0x0004) [0x0000000000000009] [0x00000002] ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      BoneRotIgnore : 1;                                		// 0x0070 (0x0004) [0x0000000000000009] [0x00000004] ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleVelocityOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleWeatherBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleWeatherBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleWeatherBase::pClassPointer = NULL;

// Class Engine.ParticleModuleWeather
// 0x0019 (0x006D - 0x0054)
class UParticleModuleWeather : public UParticleModuleWeatherBase
{
public:
	float                                              NearDistance;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarDistance;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinSpawnRatio;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpawnRatio;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomSpawnTime;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableDistance : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableRotation : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      WeatherDistanceType;                              		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

};

//UClass* UParticleModuleWeather::pClassPointer = NULL;

// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x00D0 - 0x00D0)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

};

//UClass* UParticleSpriteEmitter::pClassPointer = NULL;

// Class Engine.ParticleSystemComponent
// 0x01E0 (0x03F0 - 0x0210)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                         		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPointer >                          EmitterInstances;                                 		// 0x0214 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UStaticMeshComponent* >              SMComponents;                                     		// 0x0220 (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	TArray< class UMaterialInterface* >                SMMaterialInterfaces;                             		// 0x022C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UDecalComponent* >                   DecalComponents;                                  		// 0x0238 (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	int                                                DecalCompReservedCount;                           		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         MaterialInstConsts;                               		// 0x0248 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MaterialInstConstReservedCount;                   		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWasCompleted : 1;                                		// 0x0258 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x0258 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bWasDeactivated : 1;                              		// 0x0258 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bResetOnDetach : 1;                               		// 0x0258 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x0258 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bJustAttached : 1;                                		// 0x0258 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0258 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bDisableInfiniteLoop : 1;                         		// 0x0258 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bUIRenderMesh : 1;                                		// 0x0258 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIsShowParticle : 1;                              		// 0x0258 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bWarmingUp : 1;                                   		// 0x0258 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDetachOnComplete : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsDependencyParticle : 1;                        		// 0x0258 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x0258 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x0258 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x0258 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x0258 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x0258 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x0258 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x0258 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x0258 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bInfluenceDistance : 1;                           		// 0x0258 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bIsActive_AppliedTerrainNormal : 1;               		// 0x0258 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bIgnoreParentScale : 1;                           		// 0x0258 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bAlwaysShown : 1;                                 		// 0x0258 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bSkipDensityCheck : 1;                            		// 0x0258 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	float                                              EffectSpawnScalerByOption;                        		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EffectSpawnScaler;                                		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EffectTimeScaler;                                 		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EffectLifeScaler;                                 		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x026C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OldPosition;                                      		// 0x0278 (0x000C) [0x0000000000000000]              
	struct FVector                                     PartSysVelocity;                                  		// 0x0284 (0x000C) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                LODLevel;                                         		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FString                                     DependencyParticleName;                           		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SecondsBeforeInactive;                            		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EditorLODLevel;                                   		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              AccumTickTime;                                    		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LODMethod;                                        		// 0x02B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReplayState;                                      		// 0x02B1 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FMaterialViewRelevance >            CachedViewRelevanceFlags;                         		// 0x02B4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     HitForceDirection;                                		// 0x02C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SavedTranslation;                                 		// 0x02CC (0x000C) [0x0000000000000000]              
	struct FRotator                                    SavedRotation;                                    		// 0x02D8 (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x02E4 (0x000C) MISSED OFFSET
	struct FMatrix                                     SavedParentMatrix;                                		// 0x02F0 (0x0040) [0x0000000000000000]              
	float                                              PawnPolyOffset;                                   		// 0x0330 (0x0004) [0x0000000000000000]              
	struct FVector                                     TargetTerrainNormal;                              		// 0x0334 (0x000C) [0x0000000000000000]              
	struct FVector                                     CurrentTerrainNormal;                             		// 0x0340 (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x034C (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToWorld_AppliedTerrainNormal;                		// 0x0350 (0x0040) [0x0000000000000000]              
	float                                              LocalToWorldDeterminant_AppliedTerrainNormal;     		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              DistanceByPlayer;                                 		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              DistanceByCamera;                                 		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              OrbitScale;                                       		// 0x039C (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemReplay* >             ReplayClips;                                      		// 0x03A0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ReplayClipIDNumber;                               		// 0x03AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplayFrameIndex;                                 		// 0x03B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FParticleEventSpawnData >           SpawnEvents;                                      		// 0x03B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleEventDeathData >           DeathEvents;                                      		// 0x03C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleEventCollideData >         CollisionEvents;                                  		// 0x03CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleEventKismetData >          KismetEvents;                                     		// 0x03D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x03E4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

	void ResetToDefaults ( );
	void SetActive ( unsigned long bNowActive );
	void ClearParameter ( struct FName ParameterName, unsigned char ParameterType );
	bool GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial );
	bool GetActorParameter ( struct FName InName, class AActor** OutActor );
	bool GetColorParameter ( struct FName InName, struct FColor* OutColor );
	bool GetVectorParameter ( struct FName InName, struct FVector* OutVector );
	bool GetFloatParameter ( struct FName InName, float* OutFloat );
	void SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	int GetEditorLODLevel ( );
	int GetLODLevel ( );
	void SetEditorLODLevel ( int InLODLevel );
	void SetLODLevel ( int InLODLevel );
	void ForceFadeOut ( int EmitterIndex );
	void SetBeamDynamicLifeTime ( int EmitterIndex, float InLifeTime );
	void SetBeamFadeOut ( int EmitterIndex, float InFadeOutTime );
	void SetBeamEmitterAlpha ( int EmitterIndex, float NewEmitterAlpha );
	void SetPartialRenderingTime ( int EmitterIndex, float NewPartialTime );
	void SkillBeamRenderMode ( int EmitterIndex, unsigned long inBeamSkill, unsigned long inPartialRenderToggle );
	void SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex );
	void SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex );
	void SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex );
	void SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex );
	void SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex );
	void SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex );
	void SetBeamDistance ( int EmitterIndex, float Distance );
	void SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint );
	void SetBeamTessellationFactor ( int EmitterIndex, float NewFactor );
	void SetBeamType ( int EmitterIndex, int NewMethod );
	void RewindEmitterInstances ( );
	void RewindEmitterInstance ( int EmitterIndex );
	void SetKillOnCompleted ( int EmitterIndex, unsigned long bKill );
	void SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill );
	bool GetSkipUpdateDynamicDataDuringTick ( );
	void SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick );
	void KillParticlesForced ( );
	void DeactivateSystem ( );
	void ActivateSystem ( unsigned long bFlagAsJustAttached );
	void SetTemplate ( class UParticleSystem* NewTemplate );
	void OnSystemFinished ( class UParticleSystemComponent* PSystem );
};

//UClass* UParticleSystemComponent::pClassPointer = NULL;

// Class Engine.ParticleSystemReplay
// 0x0010 (0x004C - 0x003C)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                     		// 0x003C (0x0004) [0x0000000000001001]              ( CPF_Edit | CPF_Native )
	TArray< struct FParticleSystemReplayFrame >        Frames;                                           		// 0x0040 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

};

//UClass* UParticleSystemReplay::pClassPointer = NULL;

// Class Engine.PhysXEmitterSpawnable
// 0x000B (0x0224 - 0x0219)
class APhysXEmitterSpawnable : public AEmitter
{
public:
	struct FPointer                                    VolumeFill;                                       		// 0x021C (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0220 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void eventDestroyed ( );
	void Term ( );
};

//UClass* APhysXEmitterSpawnable::pClassPointer = NULL;

// Class Engine.PhysXParticleSystem
// 0x0054 (0x0090 - 0x003C)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionDistance;                                		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithStaticShapes;                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithDynamicShapes;                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithStaticShapes;                         		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithDynamicShapes;                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicCollision : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableGravity : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStaticCollision : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroy : 1;                                     		// 0x0054 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSyncFailed : 1;                                  		// 0x0054 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInGame : 1;                                    		// 0x0054 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              MaxMotionDistance;                                		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damping;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ExternalAcceleration;                             		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SimulationMethod;                                 		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PacketSizeMultiplier;                             		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestParticleDistance;                             		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestDensity;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KernelRadiusMultiplier;                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Stiffness;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Viscosity;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionResponseCoefficient;                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CascadeScene;                                     		// 0x0088 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PSys;                                             		// 0x008C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

};

//UClass* UPhysXParticleSystem::pClassPointer = NULL;

// Class Engine.KActor
// 0x00A8 (0x02F0 - 0x0248)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0248 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCurrentSlide : 1;                                		// 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x0248 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x0248 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x024C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x0250 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x0254 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LastImpactTime;                                   		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             ImpactEffectInfo;                                 		// 0x025C (0x0010) [0x0000000000000000]              
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x026C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x0270 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LastSlideTime;                                    		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             SlideEffectInfo;                                  		// 0x0278 (0x0010) [0x0000000000000000]              
	float                                              StayUprightTorqueFactor;                          		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRigidBodyState                             RBState;                                          		// 0x0290 (0x0038) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x02C8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              DrawScaleX;                                       		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DrawScaleY;                                       		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DrawScaleZ;                                       		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     InitialLocation;                                  		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    InitialRotation;                                  		// 0x02E4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

	void Reset ( );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPhysicalCollisionProperties ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	void ResolveRBState ( );
	class UPhysicalMaterial* GetKActorPhysMaterial ( );
};

//UClass* AKActor::pClassPointer = NULL;

// Class Engine.KActorSpawnable
// 0x0004 (0x02F4 - 0x02F0)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                          		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScalingToZero : 1;                               		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

	void ResetComponents ( );
	void RecycleInternal ( );
	void Recycle ( );
	void Initialize ( );
	void Tick ( float DeltaTime );
};

//UClass* AKActorSpawnable::pClassPointer = NULL;

// Class Engine.KAsset
// 0x0010 (0x0220 - 0x0210)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockPawns : 1;                                  		// 0x0214 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x0218 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* AKAsset::pClassPointer = NULL;

// Class Engine.PhysicalMaterial
// 0x00CC (0x0108 - 0x003C)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                    		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Friction;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Restitution;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceConeFriction : 1;                           		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x0048 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x0048 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     AnisoFrictionDir;                                 		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionV;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Density;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearDamping;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MagneticResponse;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindResponse;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoneLinearSpring;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoneLinearDamping;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoneAngularSpring;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoneAngularDamping;                               		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactThreshold;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactReFireDelay;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect0;                                       		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect1;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect2;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect3;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect4;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect5;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect6;                                       		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             GeoEffect7;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideThreshold;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideReFireDelay;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlideEffect;                                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SlideSound;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SoundStepType;                                    		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSE_AttachType;                           		// 0x00BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSE_DamageType;                           		// 0x00BE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSE_DialoguesType;                        		// 0x00BF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSE_WeaponType;                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterSE_Priority;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFootPrintInfo >                    FootPrintDatas;                                   		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFootPrintHeightInfo >              FootPrintHeight;                                  		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FWaterPrintInfo                             WaterPrintData;                                   		// 0x00E0 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundExplosion;                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundSingle;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           Parent;                                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x0104 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty ( class UClass* DesiredClass );
	void FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle );
	struct FPhysEffectInfo FindPhysEffectInfo ( unsigned char Type );
};

//UClass* UPhysicalMaterial::pClassPointer = NULL;

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

};

//UClass* UPhysicalMaterialPropertyBase::pClassPointer = NULL;

// Class Engine.PhysicsAsset
// 0x00D0 (0x010C - 0x003C)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class URB_BodySetup* >                     BodySetup;                                        		// 0x0040 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< int >                                      BoundsBodies;                                     		// 0x004C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class URB_ConstraintSetup* >               ConstraintSetup;                                  		// 0x0058 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x0064 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0068 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PhysicsAsset.BodyIndexMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00A4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PhysicsAsset.ConstraintIndexMap
	unsigned long                                      bInitIndexMap : 1;                                		// 0x00E0 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )
	int                                                bUseMultifixedBone;                               		// 0x00E4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FName >                             PhysicsBoneNamesUpper;                            		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             PhysicsBoneNamesBelow;                            		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             PhysicsBoneNamesArm;                              		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

	int FindBodyIndex ( struct FName BodyName );
};

//UClass* UPhysicsAsset::pClassPointer = NULL;

// Class Engine.PhysicsAssetInstance
// 0x0078 (0x00B4 - 0x003C)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                RootBodyIndex;                                    		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class URB_BodyInstance* >                  Bodies;                                           		// 0x0044 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class URB_ConstraintInstance* >            Constraints;                                      		// 0x0050 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x005C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LinearSpringScale;                                		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearDampingScale;                               		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearForceLimitScale;                            		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularSpringScale;                               		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularDampingScale;                              		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularForceLimitScale;                           		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInitBodies : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

	class URB_ConstraintInstance* FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset );
	class URB_BodyInstance* FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset );
	void SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh );
	void SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh );
	void SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh );
	void SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp );
	void SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies );
	void SetAllBodiesFixed ( unsigned long bNewFixed );
	float GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh );
	void SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale );
	void SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale );
};

//UClass* UPhysicsAssetInstance::pClassPointer = NULL;

// Class Engine.PhysicsLODVerticalDestructible
// 0x0008 (0x0044 - 0x003C)
class UPhysicsLODVerticalDestructible : public UObject
{
public:
	int                                                MaxDynamicChunkCount;                             		// 0x003C (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )
	float                                              DebrisLifetime;                                   		// 0x0040 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

};

//UClass* UPhysicsLODVerticalDestructible::pClassPointer = NULL;

// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0040 - 0x003C)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x003C (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

};

//UClass* UPhysicsLODVerticalEmitter::pClassPointer = NULL;

// Class Engine.RB_BodyInstance
// 0x0058 (0x0094 - 0x003C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x003C (0x0004) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	int                                                BodyIndex;                                        		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x0044 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousVelocity;                                 		// 0x0050 (0x000C) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x005C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BodyData;                                         		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpring;                                       		// 0x0064 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpringKinActor;                               		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x006C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x006C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bResetFlag : 1;                                   		// 0x006C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x006C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPushBody : 1;                                    		// 0x006C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCustomDampingSpring : 1;                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	float                                              BoneLinearSpring;                                 		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneLinearDamping;                                		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularSpring;                                		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularDamping;                               		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverextensionThreshold;                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityFactor;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEffectPlayedTime;                             		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContactReportForceThreshold;                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

	void SetContactReportForceThreshold ( float Threshold );
	void EnableCollisionResponse ( unsigned long bEnableResponse );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	void SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget );
	void SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping );
	void EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget );
	struct FVector GetUnrealWorldAngularVelocity ( );
	struct FVector GetUnrealWorldVelocity ( );
	struct FMatrix GetUnrealWorldTM ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	bool IsValidBodyInstance ( );
	bool IsFixed ( );
	void SetFixed ( unsigned long bNewFixed );
};

//UClass* URB_BodyInstance::pClassPointer = NULL;

// Class Engine.RB_ConstraintSetup
// 0x00D0 (0x010C - 0x003C)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                        		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ConstraintBone1;                                  		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ConstraintBone2;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Pos1;                                             		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis1;                                         		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis1;                                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     Pos2;                                             		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis2;                                         		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis2;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot1;                                     		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot2;                                     		// 0x00A8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableProjection : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLinearBreakable : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSwingLimited : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTwistLimited : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAngularBreakable : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsPulley : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitStiffness;                             		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitDamping;                               		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearBreakThreshold;                             		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing1LimitAngle;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing2LimitAngle;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitAngle;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitStiffness;                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitDamping;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitStiffness;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitDamping;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularBreakThreshold;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PulleyRatio;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

};

//UClass* URB_ConstraintSetup::pClassPointer = NULL;

// Class Engine.RB_BSJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

};

//UClass* URB_BSJointSetup::pClassPointer = NULL;

// Class Engine.RB_ConstraintActor
// 0x001C (0x022C - 0x0210)
class ARB_ConstraintActor : public AActor
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ConstraintActor2;                                 		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x0218 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x021C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      bDisableCollision : 1;                            		// 0x0220 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x0220 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      PulleyPivotActor1;                                		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor2;                                		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

	void OnDestroy ( class USeqAct_Destroy* Action );
	void TermConstraint ( );
	void InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
	void SetDisableCollision ( unsigned long NewDisableCollision );
};

//UClass* ARB_ConstraintActor::pClassPointer = NULL;

// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x0214 - 0x0210)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

};

//UClass* URB_ConstraintDrawComponent::pClassPointer = NULL;

// Class Engine.RB_ConstraintInstance
// 0x0068 (0x00A4 - 0x003C)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0040 (0x0004) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	int                                                ConstraintIndex;                                  		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x004C (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x004C (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerminated : 1;                                  		// 0x004C (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    ConstraintData;                                   		// 0x0050 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LinearPositionTarget;                             		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LinearVelocityTarget;                             		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveSpring;                                		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveDamping;                               		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveForceLimit;                            		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FQuat                                       AngularPositionTarget;                            		// 0x0078 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AngularVelocityTarget;                            		// 0x0088 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveSpring;                               		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveDamping;                              		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveForceLimit;                           		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    DummyKinActor;                                    		// 0x00A0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

	void MoveKinActorTransform ( struct FMatrix* NewTM );
	void SetLinearLimitSize ( float NewLimitSize );
	void SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup );
	void SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetAngularVelocityTarget ( struct FVector InVelTarget );
	void SetAngularPositionTarget ( struct FQuat InPosTarget );
	void SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetLinearVelocityTarget ( struct FVector InVelTarget );
	void SetLinearPositionTarget ( struct FVector InPosTarget );
	void SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	void SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	struct FVector GetConstraintLocation ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	void TermConstraint ( );
	void InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 );
};

//UClass* URB_ConstraintInstance::pClassPointer = NULL;

// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

};

//UClass* URB_DistanceJointSetup::pClassPointer = NULL;

// Class Engine.RB_Handle
// 0x0052 (0x00A8 - 0x0056)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x0058 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FName                                       GrabbedBoneName;                                  		// 0x005C (0x0008) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0064 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInHardware : 1;                                  		// 0x0068 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRotationConstrained : 1;                         		// 0x0068 (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    HandleData;                                       		// 0x006C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    KinActorData;                                     		// 0x0070 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              LinearDamping;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStiffness;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularStiffness;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Destination;                                      		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     StepSize;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x009C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

	struct FQuat GetOrientation ( );
	void SetOrientation ( struct FQuat NewOrientation );
	void UpdateSmoothLocation ( struct FVector* NewLocation );
	void SetSmoothLocation ( struct FVector NewLocation, float MoveTime );
	void SetLocation ( struct FVector NewLocation );
	void ReleaseComponent ( );
	void GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation );
};

//UClass* URB_Handle::pClassPointer = NULL;

// Class Engine.RB_HingeSetup
// 0x0000 (0x010C - 0x010C)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

};

//UClass* URB_HingeSetup::pClassPointer = NULL;

// Class Engine.RB_LineImpulseActor
// 0x0011 (0x0221 - 0x0210)
class ARB_LineImpulseActor : public AActor
{
public:
	float                                              ImpulseStrength;                                  		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRange;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x0218 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0218 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UArrowComponent*                             Arrow;                                            		// 0x021C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	unsigned char                                      ImpulseCount;                                     		// 0x0220 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void FireLineImpulse ( );
};

//UClass* ARB_LineImpulseActor::pClassPointer = NULL;

// Class Engine.RB_PrismaticSetup
// 0x0000 (0x010C - 0x010C)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

};

//UClass* URB_PrismaticSetup::pClassPointer = NULL;

// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

};

//UClass* URB_PulleyJointSetup::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x0219 - 0x0210)
class ARB_RadialImpulseActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned char                                      ImpulseCount;                                     		// 0x0218 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* ARB_RadialImpulseActor::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x0224 - 0x0210)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      ImpulseFalloff;                                   		// 0x0210 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseStrength;                                  		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRadius;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x021C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x0220 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

	void FireImpulse ( struct FVector Origin );
};

//UClass* URB_RadialImpulseComponent::pClassPointer = NULL;

// Class Engine.RB_SkelJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

};

//UClass* URB_SkelJointSetup::pClassPointer = NULL;

// Class Engine.RB_Spring
// 0x0052 (0x00A8 - 0x0056)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                       		// 0x0058 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	struct FName                                       BoneName1;                                        		// 0x005C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrimitiveComponent*                         Component2;                                       		// 0x0064 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	struct FName                                       BoneName2;                                        		// 0x0068 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x0074 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FPointer                                    SpringData;                                       		// 0x0078 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeSinceActivation;                              		// 0x007C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MinBodyMass;                                      		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpringSaturateDist;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMaxForce;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForceMassRatio;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x0090 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampSaturateVel;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampMaxForce;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

	void Clear ( );
	void SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 );
};

//UClass* URB_Spring::pClassPointer = NULL;

// Class Engine.RB_StayUprightSetup
// 0x0000 (0x010C - 0x010C)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

};

//UClass* URB_StayUprightSetup::pClassPointer = NULL;

// Class Engine.RB_Thruster
// 0x0008 (0x0218 - 0x0210)
class ARB_Thruster : public AActor
{
public:
	unsigned long                                      bThrustEnabled : 1;                               		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ThrustStrength;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

//UClass* ARB_Thruster::pClassPointer = NULL;

// Class Engine.SVehicle
// 0x0110 (0x07D0 - 0x06C0)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                           		// 0x06C0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	TArray< class USVehicleWheel* >                    Wheels;                                           		// 0x06C4 (0x000C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FVector                                     COMOffset;                                        		// 0x06D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x06DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStayUpright : 1;                                 		// 0x06E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x06E8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x06E8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsInverted : 1;                                  		// 0x06E8 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x06E8 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x06E8 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanFlip : 1;                                     		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFlipRight : 1;                                   		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x06E8 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              StayUprightRollResistAngle;                       		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x06FC (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x0700 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              HeavySuspensionShiftPercent;                      		// 0x0704 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0708 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MaxAngularVelocity;                               		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOffGround;                                    		// 0x0710 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UprightLiftStrength;                              		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTorqueStrength;                            		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTime;                                      		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightStartTime;                                 		// 0x0720 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             EngineSound;                                      		// 0x0724 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UAudioComponent*                             SquealSound;                                      		// 0x0728 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class USoundCue*                                   CollisionSound;                                   		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnterVehicleSound;                                		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionIntervalSecs;                            		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SquealThreshold;                                  		// 0x073C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealLatThreshold;                               		// 0x0740 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LatAngleVolumeMult;                               		// 0x0744 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStartOffsetSecs;                            		// 0x0748 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStopOffsetSecs;                             		// 0x074C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCollisionSoundTime;                           		// 0x0750 (0x0004) [0x0000000000000000]              
	float                                              OutputBrake;                                      		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              OutputGas;                                        		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              OutputSteering;                                   		// 0x075C (0x0004) [0x0000000000000000]              
	float                                              OutputRise;                                       		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              ForwardVel;                                       		// 0x0764 (0x0004) [0x0000000000000000]              
	int                                                NumPoweredWheels;                                 		// 0x0768 (0x0004) [0x0000000000000000]              
	struct FVector                                     BaseOffset;                                       		// 0x076C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CamDist;                                          		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DriverViewPitch;                                  		// 0x077C (0x0004) [0x0000000000000000]              
	int                                                DriverViewYaw;                                    		// 0x0780 (0x0004) [0x0000000000000000]              
	struct FVehicleState                               VState;                                           		// 0x0784 (0x0044) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x07C8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              RadialImpulseScaling;                             		// 0x07CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

	void SetAllWheelParticleSystem ( class UParticleSystem* NewSystem );
	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	float HermiteEval ( float Slip );
	void DisplayWheelsDebug ( class AHUD* HUD, float YL );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	void eventSuspensionHeavyShift ( float Delta );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void DrivingStatusChanged ( );
	void VehiclePlayExitSound ( );
	void VehiclePlayEnterSound ( );
	void StopEngineSoundTimed ( );
	void StopEngineSound ( );
	void StartEngineSoundTimed ( );
	void StartEngineSound ( );
	bool HasWheelsOnGround ( );
	bool TryToDrive ( class APawn* P );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void StopVehicleSounds ( );
	void TurnOff ( );
	void eventDestroyed ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void SetWheelCollision ( int WheelNum, unsigned long bCollision );
};

//UClass* ASVehicle::pClassPointer = NULL;

// Class Engine.SVehicleSimBase
// 0x003A (0x0090 - 0x0056)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              AutoDriveSteer;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

};

//UClass* USVehicleSimBase::pClassPointer = NULL;

// Class Engine.SVehicleSimCar
// 0x0034 (0x00C4 - 0x0090)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x0094 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteerSpeed;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsDriving : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ActualSteering;                                   		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              TimeSinceThrottle;                                		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

};

//UClass* USVehicleSimCar::pClassPointer = NULL;

// Class Engine.SVehicleSimTank
// 0x0030 (0x00F4 - 0x00C4)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              RightTrackVel;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              LeftTrackTorque;                                  		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              RightTrackTorque;                                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              MaxEngineTorque;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

};

//UClass* USVehicleSimTank::pClassPointer = NULL;

// Class Engine.SVehicleWheel
// 0x00CC (0x0114 - 0x0048)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                            		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotorTorque;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakeTorque;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisTorque;                                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPoweredWheel : 1;                                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHoverWheel : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollidesPawns : 1;                               		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsSquealing : 1;                                 		// 0x0058 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x0058 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              SteerFactor;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlWheel*                           WheelControl;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoneOffset;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Side;                                             		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactor;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WheelPosition;                                    		// 0x00A8 (0x000C) [0x0000000000000000]              
	float                                              SpinVel;                                          		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              LongSlipRatio;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              LatSlipAngle;                                     		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FVector                                     ContactNormal;                                    		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LongDirection;                                    		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FVector                                     LatDirection;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              ContactForce;                                     		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              LongImpulse;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              LatImpulse;                                       		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              DesiredSuspensionPosition;                        		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              SuspensionPosition;                               		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              CurrentRotation;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FPointer                                    WheelShape;                                       		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                WheelMaterialIndex;                               		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      WheelPSCClass;                                    		// 0x0104 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x0108 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FName                                       SlipParticleParamName;                            		// 0x010C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1919 ];

		return pClassPointer;
	};

};

//UClass* USVehicleWheel::pClassPointer = NULL;

// Class Engine.ForceFieldShape
// 0x0000 (0x003C - 0x003C)
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1921 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Dimension );
	void eventFillBySphere ( float Radius );
};

//UClass* UForceFieldShape::pClassPointer = NULL;

// Class Engine.ForceFieldShapeBox
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x003C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1923 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	struct FVector eventGetRadii ( );
};

//UClass* UForceFieldShapeBox::pClassPointer = NULL;

// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x003C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1925 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
	float eventGetHeight ( );
};

//UClass* UForceFieldShapeCapsule::pClassPointer = NULL;

// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x003C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1927 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
};

//UClass* UForceFieldShapeSphere::pClassPointer = NULL;

// Class Engine.NxForceField
// 0x003C (0x024C - 0x0210)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                   		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0214 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x021C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ForceField;                                       		// 0x0220 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0224 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0230 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x023C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    U2NRotation;                                      		// 0x0248 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1929 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* ANxForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceField
// 0x002C (0x0278 - 0x024C)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1931 ];

		return pClassPointer;
	};

};

//UClass* ANxCylindricalForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x027C - 0x0278)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0278 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1933 ];

		return pClassPointer;
	};

};

//UClass* ANxCylindricalForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x02FC - 0x024C)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UActorComponent*                             DrawComponent;                                    		// 0x0250 (0x0004) [0x0000000000001008]              ( CPF_ExportObject | CPF_Native )
	float                                              RoughExtentX;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0270 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x02F8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1935 ];

		return pClassPointer;
	};

};

//UClass* ANxForceFieldGeneric::pClassPointer = NULL;

// Class Engine.NxForceFieldRadial
// 0x001C (0x0268 - 0x024C)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UActorComponent*                             DrawComponent;                                    		// 0x0250 (0x0004) [0x0000000000001008]              ( CPF_ExportObject | CPF_Native )
	float                                              ForceStrength;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0260 (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FPointer                                    Kernel;                                           		// 0x0264 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1937 ];

		return pClassPointer;
	};

};

//UClass* ANxForceFieldRadial::pClassPointer = NULL;

// Class Engine.NxForceFieldTornado
// 0x0038 (0x0284 - 0x024C)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UActorComponent*                             DrawComponent;                                    		// 0x0250 (0x0004) [0x0000000000001008]              ( CPF_ExportObject | CPF_Native )
	float                                              RadialStrength;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0280 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1939 ];

		return pClassPointer;
	};

};

//UClass* ANxForceFieldTornado::pClassPointer = NULL;

// Class Engine.NxGenericForceField
// 0x009C (0x02E8 - 0x024C)
class ANxGenericForceField : public ANxForceField
{
public:
	unsigned char                                      Coordinates;                                      		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0250 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x025C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x0268 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0274 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0298 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x02D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x02E4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1941 ];

		return pClassPointer;
	};

};

//UClass* ANxGenericForceField::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x02F8 - 0x02E8)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x02E8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FVector                                     BoxExtent;                                        		// 0x02EC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1943 ];

		return pClassPointer;
	};

};

//UClass* ANxGenericForceFieldBox::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x0324 - 0x0258)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0260 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Coordinates;                                      		// 0x0261 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0270 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x02F8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x02FC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0308 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0314 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    LinearKernel;                                     		// 0x0320 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1945 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

//UClass* ANxGenericForceFieldBrush::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x02F4 - 0x02E8)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02E8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              CapsuleHeight;                                    		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1947 ];

		return pClassPointer;
	};

};

//UClass* ANxGenericForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxRadialForceField
// 0x0014 (0x0260 - 0x024C)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x024C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              ForceStrength;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0258 (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FPointer                                    LinearKernel;                                     		// 0x025C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1949 ];

		return pClassPointer;
	};

};

//UClass* ANxRadialForceField::pClassPointer = NULL;

// Class Engine.NxRadialCustomForceField
// 0x0008 (0x0268 - 0x0260)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                             		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0264 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1951 ];

		return pClassPointer;
	};

};

//UClass* ANxRadialCustomForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x027C - 0x024C)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0278 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1953 ];

		return pClassPointer;
	};

};

//UClass* ANxTornadoAngularForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x0280 - 0x027C)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x027C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1955 ];

		return pClassPointer;
	};

};

//UClass* ANxTornadoAngularForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxTornadoForceField
// 0x002C (0x0278 - 0x024C)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1957 ];

		return pClassPointer;
	};

};

//UClass* ANxTornadoForceField::pClassPointer = NULL;

// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x027C - 0x0278)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0278 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1959 ];

		return pClassPointer;
	};

};

//UClass* ANxTornadoForceFieldCapsule::pClassPointer = NULL;

// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x0240 - 0x0210)
class ARB_CylindricalForceActor : public AActor
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x0210 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	float                                              RadialStrength;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0238 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x0238 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x0238 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x0238 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1961 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* ARB_CylindricalForceActor::pClassPointer = NULL;

// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x025C - 0x0258)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1963 ];

		return pClassPointer;
	};

};

//UClass* ARB_ForceFieldExcludeVolume::pClassPointer = NULL;

// Class Engine.RB_RadialForceActor
// 0x0020 (0x0230 - 0x0210)
class ARB_RadialForceActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              ForceStrength;                                    		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwirlStrength;                                    		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinTorque;                                       		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0224 (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      RadialForceMode;                                  		// 0x0225 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0228 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x0228 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x0228 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x0228 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x0228 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1965 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* ARB_RadialForceActor::pClassPointer = NULL;

// Class Engine.Prefab
// 0x0024 (0x0060 - 0x003C)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                    		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           PrefabArchetypes;                                 		// 0x0040 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           RemovedArchetypes;                                		// 0x004C (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  PrefabPreview;                                    		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1967 ];

		return pClassPointer;
	};

};

//UClass* UPrefab::pClassPointer = NULL;

// Class Engine.PrefabInstance
// 0x00BC (0x02CC - 0x0210)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                   		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TemplateVersion;                                  		// 0x0214 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0218 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_PackageVersion;                                		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            PI_Bytes;                                         		// 0x0260 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           PI_CompleteObjects;                               		// 0x026C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           PI_ReferencedObjects;                             		// 0x0278 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           PI_SavedNames;                                    		// 0x0284 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0290 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1969 ];

		return pClassPointer;
	};

};

//UClass* APrefabInstance::pClassPointer = NULL;

// Class Engine.SequenceObject
// 0x0050 (0x008C - 0x003C)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                               		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USequence*                                   ParentSequence;                                   		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ObjPosX;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                ObjPosY;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjName;                                          		// 0x004C (0x000C) [0x0000000000000000]              
	struct FString                                     ObjCategory;                                      		// 0x0058 (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           ObjRemoveInProject;                               		// 0x0064 (0x000C) [0x0000000000000000]              
	struct FColor                                      ObjColor;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjComment;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeletable : 1;                                   		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawFirst : 1;                                   		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDrawLast : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressAutoComment : 1;                         		// 0x0080 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                DrawWidth;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1971 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsPastingIntoLevelSequenceAllowed ( );
	bool eventIsValidLevelSequenceObject ( );
	class AWorldInfo* GetWorldInfo ( );
	void ScriptLog ( struct FString LogText, unsigned long bWarning );
};

//UClass* USequenceObject::pClassPointer = NULL;

// Class Engine.SequenceVariable
// 0x0008 (0x0094 - 0x008C)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                          		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1973 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USequenceVariable::pClassPointer = NULL;

// Class Engine.InterpData
// 0x003C (0x00D0 - 0x0094)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              PathBuildTime;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	TArray< class UInterpGroup* >                      InterpGroups;                                     		// 0x009C (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x00A8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpFilter* >                     InterpFilters;                                    		// 0x00AC (0x000C) [0x0000000000000000]              
	class UInterpFilter*                               SelectedFilter;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< class UInterpFilter* >                     DefaultFilters;                                   		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              EdSectionStart;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              EdSectionEnd;                                     		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1975 ];

		return pClassPointer;
	};

};

//UClass* UInterpData::pClassPointer = NULL;

// Class Engine.SequenceOp
// 0x0044 (0x00D0 - 0x008C)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x008C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FSeqOpInputLink >                   InputLinks;                                       		// 0x0090 (0x000C) [0x0000000000000000]              
	TArray< struct FSeqOpOutputLink >                  OutputLinks;                                      		// 0x009C (0x000C) [0x0000000000000000]              
	TArray< struct FSeqVarLink >                       VariableLinks;                                    		// 0x00A8 (0x000C) [0x0000000000000000]              
	TArray< struct FSeqEventLink >                     EventLinks;                                       		// 0x00B4 (0x000C) [0x0000000000000000]              
	int                                                PlayerIndex;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      GamepadID;                                        		// 0x00C4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActivateCount;                                    		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1977 ];

		return pClassPointer;
	};

	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

//UClass* USequenceOp::pClassPointer = NULL;

// Class Engine.Sequence
// 0x0050 (0x0120 - 0x00D0)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                          		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequenceObject* >                   SequenceObjects;                                  		// 0x00D4 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< class USequenceOp* >                       ActiveSequenceOps;                                		// 0x00E0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequence* >                         NestedSequences;                                  		// 0x00EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class USequenceEvent* >                    UnregisteredEvents;                               		// 0x00F8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FActivateOp >                       DelayedActivatedOps;                              		// 0x0104 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                DefaultViewX;                                     		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                DefaultViewY;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              DefaultViewZoom;                                  		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1979 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bInEnabled );
	void Reset ( );
	void FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects );
};

//UClass* USequence::pClassPointer = NULL;

// Class Engine.PrefabSequence
// 0x0004 (0x0124 - 0x0120)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1981 ];

		return pClassPointer;
	};

	class APrefabInstance* GetOwnerPrefab ( );
	void SetOwnerPrefab ( class APrefabInstance* InOwner );
};

//UClass* UPrefabSequence::pClassPointer = NULL;

// Class Engine.PrefabSequenceContainer
// 0x0000 (0x0120 - 0x0120)
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1983 ];

		return pClassPointer;
	};

};

//UClass* UPrefabSequenceContainer::pClassPointer = NULL;

// Class Engine.SequenceAction
// 0x0018 (0x00E8 - 0x00D0)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                      		// 0x00D0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCallHandler : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UObject* >                           Targets;                                          		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1985 ];

		return pClassPointer;
	};

};

//UClass* USequenceAction::pClassPointer = NULL;

// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1987 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_ActivateRemoteEvent::pClassPointer = NULL;

// Class Engine.SeqAct_Latent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray< class AActor* >                            LatentActors;                                     		// 0x00E8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bAborted : 1;                                     		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1989 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor );
};

//UClass* USeqAct_Latent::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactory
// 0x0044 (0x013C - 0x00F8)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UActorFactory*                               Factory;                                          		// 0x00FC (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      PointSelection;                                   		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SpawnLocations;                                   		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SpawnOrientations;                                		// 0x011C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnCount;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDelay;                                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSpawnIdx;                                     		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              RemainingDelay;                                   		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1991 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_ActorFactory::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x013C - 0x013C)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1993 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ActorFactoryEx::pClassPointer = NULL;

// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1995 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_SetSequenceVariable::pClassPointer = NULL;

// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1997 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_AddFloat::pClassPointer = NULL;

// Class Engine.SeqAct_AddInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1999 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_AddInt::pClassPointer = NULL;

// Class Engine.SeqAct_AIMoveToActor
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2001 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_AIMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  ApplyNode;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2003 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ApplySoundNode::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2005 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_AttachToEvent::pClassPointer = NULL;

// Class Engine.SeqAct_CameraFade
// 0x0024 (0x010C - 0x00E8)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FadeAlpha;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistFade : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              FadeTimeRemaining;                                		// 0x00FC (0x0004) [0x0000000000000000]              
	TArray< class ACamera* >                           CachedCameras;                                    		// 0x0100 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2007 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_CameraFade::pClassPointer = NULL;

// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x011C - 0x00E8)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAdjustCamera : 1;                                		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectHead : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bToggleGodMode : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUsedTimer : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	struct FVector2D                                   InterpSpeedRange;                                 		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   InFocusFOV;                                       		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FocusBoneName;                                    		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TextDisplay;                                      		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalTime;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2009 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_CameraLookAt::pClassPointer = NULL;

// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              FloatResult;                                      		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2011 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_CastToFloat::pClassPointer = NULL;

// Class Engine.SeqAct_CastToInt
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Value;                                            		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2013 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_CastToInt::pClassPointer = NULL;

// Class Engine.SeqAct_CauseDamage
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2015 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_CauseDamage::pClassPointer = NULL;

// Class Engine.SeqAct_CauseDamageRadial
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_CauseDamageRadial : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDamageFalloff : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2017 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_CauseDamageRadial::pClassPointer = NULL;

// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00ED - 0x00E8)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned char                                      CollisionType;                                    		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2019 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_ChangeCollision::pClassPointer = NULL;

// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2021 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_CommitMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x00E8 (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           Commands;                                         		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2023 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void VersionUpdated ( int OldVersion, int NewVersion );
};

//UClass* USeqAct_ConsoleCommand::pClassPointer = NULL;

// Class Engine.SeqAct_CrowdSpawner
// 0x01D4 (0x02CC - 0x00F8)
class USeqAct_CrowdSpawner : public USeqAct_Latent
{
public:
	unsigned long                                      bSpawningActive : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConformToBSP : 1;                                		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConformToWorld : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLineSpawner : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSpawnAtEdge : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseOnlyCrowdPaths : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bFlockScaleUniform : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDrawDebugPathInfo : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDrawDebugHitBox : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDrawDebugMoveTarget : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bEnableCrowdLightEnvironment : 1;                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              ConformTraceDist;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConformTraceInterval;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CollisionBoxScaling;                              		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACrowdAttractor* >                   AssignedMoveTargets;                              		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            SpawnLocs;                                        		// 0x011C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACrowdAttractor* >                   AssignedActionTargets;                            		// 0x0128 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpawnRate;                                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnNum;                                         		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Remainder;                                        		// 0x0140 (0x0004) [0x0000000000000000]              
	class UClass*                                      AgentClass;                                       		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              AwareRadius;                                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AwareUpdateInterval;                              		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvoidOtherStrength;                               		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvoidOtherRadius;                                 		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MatchVelStrength;                                 		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToPathStrength;                                   		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowPathStrength;                               		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PathDistance;                                     		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToAttractorStrength;                              		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinVelDamping;                                    		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxVelDamping;                                    		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ActionDuration;                                   		// 0x0174 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ActionInterval;                                   		// 0x0190 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TargetActionInterval;                             		// 0x01AC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ActionAnimNames;                                  		// 0x01C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             TargetActionAnimNames;                            		// 0x01D4 (0x000C) [0x0000000000000000]              
	TArray< struct FCrowdTargetActionInfo >            TargetActions;                                    		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxEffectsPerSecond;                              		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemaingEffectsThisFrame;                          		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SpawnAnimName;                                    		// 0x01F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             DeathAnimNames;                                   		// 0x01FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActionBlendTime;                                  		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReActionDelay;                                    		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotateToTargetSpeed;                              		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBlendStart;                                  		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBlendEnd;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimVelRate;                                      		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedBlendChangeSpeed;                         		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MoveSyncGroupName;                                		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               FlockMesh;                                        		// 0x0230 (0x0004) [0x0000000000000000]              
	TArray< class USkeletalMesh* >                     FlockMeshes;                                      		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                RandomMaterials;                                  		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlockMeshMinScale3D;                              		// 0x024C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlockMeshMaxScale3D;                              		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          FlockAnimSets;                                    		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WalkAnimName;                                     		// 0x0270 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             WalkAnimNames;                                    		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RunAnimName;                                      		// 0x0284 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             RunAnimNames;                                     		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   FlockAnimTree;                                    		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Health;                                           		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosiveDeathEffect;                             		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveDeathEffectScale;                        		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACrowdAgent* >                       SpawnedList;                                      		// 0x02A8 (0x000C) [0x0000000000000000]              
	struct FLightingChannelContainer                   FlockLighting;                                    		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCrowdAttachmentList >              Attachments;                                      		// 0x02BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ACrowdReplicationActor*                      RepActor;                                         		// 0x02C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2025 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class ACrowdAgent* eventSpawnAgent ( class AActor* SpawnLoc );
	void CreateAttachments ( class ACrowdAgent* Agent );
	void UpdateSpawning ( float DeltaSeconds );
	void KillAgents ( );
	void CacheSpawnerVars ( );
};

//UClass* USeqAct_CrowdSpawner::pClassPointer = NULL;

// Class Engine.SeqAct_Delay
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              DefaultDuration;                                  		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Duration;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x0104 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2027 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Delay::pClassPointer = NULL;

// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentIdx;                                       		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchDelay;                                      		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextLinkTime;                                     		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2029 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_DelaySwitch::pClassPointer = NULL;

// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2031 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_DivideFloat::pClassPointer = NULL;

// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2033 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_DivideInt::pClassPointer = NULL;

// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2035 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_FinishSequence::pClassPointer = NULL;

// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2037 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ForceGarbageCollection::pClassPointer = NULL;

// Class Engine.SeqAct_ForceMaterialMipsResident
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_ForceMaterialMipsResident : public USeqAct_Latent
{
public:
	float                                              ForceDuration;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                ForceMaterials;                                   		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< class UTexture2D* >                        ModifiedTextures;                                 		// 0x010C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2039 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ForceMaterialMipsResident::pClassPointer = NULL;

// Class Engine.SeqAct_Gate
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AutoCloseCount;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2041 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Gate::pClassPointer = NULL;

// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2043 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_GetDistance::pClassPointer = NULL;

// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2045 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_GetProperty::pClassPointer = NULL;

// Class Engine.SeqAct_GetVelocity
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              Velocity;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2047 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_GetVelocity::pClassPointer = NULL;

// Class Engine.SeqAct_Interp
// 0x00B8 (0x01B0 - 0x00F8)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00F8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0134 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorVisibilities
	float                                              PlayRate;                                         		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              ForceStartPosition;                               		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x017C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x017C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSoundGroupVolModified : 1;                       		// 0x017C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCinematicSoundModeEnabled : 1;                   		// 0x017C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEndPaused : 1;                                   		// 0x017C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bEndPausedEvent : 1;                              		// 0x017C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x017C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x017C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x017C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseForInstancePlay : 1;                          		// 0x017C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x017C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x017C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bReversePlayback : 1;                             		// 0x017C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x017C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bForceStartPos : 1;                               		// 0x017C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x017C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x017C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bIsSkippable : 1;                                 		// 0x017C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bIsCinematicMode : 1;                             		// 0x017C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bPendingEnd : 1;                                  		// 0x017C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bCasterSamePlayer : 1;                            		// 0x017C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bUsePlayerPawnForCasterPawn : 1;                  		// 0x017C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bNeedMapLoadComplete : 1;                         		// 0x017C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	TArray< class ACoverLink* >                        LinkedCover;                                      		// 0x0180 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UInterpData*                                 InterpData;                                       		// 0x018C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpGroupInst* >                  GroupInst;                                        		// 0x0190 (0x000C) [0x0000000000000000]              
	class UClass*                                      ReplicatedActorClass;                             		// 0x019C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x01A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PreferredSplitScreenNum;                          		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NeedLoadCompleteMapName;                          		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2049 ];

		return pClassPointer;
	};

	void Reset ( );
	void AddPlayerToDirectorTracks ( class APlayerController* PC );
	void Stop ( );
	void SetPosition ( float NewPosition, unsigned long bJump );
};

//UClass* USeqAct_Interp::pClassPointer = NULL;

// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bObjectFound : 1;                                 		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2051 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_IsInObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2053 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_LevelStreamingBase::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LevelName;                                        		// 0x0100 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2055 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_LevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelName;                                        		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0104 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2057 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_LevelVisibility::pClassPointer = NULL;

// Class Engine.SeqAct_Log
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TargetDuration;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetOffset;                                     		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2059 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Log::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2061 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ModifyObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray< struct FLevelStreamingNameCombo >          Levels;                                           		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2063 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_MultiLevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2065 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_MultiplyFloat::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2067 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_MultiplyInt::pClassPointer = NULL;

// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x0130 - 0x00E8)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             EventNames;                                       		// 0x00F0 (0x000C) [0x0000000000000000]              
	float                                              EventTime;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     EventLocation;                                    		// 0x0100 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventDirection;                                   		// 0x010C (0x000C) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x0118 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0124 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2069 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_ParticleEventGenerator::pClassPointer = NULL;

// Class Engine.SeqAct_PlayCameraAnim
// 0x001C (0x0114 - 0x00F8)
class USeqAct_PlayCameraAnim : public USeqAct_Latent
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomStartTime : 1;                             		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x00FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTimeRemaining;                                		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2071 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_PlayCameraAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlayFaceFXAnim
// 0x001C (0x0104 - 0x00E8)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXAnimName;                                   		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2073 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlayMusicTrack
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x00E8 (0x0018) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2075 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_PlayMusicTrack::pClassPointer = NULL;

// Class Engine.SeqAct_PlaySound
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDelay;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundDuration;                                    		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x0114 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bLoop : 1;                                        		// 0x0114 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2077 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_PlaySound::pClassPointer = NULL;

// Class Engine.SeqAct_Possess
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2079 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_Possess::pClassPointer = NULL;

// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InitiallyLoadedSecondaryLevelNames;               		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsHighPriority : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2081 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_PrepareMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_Switch
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IncrementAmount;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< int >                                      Indices;                                          		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2083 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Switch::pClassPointer = NULL;

// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x010C - 0x0100)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray< int >                                      AutoDisabledIndices;                              		// 0x0100 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2085 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_RandomSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray< struct FSwitchRange >                      Ranges;                                           		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2087 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_RangeSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2089 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetBlockRigidBody::pClassPointer = NULL;

// Class Engine.SeqAct_SetBool
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2091 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetBool::pClassPointer = NULL;

// Class Engine.SeqAct_SetCameraTarget
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                     		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x00EC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2093 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_SetCameraTarget::pClassPointer = NULL;

// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0150 - 0x00F8)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              OldFalloffExponent;                               		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              OldBlurKernelSize;                                		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              OldMaxNearBlurAmount;                             		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              OldMaxFarBlurAmount;                              		// 0x0134 (0x0004) [0x0000000000000000]              
	struct FColor                                      OldModulateBlurColor;                             		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              OldFocusInnerRadius;                              		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              OldFocusDistance;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFocusPosition;                                 		// 0x0144 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2095 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetDOFParams::pClassPointer = NULL;

// Class Engine.SeqAct_SetFloat
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              Value;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2097 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_SetFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SetInt
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                Value;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2099 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_SetInt::pClassPointer = NULL;

// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2101 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetMaterial::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2103 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetMatInstScalarParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    NewTexture;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2105 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetMatInstTexParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x0104 - 0x00E8)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                VectorValue;                                      		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2107 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetMatInstVectorParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              OldMotionBlurAmount;                              		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2109 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetMotionBlurParams::pClassPointer = NULL;

// Class Engine.SeqAct_SetObject
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Value;                                            		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2111 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_SetObject::pClassPointer = NULL;

// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00E9 - 0x00E8)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2113 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetPhysics::pClassPointer = NULL;

// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2115 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetRigidBodyIgnoreVehicles::pClassPointer = NULL;

// Class Engine.SeqAct_SetString
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x00E8 (0x000C) [0x0000000000000000]              
	struct FString                                     Value;                                            		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2117 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_SetString::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2119 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SubtractFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2121 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SubtractInt::pClassPointer = NULL;

// Class Engine.SeqAct_Timer
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                   		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Time;                                             		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2123 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Timer::pClassPointer = NULL;

// Class Engine.SeqAct_Toggle
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_Toggle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2125 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_Toggle::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleDynamicChannel
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleDynamicChannel : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2127 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ToggleDynamicChannel::pClassPointer = NULL;

// Class Engine.SeqAct_Trace
// 0x0030 (0x0118 - 0x00E8)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     HitObject;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2129 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_Trace::pClassPointer = NULL;

// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray< struct FName >                             LevelNames;                                       		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2131 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_WaitForLevelsVisible::pClassPointer = NULL;

// Class Engine.SequenceCondition
// 0x0000 (0x00D0 - 0x00D0)
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2133 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USequenceCondition::pClassPointer = NULL;

// Class Engine.SeqCond_CompareBool
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareBool : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2135 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_CompareBool::pClassPointer = NULL;

// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2137 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_CompareFloat::pClassPointer = NULL;

// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2139 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_CompareInt::pClassPointer = NULL;

// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2141 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_CompareObject::pClassPointer = NULL;

// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2143 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_GetServerType::pClassPointer = NULL;

// Class Engine.SeqCond_Increment
// 0x000C (0x00DC - 0x00D0)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueA;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2145 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_Increment::pClassPointer = NULL;

// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00DC - 0x00D0)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueA;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2147 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_IncrementFloat::pClassPointer = NULL;

// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2149 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_IsInCombat::pClassPointer = NULL;

// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00D4 - 0x00D0)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2151 ];

		return pClassPointer;
	};

	bool eventCheckLogins ( );
};

//UClass* USeqCond_IsLoggedIn::pClassPointer = NULL;

// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2153 ];

		return pClassPointer;
	};

};

//UClass* USeqCond_IsSameTeam::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2155 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

//UClass* USeqCond_SwitchBase::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00DC - 0x00D0)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchClassInfo >                  ClassArray;                                       		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2157 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

//UClass* USeqCond_SwitchClass::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchName
// 0x000C (0x00DC - 0x00D0)
class USeqCond_SwitchName : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchNameCase >                   SupportedValues;                                  		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2159 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

//UClass* USeqCond_SwitchName::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchObject
// 0x0010 (0x00E0 - 0x00D0)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchObjectCase >                 SupportedValues;                                  		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MetaClass;                                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2161 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

//UClass* USeqCond_SwitchObject::pClassPointer = NULL;

// Class Engine.SequenceEvent
// 0x003C (0x010C - 0x00D0)
class USequenceEvent : public USequenceOp
{
public:
	TArray< class USequenceEvent* >                    DuplicateEvts;                                    		// 0x00D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Originator;                                       		// 0x00DC (0x0004) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              ActivationTime;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                TriggerCount;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                MaxTriggerCount;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRegistered : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x00F4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxWidth;                                         		// 0x00FC (0x0004) [0x0000000000000000]              
	TArray< struct FQueuedActivationInfo >             QueuedActivations;                                		// 0x0100 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2163 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

//UClass* USequenceEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x0110 - 0x010C)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2165 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_AISeeEnemy::pClassPointer = NULL;

// Class Engine.SeqEvent_Console
// 0x0014 (0x0120 - 0x010C)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                 		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EventDesc;                                        		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2167 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_Console::pClassPointer = NULL;

// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x010C - 0x010C)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2169 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_ConstraintBroken::pClassPointer = NULL;

// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x010C - 0x010C)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2171 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_Destroyed::pClassPointer = NULL;

// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x010C - 0x010C)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2173 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_GetInventory::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x010C - 0x010C)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2175 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_LevelBeginning::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x010C - 0x010C)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2177 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_LevelLoaded::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x010C - 0x010C)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2179 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_LevelStartup::pClassPointer = NULL;

// Class Engine.SeqEvent_Mover
// 0x0004 (0x0110 - 0x010C)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2181 ];

		return pClassPointer;
	};

	void NotifyFinishedOpen ( );
	void NotifyDetached ( class AActor* Other );
	void NotifyAttached ( class AActor* Other );
	void NotifyEncroachingOn ( class AActor* Hit );
	void eventRegisterEvent ( );
};

//UClass* USeqEvent_Mover::pClassPointer = NULL;

// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x0140 - 0x010C)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	unsigned char                                      EventType;                                        		// 0x010C (0x0001) [0x0000000000000000]              
	struct FVector                                     EventPosition;                                    		// 0x0110 (0x000C) [0x0000000000000000]              
	float                                              EventEmitterTime;                                 		// 0x011C (0x0004) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x0120 (0x000C) [0x0000000000000000]              
	float                                              EventParticleTime;                                		// 0x012C (0x0004) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0130 (0x000C) [0x0000000000000000]              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2183 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqEvent_ParticleEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x0110 - 0x010C)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2185 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_ProjectileLanded::pClassPointer = NULL;

// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x0118 - 0x010C)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2187 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_RemoteEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x0110 - 0x010C)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2189 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_RigidBodyCollision::pClassPointer = NULL;

// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x010C - 0x010C)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2191 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_SeeDeath::pClassPointer = NULL;

// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x0118 - 0x010C)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2193 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_SequenceActivated::pClassPointer = NULL;

// Class Engine.SeqEvent_TakeDamage
// 0x0024 (0x0130 - 0x010C)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            IgnoreDamageTypes;                                		// 0x0120 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentDamage;                                    		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2195 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Reset ( );
	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount );
	bool IsValidDamageType ( class UClass* inDamageType );
};

//UClass* USeqEvent_TakeDamage::pClassPointer = NULL;

// Class Engine.SeqEvent_Touch
// 0x0028 (0x0134 - 0x010C)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x0118 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceOverlapping : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigator : 1;                               		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            TouchedList;                                      		// 0x0128 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2197 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
};

//UClass* USeqEvent_Touch::pClassPointer = NULL;

// Class Engine.SeqEvent_Used
// 0x0030 (0x013C - 0x010C)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InteractText;                                     		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  InteractIcon;                                     		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2199 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_Used::pClassPointer = NULL;

// Class Engine.SequenceFrame
// 0x0020 (0x00AC - 0x008C)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawBox : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTileFill : 1;                                    		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FillTexture;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   FillMaterial;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2201 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USequenceFrame::pClassPointer = NULL;

// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00AC - 0x00AC)
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2203 ];

		return pClassPointer;
	};

};

//UClass* USequenceFrameWrapped::pClassPointer = NULL;

// Class Engine.SeqVar_Bool
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2205 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Bool::pClassPointer = NULL;

// Class Engine.SeqVar_Byte
// 0x0001 (0x0095 - 0x0094)
class USeqVar_Byte : public USequenceVariable
{
public:
	unsigned char                                      ByteValue;                                        		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2207 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Byte::pClassPointer = NULL;

// Class Engine.SeqVar_External
// 0x0010 (0x00A4 - 0x0094)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FString                                     VariableLabel;                                    		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2209 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_External::pClassPointer = NULL;

// Class Engine.SeqVar_Float
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2211 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Float::pClassPointer = NULL;

// Class Engine.SeqVar_Object
// 0x0054 (0x00E8 - 0x0094)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ObjClass;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ObjValueName;                                     		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ObjClassName;                                     		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ObjLocation;                                      		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ObjRotation;                                      		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObjDrawScale;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ObjDrawScale3D;                                   		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ObjLocRotOveride : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            SupportedClasses;                                 		// 0x00DC (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2213 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

//UClass* USeqVar_Object::pClassPointer = NULL;

// Class Engine.SeqVar_Group
// 0x0018 (0x0100 - 0x00E8)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                        		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCachedList : 1;                                  		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UObject* >                           Actors;                                           		// 0x00F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2215 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Group::pClassPointer = NULL;

// Class Engine.SeqVar_Int
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2217 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Int::pClassPointer = NULL;

// Class Engine.SeqVar_Name
// 0x0008 (0x009C - 0x0094)
class USeqVar_Name : public USequenceVariable
{
public:
	struct FName                                       NameValue;                                        		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2219 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Name::pClassPointer = NULL;

// Class Engine.SeqVar_Named
// 0x0010 (0x00A4 - 0x0094)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FName                                       FindVarName;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2221 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Named::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectList
// 0x000C (0x00F4 - 0x00E8)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray< class UObject* >                           ObjList;                                          		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2223 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

//UClass* USeqVar_ObjectList::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x0108 - 0x00E8)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	TArray< class UObject* >                           ContainedObjects;                                 		// 0x00EC (0x000C) [0x0000000000000000]              
	TArray< class UClass* >                            ExcludeClassList;                                 		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCollidingOnly : 1;                               		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2225 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_ObjectVolume::pClassPointer = NULL;

// Class Engine.SeqVar_Player
// 0x0014 (0x00FC - 0x00E8)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray< class UObject* >                           Players;                                          		// 0x00E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAllPlayers : 1;                                  		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                PlayerIdx;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2227 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
};

//UClass* USeqVar_Player::pClassPointer = NULL;

// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x00A0 - 0x0098)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2229 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_RandomFloat::pClassPointer = NULL;

// Class Engine.SeqVar_RandomInt
// 0x0008 (0x00A0 - 0x0098)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2231 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_RandomInt::pClassPointer = NULL;

// Class Engine.SeqVar_String
// 0x000C (0x00A0 - 0x0094)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2233 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_String::pClassPointer = NULL;

// Class Engine.SeqVar_Union
// 0x0034 (0x00C8 - 0x0094)
class USeqVar_Union : public USequenceVariable
{
public:
	TArray< class UClass* >                            SupportedVariableClasses;                         		// 0x0094 (0x000C) [0x0000000000000000]              
	int                                                IntValue;                                         		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ByteValue;                                        		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoolValue;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatValue;                                       		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StringValue;                                      		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     ObjectValue;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUniqueNetId                                NetIdValue;                                       		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2235 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Union::pClassPointer = NULL;

// Class Engine.SeqVar_Vector
// 0x000C (0x00A0 - 0x0094)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                        		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2237 ];

		return pClassPointer;
	};

};

//UClass* USeqVar_Vector::pClassPointer = NULL;

// Class Engine.AmbientSound
// 0x0009 (0x0219 - 0x0210)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                   		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned char                                      TrackType;                                        		// 0x0218 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2239 ];

		return pClassPointer;
	};

};

//UClass* AAmbientSound::pClassPointer = NULL;

// Class Engine.AmbientSoundMovable
// 0x0000 (0x0219 - 0x0219)
class AAmbientSoundMovable : public AAmbientSound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2241 ];

		return pClassPointer;
	};

};

//UClass* AAmbientSoundMovable::pClassPointer = NULL;

// Class Engine.AmbientSoundSimple
// 0x0017 (0x0230 - 0x0219)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCueInstance;                                 		// 0x0220 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class USoundNodeAmbient*                           SoundNodeInstance;                                		// 0x0224 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	struct FName                                       SoundGroup;                                       		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2243 ];

		return pClassPointer;
	};

};

//UClass* AAmbientSoundSimple::pClassPointer = NULL;

// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x0230 - 0x0230)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2245 ];

		return pClassPointer;
	};

};

//UClass* AAmbientSoundNonLoop::pClassPointer = NULL;

// Class Engine.AudioTrack
// 0x000C (0x0048 - 0x003C)
class UAudioTrack : public UObject
{
public:
	class UAudioComponent*                             AudioChannels[ 0x2 ];                             		// 0x003C (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              PreviousFadeOutTime;                              		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2247 ];

		return pClassPointer;
	};

	void OnStopVoiceTrackAC ( class UAudioComponent* AC );
};

//UClass* UAudioTrack::pClassPointer = NULL;

// Class Engine.DistributionFloatSoundParameter
// 0x0000 (0x006D - 0x006D)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2249 ];

		return pClassPointer;
	};

};

//UClass* UDistributionFloatSoundParameter::pClassPointer = NULL;

// Class Engine.SoundMode
// 0x0044 (0x0080 - 0x003C)
class USoundMode : public UObject
{
public:
	unsigned long                                      bApplyEQ : 1;                                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableLowPassFilter : 1;                         		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FAudioEQEffect                              EQSettings;                                       		// 0x0040 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSoundClassAdjuster >               SoundClassEffects;                                		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialDelay;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2251 ];

		return pClassPointer;
	};

};

//UClass* USoundMode::pClassPointer = NULL;

// Class Engine.SoundNode
// 0x0010 (0x004C - 0x003C)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                   		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundNode* >                        ChildNodes;                                       		// 0x0040 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2253 ];

		return pClassPointer;
	};

};

//UClass* USoundNode::pClassPointer = NULL;

// Class Engine.SoundNodeAmbient
// 0x00B4 (0x0100 - 0x004C)
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned char                                      DistanceModel;                                    		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x0050 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x006C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x0088 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x00A4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttenuate : 1;                                   		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USoundNodeWave*                              Wave;                                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x00C8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x00E4 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2255 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeAmbient::pClassPointer = NULL;

// Class Engine.SoundNodeAmbientNonLoop
// 0x0028 (0x0128 - 0x0100)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	struct FRawDistributionFloat                       DelayTime;                                        		// 0x0100 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAmbientSoundSlot >                 SoundSlots;                                       		// 0x011C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2257 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeAmbientNonLoop::pClassPointer = NULL;

// Class Engine.SoundNodeAttenuation
// 0x007C (0x00C8 - 0x004C)
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                   		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      DistanceModel;                                    		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceType;                                     		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x0054 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x0070 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              dBAttenuationAtMax;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x0090 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x00AC (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2259 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeAttenuation::pClassPointer = NULL;

// Class Engine.SoundNodeConcatenator
// 0x000C (0x0058 - 0x004C)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x004C (0x000C) [0x0000000000000049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2261 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeConcatenator::pClassPointer = NULL;

// Class Engine.SoundNodeDelay
// 0x001C (0x0068 - 0x004C)
class USoundNodeDelay : public USoundNode
{
public:
	struct FRawDistributionFloat                       DelayDuration;                                    		// 0x004C (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2263 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeDelay::pClassPointer = NULL;

// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x0058 - 0x004C)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray< struct FDistanceDatum >                    CrossFadeInput;                                   		// 0x004C (0x000C) [0x0000000000000049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2265 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeDistanceCrossFade::pClassPointer = NULL;

// Class Engine.SoundNodeLooping
// 0x0020 (0x006C - 0x004C)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       LoopCount;                                        		// 0x0050 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2267 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeLooping::pClassPointer = NULL;

// Class Engine.SoundNodeMature
// 0x0000 (0x004C - 0x004C)
class USoundNodeMature : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2269 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeMature::pClassPointer = NULL;

// Class Engine.SoundNodeMixer
// 0x000C (0x0058 - 0x004C)
class USoundNodeMixer : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x004C (0x000C) [0x0000000000000049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2271 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeMixer::pClassPointer = NULL;

// Class Engine.SoundNodeModulator
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulator : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x004C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0068 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2273 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeModulator::pClassPointer = NULL;

// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x004C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0068 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2275 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeModulatorContinuous::pClassPointer = NULL;

// Class Engine.SoundNodeOscillator
// 0x0074 (0x00C0 - 0x004C)
class USoundNodeOscillator : public USoundNode
{
public:
	struct FRawDistributionFloat                       Amplitude;                                        		// 0x004C (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Frequency;                                        		// 0x0068 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Offset;                                           		// 0x0084 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Center;                                           		// 0x00A0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModulatePitch : 1;                               		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bModulateVolume : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2277 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeOscillator::pClassPointer = NULL;

// Class Engine.SoundNodeRandom
// 0x0020 (0x006C - 0x004C)
class USoundNodeRandom : public USoundNode
{
public:
	TArray< float >                                    Weights;                                          		// 0x004C (0x000C) [0x0000000000000041]              ( CPF_Edit | CPF_EditConstArray )
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< unsigned long >                            HasBeenUsed;                                      		// 0x005C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumRandomUsed;                                    		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2279 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeRandom::pClassPointer = NULL;

// Class Engine.SoundNodeWave
// 0x0158 (0x01A4 - 0x004C)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceRealtimeDecompression : 1;                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDynamicResource : 1;                             		// 0x0050 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOneTimeUse : 1;                                  		// 0x0050 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseTTS : 1;                                      		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMature : 1;                                      		// 0x0050 (0x0004) [0x0000000000008003] [0x00000010] ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bAlwaysLocalise : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bManualWordWrap : 1;                              		// 0x0050 (0x0004) [0x0000000000008003] [0x00000040] ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bUseDatasheet : 1;                                		// 0x0050 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bPrecached : 1;                                   		// 0x0050 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bForceAsyncDecompress : 1;                        		// 0x0050 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned char                                      TTSSpeaker;                                       		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DecompressionType;                                		// 0x0055 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     SpokenText;                                       		// 0x0058 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	float                                              Volume;                                           		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Pitch;                                            		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Duration;                                         		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumChannels;                                      		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SampleRate;                                       		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SampleDataSize;                                   		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ChannelOffsets;                                   		// 0x007C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ChannelSizes;                                     		// 0x0088 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x0094 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RawPCMData;                                       		// 0x00C4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VorbisDecompressor;                               		// 0x00C8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            PCMData;                                          		// 0x00CC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x00D8 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x0108 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x0138 (0x0030) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ResourceID;                                       		// 0x0168 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResourceSize;                                     		// 0x016C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ResourceData;                                     		// 0x0170 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSubtitleCue >                      Subtitles;                                        		// 0x0174 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     Comment;                                          		// 0x0180 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	float                                              NotUsedTimeCounter;                               		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NotUsedTickCounter;                               		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeBufferSizeScale;                          		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLocalizedSubtitle >                LocalizedSubtitles;                               		// 0x0198 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2281 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeWave::pClassPointer = NULL;

// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0054 - 0x004C)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2283 ];

		return pClassPointer;
	};

};

//UClass* USoundNodeWaveParam::pClassPointer = NULL;

// Class Engine.Terrain
// 0x0140 (0x0350 - 0x0210)
class ATerrain : public AInfo
{
public:
	TArray< struct FTerrainHeight >                    Heights;                                          		// 0x0210 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainInfoData >                  InfoData;                                         		// 0x021C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FColor >                            VertexColors;                                     		// 0x0228 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainLayer >                     Layers;                                           		// 0x0234 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FTerrainLayer >                     ExpandLayers;                                     		// 0x0240 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NormalMapLayer;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomLightPower;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ExpandNormalMapLayer;                             		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainDecoLayer >                 DecoLayers;                                       		// 0x0258 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAlphaMap >                         AlphaMaps;                                        		// 0x0264 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainFoliageLayer >              FoliageLayers;                                    		// 0x0270 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  WeightNoiseTexture;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainExcludedPatchData >         SectorsToRemove;                                  		// 0x0280 (0x000C) [0x0000000000000000]              
	TArray< class UTerrainComponent* >                 TerrainComponents;                                		// 0x028C (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	int                                                NumSectionsX;                                     		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSectionsY;                                     		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSize;                                      		// 0x02A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct ATerrain_FTerrainWeightedMaterial > WeightedMaterials;                                		// 0x02A4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainWeightMapTexture* >          WeightedTextureMaps;                              		// 0x02B0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct ATerrain_FTerrainWeightedMaterial > ExpandWeightedMaterials;                          		// 0x02BC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            CachedDisplacements;                              		// 0x02C8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MaxCollisionDisplacement;                         		// 0x02D4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaxTesselationLevel;                              		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinTessellationLevel;                             		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TesselationDistanceScale;                         		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TessellationCheckCount;                           		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              TessellationCheckDistance;                        		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationCheckBorder;                          		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                CollisionTesselationLevel;                        		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[ 0x2 ];                    		// 0x02F4 (0x0018) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumVerticesX;                                     		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumVerticesY;                                     		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumPatchesX;                                      		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumPatchesY;                                      		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxComponentSize;                                 		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompCullDistance;                                 		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaticLightingResolution;                         		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x0328 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x0328 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x0328 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableSpecular : 1;                              		// 0x0328 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0328 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0328 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetDynamicShadowDistance : 1;                    		// 0x0328 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x0328 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x0328 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0328 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMorphingEnabled : 1;                             		// 0x0328 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bMorphingGradientsEnabled : 1;                    		// 0x0328 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bLocked : 1;                                      		// 0x0328 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x0328 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bShowingCollision : 1;                            		// 0x0328 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bShowWireframe : 1;                               		// 0x0328 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	float                                              DynamicShadowDistance;                            		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0330 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0338 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                EditorTessellationLevel;                          		// 0x033C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FSelectedTerrainVertex >            SelectedVertices;                                 		// 0x0340 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2285 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void CalcLayerBounds ( );
};

//UClass* ATerrain::pClassPointer = NULL;

// Class Engine.TerrainComponent
// 0x0098 (0x02A8 - 0x0210)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0210 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x021C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    TerrainObject;                                    		// 0x0228 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SectionBaseX;                                     		// 0x022C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeX;                                     		// 0x0234 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeY;                                     		// 0x0238 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeX;                                 		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeY;                                 		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    LightMap;                                         		// 0x0244 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      PatchBounds;                                      		// 0x0248 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      PatchBatches;                                     		// 0x0254 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      BatchMaterials;                                   		// 0x0260 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FullBatch;                                        		// 0x026C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ExpandFullBatch;                                  		// 0x0270 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchOffsets;                                		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    WorkingOffsets;                                   		// 0x0278 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchTriangles;                              		// 0x027C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchCachedTessellationValues;                    		// 0x0280 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    TesselationLevels;                                		// 0x0284 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              BVTree;                                           		// 0x0288 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           CollisionVertices;                                		// 0x0294 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    RBHeightfield;                                    		// 0x02A0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDisplayCollisionLevel : 1;                       		// 0x02A4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2287 ];

		return pClassPointer;
	};

};

//UClass* UTerrainComponent::pClassPointer = NULL;

// Class Engine.TerrainLayerSetup
// 0x000C (0x0048 - 0x003C)
class UTerrainLayerSetup : public UObject
{
public:
	TArray< struct FTerrainFilteredMaterial >          Materials;                                        		// 0x003C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2289 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void SetMaterials ( TArray< struct FTerrainFilteredMaterial > NewMaterials );
};

//UClass* UTerrainLayerSetup::pClassPointer = NULL;

// Class Engine.TerrainMaterial
// 0x008C (0x00C8 - 0x003C)
class UTerrainMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                   		// 0x0040 (0x0040) [0x0000000000000000]              
	unsigned char                                      MappingType;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DisplacementMap;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplacementScale;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseWNTexture : 1;                                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              WNTex1_Ucoord;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WNTex1_Vcoord;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WNTex2_UVMultiply;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WNTex2_UVRotator;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WN_Range;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WN_Contrast;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainFoliageMesh >               FoliageMeshes;                                    		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2291 ];

		return pClassPointer;
	};

};

//UClass* UTerrainMaterial::pClassPointer = NULL;

// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x0124 - 0x0114)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                    		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          WeightedMaterials;                                		// 0x0118 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2293 ];

		return pClassPointer;
	};

};

//UClass* UTerrainWeightMapTexture::pClassPointer = NULL;

// Class Engine.Interaction
// 0x0030 (0x006C - 0x003C)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2295 ];

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void Initialized ( );
	void OnInitialize ( );
	void Init ( );
	void eventTick ( float DeltaTime );
	bool OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode );
	bool OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

//UClass* UInteraction::pClassPointer = NULL;

// Class Engine.Console
// 0x0128 (0x0194 - 0x006C)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x006C (0x0004) [0x0000000000000000]              
	class UUIScene*                                    LargeConsoleScene;                                		// 0x0070 (0x0004) [0x0000000000000000]              
	class UUIScene*                                    MiniConsoleScene;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	class UUILabel*                                    ConsoleBufferText;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class UConsoleEntry*                               MiniConsoleInput;                                 		// 0x007C (0x0004) [0x0000000000000000]              
	class UConsoleEntry*                               LargeConsoleInput;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x0084 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FName                                       ConsoleKey;                                       		// 0x008C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       TypeKey;                                          		// 0x0094 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxScrollbackSize;                                		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           Scrollback;                                       		// 0x00A0 (0x000C) [0x0000000000000000]              
	int                                                SBHead;                                           		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                SBPos;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                HistoryTop;                                       		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryBot;                                       		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryCur;                                       		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     History[ 0x10 ];                                  		// 0x00C0 (0x00C0) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     TypedStr;                                         		// 0x0180 (0x000C) [0x0000000000000000]              
	int                                                TypedStrPos;                                      		// 0x018C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x0190 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x0190 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2297 ];

		return pClassPointer;
	};

	void AppendInputText ( struct FString Text );
	bool ProcessControlKey ( struct FName Key, unsigned char Event );
	void FlushPlayerInput ( );
	bool IsUIMiniConsoleOpen ( );
	bool IsUIConsoleOpen ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void eventOutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void ClearOutput ( );
	void ConsoleCommand ( struct FString Command );
	void PurgeCommandFromHistory ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void Initialized ( );
	void eventDestroyed ( );
};

//UClass* UConsole::pClassPointer = NULL;

// Class Engine.DataStoreClient
// 0x003C (0x0078 - 0x003C)
class UDataStoreClient : public UUIRoot
{
public:
	TArray< struct FString >                           GlobalDataStoreClasses;                           		// 0x003C (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< class UUIDataStore* >                      GlobalDataStores;                                 		// 0x0048 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           PlayerDataStoreClassNames;                        		// 0x0054 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< class UClass* >                            PlayerDataStoreClasses;                           		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPlayerDataStoreGroup >             PlayerDataStores;                                 		// 0x006C (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2299 ];

		return pClassPointer;
	};

	void DebugDumpDataStoreInfo ( unsigned long bVerbose );
	void eventNotifyGameSessionEnded ( );
	class UClass* FindDataStoreClass ( class UClass* RequiredMetaClass );
	void GetPlayerDataStoreClasses ( TArray< class UClass* >* out_DataStoreClasses );
	int FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner );
	void GetAvailableDataStores ( class UUIScene* CurrentScene, TArray< class UUIDataStore* >* out_DataStores );
	bool UnregisterDataStore ( class UUIDataStore* DataStore );
	bool RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner );
	class UUIDataStore* CreateDataStore ( class UClass* DataStoreClass );
	class UUIDataStore* FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner );
};

//UClass* UDataStoreClient::pClassPointer = NULL;

// Class Engine.Input
// 0x00BC (0x0128 - 0x006C)
class UInput : public UInteraction
{
public:
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x006C (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             PressedKeys;                                      		// 0x0078 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       BeforePressedKey;                                 		// 0x0084 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FName                                       BeforeRepeatKey;                                  		// 0x008C (0x0008) [0x0000000000001000]              ( CPF_Native )
	float                                              BeforePressedDeltaTime;                           		// 0x0094 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      bDoubleClickedKey : 1;                            		// 0x0098 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )
	unsigned long                                      bForceReleaseGlideDrop : 1;                       		// 0x0098 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	struct FName                                       DoubleClickedKey;                                 		// 0x009C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      CurrentEvent;                                     		// 0x00A4 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDelta;                                     		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDeltaTime;                                 		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00B0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray< struct FPointer >                          AxisArray;                                        		// 0x00EC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       NewBindMoveForwardKey1;                           		// 0x00F8 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       NewBindMoveForwardKey2;                           		// 0x0100 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       NewBindMoveForwardKey3;                           		// 0x0108 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       NewBindMoveBackwordKey1;                          		// 0x0110 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       NewBindMoveBackwordKey2;                          		// 0x0118 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       NewBindMoveBackwordKey3;                          		// 0x0120 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2301 ];

		return pClassPointer;
	};

	void eventSetEnableDisableBindCmd ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command, unsigned long bEnable );
	void eventSetUnBindCommand ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt );
	void eventSetBindCommand ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command );
	void eventSetUnBindByCmd ( struct FString Command );
	void SetUnBindByCommand ( struct FString InCommand );
	void SetUnBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt );
	void SetEnableDisableBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command, unsigned long bEnable );
	void SetBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command );
	struct FString GetBind ( struct FName Key, unsigned long bGamepad );
	void ResetInput ( );
};

//UClass* UInput::pClassPointer = NULL;

// Class Engine.PlayerInput
// 0x00A0 (0x01C8 - 0x0128)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                		// 0x0128 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bInvertMouse : 1;                                 		// 0x0128 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bInvertTurn : 1;                                  		// 0x0128 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bWasForward : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWasBack : 1;                                     		// 0x0128 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasLeft : 1;                                     		// 0x0128 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWasRight : 1;                                    		// 0x0128 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEdgeForward : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bEdgeBack : 1;                                    		// 0x0128 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEdgeLeft : 1;                                    		// 0x0128 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bEdgeRight : 1;                                   		// 0x0128 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x0128 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x0128 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCreateEventForMoveInput : 1;                     		// 0x0128 (0x0004) [0x0000000000003000] [0x00002000] ( CPF_Native | CPF_Transient )
	struct FName                                       LastAxisKeyName;                                  		// 0x012C (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              DoubleClickTimer;                                 		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              DoubleClickTime;                                  		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseSensitivityX;                                		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseSensitivityY;                                		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadSensitivityX;                              		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadSensitivityY;                              		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TPSMouseFarMoveSize;                              		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              aTurnOffset;                                      		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              aBaseX;                                           		// 0x0154 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseY;                                           		// 0x0158 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseZ;                                           		// 0x015C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseX;                                          		// 0x0160 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x0164 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aForward;                                         		// 0x0168 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aTurn;                                            		// 0x016C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aStrafe;                                          		// 0x0170 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aUp;                                              		// 0x0174 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLookUp;                                          		// 0x0178 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelX;                                       		// 0x017C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelY;                                       		// 0x0180 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelZ;                                       		// 0x0184 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3Gyro;                                         		// 0x0188 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              RawJoyUp;                                         		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyRight;                                      		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookRight;                                  		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookUp;                                     		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveForwardSpeed;                                 		// 0x019C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MoveStrafeSpeed;                                  		// 0x01A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookRightScale;                                   		// 0x01A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookUpScale;                                      		// 0x01A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      bStrafe;                                          		// 0x01AC (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bXAxis;                                           		// 0x01AD (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bYAxis;                                           		// 0x01AE (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              ZeroTime[ 0x2 ];                                  		// 0x01B0 (0x0008) [0x0000000000000000]              
	float                                              SmoothedMouse[ 0x2 ];                             		// 0x01B8 (0x0008) [0x0000000000000000]              
	int                                                MouseSamples;                                     		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              MouseSamplingTotal;                               		// 0x01C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2303 ];

		return pClassPointer;
	};

	void ShowMouseCursor ( unsigned long bShow );
	float SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void ClearSmoothing ( );
	void SmartJump ( );
	void Jump ( );
	void ProcessInputMatching ( float DeltaTime );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void CatchDoubleClickInput ( );
	void eventPlayerInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void DrawHUD ( class AHUD* H );
	void SetSensitivity ( float SensitivityX, float SensitivityY );
	bool InvertTurn ( );
	bool InvertMouse ( );
};

//UClass* UPlayerInput::pClassPointer = NULL;

// Class Engine.PlayerManagerInteraction
// 0x0000 (0x006C - 0x006C)
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2305 ];

		return pClassPointer;
	};

};

//UClass* UPlayerManagerInteraction::pClassPointer = NULL;

// Class Engine.UIActionEditBase
// 0x001C (0x0058 - 0x003C)
class UUIActionEditBase : public UObject
{
public:
	struct FString                                     Alias;                                            		// 0x003C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UUIActionEditBase*                           Parent;                                           		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UUIActionEditBase* >                 Children;                                         		// 0x004C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2307 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditBase::pClassPointer = NULL;

// Class Engine.UIActionEditNode
// 0x0024 (0x007C - 0x0058)
class UUIActionEditNode : public UUIActionEditBase
{
public:
	float                                              StartTime;                                        		// 0x0058 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FUIActionTimeLinkInfo                       TimeLinkInfo;                                     		// 0x005C (0x001C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnableTimeLink : 1;                              		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2309 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode
// 0x0000 (0x007C - 0x007C)
class UUIActionEditAnimNode : public UUIActionEditNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2311 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Alpha
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditAnimNode_Alpha : public UUIActionEditAnimNode
{
public:
	struct FUIAnimAlphaKeyProperty                     AlphaKeyProperty;                                 		// 0x007C (0x002C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2313 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Alpha::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Counting
// 0x0038 (0x00B4 - 0x007C)
class UUIActionEditAnimNode_Counting : public UUIActionEditAnimNode
{
public:
	struct FUIAnimCountingKeyProperty                  CountingKeyProperty;                              		// 0x007C (0x0034) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseClientData_StartEndValue : 1;                 		// 0x00B0 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2315 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Counting::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Dummy
// 0x0014 (0x0090 - 0x007C)
class UUIActionEditAnimNode_Dummy : public UUIActionEditAnimNode
{
public:
	struct FUIAnimDummyKeyProperty                     DummyKeyProperty;                                 		// 0x007C (0x0014) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2317 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Dummy::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Pos
// 0x0088 (0x0104 - 0x007C)
class UUIActionEditAnimNode_Pos : public UUIActionEditAnimNode
{
public:
	struct FUIAnimPosKeyProperty                       PosKeyProperty;                                   		// 0x007C (0x0088) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2319 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Pos::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Progress
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditAnimNode_Progress : public UUIActionEditAnimNode
{
public:
	struct FUIAnimProgressKeyProperty                  ProgressKeyProperty;                              		// 0x007C (0x0028) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseClientData_StartEndValue : 1;                 		// 0x00A4 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2321 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Progress::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Scale
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditAnimNode_Scale : public UUIActionEditAnimNode
{
public:
	struct FUIAnimScaleKeyProperty                     ScaleKeyProperty;                                 		// 0x007C (0x002C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2323 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Scale::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_Scroll
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditAnimNode_Scroll : public UUIActionEditAnimNode
{
public:
	struct FUIAnimScrollKeyProperty                    ScrollKeyProperty;                                		// 0x007C (0x002C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2325 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_Scroll::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_TexCoords
// 0x003C (0x00B8 - 0x007C)
class UUIActionEditAnimNode_TexCoords : public UUIActionEditAnimNode
{
public:
	struct FUIAnimTexCoordsKeyProperty                 TexCoordsKeyProperty;                             		// 0x007C (0x003C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2327 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_TexCoords::pClassPointer = NULL;

// Class Engine.UIActionEditAnimNode_TextFade
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditAnimNode_TextFade : public UUIActionEditAnimNode
{
public:
	struct FUIAnimTextFadeKeyProperty                  TextFadeKeyProperty;                              		// 0x007C (0x002C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2329 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimNode_TextFade::pClassPointer = NULL;

// Class Engine.UIActionEditSequence
// 0x0010 (0x0068 - 0x0058)
class UUIActionEditSequence : public UUIActionEditBase
{
public:
	struct FUIActionTargetLinkInfo                     TargetLinkInfo;                                   		// 0x0058 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnableTargetLink : 1;                            		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2331 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditSequence::pClassPointer = NULL;

// Class Engine.UIActionEditAnimSequence
// 0x0014 (0x007C - 0x0068)
class UUIActionEditAnimSequence : public UUIActionEditSequence
{
public:
	struct FUIAnimObjectSubProperty                    AnimObjSubProperty;                               		// 0x0068 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                LoopCount;                                        		// 0x0078 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2333 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditAnimSequence::pClassPointer = NULL;

// Class Engine.UIActionEditManager
// 0x000C (0x0064 - 0x0058)
class UUIActionEditManager : public UUIActionEditBase
{
public:
	struct FUIActionProperty                           ActionProperty;                                   		// 0x0058 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bActionChanged : 1;                               		// 0x005C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UUIActionEditObject*                         NonTargetActionEditObject;                        		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2335 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditManager::pClassPointer = NULL;

// Class Engine.UIActionEditNode_Image
// 0x0034 (0x00B0 - 0x007C)
class UUIActionEditNode_Image : public UUIActionEditNode
{
public:
	struct FUIActionImageCommandProperty               ImageProperty;                                    		// 0x007C (0x0034) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2337 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_Image::pClassPointer = NULL;

// Class Engine.UIActionEditNode_InstRenderObj
// 0x0020 (0x009C - 0x007C)
class UUIActionEditNode_InstRenderObj : public UUIActionEditNode
{
public:
	float                                              DurationTime;                                     		// 0x007C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FUIInstRenderObjProperty                    InstRenderObjProperty;                            		// 0x0080 (0x001C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2339 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_InstRenderObj::pClassPointer = NULL;

// Class Engine.UIActionEditNode_Particle
// 0x002C (0x00A8 - 0x007C)
class UUIActionEditNode_Particle : public UUIActionEditNode
{
public:
	float                                              DurationTime;                                     		// 0x007C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FUIActionParticleCommandProperty            ParticleProperty;                                 		// 0x0080 (0x0028) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2341 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_Particle::pClassPointer = NULL;

// Class Engine.UIActionEditNode_ResizeLink
// 0x0028 (0x00A4 - 0x007C)
class UUIActionEditNode_ResizeLink : public UUIActionEditNode
{
public:
	struct FUIActionResizeLinkCommandProperty          ResizeLinkProperty;                               		// 0x007C (0x0028) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2343 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_ResizeLink::pClassPointer = NULL;

// Class Engine.UIActionEditNode_Sound
// 0x0014 (0x0090 - 0x007C)
class UUIActionEditNode_Sound : public UUIActionEditNode
{
public:
	float                                              DurationTime;                                     		// 0x007C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FUIActionSoundCommandProperty               SoundProperty;                                    		// 0x0080 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2345 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_Sound::pClassPointer = NULL;

// Class Engine.UIActionEditNode_Text
// 0x0014 (0x0090 - 0x007C)
class UUIActionEditNode_Text : public UUIActionEditNode
{
public:
	struct FUIActionTextCommandProperty                TextProperty;                                     		// 0x007C (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseClientData_TextValue : 1;                     		// 0x008C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2347 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_Text::pClassPointer = NULL;

// Class Engine.UIActionEditNode_Visible
// 0x0004 (0x0080 - 0x007C)
class UUIActionEditNode_Visible : public UUIActionEditNode
{
public:
	struct FUIActionVisibleCommandProperty             VisibleProperty;                                  		// 0x007C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2349 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditNode_Visible::pClassPointer = NULL;

// Class Engine.UIActionEditObject
// 0x0048 (0x00A0 - 0x0058)
class UUIActionEditObject : public UUIActionEditBase
{
public:
	struct FUITargetProperty                           ActionTargetProperty;                             		// 0x0058 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bApplyCustomTarget : 1;                           		// 0x009C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2351 ];

		return pClassPointer;
	};

};

//UClass* UUIActionEditObject::pClassPointer = NULL;

// Class Engine.UIActionGroupEditManager
// 0x0010 (0x004C - 0x003C)
class UUIActionGroupEditManager : public UObject
{
public:
	TArray< struct FUIActionEditManagerEntry >         ActionEditManagerEntryArray;                      		// 0x003C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bActionChanged : 1;                               		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsGroup : 1;                                     		// 0x0048 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2353 ];

		return pClassPointer;
	};

};

//UClass* UUIActionGroupEditManager::pClassPointer = NULL;

// Class Engine.UIComponent
// 0x0000 (0x0048 - 0x0048)
class UUIComponent : public UComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2355 ];

		return pClassPointer;
	};

};

//UClass* UUIComponent::pClassPointer = NULL;

// Class Engine.UIComp_Event
// 0x0020 (0x0068 - 0x0048)
class UUIComp_Event : public UUIComponent
{
public:
	TArray< struct FDefaultEventSpecification >        DefaultEvents;                                    		// 0x0048 (0x000C) [0x0000000000000000]              
	class UUISequence*                                 EventContainer;                                   		// 0x0054 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UUIEvent_ProcessInput*                       InputProcessor;                                   		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DisabledEventAliases;                             		// 0x005C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2357 ];

		return pClassPointer;
	};

	void UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
	void RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
};

//UClass* UUIComp_Event::pClassPointer = NULL;

// Class Engine.UIEventContainer
// 0x0000 (0x003C - 0x003C)
class UUIEventContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2359 ];

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* > ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
};

//UClass* UUIEventContainer::pClassPointer = NULL;

// Class Engine.UIInputConfiguration
// 0x0018 (0x0054 - 0x003C)
class UUIInputConfiguration : public UUIRoot
{
public:
	TArray< struct FUIInputAliasClassMap >             WidgetInputAliases;                               		// 0x003C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FUIAxisEmulationDefinition >        AxisEmulationDefinitions;                         		// 0x0048 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2361 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	void LoadInputAliasClasses ( );
};

//UClass* UUIInputConfiguration::pClassPointer = NULL;

// Class Engine.UIInteraction
// 0x0144 (0x01B0 - 0x006C)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;            		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UClass*                                      SceneClientClass;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGameUISceneClient*                          SceneClient;                                      		// 0x007C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     UISkinName;                                       		// 0x0080 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             UISoundCueNames;                                  		// 0x008C (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             SupportedDoubleClickKeys;                         		// 0x0098 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x00A4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIInputConfiguration*                       UIInputConfig;                                    		// 0x00A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00AC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.WidgetInputAliasLookupTable
	unsigned long                                      bProcessInput : 1;                                		// 0x00E8 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisableToolTips : 1;                             		// 0x00E8 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusOnActive : 1;                               		// 0x00E8 (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusedStateRules : 1;                           		// 0x00E8 (0x0004) [0x0000000000004002] [0x00000008] ( CPF_Const | CPF_Config )
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;               		// 0x00E8 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	float                                              UIJoystickDeadZone;                               		// 0x00EC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              UIAxisMultiplier;                                 		// 0x00F0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AxisRepeatDelay;                                  		// 0x00F4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MouseButtonRepeatDelay;                           		// 0x00F8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DoubleClickTriggerSeconds;                        		// 0x00FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                DoubleClickPixelTolerance;                        		// 0x0100 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipInitialDelaySeconds;                       		// 0x0104 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipExpirationSeconds;                         		// 0x0108 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x010C (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x011C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[ 0x4 ];                        		// 0x0158 (0x0050) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    CanvasScene;                                      		// 0x01A8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ParticleScene;                                    		// 0x01AC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2363 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	unsigned char eventGetNATType ( );
	bool eventCanPlayOnline ( int ControllerId );
	int GetConnectedGamepadCount ( TArray< unsigned long > ControllerConnectionStatusOverrides );
	bool IsGamepadConnected ( int ControllerId );
	int GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	bool eventHasLinkConnection ( );
	unsigned char eventGetLoginStatus ( int ControllerId );
	class UUIScene* FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	bool CloseScene ( class UUIScene* Scene );
	bool MergeScene ( class UUIScene* SourceScene, class UUIScene* SceneTarget );
	bool OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIScene* GetTransientScene ( );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	bool PlayUISound ( struct FName SoundCueName, int PlayerIndex );
	bool IsMenuLevel ( struct FString MapName );
	class UDataStoreClient* GetDataStoreClient ( );
	int GetPlayerControllerId ( int PlayerIndex );
	int GetPlayerIndex ( int ControllerId );
	int GetPlayerCount ( );
};

//UClass* UUIInteraction::pClassPointer = NULL;

// Class Engine.UILayerBase
// 0x0000 (0x003C - 0x003C)
class UUILayerBase : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2365 ];

		return pClassPointer;
	};

};

//UClass* UUILayerBase::pClassPointer = NULL;

// Class Engine.UISceneClient
// 0x00BC (0x00F8 - 0x003C)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RenderViewport;                                   		// 0x0040 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UUISkin*                                     ActiveSkin;                                       		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FIntPoint                                   MousePosition;                                    		// 0x0048 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIObject*                                   ActiveControl;                                    		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIObject*                                   FocusControl;                                     		// 0x0054 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UMaterialInstanceConstant*                   OpacityParameter;                                 		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       OpacityParameterName;                             		// 0x0060 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                   		// 0x0070 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     InvCanvasToScreen;                                		// 0x00B0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2367 ];

		return pClassPointer;
	};

	class UUIScene* GetActiveScene ( );
	void eventInitializeSceneClient ( );
	struct FMatrix GetInverseCanvasToScreen ( class UUIObject* Widget );
	struct FMatrix GetCanvasToScreen ( class UUIObject* Widget );
	void UpdateCanvasToScreen ( );
	bool ChangeMouseCursor ( struct FName CursorName );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	bool CloseSceneAtIndex ( int SceneStackIndex, unsigned long bCloseChildScenes );
	bool CloseScene ( class UUIScene* Scene, unsigned long bCloseChildScenes );
	bool ReplaceSceneAtIndex ( int IndexOfSceneToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool ReplaceScene ( class UUIScene* SceneInstanceToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool InsertScene ( int DesiredInsertIndex, class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene, int* ActualInsertIndex );
	bool OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene );
	bool IsSceneInitialized ( class UUIScene* Scene );
	bool IsUIActive ( int Flags );
	bool ChangeActiveSkin ( class UUISkin* NewActiveSkin );
};

//UClass* UUISceneClient::pClassPointer = NULL;

// Class Engine.UIState
// 0x000C (0x0048 - 0x003C)
class UUIState : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      StateType;                                        		// 0x0040 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PlayerIndexMask;                                  		// 0x0041 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      StackPriority;                                    		// 0x0042 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIStateSequence*                            StateSequence;                                    		// 0x0044 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2369 ];

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	void eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState );
	void eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState );
	bool eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool IsActiveForPlayer ( int PlayerIndex );
	bool eventIsWidgetClassSupported ( class UClass* WidgetClass );
};

//UClass* UUIState::pClassPointer = NULL;

// Class Engine.UIState_Disabled
// 0x0000 (0x0048 - 0x0048)
class UUIState_Disabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2371 ];

		return pClassPointer;
	};

	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

//UClass* UUIState_Disabled::pClassPointer = NULL;

// Class Engine.UIState_Enabled
// 0x0000 (0x0048 - 0x0048)
class UUIState_Enabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2373 ];

		return pClassPointer;
	};

};

//UClass* UUIState_Enabled::pClassPointer = NULL;

// Class Engine.UIString
// 0x0054 (0x0090 - 0x003C)
class UUIString : public UUIRoot
{
public:
	TArray< struct FPointer >                          Nodes;                                            		// 0x003C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FUICombinedStyleData                        StringStyleData;                                  		// 0x0048 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   StringExtent;                                     		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2375 ];

		return pClassPointer;
	};

	bool ContainsMarkup ( );
	void GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	bool SetValue ( struct FString InputString, unsigned long bIgnoreMarkup );
};

//UClass* UUIString::pClassPointer = NULL;

// Class Engine.UIDataProvider
// 0x001C (0x0058 - 0x003C)
class UUIDataProvider : public UUIRoot
{
public:
	unsigned char                                      WriteAccessType;                                  		// 0x003C (0x0001) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   ProviderChangedNotifies;                          		// 0x0040 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;         		// 0x004C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2377 ];

		return pClassPointer;
	};

	int ParseTagArrayDelimiter ( struct FName* FieldName );
	bool RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate );
	bool AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates );
	void eventNotifyPropertyChanged ( struct FName PropTag );
	bool eventIsCollectionDataType ( unsigned char FieldType );
	bool eventIsProviderDisabled ( );
	struct FString eventGenerateFillerData ( struct FString DataTag );
	struct FString eventGenerateScriptMarkupString ( struct FName DataTag );
	bool eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex );
	void eventGetSupportedScriptFields ( TArray< struct FUIDataProviderField >* out_Fields );
	int ParseArrayDelimiter ( struct FString* DataTag );
	bool GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType );
	void OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};

//UClass* UUIDataProvider::pClassPointer = NULL;

// Class Engine.UIDataStore
// 0x0020 (0x0078 - 0x0058)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                              		// 0x0058 (0x0008) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   RefreshSubscriberNotifies;                        		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2379 ];

		return pClassPointer;
	};

	class UDataStoreClient* GetDataStoreClient ( );
	void OnCommit ( );
	void eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool NotifyGameSessionEnded ( );
	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};

//UClass* UUIDataStore::pClassPointer = NULL;

// Class Engine.UISkin
// 0x015C (0x01D4 - 0x0078)
class UUISkin : public UUIDataStore
{
public:
	TArray< class UUIStyle* >                          Styles;                                           		// 0x0078 (0x000C) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	TArray< struct FString >                           StyleGroups;                                      		// 0x0084 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FUISoundCue >                       SoundCues;                                        		// 0x0090 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x009C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleLookupTable
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00D8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleNameMap
	struct FLookupMap_Mirror                           StyleGroupMap;                                    		// 0x0114 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x015C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.CursorMap
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0198 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.SoundCueMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2381 ];

		return pClassPointer;
	};

	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void GetStyleGroups ( unsigned long bIncludeInheritedGroups, TArray< struct FString >* StyleGroupArray );
	int FindStyleGroupIndex ( struct FString StyleGroupName );
	struct FString GetStyleGroupAtIndex ( int Index );
	bool RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName );
	bool RemoveStyleGroupName ( struct FString StyleGroupName );
	bool AddStyleGroupName ( struct FString StyleGroupName );
	bool IsInheritedGroupName ( struct FString StyleGroupName );
	void GetSkinSoundCues ( TArray< struct FUISoundCue >* out_SoundCues );
	bool GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue );
	bool RemoveUISoundCue ( struct FName SoundCueName );
	bool AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay );
	class UUITexture* GetCursorResource ( struct FName CursorName );
	void GetAvailableStyles ( unsigned long bIncludeInheritedStyles, TArray< class UUIStyle* >* out_Styles );
};

//UClass* UUISkin::pClassPointer = NULL;

// Class Engine.UIStyle
// 0x0070 (0x00AC - 0x003C)
class UUIStyle : public UUIRoot
{
public:
	struct FSTYLE_ID                                   StyleID;                                          		// 0x003C (0x0010) [0x0000000000000000]              
	struct FName                                       StyleTag;                                         		// 0x004C (0x0008) [0x0000000000000000]              
	struct FString                                     StyleName;                                        		// 0x0054 (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     StyleGroupName;                                   		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      StyleDataClass;                                   		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0070 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIStyle.StateDataMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2383 ];

		return pClassPointer;
	};

	class UUIStyle_Data* eventGetDefaultStyle ( );
	class UUIStyle_Data* GetStyleForStateByClass ( class UClass* StateClass );
	class UUIStyle_Data* GetStyleForState ( class UUIState* StateObject );
};

//UClass* UUIStyle::pClassPointer = NULL;

// Class Engine.ConsoleEntry
// 0x001C (0x017C - 0x0160)
class UConsoleEntry : public UUIObject
{
public:
	class UUILabel*                                    ConsolePromptLabel;                               		// 0x0160 (0x0004) [0x0000000000000000]              
	class UUIImage*                                    ConsolePromptBackground;                          		// 0x0164 (0x0004) [0x0000000000000000]              
	class UUIEditBox*                                  InputBox;                                         		// 0x0168 (0x0004) [0x0000000000000000]              
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x016C (0x0004) [0x0000000000000000]              
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                CursorPosition;                                   		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRenderCursor : 1;                                		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2385 ];

		return pClassPointer;
	};

	void SetValue ( struct FString NewValue );
	void SetupDockingLinks ( );
	void eventPostInitialize ( );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
};

//UClass* UConsoleEntry::pClassPointer = NULL;

// Class Engine.GameUISceneClient
// 0x0170 (0x0268 - 0x00F8)
class UGameUISceneClient : public UUISceneClient
{
public:
	TArray< class UUIScene* >                          ActiveScenes;                                     		// 0x00F8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUITexture*                                  CurrentMouseCursor;                               		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bRenderCursor : 1;                                		// 0x0108 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x0108 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateCursorRenderStatus : 1;                    		// 0x0108 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x0108 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x0108 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bRenderDebugInfoAtTop : 1;                        		// 0x0108 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bRenderActiveControlInfo : 1;                     		// 0x0108 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bRenderFocusedControlInfo : 1;                    		// 0x0108 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bRenderTargetControlInfo : 1;                     		// 0x0108 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                    		// 0x0108 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bInteractiveMode : 1;                             		// 0x0108 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bDisplayFullPaths : 1;                            		// 0x0108 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bShowWidgetPath : 1;                              		// 0x0108 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bShowRenderBounds : 1;                            		// 0x0108 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bShowCurrentState : 1;                            		// 0x0108 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bShowMousePos : 1;                                		// 0x0108 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;         		// 0x0108 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x0108 (0x0004) [0x0000000000004002] [0x00020000] ( CPF_Const | CPF_Config )
	unsigned long                                      bSynchronizePlayers : 1;                          		// 0x0108 (0x0004) [0x0000000000004002] [0x00040000] ( CPF_Const | CPF_Config )
	unsigned long                                      bKillRestoreMenuProgression : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bFocusRenderBounds : 1;                           		// 0x0108 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	float                                              LatestDeltaTime;                                  		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FDouble                                     DoubleClickStartTime;                             		// 0x0110 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x0118 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UTexture*                                    DefaultUITexture[ 0x3 ];                          		// 0x0120 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x012C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UClass*                                      MessageBoxClass;                                  		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OverlaySceneAlphaModulation;                      		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UUIScreenObject*                             DebugTarget;                                      		// 0x0170 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UUIObject* >                         AnimSubscribers;                                  		// 0x0174 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActivateLinkId;                                   		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LinkIdIndex;                                      		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ProgressIdIndex;                                  		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ImeState;                                         		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DigitGroupMinValue;                               		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DigitGroupType;                                   		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TextLinkPadding;                                  		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTexture2D* >                        SWCursorTextureArray;                             		// 0x019C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLoadingImageInfo >                 LoadingImageInfoArray;                            		// 0x01A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01B4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.GameUISceneClient.SoundMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x01F0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.GameUISceneClient.LinkMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x022C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.GameUISceneClient.ProgressBarMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2387 ];

		return pClassPointer;
	};

	void AnimUnSubscribe ( class UUIObject* Target );
	void AnimSubscribe ( class UUIObject* Target );
	void ShowMenuProgression ( );
	void DebugShowMessage ( struct FString Message, struct FString Aliases, struct FString Title, struct FString Question );
	bool DebugMessageOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex );
	void ShowDataStores ( unsigned long bVerbose );
	void RefreshFormatting ( );
	void ShowDataStoreField ( struct FString DataStoreMarkup );
	void CloseMenu ( struct FName SceneName );
	void OpenMenu ( struct FString MenuPath, int PlayerIndex );
	void CreateMenu ( class UClass* SceneClass, int PlayerIndex );
	void ToggleDebugInput ( unsigned long bEnable );
	void ShowMenuStates ( );
	void ShowRenderBounds ( );
	void ShowDockingStacks ( );
	bool ClearUIMessageScene ( struct FName SceneTag, class ULocalPlayer* ScenePlayerOwner, unsigned long bCloseChildScenes );
	class UUIMessageBoxBase* CreateUIMessageBox ( struct FName SceneTag, class UClass* CustomMessageBoxClass, class UUIMessageBoxBase* SceneTemplate );
	void RestoreMenuProgression ( class UUIScene* BaseScene );
	void ClearMenuProgression ( );
	void SaveMenuProgression ( );
	class UUIScene* GetActiveScene ( );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyControllerChanged ( int ControllerId, unsigned long bConnected );
	void NotifyLoginStatusChanged ( int ControllerId, unsigned char Status );
	void NotifyLoginStatusChanged3 ( );
	void NotifyLoginStatusChanged2 ( );
	void NotifyLoginStatusChanged1 ( );
	void NotifyLoginStatusChanged0 ( );
	void NotifyGlobalLoginStatusChanged ( );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void eventSynchronizePlayers ( int MaxPlayersAllowed, TArray< int >* out_OrphanControllerIds, TArray< int >* out_OrphanPlayerIndexes );
	void eventInitializeSceneClient ( );
	bool eventCanShowToolTips ( );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool SetFocusControl ( class UUIObject* NewFocusControl, unsigned long bEvent );
	bool SetActiveControl ( class UUIObject* NewActiveControl );
	bool CanUnpauseInternalUI ( );
	void RequestCursorRenderUpdate ( );
	void RequestInputProcessingUpdate ( );
	int FindSceneIndexByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	int FindSceneIndex ( class UUIScene* SceneToFind );
	class UUIScene* FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIScene* GetTransientScene ( );
	unsigned char GetCurrentNetMode ( );
};

//UClass* UGameUISceneClient::pClassPointer = NULL;

// Class Engine.UIButton
// 0x000C (0x016C - 0x0160)
class UUIButton : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0160 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FName                                       ClickedCue;                                       		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2389 ];

		return pClassPointer;
	};

	void SetImage ( class USurface* NewImage );
};

//UClass* UUIButton::pClassPointer = NULL;

// Class Engine.UILabelButton
// 0x0038 (0x01A4 - 0x016C)
class UUILabelButton : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x016C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x0170 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x01A0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2391 ];

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	struct FString eventGetCaption ( );
	void SetCaption ( struct FString NewText );
};

//UClass* UUILabelButton::pClassPointer = NULL;

// Class Engine.UICalloutButton
// 0x001D (0x01C1 - 0x01A4)
class UUICalloutButton : public UUILabelButton
{
public:
	struct FString                                     DefaultMarkupStringTemplate;                      		// 0x01A4 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       CalloutDataStoreTag;                              		// 0x01B0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       InputAliasTag;                                    		// 0x01B8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      IconAlignment;                                    		// 0x01C0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2393 ];

		return pClassPointer;
	};

	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	bool VerifyDefaultMarkupString ( );
	class UUICalloutButtonPanel* GetPanelOwner ( );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	struct FString eventGenerateCompleteCaptionMarkup ( struct FName InputAlias );
	struct FString eventGetCalloutMarkupString ( struct FName AlternateInputAlias );
	struct FName eventGetCalloutDataStoreName ( );
	bool eventSetInputAlias ( struct FName NewInputAlias );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks );
	bool SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks );
	void SetInputTag ( struct FName NewInputAlias );
	class UUIDataStore_InputAlias* GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer );
};

//UClass* UUICalloutButton::pClassPointer = NULL;

// Class Engine.UIContainer
// 0x0004 (0x0164 - 0x0160)
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                    		// 0x0160 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2395 ];

		return pClassPointer;
	};

};

//UClass* UUIContainer::pClassPointer = NULL;

// Class Engine.UICalloutButtonPanel
// 0x0070 (0x01D4 - 0x0164)
class UUICalloutButtonPanel : public UUIContainer
{
public:
	class UUICalloutButton*                            ButtonTemplate;                                   		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUICalloutButton* >                  CalloutButtons;                                   		// 0x0168 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      ButtonBarOrientation;                             		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ButtonLayout;                                     		// 0x0175 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ButtonPadding[ 0x2 ];                             		// 0x0178 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0188 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICalloutButtonPanel.ButtonInputKeyMappings
	TArray< struct FName >                             CalloutButtonAliases;                             		// 0x01C4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bGeneratingInitialButtons : 1;                    		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshButtonDocking : 1;                        		// 0x01D0 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2397 ];

		return pClassPointer;
	};

	void InitializeInputProxy ( );
	void ConfigureChildButton ( class UUICalloutButton* ChildButton );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	bool eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex );
	bool eventContainsButton ( struct FName ButtonInputAlias );
	int eventFindButtonIndex ( struct FName ButtonInputAlias );
	class UUICalloutButton* eventFindButton ( struct FName ButtonInputAlias );
	bool eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility );
	bool eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton );
	bool eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias );
	bool eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption );
	bool eventRemoveAllButtons ( );
	bool eventRemoveButtonByAlias ( struct FName ButtonInputAlias );
	bool eventRemoveButton ( class UUICalloutButton* ButtonToRemove );
	int eventInsertButton ( class UUICalloutButton* NewButton );
	void RequestButtonDockingUpdate ( unsigned long bImmediately );
	int FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray );
	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	class UUICalloutButton* CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild );
	void GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, TArray< struct FName >* AvailableAliases );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventSynchronizeInputAliases ( );
	void PopulateCalloutButtonArray ( );
};

//UClass* UUICalloutButtonPanel::pClassPointer = NULL;

// Class Engine.UIComp_AutoAlignment
// 0x0002 (0x004A - 0x0048)
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	unsigned char                                      HorzAlignment;                                    		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VertAlignment;                                    		// 0x0049 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2399 ];

		return pClassPointer;
	};

};

//UClass* UUIComp_AutoAlignment::pClassPointer = NULL;

// Class Engine.UIComp_DrawComponents
// 0x0020 (0x0068 - 0x0048)
class UUIComp_DrawComponents : public UUIComponent
{
public:
	unsigned long                                      EnableGray : 1;                                   		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              EffectOpacity;                                    		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ContentsOpacity;                                  		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentId;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AlphaAnimInstId;                                  		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ShowAnimInstId;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HideAnimInstId;                                   		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GaugeAnimInstId;                                  		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2401 ];

		return pClassPointer;
	};

};

//UClass* UUIComp_DrawComponents::pClassPointer = NULL;

// Class Engine.UIComp_DrawImage
// 0x0064 (0x00CC - 0x0068)
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       StyleResolverTag;                                 		// 0x0070 (0x0008) [0x0000000000000000]              
	class UUITexture*                                  ImageRef;                                         		// 0x0078 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	struct FUIImageStyleOverride                       StyleCustomization;                               		// 0x007C (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           ImageStyle;                                       		// 0x00AC (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2403 ];

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	class USurface* GetImage ( );
	void DisableCustomScale ( );
	void DisableCustomFormatting ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void DisableCustomColor ( );
	void DisableCustomCoordinates ( );
	void SetScale ( unsigned char Orientation, float NewScale );
	void SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetColor ( struct FLinearColor NewColor );
	void SetCoordinates ( struct FTextureCoordinates NewCoordinates );
	void SetImage ( class USurface* NewImage );
	class UUIStyle_Image* GetAppliedImageStyle ( class UUIState* DesiredMenuState );
};

//UClass* UUIComp_DrawImage::pClassPointer = NULL;

// Class Engine.UIComp_DrawString
// 0x00D4 (0x013C - 0x0068)
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UUIDataStoreSubscriber*                      SubscriberOwner;                                  		// 0x006C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0070 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FName                                       StyleResolverTag;                                 		// 0x0074 (0x0008) [0x0000000000000000]              
	class UUIString*                                   ValueString;                                      		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      StringClass;                                      		// 0x0080 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FAutoSizeData                               AutoSizeParameters[ 0x2 ];                        		// 0x0084 (0x0038) [0x0000000000000001]              ( CPF_Edit )
	struct FUIRenderingSubregion                       ClampRegion[ 0x2 ];                               		// 0x00BC (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct FUITextStyleOverride                        TextStyleCustomization;                           		// 0x00EC (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           StringStyle;                                      		// 0x0118 (0x0020) [0x0000000000000000]              
	unsigned long                                      bIgnoreMarkup : 1;                                		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowBoundsAdjustment : 1;                       		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRefreshString : 1;                               		// 0x0138 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x0138 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2405 ];

		return pClassPointer;
	};

	void eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType );
	void eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable );
	bool IsAutoSizeEnabled ( unsigned char Orientation );
	void SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType );
	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	bool GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData );
	class UUIStyle_Combo* GetAppliedStringStyle ( class UUIState* DesiredMenuState );
	unsigned char GetWrapMode ( );
	void DisableCustomSpacingAdjust ( );
	void DisableCustomScale ( );
	void DisableCustomAutoScaling ( );
	void DisableCustomClipAlignment ( );
	void DisableCustomClipMode ( );
	void DisableCustomAlignment ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust );
	void SetScale ( unsigned char Orientation, float NewScale );
	void SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue );
	void SetClipAlignment ( unsigned char NewClipAlignment );
	void SetWrapMode ( unsigned char NewClipMode );
	void SetAlignment ( unsigned char Orientation, unsigned char NewAlignment );
	void SetFontSet ( class UFontSet* NewFontSet );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue );
	void SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable );
	unsigned char GetSubregionAlignment ( unsigned char Orientation );
	float GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType );
	float GetSubregionSize ( unsigned char Orientation, unsigned char OutputType );
	bool IsSubregionEnabled ( unsigned char Orientation );
	void RefreshValue ( );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	void SetValue ( struct FString NewText );
};

//UClass* UUIComp_DrawString::pClassPointer = NULL;

// Class Engine.UIEditBox
// 0x0060 (0x01C0 - 0x0160)
class UUIEditBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x0160 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0164 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_DrawStringEditbox*                   StringRenderComponent;                            		// 0x0194 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0198 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FString                                     InitialValue;                                     		// 0x019C (0x000C) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bReadOnly : 1;                                    		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPasswordMode : 1;                                		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                MaxCharacters;                                    		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSet;                                     		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnSubmitText__Delegate;                         		// 0x01B4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2407 ];

		return pClassPointer;
	};

	void IgnoreMarkup ( unsigned long bShouldIgnoreMarkup );
	void SetReadOnly ( unsigned long bShouldBeReadOnly );
	bool IsReadOnly ( );
	void eventInitialized ( );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	int CalculateCaretPositionFromCursorLocation ( int PlayerIndex );
	struct FString GetValue ( unsigned long bReturnUserText );
	void SetValue ( struct FString NewText, int PlayerIndex, unsigned long bSkipNotification );
	void SetBackgroundImage ( class USurface* NewImage );
	bool OnSubmitText ( class UUIEditBox* Sender, int PlayerIndex );
};

//UClass* UUIEditBox::pClassPointer = NULL;

// Class Engine.UIComp_DrawStringEditbox
// 0x0060 (0x019C - 0x013C)
class UUIComp_DrawStringEditbox : public UUIComp_DrawString
{
public:
	struct FString                                     UserText;                                         		// 0x013C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FUIStringCaretParameters                    StringCaret;                                      		// 0x0148 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStringSelectionRegion                    SelectionRegion;                                  		// 0x0164 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SelectionTextColor;                               		// 0x016C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                SelectionBackgroundColor;                         		// 0x017C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FPointer                                    CaretNode;                                        		// 0x018C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstCharacterPosition;                           		// 0x0190 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bRecalculateFirstCharacter : 1;                   		// 0x0194 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              CaretOffset;                                      		// 0x0198 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2409 ];

		return pClassPointer;
	};

	struct FString GetSelectedText ( );
	bool GetSelectionRange ( int* out_StartIndex, int* out_EndIndex );
	bool ClearSelection ( );
	bool SetSelectionEnd ( int EndIndex );
	bool SetSelectionStart ( int StartIndex );
	bool SetSelectionRange ( int StartIndex, int EndIndex );
	int GetUserTextLength ( );
	bool SetUserText ( struct FString NewValue );
};

//UClass* UUIComp_DrawStringEditbox::pClassPointer = NULL;

// Class Engine.UIConfigProvider
// 0x0000 (0x0058 - 0x0058)
class UUIConfigProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2411 ];

		return pClassPointer;
	};

};

//UClass* UUIConfigProvider::pClassPointer = NULL;

// Class Engine.UIConfigFileProvider
// 0x0018 (0x0070 - 0x0058)
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray< class UUIConfigSectionProvider* >          Sections;                                         		// 0x0058 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ConfigFileName;                                   		// 0x0064 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2413 ];

		return pClassPointer;
	};

};

//UClass* UUIConfigFileProvider::pClassPointer = NULL;

// Class Engine.UIConfigSectionProvider
// 0x000C (0x0064 - 0x0058)
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                      		// 0x0058 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2415 ];

		return pClassPointer;
	};

};

//UClass* UUIConfigSectionProvider::pClassPointer = NULL;

// Class Engine.UICustomSkin
// 0x003C (0x0210 - 0x01D4)
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01D4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICustomSkin.WidgetStyleMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2417 ];

		return pClassPointer;
	};

};

//UClass* UUICustomSkin::pClassPointer = NULL;

// Class Engine.UIDataStore_GameState
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2419 ];

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void OnRefreshDataFieldValue ( );
};

//UClass* UUIDataStore_GameState::pClassPointer = NULL;

// Class Engine.UIDataStore_StringBase
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2421 ];

		return pClassPointer;
	};

};

//UClass* UUIDataStore_StringBase::pClassPointer = NULL;

// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x00C0 - 0x0078)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIDataStoreInputAlias >            InputAliases;                                     		// 0x0078 (0x000C) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0084 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2423 ];

		return pClassPointer;
	};

	bool HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform );
	int FindInputAliasIndex ( struct FName DesiredAlias );
	bool GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	bool GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	struct FName GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FName GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform );
};

//UClass* UUIDataStore_InputAlias::pClassPointer = NULL;

// Class Engine.UIDataStore_Registry
// 0x0004 (0x007C - 0x0078)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                             		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2425 ];

		return pClassPointer;
	};

	class UUIDynamicFieldProvider* GetDataProvider ( );
};

//UClass* UUIDataStore_Registry::pClassPointer = NULL;

// Class Engine.UIDataStore_Remote
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2427 ];

		return pClassPointer;
	};

};

//UClass* UUIDataStore_Remote::pClassPointer = NULL;

// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00C4 - 0x0078)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIMenuInputMap >                   MenuInputMapArray;                                		// 0x0078 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x0084 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                PlayerIndex;                                      		// 0x00C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2429 ];

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
	int FindMappingWithFieldName ( struct FString FieldName, struct FString SetName );
	class ULocalPlayer* GetPlayerOwner ( );
};

//UClass* UUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class Engine.UIDataStore_Strings
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_Strings : public UUIDataStore_StringBase
{
public:
	TArray< class UUIConfigFileProvider* >             LocFileProviders;                                 		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2431 ];

		return pClassPointer;
	};

};

//UClass* UUIDataStore_Strings::pClassPointer = NULL;

// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2433 ];

		return pClassPointer;
	};

	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};

//UClass* UUIDataStoreSubscriber::pClassPointer = NULL;

// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2435 ];

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
};

//UClass* UUIDataStorePublisher::pClassPointer = NULL;

// Class Engine.UIDynamicFieldProvider
// 0x0090 (0x00E8 - 0x0058)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray< struct FUIProviderScriptFieldValue >       PersistentDataFields;                             		// 0x0058 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FUIProviderScriptFieldValue >       RuntimeDataFields;                                		// 0x0064 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FMap_Mirror                                 PersistentCollectionData;                         		// 0x0070 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 RuntimeCollectionData;                            		// 0x00AC (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2437 ];

		return pClassPointer;
	};

	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray );
	bool GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, TArray< struct FName >* out_CellTagArray );
	void SavePersistentProviderData ( );
	bool SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue );
	bool GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
	void InitializeRuntimeFields ( );
};

//UClass* UUIDynamicFieldProvider::pClassPointer = NULL;

// Class Engine.UIEditboxString
// 0x0000 (0x0090 - 0x0090)
class UUIEditboxString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2439 ];

		return pClassPointer;
	};

};

//UClass* UUIEditboxString::pClassPointer = NULL;

// Class Engine.UIImage
// 0x0038 (0x0198 - 0x0160)
class UUIImage : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x0160 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUIDataStoreBinding                         ImageDataSource;                                  		// 0x0164 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_DrawImage*                           ImageComponent;                                   		// 0x0194 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2441 ];

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetValue ( class USurface* NewImage );
};

//UClass* UUIImage::pClassPointer = NULL;

// Class Engine.UILabel
// 0x0040 (0x01A0 - 0x0160)
class UUILabel : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                   		// 0x0160 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VfTable_IUIStringRenderer;                        		// 0x0164 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0168 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0198 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class UUIComp_DrawImage*                           LabelBackground;                                  		// 0x019C (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2443 ];

		return pClassPointer;
	};

	void IgnoreMarkup ( unsigned long bShouldIgnoreMarkup );
	struct FString GetValue ( );
	void SetArrayValue ( TArray< struct FString > ValueArray );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	void SetValue ( struct FString NewText );
};

//UClass* UUILabel::pClassPointer = NULL;

// Class Engine.UIPanel
// 0x0008 (0x016C - 0x0164)
class UUIPanel : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0164 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bEnforceClipping : 1;                             		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2445 ];

		return pClassPointer;
	};

	void SetBackgroundImage ( class USurface* NewImage );
};

//UClass* UUIPanel::pClassPointer = NULL;

// Class Engine.UISafeRegionPanel
// 0x0014 (0x0178 - 0x0164)
class UUISafeRegionPanel : public UUIContainer
{
public:
	unsigned char                                      RegionType;                                       		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    RegionPercentages;                                		// 0x0168 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bForce4x3AspectRatio : 1;                         		// 0x0174 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFullRegionIn4x3 : 1;                          		// 0x0174 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPrimarySafeRegion : 1;                           		// 0x0174 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2447 ];

		return pClassPointer;
	};

};

//UClass* UUISafeRegionPanel::pClassPointer = NULL;

// Class Engine.UIScene
// 0x01E4 (0x028C - 0x00A8)
class UUIScene : public UUIScreenObject
{
public:
	struct FName                                       SceneTag;                                         		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUISceneClient*                              SceneClient;                                      		// 0x00B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ULocalPlayer*                                PlayerOwner;                                      		// 0x00B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUISkin*                                     SceneSkin;                                        		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UUISafeRegionPanel*                          PrimarySafeRegionPanel;                           		// 0x00BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FLookupMap_Mirror                           DockingStack;                                     		// 0x00C0 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UUIObject* >                         RenderStack;                                      		// 0x0108 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InputSubscriptions[ 0x4 ];                        		// 0x0114 (0x00F0) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                LastPlayerIndex;                                  		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdateDockingStack : 1;                          		// 0x0208 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateScenePositions : 1;                        		// 0x0208 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateNavigationLinks : 1;                       		// 0x0208 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdatePrimitiveUsage : 1;                        		// 0x0208 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRefreshWidgetStyles : 1;                         		// 0x0208 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bIgnorePopupOutsideInput : 1;                     		// 0x0208 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bPopupAutoVisible : 1;                            		// 0x0208 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsResolutionChanging : 1;                        		// 0x0208 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bRefreshStringFormatting : 1;                     		// 0x0208 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPerformedInitialUpdate : 1;                      		// 0x0208 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResolvingScenePositions : 1;                     		// 0x0208 (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUsesPrimitives : 1;                              		// 0x0208 (0x0004) [0x0000000000002002] [0x00000800] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSupportsNavigation : 1;                          		// 0x0208 (0x0004) [0x0000000000002002] [0x00001000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisplayCursor : 1;                               		// 0x0208 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bRenderParentScenes : 1;                          		// 0x0208 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bAlwaysRenderScene : 1;                           		// 0x0208 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPauseGameWhileActive : 1;                        		// 0x0208 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bExemptFromAutoClose : 1;                         		// 0x0208 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCloseOnLevelChange : 1;                          		// 0x0208 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bSaveSceneValuesOnClose : 1;                      		// 0x0208 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bEnableScenePostProcessing : 1;                   		// 0x0208 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bEnableSceneDepthTesting : 1;                     		// 0x0208 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bRequiresNetwork : 1;                             		// 0x0208 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bRequiresOnlineService : 1;                       		// 0x0208 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bMenuLevelRestoresScene : 1;                      		// 0x0208 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bFlushPlayerInput : 1;                            		// 0x0208 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x0208 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bIgnoreUIScale : 1;                               		// 0x0208 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	int                                                GroupId;                                          		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ChildrenObjectCount;                              		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIObject*                                   ModalWidget;                                      		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UUIObject* >                         PopupArray;                                       		// 0x0218 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIGroup >                          UIGroups;                                         		// 0x0224 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                UpdateSceneFeedbackLoopCount;                     		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SceneStackPriority;                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ScenePreview;                                     		// 0x0238 (0x0004) [0x0000000000000000]              
	unsigned char                                      SceneInputMode;                                   		// 0x023C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SceneRenderMode;                                  		// 0x023D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CurrentViewportSize;                              		// 0x0240 (0x0008) [0x0000000000000000]              
	float                                              UIRatio;                                          		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUILayerBase*                                SceneLayerRoot;                                   		// 0x024C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FScriptDelegate                             __GetSceneInputMode__Delegate;                    		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                     		// 0x025C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                   		// 0x0268 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                    		// 0x0274 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;        		// 0x0280 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2449 ];

		return pClassPointer;
	};

	void LogCurrentState ( int Indent );
	void LogRenderBounds ( int Indent );
	bool CloseScene ( class UUIScene* SceneToClose, unsigned long bSkipKismetNotify, unsigned long bSkipAnimation );
	class UUIScene* OpenScene ( class UUIScene* SceneToOpen, unsigned long bSkipAnimation, struct FScriptDelegate SceneDelegate );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyControllerStatusChanged ( int ControllerId, unsigned long bConnected );
	bool NotifyLoginStatusChanged ( int ControllerId, unsigned char NewStatus );
	void NotifyGameSessionEnded ( );
	void NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless );
	void SceneCreated ( class UUIScene* CreatedScene );
	void eventSetVisibility ( unsigned long bIsVisible );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse );
	void eventCalculateInputMask ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	class UUIObject* eventGetFocusHint ( );
	void LogDockingStack ( );
	bool IsSceneActive ( unsigned long bTopmostScene );
	class AWorldInfo* GetWorldInfo ( );
	void SetSceneInputMode ( unsigned char NewInputMode );
	class UUIScene* GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner );
	class UUIDataStore* ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner );
	void UnbindSubscribers ( );
	void ResolveScenePositions ( );
	void RebuildDockingStack ( );
	void ForceImmediateSceneUpdate ( );
	bool ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent );
	void OnTopSceneChanged ( class UUIScene* NewTopScene );
	void OnSceneDeactivated ( class UUIScene* DeactivatedScene );
	void OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	unsigned char GetSceneInputMode ( );
};

//UClass* UUIScene::pClassPointer = NULL;

// Class Engine.UIState_Active
// 0x0000 (0x0048 - 0x0048)
class UUIState_Active : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2451 ];

		return pClassPointer;
	};

};

//UClass* UUIState_Active::pClassPointer = NULL;

// Class Engine.UIState_Focused
// 0x0000 (0x0048 - 0x0048)
class UUIState_Focused : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2453 ];

		return pClassPointer;
	};

	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

//UClass* UUIState_Focused::pClassPointer = NULL;

// Class Engine.UIState_Pressed
// 0x0000 (0x0048 - 0x0048)
class UUIState_Pressed : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2455 ];

		return pClassPointer;
	};

};

//UClass* UUIState_Pressed::pClassPointer = NULL;

// Class Engine.UIStringRenderer
// 0x0000 (0x003C - 0x003C)
class UUIStringRenderer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2457 ];

		return pClassPointer;
	};

	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
};

//UClass* UUIStringRenderer::pClassPointer = NULL;

// Class Engine.UIStyle_Data
// 0x0034 (0x0070 - 0x003C)
class UUIStyle_Data : public UUIRoot
{
public:
	struct FString                                     UIEditorControlClass;                             		// 0x003C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                StyleColor;                                       		// 0x0048 (0x0010) [0x0000000000000000]              
	float                                              StylePadding[ 0x2 ];                              		// 0x0058 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirty : 1;                                       		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __MatchesStyleData__Delegate;                     		// 0x0064 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2459 ];

		return pClassPointer;
	};

	bool MatchesStyleData ( class UUIStyle_Data* OtherStyle );
};

//UClass* UUIStyle_Data::pClassPointer = NULL;

// Class Engine.UIStyle_Combo
// 0x0040 (0x00B0 - 0x0070)
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                       		// 0x0070 (0x0020) [0x0000000000000000]              
	struct FStyleDataReference                         TextStyle;                                        		// 0x0090 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2461 ];

		return pClassPointer;
	};

};

//UClass* UUIStyle_Combo::pClassPointer = NULL;

// Class Engine.UIStyle_Image
// 0x003C (0x00AC - 0x0070)
class UUIStyle_Image : public UUIStyle_Data
{
public:
	class USurface*                                    DefaultImage;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         Coordinates;                                      		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUIImageAdjustmentData                      AdjustmentType[ 0x2 ];                            		// 0x0084 (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2463 ];

		return pClassPointer;
	};

};

//UClass* UUIStyle_Image::pClassPointer = NULL;

// Class Engine.UIStyle_Text
// 0x0024 (0x0094 - 0x0070)
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FUITextAttributes                           Attributes;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned char                                      Alignment[ 0x2 ];                                 		// 0x0078 (0x0002) [0x0000000000000000]              
	unsigned char                                      ClipMode;                                         		// 0x007A (0x0001) [0x0000000000000000]              
	unsigned char                                      ClipAlignment;                                    		// 0x007B (0x0001) [0x0000000000000000]              
	struct FTextAutoScaleValue                         AutoScaling;                                      		// 0x007C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Scale;                                            		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   SpacingAdjust;                                    		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2465 ];

		return pClassPointer;
	};

};

//UClass* UUIStyle_Text::pClassPointer = NULL;

// Class Engine.UIStyleResolver
// 0x0000 (0x003C - 0x003C)
class UUIStyleResolver : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2467 ];

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
};

//UClass* UUIStyleResolver::pClassPointer = NULL;

// Class Engine.UITexture
// 0x0004 (0x0040 - 0x003C)
class UUITexture : public UUIRoot
{
public:
	class USurface*                                    ImageTexture;                                     		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2469 ];

		return pClassPointer;
	};

	class USurface* GetSurface ( );
	bool HasValidStyleData ( );
	void SetImageStyle ( class UUIStyle_Image* NewImageStyle );
};

//UClass* UUITexture::pClassPointer = NULL;

// Class Engine.SeqVar_UIRange
// 0x0014 (0x00A8 - 0x0094)
class USeqVar_UIRange : public USequenceVariable
{
public:
	struct FUIRangeData                                RangeValue;                                       		// 0x0094 (0x0014) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2471 ];

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

//UClass* USeqVar_UIRange::pClassPointer = NULL;

// Class Engine.SeqVar_UniqueNetId
// 0x0008 (0x009C - 0x0094)
class USeqVar_UniqueNetId : public USequenceVariable
{
public:
	struct FUniqueNetId                                NetIdValue;                                       		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2473 ];

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

//UClass* USeqVar_UniqueNetId::pClassPointer = NULL;

// Class Engine.UICond_IsFocused
// 0x0000 (0x00D0 - 0x00D0)
class UUICond_IsFocused : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2475 ];

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

//UClass* UUICond_IsFocused::pClassPointer = NULL;

// Class Engine.UIEvent
// 0x0028 (0x0134 - 0x010C)
class UUIEvent : public USequenceEvent
{
public:
	int                                                SubobjectVersionModifier;                         		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIScreenObject*                             EventOwner;                                       		// 0x0110 (0x0004) [0x0000000000000000]              
	class UObject*                                     EventActivator;                                   		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0118 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bShouldRegisterEvent : 1;                         		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPropagateEvent : 1;                              		// 0x0124 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                 		// 0x0128 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2477 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventShouldAlwaysInstance ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsValidLevelSequenceObject ( );
	bool ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	bool ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	bool CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	class UUIScene* GetOwnerScene ( );
	class UUIScreenObject* GetOwner ( );
	bool AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
};

//UClass* UUIEvent::pClassPointer = NULL;

// Class Engine.UIEvent_CalloutButtonInputProxy
// 0x0004 (0x0138 - 0x0134)
class UUIEvent_CalloutButtonInputProxy : public UUIEvent
{
public:
	class UUICalloutButtonPanel*                       ButtonPanel;                                      		// 0x0134 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2479 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	int FindButtonAliasIndex ( struct FName ButtonAliasName );
	bool ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName );
	bool UnregisterButtonAlias ( struct FName ButtonAliasName );
	bool RegisterButtonAlias ( struct FName ButtonAliasName );
};

//UClass* UUIEvent_CalloutButtonInputProxy::pClassPointer = NULL;

// Class Engine.UIEvent_MetaObject
// 0x0004 (0x0138 - 0x0134)
class UUIEvent_MetaObject : public UUIEvent
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0134 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2481 ];

		return pClassPointer;
	};

	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* UUIEvent_MetaObject::pClassPointer = NULL;

// Class Engine.UIEvent_OnClick
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_OnClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2483 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_OnClick::pClassPointer = NULL;

// Class Engine.UIEvent_OnDoubleClick
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_OnDoubleClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2485 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_OnDoubleClick::pClassPointer = NULL;

// Class Engine.UIEvent_State
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_State : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2487 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_State::pClassPointer = NULL;

// Class Engine.UIEvent_OnEnterState
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_OnEnterState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2489 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_OnEnterState::pClassPointer = NULL;

// Class Engine.UIEvent_OnLeaveState
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2491 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_OnLeaveState::pClassPointer = NULL;

// Class Engine.UIEvent_ProcessInput
// 0x003C (0x0170 - 0x0134)
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                        		// 0x0134 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2493 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* UUIEvent_ProcessInput::pClassPointer = NULL;

// Class Engine.UIEvent_Scene
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_Scene : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2495 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_Scene::pClassPointer = NULL;

// Class Engine.UIEvent_SubmitData
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_SubmitData : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2497 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_SubmitData::pClassPointer = NULL;

// Class Engine.UIEvent_SubmitTextData
// 0x0010 (0x0144 - 0x0134)
class UUIEvent_SubmitTextData : public UUIEvent_SubmitData
{
public:
	struct FString                                     Value;                                            		// 0x0134 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClearValue : 1;                                  		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2499 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* UUIEvent_SubmitTextData::pClassPointer = NULL;

// Class Engine.UIEvent_ValueChanged
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_ValueChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2501 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_ValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_TextValueChanged
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_TextValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2503 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* UUIEvent_TextValueChanged::pClassPointer = NULL;

// Class Engine.UISequence
// 0x0010 (0x0130 - 0x0120)
class UUISequence : public USequence
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x0120 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UUIEvent* >                          UIEvents;                                         		// 0x0124 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2505 ];

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
	class UUIScreenObject* GetOwner ( );
};

//UClass* UUISequence::pClassPointer = NULL;

// Class Engine.UIStateSequence
// 0x0000 (0x0130 - 0x0130)
class UUIStateSequence : public UUISequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2507 ];

		return pClassPointer;
	};

	class UUIState* GetOwnerState ( );
};

//UClass* UUIStateSequence::pClassPointer = NULL;

// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2509 ];

		return pClassPointer;
	};

};

//UClass* UScene::pClassPointer = NULL;

// Class Engine.FoliageComponent
// 0x0074 (0x0284 - 0x0210)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray< struct FGatheredFoliageInstance >          Instances;                                        		// 0x0210 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FGuid >                             StaticallyRelevantLights;                         		// 0x021C (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FGuid >                             StaticallyIrrelevantLights;                       		// 0x0228 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              DirectionalStaticLightingScale[ 0x3 ];            		// 0x0234 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SimpleStaticLightingScale[ 0x3 ];                 		// 0x0240 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          Material;                                         		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDrawRadius;                                    		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MinTransitionRadius;                              		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              MinThinningRadius;                                		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     MinScale;                                         		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FVector                                     MaxScale;                                         		// 0x026C (0x000C) [0x0000000000000000]              
	float                                              SwayScale;                                        		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              ViewActorRadius;                                  		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSkewScalar;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2511 ];

		return pClassPointer;
	};

};

//UClass* UFoliageComponent::pClassPointer = NULL;

// Class Engine.FoliageFactory
// 0x0028 (0x0280 - 0x0258)
class AFoliageFactory : public AVolume
{
public:
	TArray< struct FFoliageMesh >                      Meshes;                                           		// 0x0258 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeFalloffRadius;                              		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeFalloffExponent;                            		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityUpFacing;                           		// 0x026C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityDownFacing;                         		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensitySideFacing;                         		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FacingFalloffExponent;                            		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxInstanceCount;                                 		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2513 ];

		return pClassPointer;
	};

};

//UClass* AFoliageFactory::pClassPointer = NULL;

// Class Engine.FluidInfluenceActor
// 0x000C (0x021C - 0x0210)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x0210 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class USpriteComponent*                            Sprite;                                           		// 0x0214 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x0218 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2515 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* AFluidInfluenceActor::pClassPointer = NULL;

// Class Engine.FluidInfluenceComponent
// 0x0060 (0x0270 - 0x0210)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsToggleTriggered : 1;                           		// 0x0210 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InfluenceType;                                    		// 0x0218 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStrength;                                     		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveFrequency;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WavePhase;                                        		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveRadius;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropAreaRadius;                               		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRadius;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropStrength;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRate;                                     		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSpeed;                                        		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlowNumRipples;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSideMotionRadius;                             		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowWaveRadius;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowStrength;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowFrequency;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereOuterRadius;                                		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereInnerRadius;                                		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereStrength;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentAngle;                                     		// 0x0264 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentTimer;                                     		// 0x0268 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AFluidSurfaceActor*                          CurrentFluidActor;                                		// 0x026C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2517 ];

		return pClassPointer;
	};

};

//UClass* UFluidInfluenceComponent::pClassPointer = NULL;

// Class Engine.FluidSurfaceActor
// 0x0004 (0x0214 - 0x0210)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2519 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

//UClass* AFluidSurfaceActor::pClassPointer = NULL;

// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x0214 - 0x0214)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2521 ];

		return pClassPointer;
	};

};

//UClass* AFluidSurfaceActorMovable::pClassPointer = NULL;

// Class Engine.FluidSurfaceComponent
// 0x00B4 (0x02C4 - 0x0210)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableSimulation : 1;                             		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableDetail : 1;                                 		// 0x0218 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHighQualityFluid : 1;                            		// 0x0218 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPause : 1;                                       		// 0x0218 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationNormals : 1;                       		// 0x0218 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationPosition : 1;                      		// 0x0218 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShowDetailNormals : 1;                           		// 0x0218 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x0218 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bShowFluidSimulation : 1;                         		// 0x0218 (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowFluidDetail : 1;                             		// 0x0218 (0x0004) [0x0000000000002001] [0x00000200] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTestRipple : 1;                                  		// 0x0218 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x0218 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	int                                                SimulationQuadsX;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SimulationQuadsY;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacing;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetSimulation;                                 		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GPUTessellationFactor;                            		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidDamping;                                     		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidTravelSpeed;                                 		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidHeightScale;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidUpdateRate;                                  		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceImpact;                                      		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceContinuous;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingContrast;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetDetail;                                     		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationDistance;                             		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetailResolution;                                 		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailSize;                                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailDamping;                                    		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTravelSpeed;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTransfer;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailHeightScale;                                		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailUpdateRate;                                 		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalLength;                                     		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleSpeed;                                  		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleFrequency;                              		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleRadius;                                 		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidWidth;                                       		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              FluidHeight;                                      		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              TestRippleTime;                                   		// 0x0288 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              TestRippleAngle;                                  		// 0x028C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              DeactivationTimer;                                		// 0x0290 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              ViewDistance;                                     		// 0x0294 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     SimulationPosition;                               		// 0x0298 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     DetailPosition;                                   		// 0x02A4 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ClampMap;                                         		// 0x02B0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FLightMapRef                                LightMap;                                         		// 0x02BC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FluidSimulation;                                  		// 0x02C0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2523 ];

		return pClassPointer;
	};

	void SetSimulationPosition ( struct FVector WorldPos );
	void SetDetailPosition ( struct FVector WorldPos );
	void ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse );
};

//UClass* UFluidSurfaceComponent::pClassPointer = NULL;

// Class Engine.LensFlare
// 0x01BC (0x01F8 - 0x003C)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x003C (0x0140) [0x0000000000000008]              ( CPF_ExportObject )
	class UStaticMesh*                                 SourceMesh;                                       		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceDPG;                                        		// 0x0180 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ReflectionsDPG;                                   		// 0x0181 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bTraceSunPosition : 1;                            		// 0x0184 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0184 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x0184 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0184 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FLensFlareElement >                 Reflections;                                      		// 0x0188 (0x000C) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              OuterCone;                                        		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerCone;                                        		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeFudgeFactor;                                  		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x01A4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x01C0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x01DC (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                ReflectionCount;                                  		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x01E4 (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x01F0 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x01F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2525 ];

		return pClassPointer;
	};

};

//UClass* ULensFlare::pClassPointer = NULL;

// Class Engine.LensFlareComponent
// 0x0038 (0x0248 - 0x0210)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                         		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0214 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0218 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x021C (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x0220 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasTranslucency : 1;                             		// 0x0220 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x0220 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x0220 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x0220 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              OuterCone;                                        		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InnerCone;                                        		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConeFudgeFactor;                                  		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SourceColor;                                      		// 0x0234 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0244 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2527 ];

		return pClassPointer;
	};

	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

//UClass* ULensFlareComponent::pClassPointer = NULL;

// Class Engine.LensFlareSource
// 0x0008 (0x0218 - 0x0210)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0214 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2529 ];

		return pClassPointer;
	};

	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FLinearColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void OnToggle ( class USeqAct_Toggle* Action );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

//UClass* ALensFlareSource::pClassPointer = NULL;

// Class Engine.AudioDevice
// 0x0494 (0x04D4 - 0x0040)
class UAudioDevice : public USubsystem
{
public:
	TArray< class UAudioTrack* >                       AudioTracks;                                      		// 0x0040 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseAudioTracks : 1;                              		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bGlobalNoReverb : 1;                              		// 0x004C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      UseEffectsProcessing : 1;                         		// 0x004C (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	unsigned long                                      bGameWasTicking : 1;                              		// 0x004C (0x0004) [0x0000000000001002] [0x00000008] ( CPF_Const | CPF_Native )
	unsigned long                                      bTestLowPassFilter : 1;                           		// 0x004C (0x0004) [0x0000000000001002] [0x00000010] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableLowPassFilter : 1;                        		// 0x004C (0x0004) [0x0000000000001002] [0x00000020] ( CPF_Const | CPF_Native )
	unsigned long                                      bTestEQFilter : 1;                                		// 0x004C (0x0004) [0x0000000000001002] [0x00000040] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableEQFilter : 1;                             		// 0x004C (0x0004) [0x0000000000001002] [0x00000080] ( CPF_Const | CPF_Native )
	unsigned long                                      bTestRadioFilter : 1;                             		// 0x004C (0x0004) [0x0000000000001002] [0x00000100] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableRadioFilter : 1;                          		// 0x004C (0x0004) [0x0000000000001002] [0x00000200] ( CPF_Const | CPF_Native )
	unsigned long                                      GAllowDynamicCaching : 1;                         		// 0x004C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsReleasingWavData : 1;                          		// 0x004C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bRecalculateAllInteriorSettings : 1;              		// 0x004C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bEnableSocialDucking : 1;                         		// 0x004C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bDisplayActiveWaveCount : 1;                      		// 0x004C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bSimpleDisplayActiveWaveCount : 1;                		// 0x004C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bDisplayGhostSoundCount : 1;                      		// 0x004C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bAllowBalanceMode : 1;                            		// 0x004C (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bBalanceModeEnabled : 1;                          		// 0x004C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bShowBalanceDebugLines : 1;                       		// 0x004C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      GhostModeReverbInEffect : 1;                      		// 0x004C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bPriorityDistance : 1;                            		// 0x004C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bBalanceGhostToNormal : 1;                        		// 0x004C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	int                                                DistancePriorityTrackCount;                       		// 0x0050 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MusicModifierFadeIn;                              		// 0x0054 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MusicModifierFadeOut;                             		// 0x0058 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MusicModifierPercentage;                          		// 0x005C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< int >                                      SoundGroupModifyMode;                             		// 0x0060 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      CurrentSoundGroupModifyMode;                      		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSoundGroup >                       PropagatedSoundGroup;                             		// 0x0078 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0084 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.NameToSGVolInterpMap
	TArray< struct FSoundGroup >                       PreviousSoundGroups;                              		// 0x00C0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    SGModeVolumeMultipliers;                          		// 0x00CC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    SoundModeVolumeMultipliers;                       		// 0x00D8 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FAudioVisualizerInfo >              AudioCompVisualization;                           		// 0x00E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAudioVisualizerInfo >              BalanceAudioCompVisualization;                    		// 0x00F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxChannels;                                      		// 0x00FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< class UAudioComponent* >                   AudioComponents;                                  		// 0x0100 (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	TArray< struct FPointer >                          Sources;                                          		// 0x010C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          FreeSources;                                      		// 0x0118 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 WaveInstanceSourceMap;                            		// 0x0124 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FListener >                         Listeners;                                        		// 0x0160 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FQWord                                      CurrentTick;                                      		// 0x016C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 NameToSoundGroupIndexMap;                         		// 0x0174 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       SourceSoundGroups;                                		// 0x01B0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       CurrentSoundGroups;                               		// 0x01BC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       DestinationSoundGroups;                           		// 0x01C8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       SoundGroups;                                      		// 0x01D4 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FMap_Mirror                                 SoundModes;                                       		// 0x01E0 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Effects;                                          		// 0x021C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USoundMode*                                  CurrentMode;                                      		// 0x0220 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeStartTime;                               		// 0x0224 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInStartTime;                         		// 0x022C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInEndTime;                           		// 0x0234 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeEndTime;                                 		// 0x023C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    TextToSpeech;                                     		// 0x0244 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TransientMasterVolume;                            		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAudioComponent* >                   DeferredAudioComponents;                          		// 0x024C (0x000C) [0x000000000000200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient )
	float                                              GlobalVolumeTargetValue;                          		// 0x0258 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x025C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DynamicCachedAmbientSGMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x0298 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DynamicCachedSGMap
	TArray< class USoundCue* >                         ToRemoveCachedData;                               		// 0x02D4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DynamicCacheReleaseMaxCount;                      		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DynamicCacheReleaseCurrentCount;                  		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DynamicCacheReleaseTime;                          		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenteredVoiceDistance;                            		// 0x02EC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DestinationMusicPitchMultiplier;                  		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMusicPitchMultiplier;                      		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MusicPitchMultiplierBlendTime;                    		// 0x02F8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FName >                             SoundModeLayers;                                  		// 0x02FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                ListenerVolumeIndex;                              		// 0x0308 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FInteriorSettings                           ListenerInteriorSettings;                         		// 0x030C (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorStartTime;                                		// 0x0330 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorEndTime;                                  		// 0x0338 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorEndTime;                                  		// 0x0340 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorLPFEndTime;                               		// 0x0348 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorLPFEndTime;                               		// 0x0350 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorVolumeInterp;                             		// 0x0358 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorLPFInterp;                                		// 0x035C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorVolumeInterp;                             		// 0x0360 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorLPFInterp;                                		// 0x0364 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              AmbZoneSocialDuckingThreshold;                    		// 0x0368 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           CurrentActiveWaves;                               		// 0x036C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           CurrentUnActiveWaves;                             		// 0x0378 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0384 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.BalanceCountableSoundGroups
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x03C0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.BalanceAppliedSoundGroups
	float                                              BalanceInterpValue;                               		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     BalanceModeCurrentTime;                           		// 0x0400 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     BalanceModeEndTime;                               		// 0x0408 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                BalanceCurrentWavCount;                           		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceStartVolumeScale;                          		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceStartAttenuationScale;                     		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceCurrentVolumeScale;                        		// 0x041C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceCurrentAttenuationScale;                   		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceTargetVolumeScale;                         		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceTargetAttenuationScale;                    		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BalanceWavMaxCount;                               		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceModeExtendTime;                            		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BalanceInterpTime;                                		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FBalanceWavInfo >                   BalanceWavInfos;                                  		// 0x0438 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              GhostInterpValue;                                 		// 0x0444 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLookupMap_Mirror                           GhostReverbAppliedSoundGroups;                    		// 0x0448 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 GhostNormalSoundGroupControl;                     		// 0x0490 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              BalanceGhostToNormalInterpTime;                   		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BalanceGhostToNormalTime;                         		// 0x04D0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2531 ];

		return pClassPointer;
	};

	void SetSoundMode ( struct FName NewMode, int InSoundModeLayer );
};

//UClass* UAudioDevice::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawImage
// 0x00AC (0x0114 - 0x0068)
class UCustomUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UUITexture*                                  ImageRef;                                         		// 0x006C (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UTexture2D*                                  AlphaImage;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUIImageStyleOverride                       StyleCustomization;                               		// 0x0074 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableDrawImage : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableSkinColor : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableSkinAlpha : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      EnableResourceGray : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnableResourceSize : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      EnableAdditiveBlendMode : 1;                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      EnableMultiImage : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      EnbaleOffset : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      EnableStaticPadding : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      EnableFullImage : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      EnableFittedImage : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      EnableFittedImage_MinifyOnly : 1;                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bEnableClipping : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bNeedToRefreshRenderBound : 1;                    		// 0x00A4 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      EnableGauge : 1;                                  		// 0x00A4 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bReverseMode : 1;                                 		// 0x00A4 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bOutGlowRender : 1;                               		// 0x00A4 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	float                                              GrayWeightValue;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SperateImageType;                                 		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SperateType;                                      		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Alignment[ 0x2 ];                                 		// 0x00AE (0x0002) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   MultiImage;                                       		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Offset;                                           		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   StaticPadding;                                    		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MinClippingRatio;                                 		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MaxClippingRatio;                                 		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         AdjustTexCoords;                                  		// 0x00D4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         MaterialInstanceConstantArray;                    		// 0x00E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                NeedToRefreshMatParamFlag;                        		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRenderBound                                LastRenderBound;                                  		// 0x00F4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRenderBound >                      RenderBoundArray;                                 		// 0x0104 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              GaugeValue;                                       		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2533 ];

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
};

//UClass* UCustomUIComp_DrawImage::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawStringComponents
// 0x0054 (0x00BC - 0x0068)
class UCustomUIComp_DrawStringComponents : public UUIComp_DrawComponents
{
public:
	struct FUITextStyleOverride                        TextStyleCustomization;                           		// 0x0068 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ClippingBound;                                    		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ClippingBoundFace[ 0x2 ];                         		// 0x009C (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextAlignmentHorizontal;                          		// 0x009E (0x0001) [0x0000000000000000]              
	unsigned char                                      TextAlignmentVertical;                            		// 0x009F (0x0001) [0x0000000000000000]              
	unsigned char                                      WrapMode;                                         		// 0x00A0 (0x0001) [0x0000000000000000]              
	unsigned char                                      ClipAlignment;                                    		// 0x00A1 (0x0001) [0x0000000000000000]              
	float                                              GrayWeightValue;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ExtendStrokeOut : 1;                              		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LastRenderWidth;                                  		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRenderHeight;                                 		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TextScale;                                        		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnimScale;                                        		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2535 ];

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
};

//UClass* UCustomUIComp_DrawStringComponents::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawString
// 0x0008 (0x00C4 - 0x00BC)
class UCustomUIComp_DrawString : public UCustomUIComp_DrawStringComponents
{
public:
	class UCustomUIComp_UIString*                      ValueString;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedRecreateSourceNodes : 1;                     		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedRefreshSourceNodes : 1;                      		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeedRefreshLineNodes : 1;                        		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2537 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIComp_DrawString::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawStringEditbox
// 0x009C (0x0158 - 0x00BC)
class UCustomUIComp_DrawStringEditbox : public UCustomUIComp_DrawStringComponents
{
public:
	class UCustomUIComp_UIString*                      GuideString;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUIStringCaretParameters                    StringCaret;                                      		// 0x00C0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FQWord                                      IMEContext;                                       		// 0x00DC (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FColor                                      CompositionColor;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SelectionColor;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      UnderLineColor;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextLengthType;                                   		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxLinkCount;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEditLineNode >                     EditLineNodes;                                    		// 0x00F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedRefreshEditNodes : 1;                        		// 0x0104 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRenderCaret : 1;                                 		// 0x0104 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPasswordMode : 1;                                		// 0x0104 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeedRecreateSourceNodes : 1;                     		// 0x0104 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNeedRefreshSourceNodes : 1;                      		// 0x0104 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bNeedRefreshLineNodes : 1;                        		// 0x0104 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	class UMaterialInstanceConstant*                   CaretMaterialInstanceConstant;                    		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   CompositionCaretMaterialInstanceConstant;         		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         IconMaterialInstanceConstantArray;                		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CompositionElapsedTime;                           		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxCharacters;                                    		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentCaretLinePosition;                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StartSelectionLinePosition;                       		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EndSelectionLinePosition;                         		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StartSelectionPosition;                           		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EndSelectionPosition;                             		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InvTextColorStart;                                		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InvTextColorCount;                                		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartStringPosX;                                  		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartStringPosY;                                  		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CompositionRenderPos;                             		// 0x0148 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CompositionRenderSize;                            		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2539 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIComp_DrawStringEditbox::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawStringList
// 0x0024 (0x00E0 - 0x00BC)
class UCustomUIComp_DrawStringList : public UCustomUIComp_DrawStringComponents
{
public:
	TArray< struct FStringListItem >                   StringListItems;                                  		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomUIComp_UIString* >            UnMappedValueStringArray;                         		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedRecreateSourceNodes : 1;                     		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedRefreshSourceNodes : 1;                      		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeedRefreshLineNodes : 1;                        		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              StartStringPos;                                   		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EndItemIndex;                                     		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2541 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIComp_DrawStringList::pClassPointer = NULL;

// Class Engine.CustomUIComp_DrawStringMultiLineEditbox
// 0x0000 (0x0158 - 0x0158)
class UCustomUIComp_DrawStringMultiLineEditbox : public UCustomUIComp_DrawStringEditbox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2543 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIComp_DrawStringMultiLineEditbox::pClassPointer = NULL;

// Class Engine.CustomUIComp_UIString
// 0x007C (0x00B8 - 0x003C)
class UCustomUIComp_UIString : public UUIRoot
{
public:
	struct FString                                     SourceText;                                       		// 0x003C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParagraphNode >                    SourceNodes;                                      		// 0x0048 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLineNode >                         LineNodes;                                        		// 0x0054 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsEllipsis : 1;                                  		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHasTextLink : 1;                                 		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              TotalStringWidth;                                 		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   StringExtent;                                     		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                StartStringPosX;                                  		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StartStringPosY;                                  		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InvTextColorStart;                                		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InvTextColorCount;                                		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectionBoxIndex;                                		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectionBoxCount;                                		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   SelectionBoxPadding;                              		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SelectionBoxColor;                                		// 0x0090 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTextStyleMask >                    TextStyleMaskArray;                               		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         MaterialInstanceConstantArray;                    		// 0x00AC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2545 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIComp_UIString::pClassPointer = NULL;

// Class Engine.CustomUIBaseScene
// 0x0004 (0x0290 - 0x028C)
class UCustomUIBaseScene : public UUIScene
{
public:
	int                                                EditorVersion;                                    		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2547 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIBaseScene::pClassPointer = NULL;

// Class Engine.CustomUIGameScene
// 0x0014 (0x02A4 - 0x0290)
class UCustomUIGameScene : public UCustomUIBaseScene
{
public:
	int                                                LoadFlag;                                         		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SkinColor;                                        		// 0x0294 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2549 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIGameScene::pClassPointer = NULL;

// Class Engine.CustomUIGameMainScene
// 0x035C (0x0600 - 0x02A4)
class UCustomUIGameMainScene : public UCustomUIGameScene
{
public:
	TArray< struct FChildrenSceneInfo >                ChildrenSceneInfoArray;                           		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   CustomizeModeLinkImageSet;                        		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImageSet*                                   CustomizeModePinImageSet;                         		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeWidgetActiveColor;                       		// 0x02BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeWidgetPressedColor;                      		// 0x02CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeWidgetSelectedColor;                     		// 0x02DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeEnabledGroupActiveColor;                 		// 0x02EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeEnabledGroupPressedColor;                		// 0x02FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeDisabledGroupActiveColor;                		// 0x030C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomizeDisabledGroupPressedColor;               		// 0x031C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ActivatedColor;                                   		// 0x032C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FocusedColor;                                     		// 0x033C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   IgnoreInputFocusUIObject;                         		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomUIObject* >                   InputFocusArray;                                  		// 0x0350 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomUIObject* >                   BinkArray;                                        		// 0x035C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAttachToCursorInfo >               AttachToCursorArray;                              		// 0x0368 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UUIObject*                                   TopMostWidget;                                    		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUICandidate*                          Candidate;                                        		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomUIReading*                            Reading;                                          		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIObject*                                   LastPressedWidget;                                		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIParticleEmitterInfo >            ParticleEmitterArray;                             		// 0x0384 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MeshLightIndex;                                   		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WebBrowserTickCount;                              		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendOutTime;                                     		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClickMovePosX;                                    		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClickMovePosY;                                    		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NoInputLogOutTime;                                		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NoInputLogOutTimeLeft;                            		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeLeft;                                         		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ResourceViewportSize;                             		// 0x03B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      FirstFrame : 1;                                   		// 0x03BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableCustomizeMode : 1;                         		// 0x03BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableCustomizeSnapMode : 1;                     		// 0x03BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bEnableCustomizeLinkMode : 1;                     		// 0x03BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWasActionCinemaMode : 1;                         		// 0x03BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              fSnapOffsetX;                                     		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSnapOffsetY;                                     		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ClipBoardText;                                    		// 0x03C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FUIAnimationSystemInfo                      AnimationSystem;                                  		// 0x03D4 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FUIInstanceRenderSystemInfo                 InstanceRenderSystem;                             		// 0x03E8 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	int                                                AnimApplyingWidgetInstId;                         		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWidgetDelayParticleInfo >          DelayParticleInfoArray;                           		// 0x0408 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWidgetWorldInfo >                  WidgetToWorldLocationArray;                       		// 0x0414 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomUIObject* >                   PrimitivesArray;                                  		// 0x0420 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomUIObject* >                   TickableObjectArray;                              		// 0x042C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomizeSelectedGroupId;                         		// 0x0438 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x043C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIGameMainScene.CustomizeGroupInfoMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0478 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIGameMainScene.RegionMaskMapColorBufferMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x04B4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIGameMainScene.UICustomAnimIdMap
	struct FMultiMap_Mirror                            RenderCustomizeLinkInfoMap;                       		// 0x04F0 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMultiMap_Mirror                            TimerMap;                                         		// 0x052C (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FUISound >                          UISoundArray;                                     		// 0x0568 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      DropPossibleDestinationArray;                     		// 0x0574 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      DropImpossibleDestinationArray;                   		// 0x0580 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x058C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.CustomUIGameMainScene.UIActionXMLFilePathMap
	TArray< struct FUIActionGroup >                    UIActionGroupArray;                               		// 0x05C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIActionGroupRemains >             UIActionGroupRemainsArray;                        		// 0x05D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              UIActionCinemaModeFadeOutTime;                    		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UIActionCinemaModeFadeInTime;                     		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UIActionCinemaModeFadeTime;                       		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UISoundInstanceIdIndex;                           		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UIActionInstanceIdIndex;                          		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIParticleAnimInfo >               ParticleAlphaAnimInfoArray;                       		// 0x05F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2551 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIGameMainScene::pClassPointer = NULL;

// Class Engine.CustomUIInteraction
// 0x0004 (0x01B4 - 0x01B0)
class UCustomUIInteraction : public UUIInteraction
{
public:
	struct FPointer                                    GameViewportPtr;                                  		// 0x01B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2553 ];

		return pClassPointer;
	};

};

//UClass* UCustomUIInteraction::pClassPointer = NULL;

// Class Engine.ShowKey
// 0x0014 (0x0050 - 0x003C)
class UShowKey : public UObject
{
public:
	unsigned char                                      ShowKeyId;                                        		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysProcess : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKeyEnabled : 1;                                  		// 0x0040 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseProbability : 1;                              		// 0x0040 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	int                                                SpawnId;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartTime;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ProbabilityPercentage;                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2555 ];

		return pClassPointer;
	};

};

//UClass* UShowKey::pClassPointer = NULL;

// Class Engine.ShowActionKey
// 0x0024 (0x0074 - 0x0050)
class UShowActionKey : public UShowKey
{
public:
	unsigned long                                      bSyncActionTime : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectileOverArrivalPos : 1;                    		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDestroyAfterAction : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bContinueBeforeEndPosition : 1;                   		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPosOnly : 1;                                     		// 0x0050 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableTerrainCheck : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              fActionTime;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vStartPos;                                        		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rSpawnDataRotation;                               		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBaseFlowHeight;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2557 ];

		return pClassPointer;
	};

};

//UClass* UShowActionKey::pClassPointer = NULL;

// Class Engine.ShowActionCatmullromKey
// 0x0018 (0x008C - 0x0074)
class UShowActionCatmullromKey : public UShowActionKey
{
public:
	struct FVector                                     vArrivePos;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           aSamplePoints;                                    		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2559 ];

		return pClassPointer;
	};

};

//UClass* UShowActionCatmullromKey::pClassPointer = NULL;

// Class Engine.ShowActionCatmullromPawnKey
// 0x0054 (0x00C8 - 0x0074)
class UShowActionCatmullromPawnKey : public UShowActionKey
{
public:
	struct FVector                                     vArrivePos;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           aSamplePoints;                                    		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    aSamplePointTimes;                                		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSamplePointScaler : 1;                           		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fSamplePointScaler_MinDist;                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSamplePointScaler_MaxDist;                       		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSamplePointRandomData >            aSamplePointRandoms;                              		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eArriveObjectType;                                		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMeshIndex;                                       		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ArriveBone;                                       		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StartBone;                                        		// 0x00C0 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2561 ];

		return pClassPointer;
	};

};

//UClass* UShowActionCatmullromPawnKey::pClassPointer = NULL;

// Class Engine.ShowActionCatmullromRandomKey
// 0x001C (0x0090 - 0x0074)
class UShowActionCatmullromRandomKey : public UShowActionKey
{
public:
	unsigned char                                      ArrivalStandard;                                  		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCatmullromData >                   arrCatmullromDatas;                               		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              scaleValue;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      scaleOn : 1;                                      		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ExtraFlightTime;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2563 ];

		return pClassPointer;
	};

};

//UClass* UShowActionCatmullromRandomKey::pClassPointer = NULL;

// Class Engine.ShowActionFollowBoneKey
// 0x002C (0x00A0 - 0x0074)
class UShowActionFollowBoneKey : public UShowActionKey
{
public:
	unsigned char                                      eArriveObjectType;                                		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMeshIndex;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowToSocket : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseOrbitingSocketName : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       FollowBone;                                       		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vDeltaLocation;                                   		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strActionAnim;                                    		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2565 ];

		return pClassPointer;
	};

};

//UClass* UShowActionFollowBoneKey::pClassPointer = NULL;

// Class Engine.ShowActionLinearKey
// 0x001C (0x0090 - 0x0074)
class UShowActionLinearKey : public UShowActionKey
{
public:
	unsigned char                                      ArrivalJudgement;                                 		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vArrivePos;                                       		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strActionAnim;                                    		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2567 ];

		return pClassPointer;
	};

};

//UClass* UShowActionLinearKey::pClassPointer = NULL;

// Class Engine.ShowActionLinearPawnKey
// 0x0060 (0x00D4 - 0x0074)
class UShowActionLinearPawnKey : public UShowActionKey
{
public:
	struct FVector                                     vArrivePos;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strActionAnim;                                    		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           aSamplePoints;                                    		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    aSamplePointTimes;                                		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSamplePointScaler : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fSamplePointScaler_MinDist;                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSamplePointScaler_MaxDist;                       		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSamplePointRandomData >            aSamplePointRandoms;                              		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eArriveObjectType;                                		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMeshIndex;                                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ArriveBone;                                       		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StartBone;                                        		// 0x00CC (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2569 ];

		return pClassPointer;
	};

};

//UClass* UShowActionLinearPawnKey::pClassPointer = NULL;

// Class Engine.ShowActionLinearRandomKey
// 0x0028 (0x009C - 0x0074)
class UShowActionLinearRandomKey : public UShowActionKey
{
public:
	unsigned char                                      ArrivalStandard;                                  		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           arrArrivePos;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              scaleValue;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      scaleOn : 1;                                      		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     strActionAnim;                                    		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraFlightTime;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2571 ];

		return pClassPointer;
	};

};

//UClass* UShowActionLinearRandomKey::pClassPointer = NULL;

// Class Engine.ShowDurationKey
// 0x0008 (0x0058 - 0x0050)
class UShowDurationKey : public UShowKey
{
public:
	float                                              Duration;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Loop : 1;                                         		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2573 ];

		return pClassPointer;
	};

};

//UClass* UShowDurationKey::pClassPointer = NULL;

// Class Engine.ShowAnimKey
// 0x0034 (0x008C - 0x0058)
class UShowAnimKey : public UShowDurationKey
{
public:
	struct FString                                     strAnim;                                          		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FixByTime : 1;                                    		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUpperOnly : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseAnimSet : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoFacialAnimSet : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRacePostfix : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              fFadeInTime;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeOutTime;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStopFadeOutTime;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMovingBlendTime;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMovingBlendFadeTime;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStartTime;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEndTime;                                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSetName;                                      		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2575 ];

		return pClassPointer;
	};

};

//UClass* UShowAnimKey::pClassPointer = NULL;

// Class Engine.ShowAnimRandomKey
// 0x002C (0x0084 - 0x0058)
class UShowAnimRandomKey : public UShowDurationKey
{
public:
	TArray< struct FString >                           AnimRandomKey;                                    		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FixByTime : 1;                                    		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SequencialPlay : 1;                               		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseAnimSet : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoFacialAnimSet : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRacePostfix : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              fFadeInTime;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeOutTime;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStopFadeOutTime;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMovingBlendTime;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             AnimSetNames;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2577 ];

		return pClassPointer;
	};

};

//UClass* UShowAnimRandomKey::pClassPointer = NULL;

// Class Engine.ShowAnimSlowKey
// 0x0008 (0x0060 - 0x0058)
class UShowAnimSlowKey : public UShowDurationKey
{
public:
	float                                              fAnimSpeed;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDurationTime;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2579 ];

		return pClassPointer;
	};

};

//UClass* UShowAnimSlowKey::pClassPointer = NULL;

// Class Engine.ShowAnimStopKey
// 0x0004 (0x0054 - 0x0050)
class UShowAnimStopKey : public UShowKey
{
public:
	float                                              fStopFadeOutTime;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2581 ];

		return pClassPointer;
	};

};

//UClass* UShowAnimStopKey::pClassPointer = NULL;

// Class Engine.ShowBeamKey
// 0x0040 (0x0090 - 0x0050)
class UShowBeamKey : public UShowKey
{
public:
	class UParticleSystem*                             ParticleSys;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartMeshIndex;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StartBoneName;                                    		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                EndMeshIndex;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EndBoneName;                                      		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartialRenderingDuration;                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2583 ];

		return pClassPointer;
	};

};

//UClass* UShowBeamKey::pClassPointer = NULL;

// Class Engine.ShowCameraInterpolKey
// 0x0010 (0x0060 - 0x0050)
class UShowCameraInterpolKey : public UShowKey
{
public:
	unsigned char                                      TimeMode;                                         		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraInterpolAppliedObject;                      		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeInTime;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeOutTime;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPlayTime;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2585 ];

		return pClassPointer;
	};

};

//UClass* UShowCameraInterpolKey::pClassPointer = NULL;

// Class Engine.ShowCameraKey
// 0x00A4 (0x00FC - 0x0058)
class UShowCameraKey : public UShowDurationKey
{
public:
	unsigned char                                      CamModifierType;                                  		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CamAppliedObject;                                 		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCasterCenter : 1;                                		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWorldTargetPos : 1;                              		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRadius : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRotRandom : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLocRandom : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bFOVRandom : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	struct FVector                                     Position;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShakeRadius;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotAmplitude;                                     		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotFrequency;                                     		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocAmplitude;                                     		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocFrequency;                                     		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVAmplitude;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVFrequency;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotAdjust;                                        		// 0x00A8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      LocAdjust;                                        		// 0x00C4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       FovAdjust;                                        		// 0x00E0 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2587 ];

		return pClassPointer;
	};

};

//UClass* UShowCameraKey::pClassPointer = NULL;

// Class Engine.ShowCameraLocationAndTargetInterpKey
// 0x0040 (0x0098 - 0x0058)
class UShowCameraLocationAndTargetInterpKey : public UShowDurationKey
{
public:
	struct FVector                                     Location;                                         		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Target;                                           		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UpVector;                                         		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MoveSlope;                                        		// 0x007C (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2589 ];

		return pClassPointer;
	};

};

//UClass* UShowCameraLocationAndTargetInterpKey::pClassPointer = NULL;

// Class Engine.ShowCopyPawnKey
// 0x0084 (0x00D4 - 0x0050)
class UShowCopyPawnKey : public UShowKey
{
public:
	struct FVector                                     RelativeLocation;                                 		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeScale;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DisplayMode;                                      		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PawnMode;                                         		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotationMode;                                     		// 0x006E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TranslationMode;                                  		// 0x006F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lifetime;                                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName;                                         		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             AnimName_Candidate_List;                          		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimSpeed;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FreezingAnim : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UMaterialInterface*                          OverMaterial;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveSpeedPerSec;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTime;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SpawnDataPosBoneName;                             		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SizeScaler;                                       		// 0x00A4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SizeScalerBoneName;                               		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDynamicParamInfo >                 ApplyDynamicParams;                               		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2591 ];

		return pClassPointer;
	};

};

//UClass* UShowCopyPawnKey::pClassPointer = NULL;

// Class Engine.ShowDamageKey
// 0x001C (0x006C - 0x0050)
class UShowDamageKey : public UShowKey
{
public:
	float                                              Weight;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strAttackerBone;                                  		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strSuffererBone;                                  		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2593 ];

		return pClassPointer;
	};

};

//UClass* UShowDamageKey::pClassPointer = NULL;

// Class Engine.ShowDependencyParticleKey
// 0x0048 (0x00A0 - 0x0058)
class UShowDependencyParticleKey : public UShowDurationKey
{
public:
	unsigned long                                      bActiveDependencyParticles : 1;                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddDependencyParticles : 1;                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHideDependencyParticles : 1;                     		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Add_PosOnly : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Add_ApplyAutoScale : 1;                           		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FString                                     DependencyParticleName;                           		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Add_ParticleSys;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Add_MeshIndex;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Add_SocketName;                                   		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Add_RelativeLocation;                             		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Add_RelativeRotation;                             		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Add_RelativeScale;                                		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2595 ];

		return pClassPointer;
	};

};

//UClass* UShowDependencyParticleKey::pClassPointer = NULL;

// Class Engine.ShowDependencyTrailKey
// 0x00F0 (0x0148 - 0x0058)
class UShowDependencyTrailKey : public UShowDurationKey
{
public:
	unsigned long                                      bInitDependencyTrails : 1;                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddDependencyTrails : 1;                         		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTermDependencyTrails : 1;                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHideDependencyTrails : 1;                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnableDynamicHorizontalRopeParticles : 1;         		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      EnableDynamicRopeWidth : 1;                       		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      EnableDynamicWrappingAddition : 1;                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      EnableDynamicWrappingScaler : 1;                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      EnableTrailPushForce : 1;                         		// 0x0058 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      EnableHoldingTrailSample : 1;                     		// 0x0058 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      Add_PosOnly : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      Add_UsingDependencyRope : 1;                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	struct FString                                     DependencyTrailName;                              		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       HorizontalRopeParticles_Dist;                     		// 0x0068 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       RopeWidth_Dist;                                   		// 0x0084 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       WrappingAddition_Dist;                            		// 0x00A0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       WrappingScaler_Dist;                              		// 0x00BC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceTerm_Min;                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceTerm_Max;                           		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceTime_Min;                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceTime_Max;                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceValue_Min;                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceValue_Max;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailPushForceBound;                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TrailPushForceDirection_Min;                      		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TrailPushForceDirection_Max;                      		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                HoldingTrailSampleIndex;                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HoldingTrailSampleMeshIndex;                      		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HoldingTrailSampleBoneName;                       		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTrailTemplate*                              Add_TrailSystem;                                  		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Add_FirstMeshIndex;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Add_FirstSamplerType;                             		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Add_SecondSamplerType;                            		// 0x0129 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Add_FirstSocketName;                              		// 0x012C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                Add_SecondMeshIndex;                              		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Add_SecondSocketName;                             		// 0x013C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2597 ];

		return pClassPointer;
	};

};

//UClass* UShowDependencyTrailKey::pClassPointer = NULL;

// Class Engine.ShowDialogueKey
// 0x0018 (0x0068 - 0x0050)
class UShowDialogueKey : public UShowKey
{
public:
	unsigned char                                      PlayType;                                         		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Volume;                                           		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2599 ];

		return pClassPointer;
	};

};

//UClass* UShowDialogueKey::pClassPointer = NULL;

// Class Engine.ShowDieKey
// 0x0000 (0x0050 - 0x0050)
class UShowDieKey : public UShowKey
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2601 ];

		return pClassPointer;
	};

};

//UClass* UShowDieKey::pClassPointer = NULL;

// Class Engine.ShowDynamicParamKey
// 0x005C (0x00AC - 0x0050)
class UShowDynamicParamKey : public UShowKey
{
public:
	unsigned long                                      IsAddMaterial : 1;                                		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       MaterialName;                                     		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParameterName;                                    		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlayType;                                         		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vecStartValue;                                    		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vecEndValue;                                      		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vecInitValue;                                     		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPlayTime;                                        		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      ApplyMeshIndices;                                 		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FMeshes_DynamicParam                        ApplyMeshes;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           ApplyDependencyTrailNames;                        		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2603 ];

		return pClassPointer;
	};

};

//UClass* UShowDynamicParamKey::pClassPointer = NULL;

// Class Engine.ShowFaceFxKey
// 0x0028 (0x0078 - 0x0050)
class UShowFaceFxKey : public UShowKey
{
public:
	struct FString                                     GroupName;                                        		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AnimName;                                         		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXAnimSetName;                                		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForcedPlaySound : 1;                             		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2605 ];

		return pClassPointer;
	};

};

//UClass* UShowFaceFxKey::pClassPointer = NULL;

// Class Engine.ShowFacialAniKey
// 0x0014 (0x0064 - 0x0050)
class UShowFacialAniKey : public UShowKey
{
public:
	struct FName                                       AnimName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimFadeInSec;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimFadeOutSec;                                   		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimExpSec;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2607 ];

		return pClassPointer;
	};

};

//UClass* UShowFacialAniKey::pClassPointer = NULL;

// Class Engine.ShowHitKey
// 0x0000 (0x0050 - 0x0050)
class UShowHitKey : public UShowKey
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2609 ];

		return pClassPointer;
	};

};

//UClass* UShowHitKey::pClassPointer = NULL;

// Class Engine.ShowMaterialKey
// 0x002C (0x0084 - 0x0058)
class UShowMaterialKey : public UShowDurationKey
{
public:
	TArray< int >                                      arrMeshIndex;                                     		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           arrDependencyTrailName;                           		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ApplyType;                                        		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ApplyPriority;                                    		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strName;                                          		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fValue;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2611 ];

		return pClassPointer;
	};

};

//UClass* UShowMaterialKey::pClassPointer = NULL;

// Class Engine.ShowMultiHitKey
// 0x0004 (0x0054 - 0x0050)
class UShowMultiHitKey : public UShowKey
{
public:
	float                                              fDamageRate;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2613 ];

		return pClassPointer;
	};

};

//UClass* UShowMultiHitKey::pClassPointer = NULL;

// Class Engine.ShowObject
// 0x000C (0x0048 - 0x003C)
class UShowObject : public UObject
{
public:
	TArray< class UShowKey* >                          EventKeys;                                        		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2615 ];

		return pClassPointer;
	};

};

//UClass* UShowObject::pClassPointer = NULL;

// Class Engine.ShowParameterBlock
// 0x0004 (0x0040 - 0x003C)
class UShowParameterBlock : public UObject
{
public:
	int                                                RefCount;                                         		// 0x003C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2617 ];

		return pClassPointer;
	};

};

//UClass* UShowParameterBlock::pClassPointer = NULL;

// Class Engine.ShowParticleAnimKey
// 0x0058 (0x00A8 - 0x0050)
class UShowParticleAnimKey : public UShowKey
{
public:
	TArray< struct FParticleAnimInfo >                 ParticleInfos;                                    		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebugDisplay : 1;                                		// 0x005C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bPlaying : 1;                                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAttachToSocket : 1;                              		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPosOnly : 1;                                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class USkeletalMesh*                               Mesh;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSets;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSeqName;                                      		// 0x0068 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AnimSpeed;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttachMeshIndex;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativePosition;                                 		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strAttachBoneName;                                		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnScaler;                                		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler;                                 		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler;                                 		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2619 ];

		return pClassPointer;
	};

};

//UClass* UShowParticleAnimKey::pClassPointer = NULL;

// Class Engine.ShowParticleKey
// 0x008C (0x00DC - 0x0050)
class UShowParticleKey : public UShowKey
{
public:
	class UParticleSystem*                             ParticleSys;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttachMeshIndex;                                  		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttachToSocket : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPosOnly : 1;                                     		// 0x0058 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseExternalColor : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseGeoParticle : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseSocketRelativeValue : 1;                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseAdjustLocationSocketScale : 1;                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      UseParticleParameter : 1;                         		// 0x0058 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDebugDisplay : 1;                                		// 0x0058 (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAttacked : 1;                                    		// 0x0058 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerrainCheck : 1;                                		// 0x0058 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWorldPos : 1;                                    		// 0x0058 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	struct FVector                                     DeltaPos;                                         		// 0x005C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x0068 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0074 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AutoScale;                                        		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RefParticleSysParamIndex;                         		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WorldTargetType;                                  		// 0x0082 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ParticleActivePos;                                		// 0x0083 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitForce;                                         		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                UseGeoParticleSlot;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strCasterAttackBone;                              		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strTargetAttectedBone;                            		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDecalradiusMax;                                  		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fDecalradiusMin;                                  		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fBaseAddHeight;                                   		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strWorldPosBone;                                  		// 0x00B8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strAttachBone;                                    		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnScaler;                                		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler;                                 		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler;                                 		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2621 ];

		return pClassPointer;
	};

};

//UClass* UShowParticleKey::pClassPointer = NULL;

// Class Engine.ShowParticleMaterialKey
// 0x0074 (0x00C4 - 0x0050)
class UShowParticleMaterialKey : public UShowKey
{
public:
	unsigned char                                      MaterialParticleType;                             		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      WeaponSize;                                       		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleActivePos;                                		// 0x0052 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttachToSocket : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDebugDisplay : 1;                                		// 0x0054 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAttacked : 1;                                    		// 0x0054 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWorldPos : 1;                                    		// 0x0054 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPosOnly : 1;                                     		// 0x0054 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct FVector                                     DeltaPos;                                         		// 0x0058 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitForce;                                         		// 0x007C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strCasterAttackBone;                              		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strTargetAttectedBone;                            		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strWorldPosBone;                                  		// 0x00A0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strAttachBone;                                    		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnScaler;                                		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler;                                 		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler;                                 		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2623 ];

		return pClassPointer;
	};

};

//UClass* UShowParticleMaterialKey::pClassPointer = NULL;

// Class Engine.ShowParticlePhysicKey
// 0x0074 (0x00C4 - 0x0050)
class UShowParticlePhysicKey : public UShowKey
{
public:
	unsigned long                                      bAttachToSocket : 1;                              		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDebugDisplay : 1;                                		// 0x0050 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAttacked : 1;                                    		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWorldPos : 1;                                    		// 0x0050 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPosOnly : 1;                                     		// 0x0050 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct FVector                                     DeltaPos;                                         		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitForce;                                         		// 0x0078 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strCasterAttackBone;                              		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strTargetAttectedBone;                            		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleActivePos;                                		// 0x009C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strWorldPosBone;                                  		// 0x00A0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strAttachBone;                                    		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnScaler;                                		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler;                                 		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler;                                 		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2625 ];

		return pClassPointer;
	};

};

//UClass* UShowParticlePhysicKey::pClassPointer = NULL;

// Class Engine.ShowPawnOutlineBloomKey
// 0x0014 (0x0064 - 0x0050)
class UShowPawnOutlineBloomKey : public UShowKey
{
public:
	float                                              StartAlpha;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndAlpha;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayTime;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndScale;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OutLineColor;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2627 ];

		return pClassPointer;
	};

};

//UClass* UShowPawnOutlineBloomKey::pClassPointer = NULL;

// Class Engine.ShowPawnParticleAttachmentKey
// 0x001C (0x006C - 0x0050)
class UShowPawnParticleAttachmentKey : public UShowKey
{
public:
	class UParticleSystem*                             AddParticleSys;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepositionBlendTime;                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     RemoveTransferBone;                               		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemoveTransferBoneTime;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttachedParticleModCount;                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2629 ];

		return pClassPointer;
	};

};

//UClass* UShowPawnParticleAttachmentKey::pClassPointer = NULL;

// Class Engine.ShowPhysicsKey
// 0x0022 (0x0072 - 0x0050)
class UShowPhysicsKey : public UShowKey
{
public:
	struct FVector                                     vDir;                                             		// 0x0050 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     vRandDir;                                         		// 0x005C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fForce;                                           		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                nBoneIndex;                                       		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      PhysicsType;                                      		// 0x0070 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DamageSoundType;                                  		// 0x0071 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2631 ];

		return pClassPointer;
	};

};

//UClass* UShowPhysicsKey::pClassPointer = NULL;

// Class Engine.ShowPlayerCameraAnimKey
// 0x0010 (0x0060 - 0x0050)
class UShowPlayerCameraAnimKey : public UShowKey
{
public:
	class UPlayerCameraAnim*                           PlayerCameraAnimTemplate;                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAffectUserCamDist : 1;                           		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKeepPreviousInitialState : 1;                    		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRetainLastState : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTrackTargetPawnLocation : 1;                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLockAfterAnim : 1;                               		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOverridePreviousAnim : 1;                        		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableNearCameraPawnTransparentization : 1;      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              BlendInTimePercentage;                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTimePercentage;                           		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2633 ];

		return pClassPointer;
	};

};

//UClass* UShowPlayerCameraAnimKey::pClassPointer = NULL;

// Class Engine.ShowPlayerCameraAnimRandomKey
// 0x0018 (0x0068 - 0x0050)
class UShowPlayerCameraAnimRandomKey : public UShowKey
{
public:
	TArray< struct FPlayerCameraAnimRandomEntry >      PlayerCameraAnims;                                		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAffectUserCamDist : 1;                           		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKeepPreviousInitialState : 1;                    		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRetainLastState : 1;                             		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTrackTargetPawnLocation : 1;                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLockAfterAnim : 1;                               		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOverridePreviousAnim : 1;                        		// 0x005C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableNearCameraPawnTransparentization : 1;      		// 0x005C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              BlendInTimePercentage;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTimePercentage;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2635 ];

		return pClassPointer;
	};

};

//UClass* UShowPlayerCameraAnimRandomKey::pClassPointer = NULL;

// Class Engine.ShowPointLightKey
// 0x007C (0x00CC - 0x0050)
class UShowPointLightKey : public UShowKey
{
public:
	unsigned char                                      AffectType;                                       		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              DurationTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Offset;                                           		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Radius;                                           		// 0x0074 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Brightness;                                       		// 0x0090 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      LightColor;                                       		// 0x00AC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebugDisplay : 1;                                		// 0x00C8 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2637 ];

		return pClassPointer;
	};

};

//UClass* UShowPointLightKey::pClassPointer = NULL;

// Class Engine.ShowPostProcKey
// 0x0024 (0x007C - 0x0058)
class UShowPostProcKey : public UShowDurationKey
{
public:
	float                                              FadeInTime;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessParameter*                       PostProcessParameter;                             		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      PostprocAppliedObject;                            		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMotionBlurSkinning : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseOverlay : 1;                                  		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MotionBlurSkinning_Duration;                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurSkinning_VelocityScale;                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          OverlayMaterial;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2639 ];

		return pClassPointer;
	};

};

//UClass* UShowPostProcKey::pClassPointer = NULL;

// Class Engine.ShowSkillParameterBlock
// 0x0008 (0x0048 - 0x0040)
class UShowSkillParameterBlock : public UShowParameterBlock
{
public:
	class AActor*                                      Caster;                                           		// 0x0040 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2641 ];

		return pClassPointer;
	};

};

//UClass* UShowSkillParameterBlock::pClassPointer = NULL;

// Class Engine.ShowSocketControllerKey
// 0x008C (0x00E4 - 0x0058)
class UShowSocketControllerKey : public UShowDurationKey
{
public:
	unsigned char                                      MovementType;                                     		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MeshIndex;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SocketName;                                       		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActionTime;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReturnTime;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SocketPosOnly : 1;                                		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTerrainCheck : 1;                                		// 0x0074 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnDataPosOnly : 1;                            		// 0x0074 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTrailBodyPosOnly : 1;                            		// 0x0074 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBaseAddHeight;                                   		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                iWorldPosMeshIndex;                               		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strWorldPosBone;                                  		// 0x0098 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     vWorldDeltaPos;                                   		// 0x00A4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strTrailBodyBone;                                 		// 0x00B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                iAttachCasterMeshIndex;                           		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strAttachCasterBone;                              		// 0x00C0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                iAttachTargetMeshIndex;                           		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     strAttachTagetBone;                               		// 0x00D0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                OrbitUseModCount;                                 		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             OrbitUseParticleSys;                              		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2643 ];

		return pClassPointer;
	};

};

//UClass* UShowSocketControllerKey::pClassPointer = NULL;

// Class Engine.ShowSocketDelayMoveKey
// 0x001C (0x006C - 0x0050)
class UShowSocketDelayMoveKey : public UShowKey
{
public:
	int                                                MeshIndex;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SocketName;                                       		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMoveTime;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReturnBlendTime;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowupTimeRate;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2645 ];

		return pClassPointer;
	};

};

//UClass* UShowSocketDelayMoveKey::pClassPointer = NULL;

// Class Engine.ShowSoundKey
// 0x0010 (0x0060 - 0x0050)
class UShowSoundKey : public UShowKey
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fVolumeLevel;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTrack : 1;                                    		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerRelationOnly : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoStopOnShowStop : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseWorldTargetMode : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              PlayerRelationSoundMultiplier;                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2647 ];

		return pClassPointer;
	};

};

//UClass* UShowSoundKey::pClassPointer = NULL;

// Class Engine.ShowSoundMaterialKey
// 0x0010 (0x0060 - 0x0050)
class UShowSoundMaterialKey : public UShowKey
{
public:
	unsigned char                                      MaterialSoundType;                                		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fVolumeLevel;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PlayerRelationSoundMultiplier;                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2649 ];

		return pClassPointer;
	};

};

//UClass* UShowSoundMaterialKey::pClassPointer = NULL;

// Class Engine.ShowSpawnKey
// 0x0048 (0x0098 - 0x0050)
class UShowSpawnKey : public UShowKey
{
public:
	class UObject*                                     SpawnObject;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExtraParticle;                                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vSpawnScale;                                      		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vSpawnPos;                                        		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnSpotType;                                    		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnObjectType;                                  		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalTime;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBeam : 1;                                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBeamProjectile : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceKillByTotalTime : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BeamFadeTime;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnScaler;                                		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler;                                 		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler;                                 		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectSpawnScaler_Extra;                          		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectTimeScaler_Extra;                           		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EffectLifeScaler_Extra;                           		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2651 ];

		return pClassPointer;
	};

};

//UClass* UShowSpawnKey::pClassPointer = NULL;

// Class Engine.ShowSplashParticleKey
// 0x0004 (0x0054 - 0x0050)
class UShowSplashParticleKey : public UShowKey
{
public:
	class UParticleSystem*                             ParticleSys;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2653 ];

		return pClassPointer;
	};

};

//UClass* UShowSplashParticleKey::pClassPointer = NULL;

// Class Engine.ShowSpotLightOuterConeKey
// 0x001C (0x0074 - 0x0058)
class UShowSpotLightOuterConeKey : public UShowDurationKey
{
public:
	struct FRawDistributionFloat                       OuterConeAngle;                                   		// 0x0058 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2655 ];

		return pClassPointer;
	};

};

//UClass* UShowSpotLightOuterConeKey::pClassPointer = NULL;

// Class Engine.ShowTerminateSoundNotifiesKey
// 0x0000 (0x0050 - 0x0050)
class UShowTerminateSoundNotifiesKey : public UShowKey
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2657 ];

		return pClassPointer;
	};

};

//UClass* UShowTerminateSoundNotifiesKey::pClassPointer = NULL;

// Class Engine.ShowTrackInputParameter
// 0x00DC (0x011C - 0x0040)
class UShowTrackInputParameter : public UShowParameterBlock
{
public:
	TArray< struct FShowObjectPlayInfo >               HitShowObjectPlayInfo;                            		// 0x0040 (0x000C) [0x0000000000000000]              
	TArray< struct FShowObjectPlayInfo >               DieShowObjectPlayInfo;                            		// 0x004C (0x000C) [0x0000000000000000]              
	struct FVector                                     WorldTargetParticlePos;                           		// 0x0058 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     WorldTargetParticleScale;                         		// 0x0064 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bLastAnimPause : 1;                               		// 0x0070 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bSkipAnimKey : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      NoneTargetLinear : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDisableInfiniteLoop : 1;                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      StopPreviousAudioOnTrack : 1;                     		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowBalloon : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForcedActionWorldTarget : 1;                     		// 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	TArray< struct FHitEventParam >                    HitEventParamList;                                		// 0x0074 (0x000C) [0x0000000000000000]              
	TArray< struct FShowKnockBackInfo >                knockbackinfoList;                                		// 0x0080 (0x000C) [0x0000000000000000]              
	TArray< struct FDieEventParam >                    DieEventParamList;                                		// 0x008C (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           ParticleKeyResList;                               		// 0x0098 (0x000C) [0x0000000000000000]              
	struct Fsqword                                     OwnerId;                                          		// 0x00A4 (0x0008) [0x0000000000000000]              
	int                                                PrimaryPawnIndex;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                SecondaryPawnIndex;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FString                                     strWeaponAnimSeqPrefix;                           		// 0x00B4 (0x000C) [0x0000000000000000]              
	int                                                AnimPriorityType;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              Damage;                                           		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                DamageAttackerPawnIndex;                          		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                DamageSuffererPawnIndex;                          		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                DamageSignalType;                                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	TArray< struct FAdditionalDamage >                 AdditionalDamageSignalType;                       		// 0x00D4 (0x000C) [0x0000000000000000]              
	int                                                RelateTrackHandle;                                		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FVector                                     ActionWorldPos;                                   		// 0x00E4 (0x000C) [0x0000000000000000]              
	float                                              SpawnDataTime;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              ActionTime;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              ExtraFlightTime;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              LoopTimeLimit;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                AudioTrackType;                                   		// 0x0100 (0x0004) [0x0000000000000000]              
	struct FVector                                     ColorOverLife;                                    		// 0x0104 (0x000C) [0x0000000000000000]              
	struct FVector                                     ForcedActionWorldTargetPos;                       		// 0x0110 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2659 ];

		return pClassPointer;
	};

};

//UClass* UShowTrackInputParameter::pClassPointer = NULL;

// Class Engine.ShowTrackOutputParameter
// 0x0024 (0x0064 - 0x0040)
class UShowTrackOutputParameter : public UShowParameterBlock
{
public:
	TArray< int >                                      HitShowTracks;                                    		// 0x0040 (0x000C) [0x0000000000000000]              
	TArray< int >                                      DieShowTracks;                                    		// 0x004C (0x000C) [0x0000000000000000]              
	TArray< struct FShowInstanceDataKeyCopy >          ProjectileInActionInstanceDataKeys;               		// 0x0058 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2661 ];

		return pClassPointer;
	};

};

//UClass* UShowTrackOutputParameter::pClassPointer = NULL;

// Class Engine.ShowTrailAnimKey
// 0x0014 (0x0064 - 0x0050)
class UShowTrailAnimKey : public UShowKey
{
public:
	class UAnimSet*                                    TrailAnimset;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strAnim;                                          		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FixByTime : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDestroyMeshOnEnd : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2663 ];

		return pClassPointer;
	};

};

//UClass* UShowTrailAnimKey::pClassPointer = NULL;

// Class Engine.ShowTrailMeshKey
// 0x003C (0x008C - 0x0050)
class UShowTrailMeshKey : public UShowKey
{
public:
	unsigned long                                      bTrackSpawnObject : 1;                            		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDestroyAfterAction : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              fDestroyDelayTime;                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strAttachBone;                                    		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vAttachPos;                                       		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               TrailBoneMesh;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vMeshScale;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FShowTrailInfo >                    TrailInfos;                                       		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2665 ];

		return pClassPointer;
	};

};

//UClass* UShowTrailMeshKey::pClassPointer = NULL;

// Class Engine.ShowTrailPawnKey
// 0x0024 (0x007C - 0x0058)
class UShowTrailPawnKey : public UShowDurationKey
{
public:
	class UTrailTemplate*                              TrailSys;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttachMeshIndex;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttachToSocket : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     strStartBone;                                     		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strEndBone;                                       		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2667 ];

		return pClassPointer;
	};

};

//UClass* UShowTrailPawnKey::pClassPointer = NULL;

// Class Engine.ShowTrailWeaponKey
// 0x0005 (0x005D - 0x0058)
class UShowTrailWeaponKey : public UShowDurationKey
{
public:
	class UTrailTemplate*                              TrailSys;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AttachedWeapon;                                   		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2669 ];

		return pClassPointer;
	};

};

//UClass* UShowTrailWeaponKey::pClassPointer = NULL;

// Class Engine.ShowUIParticleKey
// 0x001C (0x006C - 0x0050)
class UShowUIParticleKey : public UShowKey
{
public:
	class UParticleSystem*                             ParticleSys;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScreenObjectTag;                                  		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PosX;                                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PosY;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PostRender : 1;                                   		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2671 ];

		return pClassPointer;
	};

};

//UClass* UShowUIParticleKey::pClassPointer = NULL;

// Class Engine.ShowVoiceKey
// 0x0028 (0x0078 - 0x0050)
class UShowVoiceKey : public UShowKey
{
public:
	unsigned char                                      AttackVoiceInfo;                                  		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HeavyAttackInfo;                                  		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreAttackInfo;                                    		// 0x0052 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DamageInfo;                                       		// 0x0053 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DeathInfo;                                        		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BreathInfo;                                       		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MoveInfo;                                         		// 0x0056 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SocialInfo;                                       		// 0x0057 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysicalCastInfo;                                 		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MagicalCastInfo;                                  		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      KnockBackInfo;                                    		// 0x005A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SPAttackInfo;                                     		// 0x005B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IdleVoiceInfo;                                    		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CastShotInfo;                                     		// 0x005D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActShotInfo;                                      		// 0x005E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShortActShotInfo;                                 		// 0x005F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CombatInfo;                                       		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PlayAttackVoice : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PlayHeavyAttack : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      PlayPreAttack : 1;                                		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      PlayDamage : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      PlayDeath : 1;                                    		// 0x0064 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      PlayBreath : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      PlayMove : 1;                                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      PlaySocial : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      PlayPhysicalCast : 1;                             		// 0x0064 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      PlayMagicalCast : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      PlayKnockBack : 1;                                		// 0x0064 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      PlaySPAttack : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      PlayIdleVoice : 1;                                		// 0x0064 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      PlayCastShot : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      PlayActShot : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      PlayShortActShot : 1;                             		// 0x0064 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      PlayCombat : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bMute : 1;                                        		// 0x0064 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bNoStopOnShowStop : 1;                            		// 0x0064 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	float                                              Volume;                                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RandomSkipPercent;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2673 ];

		return pClassPointer;
	};

};

//UClass* UShowVoiceKey::pClassPointer = NULL;

// Class Engine.BillBoardActor
// 0x0004 (0x0214 - 0x0210)
class ABillBoardActor : public AActor
{
public:
	class UBillboardComponent*                         BillBoardCom;                                     		// 0x0210 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2675 ];

		return pClassPointer;
	};

};

//UClass* ABillBoardActor::pClassPointer = NULL;

// Class Engine.BillboardComponent
// 0x001C (0x022C - 0x0210)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      BillBoardMeshType;                                		// 0x0210 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BillBoardAxisType;                                		// 0x0211 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          MaterialInterface;                                		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ExtentSize;                                       		// 0x0218 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnableLodDistance : 1;                           		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MinDistance;                                      		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              MaxDistance;                                      		// 0x0228 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2677 ];

		return pClassPointer;
	};

};

//UClass* UBillboardComponent::pClassPointer = NULL;

// Class Engine.BillboardComponentFactory
// 0x0004 (0x0044 - 0x0040)
class UBillboardComponentFactory : public UPrimitiveComponentFactory
{
public:
	class UBillboardComponent*                         BillBoardCom;                                     		// 0x0040 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2679 ];

		return pClassPointer;
	};

};

//UClass* UBillboardComponentFactory::pClassPointer = NULL;

// Class Engine.SeqAct_MakeNoise
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_MakeNoise : public USequenceAction
{
public:
	float                                              Loudness;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5943 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_MakeNoise::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x010C - 0x00E8)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeOffset;                                   		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5945 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_AttachToActor::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHidden
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleBasedActors : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5954 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleHidden::pClassPointer = NULL;

// Class Engine.SeqAct_Teleport
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5967 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_Teleport::pClassPointer = NULL;

// Class Engine.SeqAct_HealDamage
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_HealDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HealAmount;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5969 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_HealDamage::pClassPointer = NULL;

// Class Engine.SeqAct_Destroy
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_Destroy : public USequenceAction
{
public:
	unsigned long                                      bDestroyBasedActors : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5978 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_Destroy::pClassPointer = NULL;

// Class Engine.LocalMessage
// 0x0014 (0x0050 - 0x003C)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                   		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Lifetime;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              PosY;                                             		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                FontSize;                                         		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6004 ];

		return pClassPointer;
	};

	bool PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 );
	bool IsKeyObjectiveMessage ( int Switch );
	bool IsConsoleMessage ( int Switch );
	float GetLifeTime ( int Switch );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
	float GetPos ( int Switch, class AHUD* myHUD );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

//UClass* ULocalMessage::pClassPointer = NULL;

// Class Engine.AccessControl
// 0x00D4 (0x02E4 - 0x0210)
class AAccessControl : public AInfo
{
public:
	TArray< struct FString >                           IPPolicies;                                       		// 0x0210 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FUniqueNetId >                      BannedIDs;                                        		// 0x021C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IPBanned;                                         		// 0x0228 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     WrongPassword;                                    		// 0x0234 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NeedPassword;                                     		// 0x0240 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     SessionBanned;                                    		// 0x024C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     KickedMsg;                                        		// 0x0258 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     DefaultKickReason;                                		// 0x0264 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     IdleKickReason;                                   		// 0x0270 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	class UClass*                                      AdminClass;                                       		// 0x027C (0x0004) [0x0000000000000000]              
	struct FString                                     AdminPassword;                                    		// 0x0280 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     GamePassword;                                     		// 0x028C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ACDisplayText[ 0x3 ];                             		// 0x0298 (0x0024) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     ACDescText[ 0x3 ];                                		// 0x02BC (0x0024) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6456 ];

		return pClassPointer;
	};

	bool IsIDBanned ( struct FUniqueNetId* NetId );
	bool CheckIPPolicy ( struct FString Address );
	void eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError );
	bool ValidLogin ( struct FString UserName, struct FString Password );
	bool ParseAdminOptions ( struct FString Options );
	void AdminExited ( class APlayerController* P );
	void AdminEntered ( class APlayerController* P );
	bool AdminLogout ( class APlayerController* P );
	bool AdminLogin ( class APlayerController* P, struct FString Password );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	void KickBan ( struct FString Target );
	void Kick ( struct FString Target );
	class AController* GetControllerFromString ( struct FString Target );
	bool RequiresPassword ( );
	void SetGamePassword ( struct FString P );
	bool SetAdminPassword ( struct FString P );
	bool IsAdmin ( class APlayerController* P );
};

//UClass* AAccessControl::pClassPointer = NULL;

// Class Engine.Admin
// 0x0000 (0x0598 - 0x0598)
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6657 ];

		return pClassPointer;
	};

	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
};

//UClass* AAdmin::pClassPointer = NULL;

// Class Engine.EmitterSpawnable
// 0x0007 (0x0220 - 0x0219)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6685 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

//UClass* AEmitterSpawnable::pClassPointer = NULL;

// Class Engine.KAssetSpawnable
// 0x0000 (0x0220 - 0x0220)
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6702 ];

		return pClassPointer;
	};

};

//UClass* AKAssetSpawnable::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x0244 - 0x0244)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6718 ];

		return pClassPointer;
	};

};

//UClass* ASkeletalMeshActorSpawnable::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x0074 - 0x0074)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 6719 ];

		return pClassPointer;
	};

};

//UClass* UActorFactorySkeletalMeshMAT::pClassPointer = NULL;

// Class Engine.SeqEvent_Death
// 0x0000 (0x010C - 0x010C)
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7090 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_Death::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterface
// 0x00B4 (0x00F0 - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLoginChange__Delegate;                        		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                     		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMutingChange__Delegate;                       		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                      		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                        		// 0x006C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                    		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                		// 0x009C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;              		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;            		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;               		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                 		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;             		// 0x00D8 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;              		// 0x00E4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8433 ];

		return pClassPointer;
	};

	bool DeleteMessage ( unsigned char LocalUserNum, int MessageIndex );
	void ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages );
	void ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	bool JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend );
	void ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName );
	bool SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text );
	bool SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text );
	bool SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message );
	void ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend );
	bool DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	bool AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	void ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful );
	bool AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message );
	bool AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message );
	struct FString GetKeyboardInputResults ( unsigned char* bWasCanceled );
	void ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void OnKeyboardInputComplete ( unsigned long bWasSuccessful );
	bool ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength );
	void SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties );
	unsigned char GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends );
	void ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt );
	void ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	class UOnlineProfileSettings* GetProfileSettings ( unsigned char LocalUserNum );
	void ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	void ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum );
	void AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum );
	bool ShowFriendsUI ( unsigned char LocalUserNum );
	bool IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	unsigned char CanShowPresenceInformation ( unsigned char LocalUserNum );
	unsigned char CanViewPlayerProfiles ( unsigned char LocalUserNum );
	unsigned char CanPurchaseContent ( unsigned char LocalUserNum );
	unsigned char CanDownloadUserContent ( unsigned char LocalUserNum );
	unsigned char CanCommunicate ( unsigned char LocalUserNum );
	unsigned char CanPlayOnline ( unsigned char LocalUserNum );
	struct FString GetPlayerNickname ( unsigned char LocalUserNum );
	bool GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	void ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	bool Logout ( unsigned char LocalUserNum );
	void ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	bool AutoLogin ( );
	bool Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly );
	bool ShowLoginUI ( unsigned long bShowOnlineOnly );
	void OnFriendsChange ( );
	void OnMutingChange ( );
	void OnLoginCancelled ( );
	void OnLoginChange ( );
};

//UClass* UOnlinePlayerInterface::pClassPointer = NULL;

// Class Engine.DebugCameraController
// 0x0010 (0x05A8 - 0x0598)
class ADebugCameraController : public APlayerController
{
public:
	class APlayerController*                           OryginalControllerRef;                            		// 0x0598 (0x0004) [0x0000000000000000]              
	class UPlayer*                                     OryginalPlayer;                                   		// 0x059C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFrozenRendering : 1;                           		// 0x05A0 (0x0004) [0x0000000000000000] [0x00000001] 
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x05A4 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8434 ];

		return pClassPointer;
	};

	void DisableDebugCamera ( );
	void NormalSpeed ( );
	void MoreSpeed ( );
	void SetFreezeRendering ( );
	void OnDeactivate ( class APlayerController* PC );
	void OnActivate ( class APlayerController* PC );
	void eventPostBeginPlay ( );
};

//UClass* ADebugCameraController::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableTurning : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHidePlayer : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideHUD : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8455 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleCinematicMode::pClassPointer = NULL;

// Class Engine.SeqAct_ForceFeedback
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8463 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ForceFeedback::pClassPointer = NULL;

// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8471 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_FlyThroughHasEnded::pClassPointer = NULL;

// Class Engine.OnlineGameInterface
// 0x0090 (0x00CC - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;           		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUpdateOnlineGameComplete__Delegate;           		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;          		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;            		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;      		// 0x006C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;             		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;             		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;           		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;            		// 0x009C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;              		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;    		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                 		// 0x00C0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8508 ];

		return pClassPointer;
	};

	bool RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName );
	void ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings );
	TArray< struct FOnlineArbitrationRegistrant > GetArbitratedPlayers ( struct FName SessionName );
	void ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterForArbitration ( struct FName SessionName );
	void ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool EndOnlineGame ( struct FName SessionName );
	void ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool StartOnlineGame ( struct FName SessionName );
	void ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void OnUnregisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID );
	void ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void OnRegisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited );
	bool GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo );
	void ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	bool QueryNonAdvertisedData ( int StartAt, int NumberToQuery );
	bool FreeSearchResults ( class UOnlineGameSearch* Search );
	class UOnlineGameSearch* GetGameSearch ( );
	bool BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo );
	void ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool CancelFindOnlineGames ( );
	void ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings );
	void ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool DestroyOnlineGame ( struct FName SessionName );
	class UOnlineGameSettings* GetGameSettings ( struct FName SessionName );
	void ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData );
	void ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings );
};

//UClass* UOnlineGameInterface::pClassPointer = NULL;

// Class Engine.DmgType_Suicided
// 0x0000 (0x008C - 0x008C)
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8526 ];

		return pClassPointer;
	};

};

//UClass* UDmgType_Suicided::pClassPointer = NULL;

// Class Engine.ScoreBoard
// 0x0004 (0x0498 - 0x0494)
class AScoreBoard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                             		// 0x0494 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8543 ];

		return pClassPointer;
	};

	void ChangeState ( unsigned long bIsVisible );
	void UpdateScoreBoard ( );
	bool UpdateGRI ( );
	void DrawHUD ( );
};

//UClass* AScoreBoard::pClassPointer = NULL;

// Class Engine.CoverReplicator
// 0x000C (0x021C - 0x0210)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray< struct FCoverReplicationInfo >             CoverReplicationData;                             		// 0x0210 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8552 ];

		return pClassPointer;
	};

	void ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendManualCoverTypeSlots ( int Index );
	void NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices );
	void ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone );
	void ServerSendAdjustedSlots ( int Index );
	void NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone );
	void ServerSendDisabledSlots ( int Index );
	void NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone );
	void ServerSendEnabledSlots ( int Index );
	void NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendInitialCoverReplicationInfo ( int Index );
	void ReplicateInitialCoverInfo ( );
	void PurgeOldEntries ( );
};

//UClass* ACoverReplicator::pClassPointer = NULL;

// Class Engine.AmbientCreatureNode
// 0x0008 (0x0218 - 0x0210)
class AAmbientCreatureNode : public AInfo
{
public:
	float                                              Radius;                                           		// 0x0210 (0x0004) [0x0000000000000000]              
	class UDrawSphereComponent*                        RadiusComponent;                                  		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8672 ];

		return pClassPointer;
	};

	void PreBeginPlay ( );
};

//UClass* AAmbientCreatureNode::pClassPointer = NULL;

// Class Engine.SeqAct_SetSkeletalMesh
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9682 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetSkeletalMesh::pClassPointer = NULL;

// Class Engine.AmbientSkeletalCreature
// 0x0094 (0x02D8 - 0x0244)
class AAmbientSkeletalCreature : public ASkeletalMeshActor
{
public:
	unsigned long                                      bFlock : 1;                                       		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseFollowPhysics : 1;                            		// 0x0244 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFixedDistOffset : 1;                             		// 0x0244 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMimicLeader : 1;                                 		// 0x0244 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      RandomSpeed : 1;                                  		// 0x0244 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      FlockType;                                        		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Leader;                                           		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowDistance;                                   		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowLag;                                        		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FollowRotRate;                                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowStrength;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFollowSpeed;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowFPS;                                        		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DistOffset;                                       		// 0x0268 (0x000C) [0x0000000000000000]              
	struct FRotator                                    RotRateOffset;                                    		// 0x0274 (0x000C) [0x0000000000000000]              
	TArray< struct FVector >                           LastLocation;                                     		// 0x0280 (0x000C) [0x0000000000000000]              
	float                                              ActualFollowLag;                                  		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              ElapsedLag;                                       		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              InitialLag;                                       		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              FollowInterval;                                   		// 0x029C (0x0004) [0x0000000000000000]              
	struct FRotator                                    OrigRotRate;                                      		// 0x02A0 (0x000C) [0x0000000000000000]              
	TArray< class AAmbientCreatureNode* >              MyNodes;                                          		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTravelTime;                                    		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTravelTime;                                    		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMin;                                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMax;                                         		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MoveLocation;                                     		// 0x02CC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9787 ];

		return pClassPointer;
	};

	void Tick ( float Delta );
	void SetDest ( class AAmbientCreatureNode* inNode );
	void SetRandDest ( );
	void PostBeginPlay ( );
};

//UClass* AAmbientSkeletalCreature::pClassPointer = NULL;

// Class Engine.AmbientSkeletalCreature_Fish
// 0x001C (0x02F4 - 0x02D8)
class AAmbientSkeletalCreature_Fish : public AAmbientSkeletalCreature
{
public:
	unsigned long                                      bFalloff : 1;                                     		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FRotator                                    BurstRotRate;                                     		// 0x02DC (0x000C) [0x0000000000000000]              
	float                                              OrigSpeed;                                        		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              BurstSpeed;                                       		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                BurstPercent;                                     		// 0x02F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9838 ];

		return pClassPointer;
	};

	void Tick ( float Delta );
	void SetRandDest ( );
	void PostBeginPlay ( );
};

//UClass* AAmbientSkeletalCreature_Fish::pClassPointer = NULL;

// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x0244 - 0x0230)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                            		// 0x0230 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bFadeOnToggle : 1;                                		// 0x0230 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              FadeInDuration;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInVolumeLevel;                                		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDuration;                                  		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutVolumeLevel;                               		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9943 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void StopPlaying ( );
	void StartPlaying ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

//UClass* AAmbientSoundSimpleToggleable::pClassPointer = NULL;

// Class Engine.AmbientStaticCreature
// 0x009C (0x02AC - 0x0210)
class AAmbientStaticCreature : public AActor
{
public:
	unsigned long                                      bFlock : 1;                                       		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseFollowPhysics : 1;                            		// 0x0210 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFixedDistOffset : 1;                             		// 0x0210 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMimicLeader : 1;                                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      RandomSpeed : 1;                                  		// 0x0210 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      FlockType;                                        		// 0x0214 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Leader;                                           		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowDistance;                                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowLag;                                        		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FollowRotRate;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowStrength;                                   		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFollowSpeed;                                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowFPS;                                        		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DistOffset;                                       		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FRotator                                    RotRateOffset;                                    		// 0x0240 (0x000C) [0x0000000000000000]              
	TArray< struct FVector >                           LastLocation;                                     		// 0x024C (0x000C) [0x0000000000000000]              
	float                                              ActualFollowLag;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              ElapsedLag;                                       		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              InitialLag;                                       		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              FollowInterval;                                   		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FRotator                                    OrigRotRate;                                      		// 0x026C (0x000C) [0x0000000000000000]              
	TArray< class AAmbientCreatureNode* >              MyNodes;                                          		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTravelTime;                                    		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTravelTime;                                    		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMin;                                         		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMax;                                         		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        DisplayMesh;                                      		// 0x0298 (0x0004) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x029C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	struct FVector                                     MoveLocation;                                     		// 0x02A0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10144 ];

		return pClassPointer;
	};

	void Tick ( float Delta );
	void SetDest ( class AAmbientCreatureNode* inNode );
	void SetRandDest ( );
	void PostBeginPlay ( );
};

//UClass* AAmbientStaticCreature::pClassPointer = NULL;

// Class Engine.AmbientStaticCreature_Fish
// 0x001C (0x02C8 - 0x02AC)
class AAmbientStaticCreature_Fish : public AAmbientStaticCreature
{
public:
	unsigned long                                      bFalloff : 1;                                     		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FRotator                                    BurstRotRate;                                     		// 0x02B0 (0x000C) [0x0000000000000000]              
	float                                              OrigSpeed;                                        		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              BurstSpeed;                                       		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                BurstPercent;                                     		// 0x02C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10195 ];

		return pClassPointer;
	};

	void Tick ( float Delta );
	void SetRandDest ( );
	void PostBeginPlay ( );
};

//UClass* AAmbientStaticCreature_Fish::pClassPointer = NULL;

// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0024 (0x0064 - 0x0040)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GroupName;                                        		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AnimName;                                         		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PlayFrequency;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10839 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

//UClass* UAnimNotify_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.AnimNotify_ViewShake
// 0x004C (0x008C - 0x0040)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              ShakeRadius;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotAmplitude;                                     		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotFrequency;                                     		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocAmplitude;                                     		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocFrequency;                                     		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVAmplitude;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVFrequency;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10916 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

//UClass* UAnimNotify_ViewShake::pClassPointer = NULL;

// Class Engine.BroadcastHandler
// 0x0008 (0x0218 - 0x0210)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x0214 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 11556 ];

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type );
	bool AllowsBroadcast ( class AActor* broadcaster, int InLen );
	void UpdateSentText ( );
};

//UClass* ABroadcastHandler::pClassPointer = NULL;

// Class Engine.ColorScaleVolume
// 0x0010 (0x0268 - 0x0258)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                       		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12293 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

//UClass* AColorScaleVolume::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterfaceEx
// 0x0030 (0x006C - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;          		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                 		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadAchievementsComplete__Delegate;           		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13654 ];

		return pClassPointer;
	};

	bool ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, TArray< struct FUniqueNetId >* Players );
	unsigned char GetAchievements ( unsigned char LocalUserNum, int TitleId, TArray< struct FAchievementDetails >* Achievements );
	void ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void OnReadAchievementsComplete ( int TitleId );
	bool ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages );
	bool ShowPlayersUI ( unsigned char LocalUserNum );
	bool ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	void ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void OnProfileDataChanged ( );
	bool UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId );
	void ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void OnUnlockAchievementComplete ( unsigned long bWasSuccessful );
	bool UnlockAchievement ( unsigned char LocalUserNum, int AchievementId );
	bool IsDeviceValid ( int DeviceID );
	int GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName );
	void ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	bool ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI );
	bool ShowMembershipMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowContentMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText );
	bool ShowAchievementsUI ( unsigned char LocalUserNum );
	bool ShowMessagesUI ( unsigned char LocalUserNum );
	bool ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
};

//UClass* UOnlinePlayerInterfaceEx::pClassPointer = NULL;

// Class Engine.UIEvent_Initialized
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_Initialized : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 14488 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_Initialized::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyCover
// 0x000D (0x00F5 - 0x00E8)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray< int >                                      Slots;                                            		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ManualCoverType;                                  		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 15152 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_ModifyCover::pClassPointer = NULL;

// Class Engine.UIEvent_SceneActivated
// 0x0004 (0x0138 - 0x0134)
class UUIEvent_SceneActivated : public UUIEvent_Scene
{
public:
	unsigned long                                      bInitialActivation : 1;                           		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 15725 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventDeactivated ( );
};

//UClass* UUIEvent_SceneActivated::pClassPointer = NULL;

// Class Engine.UIEvent_SceneDeactivated
// 0x0000 (0x0134 - 0x0134)
class UUIEvent_SceneDeactivated : public UUIEvent_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 15733 ];

		return pClassPointer;
	};

};

//UClass* UUIEvent_SceneDeactivated::pClassPointer = NULL;

// Class Engine.OnlineSystemInterface
// 0x0048 (0x0084 - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                   		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                   		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnControllerChange__Delegate;                   		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;             		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                		// 0x006C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16553 ];

		return pClassPointer;
	};

	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents );
	void ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	bool ReadTitleFile ( struct FString FileToRead );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void OnStorageDeviceChange ( );
	unsigned char GetNATType ( );
	void ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool IsControllerConnected ( int ControllerId );
	void ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void OnControllerChange ( int ControllerId, unsigned long bIsConnected );
	void SetNetworkNotificationPosition ( unsigned char NewPos );
	unsigned char GetNetworkNotificationPosition ( );
	void ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	bool HasLinkConnection ( );
};

//UClass* UOnlineSystemInterface::pClassPointer = NULL;

// Class Engine.DebugCameraHUD
// 0x0000 (0x0494 - 0x0494)
class ADebugCameraHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17702 ];

		return pClassPointer;
	};

	void eventPostRender ( );
	void eventPostBeginPlay ( );
};

//UClass* ADebugCameraHUD::pClassPointer = NULL;

// Class Engine.DebugCameraInput
// 0x0000 (0x01C8 - 0x01C8)
class UDebugCameraInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17705 ];

		return pClassPointer;
	};

};

//UClass* UDebugCameraInput::pClassPointer = NULL;

// Class Engine.DecalLifetime
// 0x0000 (0x003C - 0x003C)
class UDecalLifetime : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18181 ];

		return pClassPointer;
	};

};

//UClass* UDecalLifetime::pClassPointer = NULL;

// Class Engine.DecalLifetimeAge
// 0x0000 (0x003C - 0x003C)
class UDecalLifetimeAge : public UDecalLifetime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18183 ];

		return pClassPointer;
	};

};

//UClass* UDecalLifetimeAge::pClassPointer = NULL;

// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18293 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetDamageInstigator::pClassPointer = NULL;

// Class Engine.VolumeTimer
// 0x0004 (0x0214 - 0x0210)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x0210 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18296 ];

		return pClassPointer;
	};

	void eventTimer ( );
	void eventPostBeginPlay ( );
};

//UClass* AVolumeTimer::pClassPointer = NULL;

// Class Engine.DialogueManager
// 0x0000 (0x0210 - 0x0210)
class ADialogueManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18300 ];

		return pClassPointer;
	};

	bool TriggerDialogueEvent ( class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator );
};

//UClass* ADialogueManager::pClassPointer = NULL;

// Class Engine.DmgType_Crushed
// 0x0000 (0x008C - 0x008C)
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18364 ];

		return pClassPointer;
	};

};

//UClass* UDmgType_Crushed::pClassPointer = NULL;

// Class Engine.DmgType_Fell
// 0x0000 (0x008C - 0x008C)
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18366 ];

		return pClassPointer;
	};

};

//UClass* UDmgType_Fell::pClassPointer = NULL;

// Class Engine.DmgType_Telefragged
// 0x0000 (0x008C - 0x008C)
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18369 ];

		return pClassPointer;
	};

};

//UClass* UDmgType_Telefragged::pClassPointer = NULL;

// Class Engine.DynamicPhysicsVolume
// 0x0000 (0x0294 - 0x0294)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18484 ];

		return pClassPointer;
	};

};

//UClass* ADynamicPhysicsVolume::pClassPointer = NULL;

// Class Engine.SeqAct_SetStaticMesh
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetStaticMesh : public USequenceAction
{
public:
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18521 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetStaticMesh::pClassPointer = NULL;

// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x0248 - 0x0248)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18525 ];

		return pClassPointer;
	};

};

//UClass* ADynamicSMActor_Spawnable::pClassPointer = NULL;

// Class Engine.DynamicTriggerVolume
// 0x0000 (0x0258 - 0x0258)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18534 ];

		return pClassPointer;
	};

};

//UClass* ADynamicTriggerVolume::pClassPointer = NULL;

// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x00E8 (0x000C) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned long                                      bOverrideScalar : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18865 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_SetParticleSysParam::pClassPointer = NULL;

// Class Engine.FailedConnect
// 0x0030 (0x0080 - 0x0050)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[ 0x4 ];                               		// 0x0050 (0x0030) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19342 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFailSwitch ( struct FString FailString );
};

//UClass* UFailedConnect::pClassPointer = NULL;

// Class Engine.GameMessage
// 0x0114 (0x0164 - 0x0050)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x0050 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     LeftMessage;                                      		// 0x005C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     FailedTeamMessage;                                		// 0x0068 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     FailedPlaceMessage;                               		// 0x0074 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     FailedSpawnMessage;                               		// 0x0080 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     EnteredMessage;                                   		// 0x008C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     MaxedOutMessage;                                  		// 0x0098 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     ArbitrationMessage;                               		// 0x00A4 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     OvertimeMessage;                                  		// 0x00B0 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     GlobalNameChange;                                 		// 0x00BC (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NewTeamMessage;                                   		// 0x00C8 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NewTeamMessageTrailer;                            		// 0x00D4 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NoNameChange;                                     		// 0x00E0 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     VoteStarted;                                      		// 0x00EC (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     VotePassed;                                       		// 0x00F8 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     MustHaveStats;                                    		// 0x0104 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     CantBeSpectator;                                  		// 0x0110 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     CantBePlayer;                                     		// 0x011C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     BecameSpectator;                                  		// 0x0128 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NewPlayerMessage;                                 		// 0x0134 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     KickWarning;                                      		// 0x0140 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     NewSpecMessage;                                   		// 0x014C (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	struct FString                                     SpecEnteredMessage;                               		// 0x0158 (0x000C) [0x0000000000008002]              ( CPF_Const | CPF_Localized | CPF_Travel | CPF_EditConst | CPF_GlobalConfig | CPF_Component | CPF_NeedCtorLink | CPF_NoExport | CPF_NoClear | CPF_EditInline | CPF_EdFindable | CPF_EditInlineUse | CPF_Deprecated | CPF_EditInlineNotify | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20731 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

//UClass* UGameMessage::pClassPointer = NULL;

// Class Engine.OnlineStatsInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;           		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;       		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20758 ];

		return pClassPointer;
	};

	bool RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid );
	struct FString GetClientStatGuid ( );
	void ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	bool RegisterHostStatGuid ( struct FString* HostStatGuid );
	struct FString GetHostStatGuid ( );
	bool WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, TArray< struct FOnlinePlayerScore >* PlayerScores );
	void ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool FlushOnlineStats ( struct FName SessionName );
	bool WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite );
	void FreeStats ( class UOnlineStatsRead* StatsRead );
	void ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void OnReadOnlineStatsComplete ( unsigned long bWasSuccessful );
	bool ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows );
	bool ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead );
	bool ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead );
	bool ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
};

//UClass* UOnlineStatsInterface::pClassPointer = NULL;

// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x0110 - 0x010C)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20763 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_PlayerSpawned::pClassPointer = NULL;

// Class Engine.GameRules
// 0x0004 (0x0214 - 0x0210)
class AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                    		// 0x0210 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20770 ];

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	struct FString GetRules ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void AddGameRules ( class AGameRules* GR );
};

//UClass* AGameRules::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelReset
// 0x0000 (0x010C - 0x010C)
class USeqEvent_LevelReset : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20776 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_LevelReset::pClassPointer = NULL;

// Class Engine.UIMessageBoxBase
// 0x005C (0x02E8 - 0x028C)
class UUIMessageBoxBase : public UUIScene
{
public:
	class UUILabel*                                    lblTitle;                                         		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUILabel*                                    lblMessage;                                       		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUILabel*                                    lblQuestion;                                      		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIImage*                                    imgQuestion;                                      		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUICalloutButtonPanel*                       btnbarChoices;                                    		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TitleWidgetName;                                  		// 0x02A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MessageWidgetName;                                		// 0x02A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       QuestionWidgetName;                               		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ChoicesWidgetName;                                		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       QuestionWidgetImageName;                          		// 0x02C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ButtonBarButtonBGStyleName;                       		// 0x02C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ButtonBarButtonTextStyleName;                     		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPerformAutomaticLayout : 1;                      		// 0x02D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FScriptDelegate                             __OnOptionSelected__Delegate;                     		// 0x02DC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 21262 ];

		return pClassPointer;
	};

	void HandleSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	bool OptionChosen ( class UUIScreenObject* EventObject, int PlayerIndex );
	void SetupDockingRelationships ( );
	void LayoutControls ( );
	class UUICalloutButtonPanel* GetButtonBar ( );
	class UUILabel* GetMessageLabel ( );
	class UUILabel* GetTitleLabel ( );
	int FindButtonIndex ( struct FName ButtonAlias );
	bool HasButton ( struct FName ButtonAlias );
	bool RemoveButton ( struct FName ButtonAlias );
	bool AddButton ( struct FName ButtonAlias );
	void SetButtonCallback ( class UUICalloutButton* TargetButton );
	void SetQuestion ( struct FString NewMessageString );
	void SetMessage ( struct FString NewMessageString );
	void SetTitle ( struct FString NewTitleString );
	void SetupMessageBox ( struct FString Title, struct FString Message, struct FString Question, TArray< struct FName > ButtonAliases, struct FScriptDelegate SelectionCallback );
	bool OnOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex );
};

//UClass* UUIMessageBoxBase::pClassPointer = NULL;

// Class Engine.UIMessageBox
// 0x0000 (0x02E8 - 0x02E8)
class UUIMessageBox : public UUIMessageBoxBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 21267 ];

		return pClassPointer;
	};

	void SetupDockingRelationships ( );
};

//UClass* UUIMessageBox::pClassPointer = NULL;

// Class Engine.OnlineAccountInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;       		// 0x003C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 22972 ];

		return pClassPointer;
	};

	bool GetLocalAccountNames ( TArray< struct FString >* Accounts );
	bool DeleteLocalAccount ( struct FString UserName, struct FString Password );
	bool RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password );
	bool CreateLocalAccount ( struct FString UserName, struct FString Password );
	void ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus );
	bool CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey );
};

//UClass* UOnlineAccountInterface::pClassPointer = NULL;

// Class Engine.OnlineCommunityContentInterface
// 0x003C (0x0078 - 0x003C)
class UOnlineCommunityContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadContentListComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadFriendsContentListComplete__Delegate;     		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUploadContentComplete__Delegate;              		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDownloadContentComplete__Delegate;            		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnGetContentPayloadComplete__Delegate;          		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23004 ];

		return pClassPointer;
	};

	void RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate );
	void ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char >* Payload );
	bool GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded );
	void ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded );
	bool DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload );
	void ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile );
	bool UploadContent ( unsigned char PlayerNum, TArray< unsigned char >* Payload, struct FCommunityContentMetadata* MetaData );
	bool GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void OnReadFriendsContentListComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends );
	bool GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void OnReadContentListComplete ( unsigned long bWasSuccessful );
	bool ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead );
	void Exit ( );
	bool Init ( );
};

//UClass* UOnlineCommunityContentInterface::pClassPointer = NULL;

// Class Engine.OnlineContentInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnContentChange__Delegate;                      		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;    		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23090 ];

		return pClassPointer;
	};

	void GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads );
	void ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	bool QueryAvailableDownloads ( unsigned char LocalUserNum );
	unsigned char GetContentList ( unsigned char LocalUserNum, TArray< struct FOnlineContent >* ContentList );
	bool ReadContentList ( unsigned char LocalUserNum );
	void ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadContentComplete ( unsigned long bWasSuccessful );
	void ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void OnContentChange ( );
};

//UClass* UOnlineContentInterface::pClassPointer = NULL;

// Class Engine.OnlineEventsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23133 ];

		return pClassPointer;
	};

	bool UploadHardwareData ( struct FUniqueNetId UniqueId, struct FString PlayerNick );
	bool UploadGameplayEventsData ( class UOnlineGameplayEvents* Events );
	bool UploadProfileData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings );
	void SaveLog ( );
	void UploadLog ( );
	void EndEvent ( );
	void AddParamString ( struct FString ParamName, struct FString ParamValue );
	void AddParamFloat ( struct FString ParamName, float ParamValue );
	void AddParamInt ( struct FString ParamName, int ParamValue );
	void BeginEvent ( struct FString EventName );
	void EndLog ( );
	void BeginLog ( );
	bool Init ( int MaxNumEvents );
};

//UClass* UOnlineEventsInterface::pClassPointer = NULL;

// Class Engine.OnlineNewsInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadNewsCompleted__Delegate;                  		// 0x003C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23628 ];

		return pClassPointer;
	};

	struct FString GetNews ( unsigned char LocalUserNum, unsigned char NewsType );
	void ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType );
	bool ReadNews ( unsigned char LocalUserNum, unsigned char NewsType );
};

//UClass* UOnlineNewsInterface::pClassPointer = NULL;

// Class Engine.OnlineRecentPlayersList
// 0x003C (0x0078 - 0x003C)
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray< struct FUniqueNetId >                      RecentPlayers;                                    		// 0x003C (0x000C) [0x0000000000000000]              
	TArray< struct FRecentParty >                      RecentParties;                                    		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FRecentParty                                LastParty;                                        		// 0x0054 (0x0014) [0x0000000000000000]              
	int                                                MaxRecentPlayers;                                 		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxRecentParties;                                 		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RecentPlayersAddIndex;                            		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                RecentPartiesAddIndex;                            		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24245 ];

		return pClassPointer;
	};

	bool ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	void SetLastParty ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	void GetPlayersFromRecentParties ( TArray< struct FUniqueNetId >* Players );
	void ClearRecentParties ( );
	void AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	void ClearRecentPlayers ( );
	void AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer );
};

//UClass* UOnlineRecentPlayersList::pClassPointer = NULL;

// Class Engine.OnlineVoiceInterface
// 0x0018 (0x0054 - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayerTalking__Delegate;                      		// 0x003C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24498 ];

		return pClassPointer;
	};

	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalking ( struct FUniqueNetId Player );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
};

//UClass* UOnlineVoiceInterface::pClassPointer = NULL;

// Class Engine.SeqAct_GiveInventory
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	TArray< class UClass* >                            InventoryList;                                    		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClearExisting : 1;                               		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26401 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_GiveInventory::pClassPointer = NULL;

// Class Engine.SeqAct_AssignController
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26404 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_AssignController::pClassPointer = NULL;

// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x010C - 0x010C)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26983 ];

		return pClassPointer;
	};

};

//UClass* USeqEvent_PickupStatusChange::pClassPointer = NULL;

// Class Engine.RB_BSJointActor
// 0x0000 (0x022C - 0x022C)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27776 ];

		return pClassPointer;
	};

};

//UClass* ARB_BSJointActor::pClassPointer = NULL;

// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x022C - 0x022C)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27781 ];

		return pClassPointer;
	};

};

//UClass* ARB_ConstraintActorSpawnable::pClassPointer = NULL;

// Class Engine.RB_HingeActor
// 0x0000 (0x022C - 0x022C)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27839 ];

		return pClassPointer;
	};

};

//UClass* ARB_HingeActor::pClassPointer = NULL;

// Class Engine.RB_PrismaticActor
// 0x0000 (0x022C - 0x022C)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27856 ];

		return pClassPointer;
	};

};

//UClass* ARB_PrismaticActor::pClassPointer = NULL;

// Class Engine.RB_PulleyJointActor
// 0x0000 (0x022C - 0x022C)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27861 ];

		return pClassPointer;
	};

};

//UClass* ARB_PulleyJointActor::pClassPointer = NULL;

// Class Engine.ScriptConsoleEntry
// 0x000C (0x0178 - 0x016C)
class UScriptConsoleEntry : public UUIPanel
{
public:
	class UUIEditBox*                                  InputBox;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x0170 (0x0004) [0x0000000000000000]              
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28057 ];

		return pClassPointer;
	};

	void OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
	void SetValue ( struct FString NewValue );
	void eventPostInitialize ( );
};

//UClass* UScriptConsoleEntry::pClassPointer = NULL;

// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28142 ];

		return pClassPointer;
	};

};

//UClass* USeqAct_AIAbortMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28205 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

//UClass* USeqAct_ControlMovieTexture::pClassPointer = NULL;

// Class Engine.SeqAct_SetVector
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                     		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28569 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

//UClass* USeqAct_SetVector::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28594 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleAffectedByHitEffects::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28603 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleGodMode::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28613 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleHUD::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTurning : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28620 ];

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

//UClass* USeqAct_ToggleInput::pClassPointer = NULL;

// Class Engine.SeqAct_UpdateDynamicCover
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_UpdateDynamicCover : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28634 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqAct_UpdateDynamicCover::pClassPointer = NULL;

// Class Engine.SeqEvent_LOS
// 0x000C (0x0118 - 0x010C)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerDistance;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28714 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

//UClass* USeqEvent_LOS::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x0250 - 0x0250)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30143 ];

		return pClassPointer;
	};

};

//UClass* ASkeletalMeshActorMATSpawnable::pClassPointer = NULL;

// Class Engine.TargetPoint
// 0x0000 (0x0210 - 0x0210)
class ATargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30937 ];

		return pClassPointer;
	};

};

//UClass* ATargetPoint::pClassPointer = NULL;

// Class Engine.Trigger_Dynamic
// 0x0000 (0x021C - 0x021C)
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31547 ];

		return pClassPointer;
	};

};

//UClass* ATrigger_Dynamic::pClassPointer = NULL;

// Class Engine.Trigger_LOS
// 0x000C (0x0228 - 0x021C)
class ATrigger_LOS : public ATrigger
{
public:
	TArray< class APlayerController* >                 PCsWithLOS;                                       		// 0x021C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31551 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

//UClass* ATrigger_LOS::pClassPointer = NULL;

// Class Engine.TriggeredPath
// 0x0008 (0x0304 - 0x02FC)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      MyTrigger;                                        		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31569 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

//UClass* ATriggeredPath::pClassPointer = NULL;

// Class Engine.TriggerStreamingLevel
// 0x000C (0x0228 - 0x021C)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray< struct FLevelStreamingData >               Levels;                                           		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31583 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

//UClass* ATriggerStreamingLevel::pClassPointer = NULL;

// Class Engine.UICond_SwitchWidget
// 0x0000 (0x00E0 - 0x00E0)
class UUICond_SwitchWidget : public USeqCond_SwitchObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31903 ];

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

//UClass* UUICond_SwitchWidget::pClassPointer = NULL;

// Class Engine.UIScriptConsoleScene
// 0x000C (0x0298 - 0x028C)
class UUIScriptConsoleScene : public UUIScene
{
public:
	class UUILabel*                                    BufferText;                                       		// 0x028C (0x0004) [0x0000000000000000]              
	class UUIImage*                                    BufferBackground;                                 		// 0x0290 (0x0004) [0x0000000000000000]              
	class UScriptConsoleEntry*                         CommandRegion;                                    		// 0x0294 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32431 ];

		return pClassPointer;
	};

	void OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
	void eventPostInitialize ( );
};

//UClass* UUIScriptConsoleScene::pClassPointer = NULL;

// Class Engine.WaterVolume
// 0x0014 (0x02A8 - 0x0294)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitSound;                                        		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      EntryActor;                                       		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExitActor;                                        		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnEntryActor;                                   		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32668 ];

		return pClassPointer;
	};

	void PlayExitSplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void PlayEntrySplash ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

//UClass* AWaterVolume::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif