/*
#############################################################################################
# Blade and Soul (25) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: Engine_classes.cpp
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
# Mentions: Ant.
#############################################################################################
*/

#include "..\SdkHeaders.h"

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Engine.CustomUIObject.SetFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UCustomUIObject::SetFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 15538 ];

	UCustomUIObject_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.Sender = Sender;
	SetFocus_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );

	pFnSetFocus->FunctionFlags |= 0x400;

	return SetFocus_Parms.ReturnValue;
};

// Function Engine.UIObject.LogRenderBounds
// [0x00020000] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIObject::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 14328 ];

	UUIObject_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIObject.ClearDockTargets
// [0x00020002] 
// Parameters infos:

void UUIObject::ClearDockTargets ( )
{
	static UFunction* pFnClearDockTargets = NULL;

	if ( ! pFnClearDockTargets )
		pFnClearDockTargets = (UFunction*) UObject::GObjObjects()->Data[ 14326 ];

	UUIObject_execClearDockTargets_Parms ClearDockTargets_Parms;

	this->ProcessEvent ( pFnClearDockTargets, &ClearDockTargets_Parms, NULL );
};

// Function Engine.UIObject.GetParent
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = (UFunction*) UObject::GObjObjects()->Data[ 14323 ];

	UUIObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetOwner
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIObject* UUIObject::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 14321 ];

	UUIObject_execGetOwner_Parms GetOwner_Parms;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIObject.GetScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIObject::GetScene ( )
{
	static UFunction* pFnGetScene = NULL;

	if ( ! pFnGetScene )
		pFnGetScene = (UFunction*) UObject::GObjObjects()->Data[ 14319 ];

	UUIObject_execGetScene_Parms GetScene_Parms;

	this->ProcessEvent ( pFnGetScene, &GetScene_Parms, NULL );

	return GetScene_Parms.ReturnValue;
};

// Function Engine.UIObject.SetWidgetStyleByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleResolverTagToSet          ( CPF_Parm )
// struct FName                   StyleFriendlyName              ( CPF_Parm )

bool UUIObject::SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName )
{
	static UFunction* pFnSetWidgetStyleByName = NULL;

	if ( ! pFnSetWidgetStyleByName )
		pFnSetWidgetStyleByName = (UFunction*) UObject::GObjObjects()->Data[ 14315 ];

	UUIObject_execSetWidgetStyleByName_Parms SetWidgetStyleByName_Parms;
	memcpy ( &SetWidgetStyleByName_Parms.StyleResolverTagToSet, &StyleResolverTagToSet, 0x8 );
	memcpy ( &SetWidgetStyleByName_Parms.StyleFriendlyName, &StyleFriendlyName, 0x8 );

	pFnSetWidgetStyleByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWidgetStyleByName, &SetWidgetStyleByName_Parms, NULL );

	pFnSetWidgetStyleByName->FunctionFlags |= 0x400;

	return SetWidgetStyleByName_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndexById
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleSubscriberId              ( CPF_Parm )

int UUIObject::FindStyleSubscriberIndexById ( struct FName StyleSubscriberId )
{
	static UFunction* pFnFindStyleSubscriberIndexById = NULL;

	if ( ! pFnFindStyleSubscriberIndexById )
		pFnFindStyleSubscriberIndexById = (UFunction*) UObject::GObjObjects()->Data[ 14312 ];

	UUIObject_execFindStyleSubscriberIndexById_Parms FindStyleSubscriberIndexById_Parms;
	memcpy ( &FindStyleSubscriberIndexById_Parms.StyleSubscriberId, &StyleSubscriberId, 0x8 );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndexById, &FindStyleSubscriberIndexById_Parms, NULL );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= 0x400;

	return FindStyleSubscriberIndexById_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIStyleResolver*        Subscriber                     ( CPF_Const | CPF_Parm | CPF_OutParm )

int UUIObject::FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber )
{
	static UFunction* pFnFindStyleSubscriberIndex = NULL;

	if ( ! pFnFindStyleSubscriberIndex )
		pFnFindStyleSubscriberIndex = (UFunction*) UObject::GObjObjects()->Data[ 14309 ];

	UUIObject_execFindStyleSubscriberIndex_Parms FindStyleSubscriberIndex_Parms;

	pFnFindStyleSubscriberIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndex, &FindStyleSubscriberIndex_Parms, NULL );

	pFnFindStyleSubscriberIndex->FunctionFlags |= 0x400;

	if ( Subscriber )
		*Subscriber = FindStyleSubscriberIndex_Parms.Subscriber;

	return FindStyleSubscriberIndex_Parms.ReturnValue;
};

// Function Engine.UIObject.RemoveStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnRemoveStyleSubscriber = NULL;

	if ( ! pFnRemoveStyleSubscriber )
		pFnRemoveStyleSubscriber = (UFunction*) UObject::GObjObjects()->Data[ 14307 ];

	UUIObject_execRemoveStyleSubscriber_Parms RemoveStyleSubscriber_Parms;
	RemoveStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnRemoveStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleSubscriber, &RemoveStyleSubscriber_Parms, NULL );

	pFnRemoveStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AddStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::AddStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnAddStyleSubscriber = NULL;

	if ( ! pFnAddStyleSubscriber )
		pFnAddStyleSubscriber = (UFunction*) UObject::GObjObjects()->Data[ 14305 ];

	UUIObject_execAddStyleSubscriber_Parms AddStyleSubscriber_Parms;
	AddStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnAddStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleSubscriber, &AddStyleSubscriber_Parms, NULL );

	pFnAddStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetPositionExtent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )

float UUIObject::GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation, unsigned long bIncludeOrigin )
{
	static UFunction* pFnGetPositionExtent = NULL;

	if ( ! pFnGetPositionExtent )
		pFnGetPositionExtent = (UFunction*) UObject::GObjObjects()->Data[ 14300 ];

	UUIObject_execGetPositionExtent_Parms GetPositionExtent_Parms;
	GetPositionExtent_Parms.Face = Face;
	GetPositionExtent_Parms.bIncludeRotation = bIncludeRotation;
	GetPositionExtent_Parms.bIncludeOrigin = bIncludeOrigin;

	pFnGetPositionExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtent, &GetPositionExtent_Parms, NULL );

	pFnGetPositionExtent->FunctionFlags |= 0x400;

	return GetPositionExtent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetPositionExtents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )
// float                          MinX                           ( CPF_Parm | CPF_OutParm )
// float                          MaxX                           ( CPF_Parm | CPF_OutParm )
// float                          MinY                           ( CPF_Parm | CPF_OutParm )
// float                          MaxY                           ( CPF_Parm | CPF_OutParm )

void UUIObject::GetPositionExtents ( unsigned long bIncludeRotation, unsigned long bIncludeOrigin, float* MinX, float* MaxX, float* MinY, float* MaxY )
{
	static UFunction* pFnGetPositionExtents = NULL;

	if ( ! pFnGetPositionExtents )
		pFnGetPositionExtents = (UFunction*) UObject::GObjObjects()->Data[ 14293 ];

	UUIObject_execGetPositionExtents_Parms GetPositionExtents_Parms;
	GetPositionExtents_Parms.bIncludeRotation = bIncludeRotation;
	GetPositionExtents_Parms.bIncludeOrigin = bIncludeOrigin;

	pFnGetPositionExtents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtents, &GetPositionExtents_Parms, NULL );

	pFnGetPositionExtents->FunctionFlags |= 0x400;

	if ( MinX )
		*MinX = GetPositionExtents_Parms.MinX;

	if ( MaxX )
		*MaxX = GetPositionExtents_Parms.MaxX;

	if ( MinY )
		*MinY = GetPositionExtents_Parms.MinY;

	if ( MaxY )
		*MaxY = GetPositionExtents_Parms.MaxY;
};

// Function Engine.UIObject.NeedsActiveCursorUpdates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIObject::NeedsActiveCursorUpdates ( )
{
	static UFunction* pFnNeedsActiveCursorUpdates = NULL;

	if ( ! pFnNeedsActiveCursorUpdates )
		pFnNeedsActiveCursorUpdates = (UFunction*) UObject::GObjObjects()->Data[ 14291 ];

	UUIObject_execNeedsActiveCursorUpdates_Parms NeedsActiveCursorUpdates_Parms;

	pFnNeedsActiveCursorUpdates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedsActiveCursorUpdates, &NeedsActiveCursorUpdates_Parms, NULL );

	pFnNeedsActiveCursorUpdates->FunctionFlags |= 0x400;

	return NeedsActiveCursorUpdates_Parms.ReturnValue;
};

// Function Engine.UIObject.SetActiveCursorUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldReceiveCursorUpdates    ( CPF_Parm )

void UUIObject::SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates )
{
	static UFunction* pFnSetActiveCursorUpdate = NULL;

	if ( ! pFnSetActiveCursorUpdate )
		pFnSetActiveCursorUpdate = (UFunction*) UObject::GObjObjects()->Data[ 14289 ];

	UUIObject_execSetActiveCursorUpdate_Parms SetActiveCursorUpdate_Parms;
	SetActiveCursorUpdate_Parms.bShouldReceiveCursorUpdates = bShouldReceiveCursorUpdates;

	pFnSetActiveCursorUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveCursorUpdate, &SetActiveCursorUpdate_Parms, NULL );

	pFnSetActiveCursorUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetPrivateBehavior
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Behavior                       ( CPF_Parm )
// unsigned long                  Value                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIObject::SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse )
{
	static UFunction* pFnSetPrivateBehavior = NULL;

	if ( ! pFnSetPrivateBehavior )
		pFnSetPrivateBehavior = (UFunction*) UObject::GObjObjects()->Data[ 14285 ];

	UUIObject_execSetPrivateBehavior_Parms SetPrivateBehavior_Parms;
	SetPrivateBehavior_Parms.Behavior = Behavior;
	SetPrivateBehavior_Parms.Value = Value;
	SetPrivateBehavior_Parms.bRecurse = bRecurse;

	pFnSetPrivateBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPrivateBehavior, &SetPrivateBehavior_Parms, NULL );

	pFnSetPrivateBehavior->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.IsPrivateBehaviorSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Behavior                       ( CPF_Parm )

bool UUIObject::IsPrivateBehaviorSet ( int Behavior )
{
	static UFunction* pFnIsPrivateBehaviorSet = NULL;

	if ( ! pFnIsPrivateBehaviorSet )
		pFnIsPrivateBehaviorSet = (UFunction*) UObject::GObjObjects()->Data[ 14282 ];

	UUIObject_execIsPrivateBehaviorSet_Parms IsPrivateBehaviorSet_Parms;
	IsPrivateBehaviorSet_Parms.Behavior = Behavior;

	pFnIsPrivateBehaviorSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPrivateBehaviorSet, &IsPrivateBehaviorSet_Parms, NULL );

	pFnIsPrivateBehaviorSet->FunctionFlags |= 0x400;

	return IsPrivateBehaviorSet_Parms.ReturnValue;
};

// Function Engine.UIObject.CanAcceptFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::CanAcceptFocus ( int PlayerIndex )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 14279 ];

	UUIObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIObject.IsDockedTo
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetWidget                   ( CPF_Const | CPF_Parm )
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace )
{
	static UFunction* pFnIsDockedTo = NULL;

	if ( ! pFnIsDockedTo )
		pFnIsDockedTo = (UFunction*) UObject::GObjObjects()->Data[ 14274 ];

	UUIObject_execIsDockedTo_Parms IsDockedTo_Parms;
	IsDockedTo_Parms.TargetWidget = TargetWidget;
	IsDockedTo_Parms.SourceFace = SourceFace;
	IsDockedTo_Parms.TargetFace = TargetFace;

	pFnIsDockedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDockedTo, &IsDockedTo_Parms, NULL );

	pFnIsDockedTo->FunctionFlags |= 0x400;

	return IsDockedTo_Parms.ReturnValue;
};

// Function Engine.UIObject.GetDockParameters
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         TargetWidget                   ( CPF_Parm | CPF_OutParm )
// unsigned char                  TargetFace                     ( CPF_Parm | CPF_OutParm )
// float                          TargetPadding                  ( CPF_Parm | CPF_OutParm )

bool UUIObject::GetDockParameters ( unsigned char SourceFace, class UUIScreenObject** TargetWidget, unsigned char* TargetFace, float* TargetPadding )
{
	static UFunction* pFnGetDockParameters = NULL;

	if ( ! pFnGetDockParameters )
		pFnGetDockParameters = (UFunction*) UObject::GObjObjects()->Data[ 14268 ];

	UUIObject_execGetDockParameters_Parms GetDockParameters_Parms;
	GetDockParameters_Parms.SourceFace = SourceFace;

	pFnGetDockParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockParameters, &GetDockParameters_Parms, NULL );

	pFnGetDockParameters->FunctionFlags |= 0x400;

	if ( TargetWidget )
		*TargetWidget = GetDockParameters_Parms.TargetWidget;

	if ( TargetFace )
		*TargetFace = GetDockParameters_Parms.TargetFace;

	if ( TargetPadding )
		*TargetPadding = GetDockParameters_Parms.TargetPadding;

	return GetDockParameters_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockParameters = NULL;

	if ( ! pFnSetDockParameters )
		pFnSetDockParameters = (UFunction*) UObject::GObjObjects()->Data[ 14260 ];

	UUIObject_execSetDockParameters_Parms SetDockParameters_Parms;
	SetDockParameters_Parms.SourceFace = SourceFace;
	SetDockParameters_Parms.Target = Target;
	SetDockParameters_Parms.TargetFace = TargetFace;
	SetDockParameters_Parms.PaddingValue = PaddingValue;
	SetDockParameters_Parms.PaddingInputType = PaddingInputType;
	SetDockParameters_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockParameters, &SetDockParameters_Parms, NULL );

	pFnSetDockParameters->FunctionFlags |= 0x400;

	return SetDockParameters_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockPadding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockPadding = NULL;

	if ( ! pFnSetDockPadding )
		pFnSetDockPadding = (UFunction*) UObject::GObjObjects()->Data[ 14254 ];

	UUIObject_execSetDockPadding_Parms SetDockPadding_Parms;
	SetDockPadding_Parms.SourceFace = SourceFace;
	SetDockPadding_Parms.PaddingValue = PaddingValue;
	SetDockPadding_Parms.PaddingInputType = PaddingInputType;
	SetDockPadding_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockPadding, &SetDockPadding_Parms, NULL );

	pFnSetDockPadding->FunctionFlags |= 0x400;

	return SetDockPadding_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )

bool UUIObject::SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace )
{
	static UFunction* pFnSetDockTarget = NULL;

	if ( ! pFnSetDockTarget )
		pFnSetDockTarget = (UFunction*) UObject::GObjObjects()->Data[ 14249 ];

	UUIObject_execSetDockTarget_Parms SetDockTarget_Parms;
	SetDockTarget_Parms.SourceFace = SourceFace;
	SetDockTarget_Parms.Target = Target;
	SetDockTarget_Parms.TargetFace = TargetFace;

	pFnSetDockTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockTarget, &SetDockTarget_Parms, NULL );

	pFnSetDockTarget->FunctionFlags |= 0x400;

	return SetDockTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.IsContainedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               TestWidget                     ( CPF_Parm )

bool UUIObject::IsContainedBy ( class UUIObject* TestWidget )
{
	static UFunction* pFnIsContainedBy = NULL;

	if ( ! pFnIsContainedBy )
		pFnIsContainedBy = (UFunction*) UObject::GObjObjects()->Data[ 14246 ];

	UUIObject_execIsContainedBy_Parms IsContainedBy_Parms;
	IsContainedBy_Parms.TestWidget = TestWidget;

	pFnIsContainedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsContainedBy, &IsContainedBy_Parms, NULL );

	pFnIsContainedBy->FunctionFlags |= 0x400;

	return IsContainedBy_Parms.ReturnValue;
};

// Function Engine.UIObject.NotifyValueChanged
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// int                            NotifyFlags                    ( CPF_OptionalParm | CPF_Parm )

void UUIObject::NotifyValueChanged ( int PlayerIndex, int NotifyFlags )
{
	static UFunction* pFnNotifyValueChanged = NULL;

	if ( ! pFnNotifyValueChanged )
		pFnNotifyValueChanged = (UFunction*) UObject::GObjObjects()->Data[ 14243 ];

	UUIObject_execNotifyValueChanged_Parms NotifyValueChanged_Parms;
	NotifyValueChanged_Parms.PlayerIndex = PlayerIndex;
	NotifyValueChanged_Parms.NotifyFlags = NotifyFlags;

	pFnNotifyValueChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyValueChanged, &NotifyValueChanged_Parms, NULL );

	pFnNotifyValueChanged->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GenerateTransformMatrix
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIObject::GenerateTransformMatrix ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnGenerateTransformMatrix = NULL;

	if ( ! pFnGenerateTransformMatrix )
		pFnGenerateTransformMatrix = (UFunction*) UObject::GObjObjects()->Data[ 14240 ];

	UUIObject_execGenerateTransformMatrix_Parms GenerateTransformMatrix_Parms;
	GenerateTransformMatrix_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnGenerateTransformMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateTransformMatrix, &GenerateTransformMatrix_Parms, NULL );

	pFnGenerateTransformMatrix->FunctionFlags |= 0x400;

	return GenerateTransformMatrix_Parms.ReturnValue;
};

// Function Engine.UIObject.HasTransform
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::HasTransform ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnHasTransform = NULL;

	if ( ! pFnHasTransform )
		pFnHasTransform = (UFunction*) UObject::GObjObjects()->Data[ 14237 ];

	UUIObject_execHasTransform_Parms HasTransform_Parms;
	HasTransform_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnHasTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasTransform, &HasTransform_Parms, NULL );

	pFnHasTransform->FunctionFlags |= 0x400;

	return HasTransform_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.LogCurrentState
// [0x00020000] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScreenObject::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 14193 ];

	UUIScreenObject_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScreenObject.GetNATType
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScreenObject::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 14191 ];

	UUIScreenObject_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanPlayOnline
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 14188 ];

	UUIScreenObject_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasLinkConnection
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 14186 ];

	UUIScreenObject_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetLoginStatus
// [0x00024002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIScreenObject::GetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 14183 ];

	UUIScreenObject_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestControllerId
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestControllerId ( )
{
	static UFunction* pFnGetBestControllerId = NULL;

	if ( ! pFnGetBestControllerId )
		pFnGetBestControllerId = (UFunction*) UObject::GObjObjects()->Data[ 14178 ];

	UUIScreenObject_execGetBestControllerId_Parms GetBestControllerId_Parms;

	this->ProcessEvent ( pFnGetBestControllerId, &GetBestControllerId_Parms, NULL );

	return GetBestControllerId_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DisableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DisableWidget ( int PlayerIndex )
{
	static UFunction* pFnDisableWidget = NULL;

	if ( ! pFnDisableWidget )
		pFnDisableWidget = (UFunction*) UObject::GObjObjects()->Data[ 14175 ];

	UUIScreenObject_execDisableWidget_Parms DisableWidget_Parms;
	DisableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDisableWidget, &DisableWidget_Parms, NULL );

	return DisableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.EnableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::EnableWidget ( int PlayerIndex )
{
	static UFunction* pFnEnableWidget = NULL;

	if ( ! pFnEnableWidget )
		pFnEnableWidget = (UFunction*) UObject::GObjObjects()->Data[ 14172 ];

	UUIScreenObject_execEnableWidget_Parms EnableWidget_Parms;
	EnableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnEnableWidget, &EnableWidget_Parms, NULL );

	return EnableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetParent
// [0x00020000] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIScreenObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = (UFunction*) UObject::GObjObjects()->Data[ 14170 ];

	UUIScreenObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateFocusHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               FocusHintObject                ( CPF_Parm )

bool UUIScreenObject::eventActivateFocusHint ( class UUIObject* FocusHintObject )
{
	static UFunction* pFnActivateFocusHint = NULL;

	if ( ! pFnActivateFocusHint )
		pFnActivateFocusHint = (UFunction*) UObject::GObjObjects()->Data[ 14167 ];

	UUIScreenObject_eventActivateFocusHint_Parms ActivateFocusHint_Parms;
	ActivateFocusHint_Parms.FocusHintObject = FocusHintObject;

	this->ProcessEvent ( pFnActivateFocusHint, &ActivateFocusHint_Parms, NULL );

	return ActivateFocusHint_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedUIActionKeyNames
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         out_KeyNames                   ( CPF_Parm | CPF_OutParm )

void UUIScreenObject::eventGetSupportedUIActionKeyNames ( TArray< struct FName >* out_KeyNames )
{
	static UFunction* pFnGetSupportedUIActionKeyNames = NULL;

	if ( ! pFnGetSupportedUIActionKeyNames )
		pFnGetSupportedUIActionKeyNames = (UFunction*) UObject::GObjObjects()->Data[ 14164 ];

	UUIScreenObject_eventGetSupportedUIActionKeyNames_Parms GetSupportedUIActionKeyNames_Parms;

	this->ProcessEvent ( pFnGetSupportedUIActionKeyNames, &GetSupportedUIActionKeyNames_Parms, NULL );

	if ( out_KeyNames )
		memcpy ( out_KeyNames, &GetSupportedUIActionKeyNames_Parms.out_KeyNames, 0xC );
};

// Function Engine.UIScreenObject.SetInputMask
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewInputMask                   ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse )
{
	static UFunction* pFnSetInputMask = NULL;

	if ( ! pFnSetInputMask )
		pFnSetInputMask = (UFunction*) UObject::GObjObjects()->Data[ 14160 ];

	UUIScreenObject_eventSetInputMask_Parms SetInputMask_Parms;
	SetInputMask_Parms.NewInputMask = NewInputMask;
	SetInputMask_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnSetInputMask, &SetInputMask_Parms, NULL );
};

// Function Engine.UIScreenObject.DisablePlayerInput
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnDisablePlayerInput = NULL;

	if ( ! pFnDisablePlayerInput )
		pFnDisablePlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 14156 ];

	UUIScreenObject_eventDisablePlayerInput_Parms DisablePlayerInput_Parms;
	DisablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	DisablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnDisablePlayerInput, &DisablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.EnablePlayerInput
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnEnablePlayerInput = NULL;

	if ( ! pFnEnablePlayerInput )
		pFnEnablePlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 14152 ];

	UUIScreenObject_eventEnablePlayerInput_Parms EnablePlayerInput_Parms;
	EnablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	EnablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnEnablePlayerInput, &EnablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.SetVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScreenObject::eventSetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 14150 ];

	UUIScreenObject_eventSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );
};

// Function Engine.UIScreenObject.PrivateSetVisibility
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UUIScreenObject::PrivateSetVisibility ( unsigned long bVisible )
{
	static UFunction* pFnPrivateSetVisibility = NULL;

	if ( ! pFnPrivateSetVisibility )
		pFnPrivateSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 14147 ];

	UUIScreenObject_execPrivateSetVisibility_Parms PrivateSetVisibility_Parms;
	PrivateSetVisibility_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnPrivateSetVisibility, &PrivateSetVisibility_Parms, NULL );
};

// Function Engine.UIScreenObject.IsGamepadConnected
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsGamepadConnected ( int ControllerId )
{
	static UFunction* pFnIsGamepadConnected = NULL;

	if ( ! pFnIsGamepadConnected )
		pFnIsGamepadConnected = (UFunction*) UObject::GObjObjects()->Data[ 14144 ];

	UUIScreenObject_eventIsGamepadConnected_Parms IsGamepadConnected_Parms;
	IsGamepadConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsGamepadConnected, &IsGamepadConnected_Parms, NULL );

	return IsGamepadConnected_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsLoggedIn
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 14140 ];

	UUIScreenObject_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemovedFromParent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUIScreenObject::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 14138 ];

	UUIScreenObject_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UIScreenObject.RemovedChild
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 14133 ];

	UUIScreenObject_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.AddedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUIScreenObject::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 14130 ];

	UUIScreenObject_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.PostInitialize
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 14129 ];

	UUIScreenObject_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScreenObject.Initialized
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 14128 ];

	UUIScreenObject_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIScreenObject.GetWidgetPathName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UUIScreenObject::GetWidgetPathName ( )
{
	static UFunction* pFnGetWidgetPathName = NULL;

	if ( ! pFnGetWidgetPathName )
		pFnGetWidgetPathName = (UFunction*) UObject::GObjObjects()->Data[ 14126 ];

	UUIScreenObject_execGetWidgetPathName_Parms GetWidgetPathName_Parms;

	pFnGetWidgetPathName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWidgetPathName, &GetWidgetPathName_Parms, NULL );

	pFnGetWidgetPathName->FunctionFlags |= 0x400;

	return GetWidgetPathName_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsEnableActiveOnly
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsEnableActiveOnly ( )
{
	static UFunction* pFnIsEnableActiveOnly = NULL;

	if ( ! pFnIsEnableActiveOnly )
		pFnIsEnableActiveOnly = (UFunction*) UObject::GObjObjects()->Data[ 14124 ];

	UUIScreenObject_execIsEnableActiveOnly_Parms IsEnableActiveOnly_Parms;

	pFnIsEnableActiveOnly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnableActiveOnly, &IsEnableActiveOnly_Parms, NULL );

	pFnIsEnableActiveOnly->FunctionFlags |= 0x400;

	return IsEnableActiveOnly_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFont*                   BaseFont                       ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetAspectRatioAutoScaleFactor ( class UFont* BaseFont )
{
	static UFunction* pFnGetAspectRatioAutoScaleFactor = NULL;

	if ( ! pFnGetAspectRatioAutoScaleFactor )
		pFnGetAspectRatioAutoScaleFactor = (UFunction*) UObject::GObjObjects()->Data[ 14121 ];

	UUIScreenObject_execGetAspectRatioAutoScaleFactor_Parms GetAspectRatioAutoScaleFactor_Parms;
	GetAspectRatioAutoScaleFactor_Parms.BaseFont = BaseFont;

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAspectRatioAutoScaleFactor, &GetAspectRatioAutoScaleFactor_Parms, NULL );

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= 0x400;

	return GetAspectRatioAutoScaleFactor_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetInverseCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetInverseCanvasToScreen ( )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 14119 ];

	UUIScreenObject_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetCanvasToScreen ( )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 14117 ];

	UUIScreenObject_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::PixelToCanvas ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToCanvas = NULL;

	if ( ! pFnPixelToCanvas )
		pFnPixelToCanvas = (UFunction*) UObject::GObjObjects()->Data[ 14114 ];

	UUIScreenObject_execPixelToCanvas_Parms PixelToCanvas_Parms;

	pFnPixelToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToCanvas, &PixelToCanvas_Parms, NULL );

	pFnPixelToCanvas->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToCanvas_Parms.PixelPosition, 0x8 );

	return PixelToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::ScreenToCanvas ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToCanvas = NULL;

	if ( ! pFnScreenToCanvas )
		pFnScreenToCanvas = (UFunction*) UObject::GObjObjects()->Data[ 14111 ];

	UUIScreenObject_execScreenToCanvas_Parms ScreenToCanvas_Parms;

	pFnScreenToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToCanvas, &ScreenToCanvas_Parms, NULL );

	pFnScreenToCanvas->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToCanvas_Parms.ScreenPosition, 0x10 );

	return ScreenToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::PixelToScreen ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToScreen = NULL;

	if ( ! pFnPixelToScreen )
		pFnPixelToScreen = (UFunction*) UObject::GObjObjects()->Data[ 14108 ];

	UUIScreenObject_execPixelToScreen_Parms PixelToScreen_Parms;

	pFnPixelToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToScreen, &PixelToScreen_Parms, NULL );

	pFnPixelToScreen->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToScreen_Parms.PixelPosition, 0x8 );

	return PixelToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToPixel
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector2D UUIScreenObject::ScreenToPixel ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToPixel = NULL;

	if ( ! pFnScreenToPixel )
		pFnScreenToPixel = (UFunction*) UObject::GObjObjects()->Data[ 14105 ];

	UUIScreenObject_execScreenToPixel_Parms ScreenToPixel_Parms;

	pFnScreenToPixel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToPixel, &ScreenToPixel_Parms, NULL );

	pFnScreenToPixel->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToPixel_Parms.ScreenPosition, 0x10 );

	return ScreenToPixel_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanvasToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::CanvasToScreen ( struct FVector* CanvasPosition )
{
	static UFunction* pFnCanvasToScreen = NULL;

	if ( ! pFnCanvasToScreen )
		pFnCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 14102 ];

	UUIScreenObject_execCanvasToScreen_Parms CanvasToScreen_Parms;

	pFnCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanvasToScreen, &CanvasToScreen_Parms, NULL );

	pFnCanvasToScreen->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &CanvasToScreen_Parms.CanvasPosition, 0xC );

	return CanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::DeProject ( struct FVector* PixelPosition )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 14099 ];

	UUIScreenObject_execDeProject_Parms DeProject_Parms;

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &DeProject_Parms.PixelPosition, 0xC );

	return DeProject_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Project
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::Project ( struct FVector* CanvasPosition )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 14096 ];

	UUIScreenObject_execProject_Parms Project_Parms;

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &Project_Parms.CanvasPosition, 0xC );

	return Project_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetDockedWidgets
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIObject* >     out_DockedWidgets              ( CPF_Parm | CPF_OutParm )

void UUIScreenObject::GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, TArray< class UUIObject* >* out_DockedWidgets )
{
	static UFunction* pFnGetDockedWidgets = NULL;

	if ( ! pFnGetDockedWidgets )
		pFnGetDockedWidgets = (UFunction*) UObject::GObjObjects()->Data[ 14091 ];

	UUIScreenObject_execGetDockedWidgets_Parms GetDockedWidgets_Parms;
	GetDockedWidgets_Parms.SourceFace = SourceFace;
	GetDockedWidgets_Parms.TargetFace = TargetFace;

	pFnGetDockedWidgets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockedWidgets, &GetDockedWidgets_Parms, NULL );

	pFnGetDockedWidgets->FunctionFlags |= 0x400;

	if ( out_DockedWidgets )
		memcpy ( out_DockedWidgets, &GetDockedWidgets_Parms.out_DockedWidgets, 0xC );
};

// Function Engine.UIScreenObject.ResolveUIExtent
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         OwnerWidget                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIScreenValue_Extent   ExtentToResolve                ( CPF_Const | CPF_Parm | CPF_OutParm )

float UUIScreenObject::ResolveUIExtent ( class UUIScreenObject* OwnerWidget, unsigned char OutputType, struct FUIScreenValue_Extent* ExtentToResolve )
{
	static UFunction* pFnResolveUIExtent = NULL;

	if ( ! pFnResolveUIExtent )
		pFnResolveUIExtent = (UFunction*) UObject::GObjObjects()->Data[ 14086 ];

	UUIScreenObject_execResolveUIExtent_Parms ResolveUIExtent_Parms;
	ResolveUIExtent_Parms.OwnerWidget = OwnerWidget;
	ResolveUIExtent_Parms.OutputType = OutputType;

	pFnResolveUIExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveUIExtent, &ResolveUIExtent_Parms, NULL );

	pFnResolveUIExtent->FunctionFlags |= 0x400;

	if ( ExtentToResolve )
		memcpy ( ExtentToResolve, &ResolveUIExtent_Parms.ExtentToResolve, 0x8 );

	return ResolveUIExtent_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPositionVector
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentPosition         ( CPF_OptionalParm | CPF_Parm )

struct FVector UUIScreenObject::GetPositionVector ( unsigned long bIncludeParentPosition )
{
	static UFunction* pFnGetPositionVector = NULL;

	if ( ! pFnGetPositionVector )
		pFnGetPositionVector = (UFunction*) UObject::GObjObjects()->Data[ 14083 ];

	UUIScreenObject_execGetPositionVector_Parms GetPositionVector_Parms;
	GetPositionVector_Parms.bIncludeParentPosition = bIncludeParentPosition;

	pFnGetPositionVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionVector, &GetPositionVector_Parms, NULL );

	pFnGetPositionVector->FunctionFlags |= 0x400;

	return GetPositionVector_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBounds
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Dimension                      ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetBounds = NULL;

	if ( ! pFnGetBounds )
		pFnGetBounds = (UFunction*) UObject::GObjObjects()->Data[ 14078 ];

	UUIScreenObject_execGetBounds_Parms GetBounds_Parms;
	GetBounds_Parms.Dimension = Dimension;
	GetBounds_Parms.OutputType = OutputType;
	GetBounds_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBounds, &GetBounds_Parms, NULL );

	pFnGetBounds->FunctionFlags |= 0x400;

	return GetBounds_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bIncludeOrigin, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 14072 ];

	UUIScreenObject_execGetPosition_Parms GetPosition_Parms;
	GetPosition_Parms.Face = Face;
	GetPosition_Parms.OutputType = OutputType;
	GetPosition_Parms.bIncludeOrigin = bIncludeOrigin;
	GetPosition_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  InputType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludesViewportOrigin        ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bIncludesViewportOrigin )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 14067 ];

	UUIScreenObject_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewValue = NewValue;
	SetPosition_Parms.Face = Face;
	SetPosition_Parms.InputType = InputType;
	SetPosition_Parms.bIncludesViewportOrigin = bIncludesViewportOrigin;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetBestPlayerIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestPlayerIndex ( )
{
	static UFunction* pFnGetBestPlayerIndex = NULL;

	if ( ! pFnGetBestPlayerIndex )
		pFnGetBestPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 14065 ];

	UUIScreenObject_execGetBestPlayerIndex_Parms GetBestPlayerIndex_Parms;

	pFnGetBestPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestPlayerIndex, &GetBestPlayerIndex_Parms, NULL );

	pFnGetBestPlayerIndex->FunctionFlags |= 0x400;

	return GetBestPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedPlayerCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetSupportedPlayerCount ( )
{
	static UFunction* pFnGetSupportedPlayerCount = NULL;

	if ( ! pFnGetSupportedPlayerCount )
		pFnGetSupportedPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 14063 ];

	UUIScreenObject_execGetSupportedPlayerCount_Parms GetSupportedPlayerCount_Parms;

	pFnGetSupportedPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSupportedPlayerCount, &GetSupportedPlayerCount_Parms, NULL );

	pFnGetSupportedPlayerCount->FunctionFlags |= 0x400;

	return GetSupportedPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetActivePlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetActivePlayerCount ( )
{
	static UFunction* pFnGetActivePlayerCount = NULL;

	if ( ! pFnGetActivePlayerCount )
		pFnGetActivePlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 14061 ];

	UUIScreenObject_execGetActivePlayerCount_Parms GetActivePlayerCount_Parms;

	pFnGetActivePlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActivePlayerCount, &GetActivePlayerCount_Parms, NULL );

	pFnGetActivePlayerCount->FunctionFlags |= 0x400;

	return GetActivePlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.AcceptsPlayerInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::AcceptsPlayerInput ( int PlayerIndex )
{
	static UFunction* pFnAcceptsPlayerInput = NULL;

	if ( ! pFnAcceptsPlayerInput )
		pFnAcceptsPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 14058 ];

	UUIScreenObject_execAcceptsPlayerInput_Parms AcceptsPlayerInput_Parms;
	AcceptsPlayerInput_Parms.PlayerIndex = PlayerIndex;

	pFnAcceptsPlayerInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptsPlayerInput, &AcceptsPlayerInput_Parms, NULL );

	pFnAcceptsPlayerInput->FunctionFlags |= 0x400;

	return AcceptsPlayerInput_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsPressed
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsPressed ( int PlayerIndex )
{
	static UFunction* pFnIsPressed = NULL;

	if ( ! pFnIsPressed )
		pFnIsPressed = (UFunction*) UObject::GObjObjects()->Data[ 14055 ];

	UUIScreenObject_execIsPressed_Parms IsPressed_Parms;
	IsPressed_Parms.PlayerIndex = PlayerIndex;

	pFnIsPressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPressed, &IsPressed_Parms, NULL );

	pFnIsPressed->FunctionFlags |= 0x400;

	return IsPressed_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsActive ( int PlayerIndex )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 14052 ];

	UUIScreenObject_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.PlayerIndex = PlayerIndex;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsFocused
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsFocused ( int PlayerIndex )
{
	static UFunction* pFnIsFocused = NULL;

	if ( ! pFnIsFocused )
		pFnIsFocused = (UFunction*) UObject::GObjObjects()->Data[ 14049 ];

	UUIScreenObject_execIsFocused_Parms IsFocused_Parms;
	IsFocused_Parms.PlayerIndex = PlayerIndex;

	pFnIsFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFocused, &IsFocused_Parms, NULL );

	pFnIsFocused->FunctionFlags |= 0x400;

	return IsFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsEnabled
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCheckOwnerChain               ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14045 ];

	UUIScreenObject_execIsEnabled_Parms IsEnabled_Parms;
	IsEnabled_Parms.PlayerIndex = PlayerIndex;
	IsEnabled_Parms.bCheckOwnerChain = bCheckOwnerChain;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.KillFocusEx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::KillFocusEx ( int PlayerIndex )
{
	static UFunction* pFnKillFocusEx = NULL;

	if ( ! pFnKillFocusEx )
		pFnKillFocusEx = (UFunction*) UObject::GObjObjects()->Data[ 14042 ];

	UUIScreenObject_execKillFocusEx_Parms KillFocusEx_Parms;
	KillFocusEx_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocusEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocusEx, &KillFocusEx_Parms, NULL );

	pFnKillFocusEx->FunctionFlags |= 0x400;

	return KillFocusEx_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocusEx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocusEx ( int PlayerIndex )
{
	static UFunction* pFnSetFocusEx = NULL;

	if ( ! pFnSetFocusEx )
		pFnSetFocusEx = (UFunction*) UObject::GObjObjects()->Data[ 14039 ];

	UUIScreenObject_execSetFocusEx_Parms SetFocusEx_Parms;
	SetFocusEx_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocusEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocusEx, &SetFocusEx_Parms, NULL );

	pFnSetFocusEx->FunctionFlags |= 0x400;

	return SetFocusEx_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.KillFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::KillFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnKillFocus = NULL;

	if ( ! pFnKillFocus )
		pFnKillFocus = (UFunction*) UObject::GObjObjects()->Data[ 14035 ];

	UUIScreenObject_execKillFocus_Parms KillFocus_Parms;
	KillFocus_Parms.Sender = Sender;
	KillFocus_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocus, &KillFocus_Parms, NULL );

	pFnKillFocus->FunctionFlags |= 0x400;

	return KillFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocusToChild
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ChildToFocus                   ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex )
{
	static UFunction* pFnSetFocusToChild = NULL;

	if ( ! pFnSetFocusToChild )
		pFnSetFocusToChild = (UFunction*) UObject::GObjObjects()->Data[ 14031 ];

	UUIScreenObject_execSetFocusToChild_Parms SetFocusToChild_Parms;
	SetFocusToChild_Parms.ChildToFocus = ChildToFocus;
	SetFocusToChild_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocusToChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocusToChild, &SetFocusToChild_Parms, NULL );

	pFnSetFocusToChild->FunctionFlags |= 0x400;

	return SetFocusToChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 14027 ];

	UUIScreenObject_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.Sender = Sender;
	SetFocus_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );

	pFnSetFocus->FunctionFlags |= 0x400;

	return SetFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanAcceptFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanAcceptFocus ( int PlayerIndex )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 14024 ];

	UUIScreenObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsNeverFocused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsNeverFocused ( )
{
	static UFunction* pFnIsNeverFocused = NULL;

	if ( ! pFnIsNeverFocused )
		pFnIsNeverFocused = (UFunction*) UObject::GObjObjects()->Data[ 14022 ];

	UUIScreenObject_execIsNeverFocused_Parms IsNeverFocused_Parms;

	pFnIsNeverFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNeverFocused, &IsNeverFocused_Parms, NULL );

	pFnIsNeverFocused->FunctionFlags |= 0x400;

	return IsNeverFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingShift
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingShift ( int ControllerId )
{
	static UFunction* pFnIsHoldingShift = NULL;

	if ( ! pFnIsHoldingShift )
		pFnIsHoldingShift = (UFunction*) UObject::GObjObjects()->Data[ 14019 ];

	UUIScreenObject_execIsHoldingShift_Parms IsHoldingShift_Parms;
	IsHoldingShift_Parms.ControllerId = ControllerId;

	pFnIsHoldingShift->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingShift, &IsHoldingShift_Parms, NULL );

	pFnIsHoldingShift->FunctionFlags |= 0x400;

	return IsHoldingShift_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingAlt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingAlt ( int ControllerId )
{
	static UFunction* pFnIsHoldingAlt = NULL;

	if ( ! pFnIsHoldingAlt )
		pFnIsHoldingAlt = (UFunction*) UObject::GObjObjects()->Data[ 14016 ];

	UUIScreenObject_execIsHoldingAlt_Parms IsHoldingAlt_Parms;
	IsHoldingAlt_Parms.ControllerId = ControllerId;

	pFnIsHoldingAlt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingAlt, &IsHoldingAlt_Parms, NULL );

	pFnIsHoldingAlt->FunctionFlags |= 0x400;

	return IsHoldingAlt_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingCtrl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingCtrl ( int ControllerId )
{
	static UFunction* pFnIsHoldingCtrl = NULL;

	if ( ! pFnIsHoldingCtrl )
		pFnIsHoldingCtrl = (UFunction*) UObject::GObjObjects()->Data[ 14013 ];

	UUIScreenObject_execIsHoldingCtrl_Parms IsHoldingCtrl_Parms;
	IsHoldingCtrl_Parms.ControllerId = ControllerId;

	pFnIsHoldingCtrl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingCtrl, &IsHoldingCtrl_Parms, NULL );

	pFnIsHoldingCtrl->FunctionFlags |= 0x400;

	return IsHoldingCtrl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ConditionalPropagateEnabledState
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce )
{
	static UFunction* pFnConditionalPropagateEnabledState = NULL;

	if ( ! pFnConditionalPropagateEnabledState )
		pFnConditionalPropagateEnabledState = (UFunction*) UObject::GObjObjects()->Data[ 14009 ];

	UUIScreenObject_execConditionalPropagateEnabledState_Parms ConditionalPropagateEnabledState_Parms;
	ConditionalPropagateEnabledState_Parms.PlayerIndex = PlayerIndex;
	ConditionalPropagateEnabledState_Parms.bForce = bForce;

	pFnConditionalPropagateEnabledState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalPropagateEnabledState, &ConditionalPropagateEnabledState_Parms, NULL );

	pFnConditionalPropagateEnabledState->FunctionFlags |= 0x400;

	return ConditionalPropagateEnabledState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateStateByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasRemoved            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved )
{
	static UFunction* pFnDeactivateStateByClass = NULL;

	if ( ! pFnDeactivateStateByClass )
		pFnDeactivateStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 14004 ];

	UUIScreenObject_execDeactivateStateByClass_Parms DeactivateStateByClass_Parms;
	DeactivateStateByClass_Parms.StateToRemove = StateToRemove;
	DeactivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateStateByClass, &DeactivateStateByClass_Parms, NULL );

	pFnDeactivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasRemoved )
		*StateThatWasRemoved = DeactivateStateByClass_Parms.StateThatWasRemoved;

	return DeactivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DeactivateState ( class UUIState* StateToRemove, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = (UFunction*) UObject::GObjObjects()->Data[ 14000 ];

	UUIScreenObject_execDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.StateToRemove = StateToRemove;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	pFnDeactivateState->FunctionFlags |= 0x400;

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateStateByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasAdded              ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded )
{
	static UFunction* pFnActivateStateByClass = NULL;

	if ( ! pFnActivateStateByClass )
		pFnActivateStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 13995 ];

	UUIScreenObject_execActivateStateByClass_Parms ActivateStateByClass_Parms;
	ActivateStateByClass_Parms.StateToActivate = StateToActivate;
	ActivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnActivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateStateByClass, &ActivateStateByClass_Parms, NULL );

	pFnActivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasAdded )
		*StateThatWasAdded = ActivateStateByClass_Parms.StateThatWasAdded;

	return ActivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::ActivateState ( class UUIState* StateToActivate, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 13991 ];

	UUIScreenObject_execActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.StateToActivate = StateToActivate;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	pFnActivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	pFnActivateState->FunctionFlags |= 0x400;

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasActiveStateOfClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            StateIndex                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex )
{
	static UFunction* pFnHasActiveStateOfClass = NULL;

	if ( ! pFnHasActiveStateOfClass )
		pFnHasActiveStateOfClass = (UFunction*) UObject::GObjObjects()->Data[ 13986 ];

	UUIScreenObject_execHasActiveStateOfClass_Parms HasActiveStateOfClass_Parms;
	HasActiveStateOfClass_Parms.StateClass = StateClass;
	HasActiveStateOfClass_Parms.PlayerIndex = PlayerIndex;

	pFnHasActiveStateOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasActiveStateOfClass, &HasActiveStateOfClass_Parms, NULL );

	pFnHasActiveStateOfClass->FunctionFlags |= 0x400;

	if ( StateIndex )
		*StateIndex = HasActiveStateOfClass_Parms.StateIndex;

	return HasActiveStateOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCurrentState
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIState* UUIScreenObject::GetCurrentState ( int PlayerIndex )
{
	static UFunction* pFnGetCurrentState = NULL;

	if ( ! pFnGetCurrentState )
		pFnGetCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 13983 ];

	UUIScreenObject_execGetCurrentState_Parms GetCurrentState_Parms;
	GetCurrentState_Parms.PlayerIndex = PlayerIndex;

	pFnGetCurrentState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentState, &GetCurrentState_Parms, NULL );

	pFnGetCurrentState->FunctionFlags |= 0x400;

	return GetCurrentState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetEnabled
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnabled                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetEnabled ( unsigned long bEnabled, int PlayerIndex )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13979 ];

	UUIScreenObject_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;
	SetEnabled_Parms.PlayerIndex = PlayerIndex;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;

	return SetEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindEventsOfClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  EventClassToFind               ( CPF_Parm )
// class UUIState*                LimitScope                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bExactClass                    ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_EventInstances             ( CPF_Parm | CPF_OutParm )

void UUIScreenObject::FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, TArray< class UUIEvent* >* out_EventInstances )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 13973 ];

	UUIScreenObject_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClassToFind = EventClassToFind;
	FindEventsOfClass_Parms.LimitScope = LimitScope;
	FindEventsOfClass_Parms.bExactClass = bExactClass;

	pFnFindEventsOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	pFnFindEventsOfClass->FunctionFlags |= 0x400;

	if ( out_EventInstances )
		memcpy ( out_EventInstances, &FindEventsOfClass_Parms.out_EventInstances, 0xC );
};

// Function Engine.UIScreenObject.ActivateEventByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class UClass*                  EventClassToActivate           ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_ActivatedEvents            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void UUIScreenObject::ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int > IndicesToActivate, TArray< class UUIEvent* >* out_ActivatedEvents )
{
	static UFunction* pFnActivateEventByClass = NULL;

	if ( ! pFnActivateEventByClass )
		pFnActivateEventByClass = (UFunction*) UObject::GObjObjects()->Data[ 13964 ];

	UUIScreenObject_execActivateEventByClass_Parms ActivateEventByClass_Parms;
	ActivateEventByClass_Parms.PlayerIndex = PlayerIndex;
	ActivateEventByClass_Parms.EventClassToActivate = EventClassToActivate;
	ActivateEventByClass_Parms.InEventActivator = InEventActivator;
	ActivateEventByClass_Parms.bActivateImmediately = bActivateImmediately;
	memcpy ( &ActivateEventByClass_Parms.IndicesToActivate, &IndicesToActivate, 0xC );

	pFnActivateEventByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateEventByClass, &ActivateEventByClass_Parms, NULL );

	pFnActivateEventByClass->FunctionFlags |= 0x400;

	if ( out_ActivatedEvents )
		memcpy ( out_ActivatedEvents, &ActivateEventByClass_Parms.out_ActivatedEvents, 0xC );
};

// Function Engine.UIScreenObject.GetViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportHeight ( )
{
	static UFunction* pFnGetViewportHeight = NULL;

	if ( ! pFnGetViewportHeight )
		pFnGetViewportHeight = (UFunction*) UObject::GObjObjects()->Data[ 13962 ];

	UUIScreenObject_execGetViewportHeight_Parms GetViewportHeight_Parms;

	pFnGetViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportHeight, &GetViewportHeight_Parms, NULL );

	pFnGetViewportHeight->FunctionFlags |= 0x400;

	return GetViewportHeight_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportWidth ( )
{
	static UFunction* pFnGetViewportWidth = NULL;

	if ( ! pFnGetViewportWidth )
		pFnGetViewportWidth = (UFunction*) UObject::GObjObjects()->Data[ 13960 ];

	UUIScreenObject_execGetViewportWidth_Parms GetViewportWidth_Parms;

	pFnGetViewportWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportWidth, &GetViewportWidth_Parms, NULL );

	pFnGetViewportWidth->FunctionFlags |= 0x400;

	return GetViewportWidth_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = (UFunction*) UObject::GObjObjects()->Data[ 13957 ];

	UUIScreenObject_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );

	return GetViewportSize_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOrigin
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOrigin             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOrigin ( struct FVector2D* out_ViewportOrigin )
{
	static UFunction* pFnGetViewportOrigin = NULL;

	if ( ! pFnGetViewportOrigin )
		pFnGetViewportOrigin = (UFunction*) UObject::GObjObjects()->Data[ 13954 ];

	UUIScreenObject_execGetViewportOrigin_Parms GetViewportOrigin_Parms;

	pFnGetViewportOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOrigin, &GetViewportOrigin_Parms, NULL );

	pFnGetViewportOrigin->FunctionFlags |= 0x400;

	if ( out_ViewportOrigin )
		memcpy ( out_ViewportOrigin, &GetViewportOrigin_Parms.out_ViewportOrigin, 0x8 );

	return GetViewportOrigin_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportScale ( )
{
	static UFunction* pFnGetViewportScale = NULL;

	if ( ! pFnGetViewportScale )
		pFnGetViewportScale = (UFunction*) UObject::GObjObjects()->Data[ 13952 ];

	UUIScreenObject_execGetViewportScale_Parms GetViewportScale_Parms;

	pFnGetViewportScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportScale, &GetViewportScale_Parms, NULL );

	pFnGetViewportScale->FunctionFlags |= 0x400;

	return GetViewportScale_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOffset
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOffset             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOffset ( struct FVector2D* out_ViewportOffset )
{
	static UFunction* pFnGetViewportOffset = NULL;

	if ( ! pFnGetViewportOffset )
		pFnGetViewportOffset = (UFunction*) UObject::GObjObjects()->Data[ 13949 ];

	UUIScreenObject_execGetViewportOffset_Parms GetViewportOffset_Parms;

	pFnGetViewportOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOffset, &GetViewportOffset_Parms, NULL );

	pFnGetViewportOffset->FunctionFlags |= 0x400;

	if ( out_ViewportOffset )
		memcpy ( out_ViewportOffset, &GetViewportOffset_Parms.out_ViewportOffset, 0x8 );

	return GetViewportOffset_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RequestPrimitiveReview
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bReinitializePrimitives        ( CPF_Parm )
// unsigned long                  bReviewPrimitiveUsage          ( CPF_Parm )

void UUIScreenObject::RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage )
{
	static UFunction* pFnRequestPrimitiveReview = NULL;

	if ( ! pFnRequestPrimitiveReview )
		pFnRequestPrimitiveReview = (UFunction*) UObject::GObjObjects()->Data[ 13946 ];

	UUIScreenObject_execRequestPrimitiveReview_Parms RequestPrimitiveReview_Parms;
	RequestPrimitiveReview_Parms.bReinitializePrimitives = bReinitializePrimitives;
	RequestPrimitiveReview_Parms.bReviewPrimitiveUsage = bReviewPrimitiveUsage;

	pFnRequestPrimitiveReview->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestPrimitiveReview, &RequestPrimitiveReview_Parms, NULL );

	pFnRequestPrimitiveReview->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestFormattingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::RequestFormattingUpdate ( )
{
	static UFunction* pFnRequestFormattingUpdate = NULL;

	if ( ! pFnRequestFormattingUpdate )
		pFnRequestFormattingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 13945 ];

	UUIScreenObject_execRequestFormattingUpdate_Parms RequestFormattingUpdate_Parms;

	pFnRequestFormattingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestFormattingUpdate, &RequestFormattingUpdate_Parms, NULL );

	pFnRequestFormattingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestSceneUpdate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDockingStackChanged           ( CPF_Parm )
// unsigned long                  bPositionsChanged              ( CPF_Parm )
// unsigned long                  bNavLinksOutdated              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWidgetStylesChanged           ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged )
{
	static UFunction* pFnRequestSceneUpdate = NULL;

	if ( ! pFnRequestSceneUpdate )
		pFnRequestSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 13940 ];

	UUIScreenObject_execRequestSceneUpdate_Parms RequestSceneUpdate_Parms;
	RequestSceneUpdate_Parms.bDockingStackChanged = bDockingStackChanged;
	RequestSceneUpdate_Parms.bPositionsChanged = bPositionsChanged;
	RequestSceneUpdate_Parms.bNavLinksOutdated = bNavLinksOutdated;
	RequestSceneUpdate_Parms.bWidgetStylesChanged = bWidgetStylesChanged;

	pFnRequestSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestSceneUpdate, &RequestSceneUpdate_Parms, NULL );

	pFnRequestSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetObjectCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetObjectCount ( )
{
	static UFunction* pFnGetObjectCount = NULL;

	if ( ! pFnGetObjectCount )
		pFnGetObjectCount = (UFunction*) UObject::GObjObjects()->Data[ 13938 ];

	UUIScreenObject_execGetObjectCount_Parms GetObjectCount_Parms;

	pFnGetObjectCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectCount, &GetObjectCount_Parms, NULL );

	pFnGetObjectCount->FunctionFlags |= 0x400;

	return GetObjectCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetChildren
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIObject* >     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

TArray< class UUIObject* > UUIScreenObject::GetChildren ( unsigned long bRecurse, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 13932 ];

	UUIScreenObject_execGetChildren_Parms GetChildren_Parms;
	GetChildren_Parms.bRecurse = bRecurse;
	memcpy ( &GetChildren_Parms.ExclusionSet, &ExclusionSet, 0xC );

	pFnGetChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	pFnGetChildren->FunctionFlags |= 0x400;

	return GetChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChildOfClass
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse )
{
	static UFunction* pFnContainsChildOfClass = NULL;

	if ( ! pFnContainsChildOfClass )
		pFnContainsChildOfClass = (UFunction*) UObject::GObjObjects()->Data[ 13928 ];

	UUIScreenObject_execContainsChildOfClass_Parms ContainsChildOfClass_Parms;
	ContainsChildOfClass_Parms.SearchClass = SearchClass;
	ContainsChildOfClass_Parms.bRecurse = bRecurse;

	pFnContainsChildOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChildOfClass, &ContainsChildOfClass_Parms, NULL );

	pFnContainsChildOfClass->FunctionFlags |= 0x400;

	return ContainsChildOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Child                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChild ( class UUIObject* Child, unsigned long bRecurse )
{
	static UFunction* pFnContainsChild = NULL;

	if ( ! pFnContainsChild )
		pFnContainsChild = (UFunction*) UObject::GObjObjects()->Data[ 13924 ];

	UUIScreenObject_execContainsChild_Parms ContainsChild_Parms;
	ContainsChild_Parms.Child = Child;
	ContainsChild_Parms.bRecurse = bRecurse;

	pFnContainsChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChild, &ContainsChild_Parms, NULL );

	pFnContainsChild->FunctionFlags |= 0x400;

	return ContainsChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )

int UUIScreenObject::FindChildIndex ( struct FName WidgetName )
{
	static UFunction* pFnFindChildIndex = NULL;

	if ( ! pFnFindChildIndex )
		pFnFindChildIndex = (UFunction*) UObject::GObjObjects()->Data[ 13921 ];

	UUIScreenObject_execFindChildIndex_Parms FindChildIndex_Parms;
	memcpy ( &FindChildIndex_Parms.WidgetName, &WidgetName, 0x8 );

	pFnFindChildIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildIndex, &FindChildIndex_Parms, NULL );

	pFnFindChildIndex->FunctionFlags |= 0x400;

	return FindChildIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildUsingID
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FWIDGET_ID              WidgetID                       ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse )
{
	static UFunction* pFnFindChildUsingID = NULL;

	if ( ! pFnFindChildUsingID )
		pFnFindChildUsingID = (UFunction*) UObject::GObjObjects()->Data[ 13917 ];

	UUIScreenObject_execFindChildUsingID_Parms FindChildUsingID_Parms;
	memcpy ( &FindChildUsingID_Parms.WidgetID, &WidgetID, 0x10 );
	FindChildUsingID_Parms.bRecurse = bRecurse;

	pFnFindChildUsingID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildUsingID, &FindChildUsingID_Parms, NULL );

	pFnFindChildUsingID->FunctionFlags |= 0x400;

	return FindChildUsingID_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChild ( struct FName WidgetName, unsigned long bRecurse )
{
	static UFunction* pFnFindChild = NULL;

	if ( ! pFnFindChild )
		pFnFindChild = (UFunction*) UObject::GObjObjects()->Data[ 13830 ];

	UUIScreenObject_execFindChild_Parms FindChild_Parms;
	memcpy ( &FindChild_Parms.WidgetName, &WidgetName, 0x8 );
	FindChild_Parms.bRecurse = bRecurse;

	pFnFindChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChild, &FindChild_Parms, NULL );

	pFnFindChild->FunctionFlags |= 0x400;

	return FindChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReplaceChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

bool UUIScreenObject::ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild )
{
	static UFunction* pFnReplaceChild = NULL;

	if ( ! pFnReplaceChild )
		pFnReplaceChild = (UFunction*) UObject::GObjObjects()->Data[ 13910 ];

	UUIScreenObject_execReplaceChild_Parms ReplaceChild_Parms;
	ReplaceChild_Parms.ExistingChild = ExistingChild;
	ReplaceChild_Parms.NewChild = NewChild;

	pFnReplaceChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceChild, &ReplaceChild_Parms, NULL );

	pFnReplaceChild->FunctionFlags |= 0x400;

	return ReplaceChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReparentChildren
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UUIObject* >     ChildrenToReparent             ( CPF_Parm )
// class UUIScreenObject*         NewParent                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ReparentChildren ( TArray< class UUIObject* > ChildrenToReparent, class UUIScreenObject* NewParent, int InsertIndex )
{
	static UFunction* pFnReparentChildren = NULL;

	if ( ! pFnReparentChildren )
		pFnReparentChildren = (UFunction*) UObject::GObjObjects()->Data[ 13904 ];

	UUIScreenObject_execReparentChildren_Parms ReparentChildren_Parms;
	memcpy ( &ReparentChildren_Parms.ChildrenToReparent, &ChildrenToReparent, 0xC );
	ReparentChildren_Parms.NewParent = NewParent;
	ReparentChildren_Parms.InsertIndex = InsertIndex;

	pFnReparentChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReparentChildren, &ReparentChildren_Parms, NULL );

	pFnReparentChildren->FunctionFlags |= 0x400;

	return ReparentChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReparentChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               CurrentChild                   ( CPF_Parm )
// class UUIScreenObject*         NewParent                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ReparentChild ( class UUIObject* CurrentChild, class UUIScreenObject* NewParent, int InsertIndex )
{
	static UFunction* pFnReparentChild = NULL;

	if ( ! pFnReparentChild )
		pFnReparentChild = (UFunction*) UObject::GObjObjects()->Data[ 13899 ];

	UUIScreenObject_execReparentChild_Parms ReparentChild_Parms;
	ReparentChild_Parms.CurrentChild = CurrentChild;
	ReparentChild_Parms.NewParent = NewParent;
	ReparentChild_Parms.InsertIndex = InsertIndex;

	pFnReparentChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReparentChild, &ReparentChild_Parms, NULL );

	pFnReparentChild->FunctionFlags |= 0x400;

	return ReparentChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChildren
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIObject* >     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UUIObject* >     ChildrenToRemove               ( CPF_Parm )

TArray< class UUIObject* > UUIScreenObject::RemoveChildren ( TArray< class UUIObject* > ChildrenToRemove )
{
	static UFunction* pFnRemoveChildren = NULL;

	if ( ! pFnRemoveChildren )
		pFnRemoveChildren = (UFunction*) UObject::GObjObjects()->Data[ 13894 ];

	UUIScreenObject_execRemoveChildren_Parms RemoveChildren_Parms;
	memcpy ( &RemoveChildren_Parms.ChildrenToRemove, &ChildrenToRemove, 0xC );

	pFnRemoveChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChildren, &RemoveChildren_Parms, NULL );

	pFnRemoveChildren->FunctionFlags |= 0x400;

	return RemoveChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::RemoveChild ( class UUIObject* ExistingChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 13889 ];

	UUIScreenObject_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.ExistingChild = ExistingChild;
	memcpy ( &RemoveChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	pFnRemoveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );

	pFnRemoveChild->FunctionFlags |= 0x400;

	return RemoveChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InsertChild
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewChild                       ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRenameExisting                ( CPF_OptionalParm | CPF_Parm )

int UUIScreenObject::InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting )
{
	static UFunction* pFnInsertChild = NULL;

	if ( ! pFnInsertChild )
		pFnInsertChild = (UFunction*) UObject::GObjObjects()->Data[ 13884 ];

	UUIScreenObject_execInsertChild_Parms InsertChild_Parms;
	InsertChild_Parms.NewChild = NewChild;
	InsertChild_Parms.InsertIndex = InsertIndex;
	InsertChild_Parms.bRenameExisting = bRenameExisting;

	pFnInsertChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertChild, &InsertChild_Parms, NULL );

	pFnInsertChild->FunctionFlags |= 0x400;

	return InsertChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Initialize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                inOwnerScene                   ( CPF_Parm )
// class UUIObject*               InOwner                        ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 13881 ];

	UUIScreenObject_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.inOwnerScene = inOwnerScene;
	Initialize_Parms.InOwner = InOwner;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.CreateWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Owner                          ( CPF_Parm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// class UObject*                 WidgetArchetype                ( CPF_OptionalParm | CPF_Parm )
// struct FName                   WidgetName                     ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName )
{
	static UFunction* pFnCreateWidget = NULL;

	if ( ! pFnCreateWidget )
		pFnCreateWidget = (UFunction*) UObject::GObjObjects()->Data[ 13875 ];

	UUIScreenObject_execCreateWidget_Parms CreateWidget_Parms;
	CreateWidget_Parms.Owner = Owner;
	CreateWidget_Parms.WidgetClass = WidgetClass;
	CreateWidget_Parms.WidgetArchetype = WidgetArchetype;
	memcpy ( &CreateWidget_Parms.WidgetName, &WidgetName, 0x8 );

	pFnCreateWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateWidget, &CreateWidget_Parms, NULL );

	pFnCreateWidget->FunctionFlags |= 0x400;

	return CreateWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PlayUISound
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::PlayUISound ( struct FName SoundCueName, int PlayerIndex )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = (UFunction*) UObject::GObjObjects()->Data[ 13871 ];

	UUIScreenObject_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x8 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPlayerOwner
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class ULocalPlayer* UUIScreenObject::GetPlayerOwner ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 13868 ];

	UUIScreenObject_execGetPlayerOwner_Parms GetPlayerOwner_Parms;
	GetPlayerOwner_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InitializePlayerTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::InitializePlayerTracking ( )
{
	static UFunction* pFnInitializePlayerTracking = NULL;

	if ( ! pFnInitializePlayerTracking )
		pFnInitializePlayerTracking = (UFunction*) UObject::GObjObjects()->Data[ 13867 ];

	UUIScreenObject_execInitializePlayerTracking_Parms InitializePlayerTracking_Parms;

	pFnInitializePlayerTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializePlayerTracking, &InitializePlayerTracking_Parms, NULL );

	pFnInitializePlayerTracking->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RemovePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIScreenObject::RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnRemovePlayerData = NULL;

	if ( ! pFnRemovePlayerData )
		pFnRemovePlayerData = (UFunction*) UObject::GObjObjects()->Data[ 13864 ];

	UUIScreenObject_execRemovePlayerData_Parms RemovePlayerData_Parms;
	RemovePlayerData_Parms.PlayerIndex = PlayerIndex;
	RemovePlayerData_Parms.RemovedPlayer = RemovedPlayer;

	pFnRemovePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePlayerData, &RemovePlayerData_Parms, NULL );

	pFnRemovePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.CreatePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIScreenObject::CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnCreatePlayerData = NULL;

	if ( ! pFnCreatePlayerData )
		pFnCreatePlayerData = (UFunction*) UObject::GObjObjects()->Data[ 13861 ];

	UUIScreenObject_execCreatePlayerData_Parms CreatePlayerData_Parms;
	CreatePlayerData_Parms.PlayerIndex = PlayerIndex;
	CreatePlayerData_Parms.AddedPlayer = AddedPlayer;

	pFnCreatePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePlayerData, &CreatePlayerData_Parms, NULL );

	pFnCreatePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.IsHidden
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParents                ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsHidden ( unsigned long bIncludeParents )
{
	static UFunction* pFnIsHidden = NULL;

	if ( ! pFnIsHidden )
		pFnIsHidden = (UFunction*) UObject::GObjObjects()->Data[ 13858 ];

	UUIScreenObject_execIsHidden_Parms IsHidden_Parms;
	IsHidden_Parms.bIncludeParents = bIncludeParents;

	pFnIsHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHidden, &IsHidden_Parms, NULL );

	pFnIsHidden->FunctionFlags |= 0x400;

	return IsHidden_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsVisible
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParents                ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsVisible ( unsigned long bIncludeParents )
{
	static UFunction* pFnIsVisible = NULL;

	if ( ! pFnIsVisible )
		pFnIsVisible = (UFunction*) UObject::GObjObjects()->Data[ 13855 ];

	UUIScreenObject_execIsVisible_Parms IsVisible_Parms;
	IsVisible_Parms.bIncludeParents = bIncludeParents;

	pFnIsVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisible, &IsVisible_Parms, NULL );

	pFnIsVisible->FunctionFlags |= 0x400;

	return IsVisible_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsInitialized ( )
{
	static UFunction* pFnIsInitialized = NULL;

	if ( ! pFnIsInitialized )
		pFnIsInitialized = (UFunction*) UObject::GObjObjects()->Data[ 13853 ];

	UUIScreenObject_execIsInitialized_Parms IsInitialized_Parms;

	pFnIsInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInitialized, &IsInitialized_Parms, NULL );

	pFnIsInitialized->FunctionFlags |= 0x400;

	return IsInitialized_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterfaceEx* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterfaceEx* UUIRoot::GetOnlinePlayerInterfaceEx ( )
{
	static UFunction* pFnGetOnlinePlayerInterfaceEx = NULL;

	if ( ! pFnGetOnlinePlayerInterfaceEx )
		pFnGetOnlinePlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 13650 ];

	UUIRoot_execGetOnlinePlayerInterfaceEx_Parms GetOnlinePlayerInterfaceEx_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterfaceEx, &GetOnlinePlayerInterfaceEx_Parms, NULL );

	return GetOnlinePlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterface*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterface* UUIRoot::GetOnlinePlayerInterface ( )
{
	static UFunction* pFnGetOnlinePlayerInterface = NULL;

	if ( ! pFnGetOnlinePlayerInterface )
		pFnGetOnlinePlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 13646 ];

	UUIRoot_execGetOnlinePlayerInterface_Parms GetOnlinePlayerInterface_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterface, &GetOnlinePlayerInterface_Parms, NULL );

	return GetOnlinePlayerInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlineGameInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlineGameInterface*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameInterface* UUIRoot::GetOnlineGameInterface ( )
{
	static UFunction* pFnGetOnlineGameInterface = NULL;

	if ( ! pFnGetOnlineGameInterface )
		pFnGetOnlineGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 13642 ];

	UUIRoot_execGetOnlineGameInterface_Parms GetOnlineGameInterface_Parms;

	this->ProcessEvent ( pFnGetOnlineGameInterface, &GetOnlineGameInterface_Parms, NULL );

	return GetOnlineGameInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.ConvertWidgetIDToString
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               SourceWidget                   ( CPF_Parm )

struct FString UUIRoot::ConvertWidgetIDToString ( class UUIObject* SourceWidget )
{
	static UFunction* pFnConvertWidgetIDToString = NULL;

	if ( ! pFnConvertWidgetIDToString )
		pFnConvertWidgetIDToString = (UFunction*) UObject::GObjObjects()->Data[ 13638 ];

	UUIRoot_execConvertWidgetIDToString_Parms ConvertWidgetIDToString_Parms;
	ConvertWidgetIDToString_Parms.SourceWidget = SourceWidget;

	this->ProcessEvent ( pFnConvertWidgetIDToString, &ConvertWidgetIDToString_Parms, NULL );

	return ConvertWidgetIDToString_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreStringValue
// [0x00C26002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 OutStringValue                 ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue )
{
	static UFunction* pFnGetDataStoreStringValue = NULL;

	if ( ! pFnGetDataStoreStringValue )
		pFnGetDataStoreStringValue = (UFunction*) UObject::GObjObjects()->Data[ 13630 ];

	UUIRoot_execGetDataStoreStringValue_Parms GetDataStoreStringValue_Parms;
	memcpy ( &GetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	GetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnGetDataStoreStringValue, &GetDataStoreStringValue_Parms, NULL );

	if ( OutStringValue )
		memcpy ( OutStringValue, &GetDataStoreStringValue_Parms.OutStringValue, 0xC );

	return GetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreFieldValue
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   OutFieldValue                  ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue )
{
	static UFunction* pFnGetDataStoreFieldValue = NULL;

	if ( ! pFnGetDataStoreFieldValue )
		pFnGetDataStoreFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 13624 ];

	UUIRoot_execGetDataStoreFieldValue_Parms GetDataStoreFieldValue_Parms;
	memcpy ( &GetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	GetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnGetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreFieldValue, &GetDataStoreFieldValue_Parms, NULL );

	pFnGetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( OutFieldValue )
		memcpy ( OutFieldValue, &GetDataStoreFieldValue_Parms.OutFieldValue, 0x58 );

	return GetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreStringValue
// [0x00826002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm )
// struct FString                 InStringValue                  ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer )
{
	static UFunction* pFnSetDataStoreStringValue = NULL;

	if ( ! pFnSetDataStoreStringValue )
		pFnSetDataStoreStringValue = (UFunction*) UObject::GObjObjects()->Data[ 13617 ];

	UUIRoot_execSetDataStoreStringValue_Parms SetDataStoreStringValue_Parms;
	memcpy ( &SetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	memcpy ( &SetDataStoreStringValue_Parms.InStringValue, &InStringValue, 0xC );
	SetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnSetDataStoreStringValue, &SetDataStoreStringValue_Parms, NULL );

	return SetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreFieldValue
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   InFieldValue                   ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIRoot::SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue )
{
	static UFunction* pFnSetDataStoreFieldValue = NULL;

	if ( ! pFnSetDataStoreFieldValue )
		pFnSetDataStoreFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 13611 ];

	UUIRoot_execSetDataStoreFieldValue_Parms SetDataStoreFieldValue_Parms;
	memcpy ( &SetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	SetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnSetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreFieldValue, &SetDataStoreFieldValue_Parms, NULL );

	pFnSetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( InFieldValue )
		memcpy ( InFieldValue, &SetDataStoreFieldValue_Parms.InFieldValue, 0x58 );

	return SetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.StaticResolveDataStore
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIRoot::StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnStaticResolveDataStore = NULL;

	if ( ! pFnStaticResolveDataStore )
		pFnStaticResolveDataStore = (UFunction*) UObject::GObjObjects()->Data[ 13604 ];

	UUIRoot_execStaticResolveDataStore_Parms StaticResolveDataStore_Parms;
	memcpy ( &StaticResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	StaticResolveDataStore_Parms.OwnerScene = OwnerScene;
	StaticResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	this->ProcessEvent ( pFnStaticResolveDataStore, &StaticResolveDataStore_Parms, NULL );

	return StaticResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetPrimitiveTransform
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// unsigned long                  bIncludeAnchorPosition         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncudeRotation                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeScale                  ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIRoot::GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale )
{
	static UFunction* pFnGetPrimitiveTransform = NULL;

	if ( ! pFnGetPrimitiveTransform )
		pFnGetPrimitiveTransform = (UFunction*) UObject::GObjObjects()->Data[ 13598 ];

	UUIRoot_execGetPrimitiveTransform_Parms GetPrimitiveTransform_Parms;
	GetPrimitiveTransform_Parms.Widget = Widget;
	GetPrimitiveTransform_Parms.bIncludeAnchorPosition = bIncludeAnchorPosition;
	GetPrimitiveTransform_Parms.bIncudeRotation = bIncudeRotation;
	GetPrimitiveTransform_Parms.bIncludeScale = bIncludeScale;

	pFnGetPrimitiveTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimitiveTransform, &GetPrimitiveTransform_Parms, NULL );

	pFnGetPrimitiveTransform->FunctionFlags |= 0x400;

	return GetPrimitiveTransform_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetMouseCaptureOverride
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bCaptureMouse                  ( CPF_Parm )

void UUIRoot::SetMouseCaptureOverride ( unsigned long bCaptureMouse )
{
	static UFunction* pFnSetMouseCaptureOverride = NULL;

	if ( ! pFnSetMouseCaptureOverride )
		pFnSetMouseCaptureOverride = (UFunction*) UObject::GObjObjects()->Data[ 13596 ];

	UUIRoot_execSetMouseCaptureOverride_Parms SetMouseCaptureOverride_Parms;
	SetMouseCaptureOverride_Parms.bCaptureMouse = bCaptureMouse;

	pFnSetMouseCaptureOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseCaptureOverride, &SetMouseCaptureOverride_Parms, NULL );

	pFnSetMouseCaptureOverride->FunctionFlags |= 0x400;
};

// Function Engine.UIRoot.GetCursorSize
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          CursorXL                       ( CPF_Parm | CPF_OutParm )
// float                          CursorYL                       ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorSize ( float* CursorXL, float* CursorYL )
{
	static UFunction* pFnGetCursorSize = NULL;

	if ( ! pFnGetCursorSize )
		pFnGetCursorSize = (UFunction*) UObject::GObjObjects()->Data[ 13592 ];

	UUIRoot_execGetCursorSize_Parms GetCursorSize_Parms;

	pFnGetCursorSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorSize, &GetCursorSize_Parms, NULL );

	pFnGetCursorSize->FunctionFlags |= 0x400;

	if ( CursorXL )
		*CursorXL = GetCursorSize_Parms.CursorXL;

	if ( CursorYL )
		*CursorYL = GetCursorSize_Parms.CursorYL;

	return GetCursorSize_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCursorPosition
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// int                            CursorX                        ( CPF_Parm | CPF_OutParm )
// int                            CursorY                        ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY )
{
	static UFunction* pFnGetCursorPosition = NULL;

	if ( ! pFnGetCursorPosition )
		pFnGetCursorPosition = (UFunction*) UObject::GObjObjects()->Data[ 13587 ];

	UUIRoot_execGetCursorPosition_Parms GetCursorPosition_Parms;
	GetCursorPosition_Parms.Scene = Scene;

	pFnGetCursorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorPosition, &GetCursorPosition_Parms, NULL );

	pFnGetCursorPosition->FunctionFlags |= 0x400;

	if ( CursorX )
		*CursorX = GetCursorPosition_Parms.CursorX;

	if ( CursorY )
		*CursorY = GetCursorPosition_Parms.CursorY;

	return GetCursorPosition_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetFaceOrientation
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )

unsigned char UUIRoot::GetFaceOrientation ( unsigned char Face )
{
	static UFunction* pFnGetFaceOrientation = NULL;

	if ( ! pFnGetFaceOrientation )
		pFnGetFaceOrientation = (UFunction*) UObject::GObjObjects()->Data[ 13584 ];

	UUIRoot_execGetFaceOrientation_Parms GetFaceOrientation_Parms;
	GetFaceOrientation_Parms.Face = Face;

	pFnGetFaceOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceOrientation, &GetFaceOrientation_Parms, NULL );

	pFnGetFaceOrientation->FunctionFlags |= 0x400;

	return GetFaceOrientation_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetSceneClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UGameUISceneClient*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGameUISceneClient* UUIRoot::GetSceneClient ( )
{
	static UFunction* pFnGetSceneClient = NULL;

	if ( ! pFnGetSceneClient )
		pFnGetSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 13582 ];

	UUIRoot_execGetSceneClient_Parms GetSceneClient_Parms;

	pFnGetSceneClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneClient, &GetSceneClient_Parms, NULL );

	pFnGetSceneClient->FunctionFlags |= 0x400;

	return GetSceneClient_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCurrentUIController
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* UUIRoot::GetCurrentUIController ( )
{
	static UFunction* pFnGetCurrentUIController = NULL;

	if ( ! pFnGetCurrentUIController )
		pFnGetCurrentUIController = (UFunction*) UObject::GObjObjects()->Data[ 13580 ];

	UUIRoot_execGetCurrentUIController_Parms GetCurrentUIController_Parms;

	pFnGetCurrentUIController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUIController, &GetCurrentUIController_Parms, NULL );

	pFnGetCurrentUIController->FunctionFlags |= 0x400;

	return GetCurrentUIController_Parms.ReturnValue;
};

// Function Engine.UIRoot.IsConsole
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::IsConsole ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsole = NULL;

	if ( ! pFnIsConsole )
		pFnIsConsole = (UFunction*) UObject::GObjObjects()->Data[ 13577 ];

	UUIRoot_execIsConsole_Parms IsConsole_Parms;
	IsConsole_Parms.ConsoleType = ConsoleType;

	this->ProcessEvent ( pFnIsConsole, &IsConsole_Parms, NULL );

	return IsConsole_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetInputPlatformType
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            OwningPlayer                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIRoot::GetInputPlatformType ( class ULocalPlayer* OwningPlayer )
{
	static UFunction* pFnGetInputPlatformType = NULL;

	if ( ! pFnGetInputPlatformType )
		pFnGetInputPlatformType = (UFunction*) UObject::GObjObjects()->Data[ 13396 ];

	UUIRoot_execGetInputPlatformType_Parms GetInputPlatformType_Parms;
	GetInputPlatformType_Parms.OwningPlayer = OwningPlayer;

	pFnGetInputPlatformType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputPlatformType, &GetInputPlatformType_Parms, NULL );

	pFnGetInputPlatformType->FunctionFlags |= 0x400;

	return GetInputPlatformType_Parms.ReturnValue;
};

// Function Engine.CustomUISliderBox.OnMarkerDrop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISliderBox::OnMarkerDrop ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDrop = NULL;

	if ( ! pFnOnMarkerDrop )
		pFnOnMarkerDrop = (UFunction*) UObject::GObjObjects()->Data[ 17277 ];

	UCustomUISliderBox_execOnMarkerDrop_Parms OnMarkerDrop_Parms;
	OnMarkerDrop_Parms.Sender = Sender;

	pFnOnMarkerDrop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDrop, &OnMarkerDrop_Parms, NULL );

	pFnOnMarkerDrop->FunctionFlags |= 0x400;
};

// Function Engine.CustomUISliderBox.OnMarkerDragStart
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISliderBox::OnMarkerDragStart ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDragStart = NULL;

	if ( ! pFnOnMarkerDragStart )
		pFnOnMarkerDragStart = (UFunction*) UObject::GObjObjects()->Data[ 17275 ];

	UCustomUISliderBox_execOnMarkerDragStart_Parms OnMarkerDragStart_Parms;
	OnMarkerDragStart_Parms.Sender = Sender;

	pFnOnMarkerDragStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDragStart, &OnMarkerDragStart_Parms, NULL );

	pFnOnMarkerDragStart->FunctionFlags |= 0x400;
};

// Function Engine.CustomUISliderBox.OnMarkerDrag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISliderBox::OnMarkerDrag ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDrag = NULL;

	if ( ! pFnOnMarkerDrag )
		pFnOnMarkerDrag = (UFunction*) UObject::GObjObjects()->Data[ 17273 ];

	UCustomUISliderBox_execOnMarkerDrag_Parms OnMarkerDrag_Parms;
	OnMarkerDrag_Parms.Sender = Sender;

	pFnOnMarkerDrag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDrag, &OnMarkerDrag_Parms, NULL );

	pFnOnMarkerDrag->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIMultiLineEditBox.KillFocusEx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UCustomUIMultiLineEditBox::KillFocusEx ( int PlayerIndex )
{
	static UFunction* pFnKillFocusEx = NULL;

	if ( ! pFnKillFocusEx )
		pFnKillFocusEx = (UFunction*) UObject::GObjObjects()->Data[ 17020 ];

	UCustomUIMultiLineEditBox_execKillFocusEx_Parms KillFocusEx_Parms;
	KillFocusEx_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocusEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocusEx, &KillFocusEx_Parms, NULL );

	pFnKillFocusEx->FunctionFlags |= 0x400;

	return KillFocusEx_Parms.ReturnValue;
};

// Function Engine.CustomUIMultiLineEditBox.OnScrollBarScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Offset                         ( CPF_Parm )

void UCustomUIMultiLineEditBox::OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset )
{
	static UFunction* pFnOnScrollBarScroll = NULL;

	if ( ! pFnOnScrollBarScroll )
		pFnOnScrollBarScroll = (UFunction*) UObject::GObjObjects()->Data[ 17017 ];

	UCustomUIMultiLineEditBox_execOnScrollBarScroll_Parms OnScrollBarScroll_Parms;
	OnScrollBarScroll_Parms.Sender = Sender;
	OnScrollBarScroll_Parms.Offset = Offset;

	pFnOnScrollBarScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarScroll, &OnScrollBarScroll_Parms, NULL );

	pFnOnScrollBarScroll->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIBink.OnPlayBarSlider
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UCustomUIBink::OnPlayBarSlider ( class UUIScreenObject* Sender, float Value )
{
	static UFunction* pFnOnPlayBarSlider = NULL;

	if ( ! pFnOnPlayBarSlider )
		pFnOnPlayBarSlider = (UFunction*) UObject::GObjObjects()->Data[ 15748 ];

	UCustomUIBink_execOnPlayBarSlider_Parms OnPlayBarSlider_Parms;
	OnPlayBarSlider_Parms.Sender = Sender;
	OnPlayBarSlider_Parms.Value = Value;

	pFnOnPlayBarSlider->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPlayBarSlider, &OnPlayBarSlider_Parms, NULL );

	pFnOnPlayBarSlider->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIColumnList.OnScrollBarScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Offset                         ( CPF_Parm )

void UCustomUIColumnList::OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset )
{
	static UFunction* pFnOnScrollBarScroll = NULL;

	if ( ! pFnOnScrollBarScroll )
		pFnOnScrollBarScroll = (UFunction*) UObject::GObjObjects()->Data[ 15915 ];

	UCustomUIColumnList_execOnScrollBarScroll_Parms OnScrollBarScroll_Parms;
	OnScrollBarScroll_Parms.Sender = Sender;
	OnScrollBarScroll_Parms.Offset = Offset;

	pFnOnScrollBarScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarScroll, &OnScrollBarScroll_Parms, NULL );

	pFnOnScrollBarScroll->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabDecrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabDecrement ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabDecrement = NULL;

	if ( ! pFnOnTabDecrement )
		pFnOnTabDecrement = (UFunction*) UObject::GObjObjects()->Data[ 17312 ];

	UCustomUITabCtrl_execOnTabDecrement_Parms OnTabDecrement_Parms;
	OnTabDecrement_Parms.Sender = Sender;

	pFnOnTabDecrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabDecrement, &OnTabDecrement_Parms, NULL );

	pFnOnTabDecrement->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabIncrement ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabIncrement = NULL;

	if ( ! pFnOnTabIncrement )
		pFnOnTabIncrement = (UFunction*) UObject::GObjObjects()->Data[ 17310 ];

	UCustomUITabCtrl_execOnTabIncrement_Parms OnTabIncrement_Parms;
	OnTabIncrement_Parms.Sender = Sender;

	pFnOnTabIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabIncrement, &OnTabIncrement_Parms, NULL );

	pFnOnTabIncrement->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabButtonDrop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabButtonDrop ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabButtonDrop = NULL;

	if ( ! pFnOnTabButtonDrop )
		pFnOnTabButtonDrop = (UFunction*) UObject::GObjObjects()->Data[ 17308 ];

	UCustomUITabCtrl_execOnTabButtonDrop_Parms OnTabButtonDrop_Parms;
	OnTabButtonDrop_Parms.Sender = Sender;

	pFnOnTabButtonDrop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabButtonDrop, &OnTabButtonDrop_Parms, NULL );

	pFnOnTabButtonDrop->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabButtonDrag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabButtonDrag ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabButtonDrag = NULL;

	if ( ! pFnOnTabButtonDrag )
		pFnOnTabButtonDrag = (UFunction*) UObject::GObjObjects()->Data[ 17306 ];

	UCustomUITabCtrl_execOnTabButtonDrag_Parms OnTabButtonDrag_Parms;
	OnTabButtonDrag_Parms.Sender = Sender;

	pFnOnTabButtonDrag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabButtonDrag, &OnTabButtonDrag_Parms, NULL );

	pFnOnTabButtonDrag->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabButtonDragStart
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabButtonDragStart ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabButtonDragStart = NULL;

	if ( ! pFnOnTabButtonDragStart )
		pFnOnTabButtonDragStart = (UFunction*) UObject::GObjObjects()->Data[ 17304 ];

	UCustomUITabCtrl_execOnTabButtonDragStart_Parms OnTabButtonDragStart_Parms;
	OnTabButtonDragStart_Parms.Sender = Sender;

	pFnOnTabButtonDragStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabButtonDragStart, &OnTabButtonDragStart_Parms, NULL );

	pFnOnTabButtonDragStart->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabButtonRClicked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabButtonRClicked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabButtonRClicked = NULL;

	if ( ! pFnOnTabButtonRClicked )
		pFnOnTabButtonRClicked = (UFunction*) UObject::GObjObjects()->Data[ 17302 ];

	UCustomUITabCtrl_execOnTabButtonRClicked_Parms OnTabButtonRClicked_Parms;
	OnTabButtonRClicked_Parms.Sender = Sender;

	pFnOnTabButtonRClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabButtonRClicked, &OnTabButtonRClicked_Parms, NULL );

	pFnOnTabButtonRClicked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUITabCtrl.OnTabButtonChanged
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUITabCtrl::OnTabButtonChanged ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnTabButtonChanged = NULL;

	if ( ! pFnOnTabButtonChanged )
		pFnOnTabButtonChanged = (UFunction*) UObject::GObjObjects()->Data[ 17300 ];

	UCustomUITabCtrl_execOnTabButtonChanged_Parms OnTabButtonChanged_Parms;
	OnTabButtonChanged_Parms.Sender = Sender;

	pFnOnTabButtonChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTabButtonChanged, &OnTabButtonChanged_Parms, NULL );

	pFnOnTabButtonChanged->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIToggleButton.OnToggleButtonRClickedChecked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIToggleButton::OnToggleButtonRClickedChecked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnToggleButtonRClickedChecked = NULL;

	if ( ! pFnOnToggleButtonRClickedChecked )
		pFnOnToggleButtonRClickedChecked = (UFunction*) UObject::GObjObjects()->Data[ 17342 ];

	UCustomUIToggleButton_execOnToggleButtonRClickedChecked_Parms OnToggleButtonRClickedChecked_Parms;
	OnToggleButtonRClickedChecked_Parms.Sender = Sender;

	pFnOnToggleButtonRClickedChecked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnToggleButtonRClickedChecked, &OnToggleButtonRClickedChecked_Parms, NULL );

	pFnOnToggleButtonRClickedChecked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIToggleButton.OnToggleButtonPressedChecked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIToggleButton::OnToggleButtonPressedChecked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnToggleButtonPressedChecked = NULL;

	if ( ! pFnOnToggleButtonPressedChecked )
		pFnOnToggleButtonPressedChecked = (UFunction*) UObject::GObjObjects()->Data[ 17340 ];

	UCustomUIToggleButton_execOnToggleButtonPressedChecked_Parms OnToggleButtonPressedChecked_Parms;
	OnToggleButtonPressedChecked_Parms.Sender = Sender;

	pFnOnToggleButtonPressedChecked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnToggleButtonPressedChecked, &OnToggleButtonPressedChecked_Parms, NULL );

	pFnOnToggleButtonPressedChecked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIToggleButton.OnToggleButtonClickedChecked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIToggleButton::OnToggleButtonClickedChecked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnToggleButtonClickedChecked = NULL;

	if ( ! pFnOnToggleButtonClickedChecked )
		pFnOnToggleButtonClickedChecked = (UFunction*) UObject::GObjObjects()->Data[ 17338 ];

	UCustomUIToggleButton_execOnToggleButtonClickedChecked_Parms OnToggleButtonClickedChecked_Parms;
	OnToggleButtonClickedChecked_Parms.Sender = Sender;

	pFnOnToggleButtonClickedChecked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnToggleButtonClickedChecked, &OnToggleButtonClickedChecked_Parms, NULL );

	pFnOnToggleButtonClickedChecked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIToggleButton.SetCheck
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldBeChecked               ( CPF_Parm )

void UCustomUIToggleButton::SetCheck ( unsigned long bShouldBeChecked )
{
	static UFunction* pFnSetCheck = NULL;

	if ( ! pFnSetCheck )
		pFnSetCheck = (UFunction*) UObject::GObjObjects()->Data[ 17336 ];

	UCustomUIToggleButton_execSetCheck_Parms SetCheck_Parms;
	SetCheck_Parms.bShouldBeChecked = bShouldBeChecked;

	pFnSetCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCheck, &SetCheck_Parms, NULL );

	pFnSetCheck->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIToggleButton.IsChecked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCustomUIToggleButton::IsChecked ( )
{
	static UFunction* pFnIsChecked = NULL;

	if ( ! pFnIsChecked )
		pFnIsChecked = (UFunction*) UObject::GObjObjects()->Data[ 17334 ];

	UCustomUIToggleButton_execIsChecked_Parms IsChecked_Parms;

	pFnIsChecked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsChecked, &IsChecked_Parms, NULL );

	pFnIsChecked->FunctionFlags |= 0x400;

	return IsChecked_Parms.ReturnValue;
};

// Function Engine.CustomUISlider.OnMarkerDrop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISlider::OnMarkerDrop ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDrop = NULL;

	if ( ! pFnOnMarkerDrop )
		pFnOnMarkerDrop = (UFunction*) UObject::GObjObjects()->Data[ 17260 ];

	UCustomUISlider_execOnMarkerDrop_Parms OnMarkerDrop_Parms;
	OnMarkerDrop_Parms.Sender = Sender;

	pFnOnMarkerDrop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDrop, &OnMarkerDrop_Parms, NULL );

	pFnOnMarkerDrop->FunctionFlags |= 0x400;
};

// Function Engine.CustomUISlider.OnMarkerDragStart
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISlider::OnMarkerDragStart ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDragStart = NULL;

	if ( ! pFnOnMarkerDragStart )
		pFnOnMarkerDragStart = (UFunction*) UObject::GObjObjects()->Data[ 17258 ];

	UCustomUISlider_execOnMarkerDragStart_Parms OnMarkerDragStart_Parms;
	OnMarkerDragStart_Parms.Sender = Sender;

	pFnOnMarkerDragStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDragStart, &OnMarkerDragStart_Parms, NULL );

	pFnOnMarkerDragStart->FunctionFlags |= 0x400;
};

// Function Engine.CustomUISlider.OnMarkerDrag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUISlider::OnMarkerDrag ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnMarkerDrag = NULL;

	if ( ! pFnOnMarkerDrag )
		pFnOnMarkerDrag = (UFunction*) UObject::GObjObjects()->Data[ 17256 ];

	UCustomUISlider_execOnMarkerDrag_Parms OnMarkerDrag_Parms;
	OnMarkerDrag_Parms.Sender = Sender;

	pFnOnMarkerDrag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMarkerDrag, &OnMarkerDrag_Parms, NULL );

	pFnOnMarkerDrag->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIScrollBar.OnScrollDecrementPressed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIScrollBar::OnScrollDecrementPressed ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnScrollDecrementPressed = NULL;

	if ( ! pFnOnScrollDecrementPressed )
		pFnOnScrollDecrementPressed = (UFunction*) UObject::GObjObjects()->Data[ 17186 ];

	UCustomUIScrollBar_execOnScrollDecrementPressed_Parms OnScrollDecrementPressed_Parms;
	OnScrollDecrementPressed_Parms.Sender = Sender;

	pFnOnScrollDecrementPressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollDecrementPressed, &OnScrollDecrementPressed_Parms, NULL );

	pFnOnScrollDecrementPressed->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIScrollBar.OnScrollIncrementPressed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIScrollBar::OnScrollIncrementPressed ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnScrollIncrementPressed = NULL;

	if ( ! pFnOnScrollIncrementPressed )
		pFnOnScrollIncrementPressed = (UFunction*) UObject::GObjObjects()->Data[ 17184 ];

	UCustomUIScrollBar_execOnScrollIncrementPressed_Parms OnScrollIncrementPressed_Parms;
	OnScrollIncrementPressed_Parms.Sender = Sender;

	pFnOnScrollIncrementPressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollIncrementPressed, &OnScrollIncrementPressed_Parms, NULL );

	pFnOnScrollIncrementPressed->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIScrollBar.OnScrollSlider
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UCustomUIScrollBar::OnScrollSlider ( class UUIScreenObject* Sender, float Value )
{
	static UFunction* pFnOnScrollSlider = NULL;

	if ( ! pFnOnScrollSlider )
		pFnOnScrollSlider = (UFunction*) UObject::GObjObjects()->Data[ 17181 ];

	UCustomUIScrollBar_execOnScrollSlider_Parms OnScrollSlider_Parms;
	OnScrollSlider_Parms.Sender = Sender;
	OnScrollSlider_Parms.Value = Value;

	pFnOnScrollSlider->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollSlider, &OnScrollSlider_Parms, NULL );

	pFnOnScrollSlider->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIScrollBar.OnScrollDecrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIScrollBar::OnScrollDecrement ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnScrollDecrement = NULL;

	if ( ! pFnOnScrollDecrement )
		pFnOnScrollDecrement = (UFunction*) UObject::GObjObjects()->Data[ 17179 ];

	UCustomUIScrollBar_execOnScrollDecrement_Parms OnScrollDecrement_Parms;
	OnScrollDecrement_Parms.Sender = Sender;

	pFnOnScrollDecrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollDecrement, &OnScrollDecrement_Parms, NULL );

	pFnOnScrollDecrement->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIScrollBar.OnScrollIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIScrollBar::OnScrollIncrement ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnScrollIncrement = NULL;

	if ( ! pFnOnScrollIncrement )
		pFnOnScrollIncrement = (UFunction*) UObject::GObjObjects()->Data[ 17177 ];

	UCustomUIScrollBar_execOnScrollIncrement_Parms OnScrollIncrement_Parms;
	OnScrollIncrement_Parms.Sender = Sender;

	pFnOnScrollIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollIncrement, &OnScrollIncrement_Parms, NULL );

	pFnOnScrollIncrement->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIRadioButton.OnRadioButtonRClicked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIRadioButton::OnRadioButtonRClicked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnRadioButtonRClicked = NULL;

	if ( ! pFnOnRadioButtonRClicked )
		pFnOnRadioButtonRClicked = (UFunction*) UObject::GObjObjects()->Data[ 17162 ];

	UCustomUIRadioButton_execOnRadioButtonRClicked_Parms OnRadioButtonRClicked_Parms;
	OnRadioButtonRClicked_Parms.Sender = Sender;

	pFnOnRadioButtonRClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnRadioButtonRClicked, &OnRadioButtonRClicked_Parms, NULL );

	pFnOnRadioButtonRClicked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIRadioButton.OnRadioButtonClicked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIRadioButton::OnRadioButtonClicked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnRadioButtonClicked = NULL;

	if ( ! pFnOnRadioButtonClicked )
		pFnOnRadioButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 17160 ];

	UCustomUIRadioButton_execOnRadioButtonClicked_Parms OnRadioButtonClicked_Parms;
	OnRadioButtonClicked_Parms.Sender = Sender;

	pFnOnRadioButtonClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnRadioButtonClicked, &OnRadioButtonClicked_Parms, NULL );

	pFnOnRadioButtonClicked->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIListCtrl.OnSelectedItem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIListCtrl::OnSelectedItem ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnSelectedItem = NULL;

	if ( ! pFnOnSelectedItem )
		pFnOnSelectedItem = (UFunction*) UObject::GObjObjects()->Data[ 16620 ];

	UCustomUIListCtrl_execOnSelectedItem_Parms OnSelectedItem_Parms;
	OnSelectedItem_Parms.Sender = Sender;

	pFnOnSelectedItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSelectedItem, &OnSelectedItem_Parms, NULL );

	pFnOnSelectedItem->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIListCtrl.OnScrollBarScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Offset                         ( CPF_Parm )

void UCustomUIListCtrl::OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset )
{
	static UFunction* pFnOnScrollBarScroll = NULL;

	if ( ! pFnOnScrollBarScroll )
		pFnOnScrollBarScroll = (UFunction*) UObject::GObjObjects()->Data[ 16617 ];

	UCustomUIListCtrl_execOnScrollBarScroll_Parms OnScrollBarScroll_Parms;
	OnScrollBarScroll_Parms.Sender = Sender;
	OnScrollBarScroll_Parms.Offset = Offset;

	pFnOnScrollBarScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarScroll, &OnScrollBarScroll_Parms, NULL );

	pFnOnScrollBarScroll->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIListBox.OnScrollBarScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// float                          Offset                         ( CPF_Parm )

void UCustomUIListBox::OnScrollBarScroll ( class UUIScreenObject* Sender, float Offset )
{
	static UFunction* pFnOnScrollBarScroll = NULL;

	if ( ! pFnOnScrollBarScroll )
		pFnOnScrollBarScroll = (UFunction*) UObject::GObjObjects()->Data[ 16601 ];

	UCustomUIListBox_execOnScrollBarScroll_Parms OnScrollBarScroll_Parms;
	OnScrollBarScroll_Parms.Sender = Sender;
	OnScrollBarScroll_Parms.Offset = Offset;

	pFnOnScrollBarScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarScroll, &OnScrollBarScroll_Parms, NULL );

	pFnOnScrollBarScroll->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIEditBox.KillFocusEx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UCustomUIEditBox::KillFocusEx ( int PlayerIndex )
{
	static UFunction* pFnKillFocusEx = NULL;

	if ( ! pFnKillFocusEx )
		pFnKillFocusEx = (UFunction*) UObject::GObjObjects()->Data[ 16153 ];

	UCustomUIEditBox_execKillFocusEx_Parms KillFocusEx_Parms;
	KillFocusEx_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocusEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocusEx, &KillFocusEx_Parms, NULL );

	pFnKillFocusEx->FunctionFlags |= 0x400;

	return KillFocusEx_Parms.ReturnValue;
};

// Function Engine.CustomUIComboBox.OnUpdateList
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIComboBox::OnUpdateList ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnUpdateList = NULL;

	if ( ! pFnOnUpdateList )
		pFnOnUpdateList = (UFunction*) UObject::GObjObjects()->Data[ 15928 ];

	UCustomUIComboBox_execOnUpdateList_Parms OnUpdateList_Parms;
	OnUpdateList_Parms.Sender = Sender;

	pFnOnUpdateList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnUpdateList, &OnUpdateList_Parms, NULL );

	pFnOnUpdateList->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIComboBox.OnItemChanged
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

void UCustomUIComboBox::OnItemChanged ( class UUIScreenObject* Sender, int Index )
{
	static UFunction* pFnOnItemChanged = NULL;

	if ( ! pFnOnItemChanged )
		pFnOnItemChanged = (UFunction*) UObject::GObjObjects()->Data[ 15925 ];

	UCustomUIComboBox_execOnItemChanged_Parms OnItemChanged_Parms;
	OnItemChanged_Parms.Sender = Sender;
	OnItemChanged_Parms.Index = Index;

	pFnOnItemChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnItemChanged, &OnItemChanged_Parms, NULL );

	pFnOnItemChanged->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIComboBox.OnButtonClicked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UCustomUIComboBox::OnButtonClicked ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnButtonClicked = NULL;

	if ( ! pFnOnButtonClicked )
		pFnOnButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 15923 ];

	UCustomUIComboBox_execOnButtonClicked_Parms OnButtonClicked_Parms;
	OnButtonClicked_Parms.Sender = Sender;

	pFnOnButtonClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnButtonClicked, &OnButtonClicked_Parms, NULL );

	pFnOnButtonClicked->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlayWrapped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// float                          WrapWidth                      ( CPF_Parm )

void UEngine::AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth )
{
	static UFunction* pFnAddOverlayWrapped = NULL;

	if ( ! pFnAddOverlayWrapped )
		pFnAddOverlayWrapped = (UFunction*) UObject::GObjObjects()->Data[ 19230 ];

	UEngine_execAddOverlayWrapped_Parms AddOverlayWrapped_Parms;
	AddOverlayWrapped_Parms.Font = Font;
	memcpy ( &AddOverlayWrapped_Parms.Text, &Text, 0xC );
	AddOverlayWrapped_Parms.X = X;
	AddOverlayWrapped_Parms.Y = Y;
	AddOverlayWrapped_Parms.ScaleX = ScaleX;
	AddOverlayWrapped_Parms.ScaleY = ScaleY;
	AddOverlayWrapped_Parms.WrapWidth = WrapWidth;

	pFnAddOverlayWrapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlayWrapped, &AddOverlayWrapped_Parms, NULL );

	pFnAddOverlayWrapped->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlay
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// unsigned long                  bIsCentered                    ( CPF_Parm )

void UEngine::AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered )
{
	static UFunction* pFnAddOverlay = NULL;

	if ( ! pFnAddOverlay )
		pFnAddOverlay = (UFunction*) UObject::GObjObjects()->Data[ 19222 ];

	UEngine_execAddOverlay_Parms AddOverlay_Parms;
	AddOverlay_Parms.Font = Font;
	memcpy ( &AddOverlay_Parms.Text, &Text, 0xC );
	AddOverlay_Parms.X = X;
	AddOverlay_Parms.Y = Y;
	AddOverlay_Parms.ScaleX = ScaleX;
	AddOverlay_Parms.ScaleY = ScaleY;
	AddOverlay_Parms.bIsCentered = bIsCentered;

	pFnAddOverlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlay, &AddOverlay_Parms, NULL );

	pFnAddOverlay->FunctionFlags |= 0x400;
};

// Function Engine.Engine.RemoveAllOverlays
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UEngine::RemoveAllOverlays ( )
{
	static UFunction* pFnRemoveAllOverlays = NULL;

	if ( ! pFnRemoveAllOverlays )
		pFnRemoveAllOverlays = (UFunction*) UObject::GObjObjects()->Data[ 19221 ];

	UEngine_execRemoveAllOverlays_Parms RemoveAllOverlays_Parms;

	pFnRemoveAllOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllOverlays, &RemoveAllOverlays_Parms, NULL );

	pFnRemoveAllOverlays->FunctionFlags |= 0x400;
};

// Function Engine.Engine.StopMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDelayStopUntilGameHasRendered ( CPF_Parm )

void UEngine::StopMovie ( unsigned long bDelayStopUntilGameHasRendered )
{
	static UFunction* pFnStopMovie = NULL;

	if ( ! pFnStopMovie )
		pFnStopMovie = (UFunction*) UObject::GObjObjects()->Data[ 19219 ];

	UEngine_execStopMovie_Parms StopMovie_Parms;
	StopMovie_Parms.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	pFnStopMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMovie, &StopMovie_Parms, NULL );

	pFnStopMovie->FunctionFlags |= 0x400;
};

// Function Engine.Engine.PlayLoadMapMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::PlayLoadMapMovie ( )
{
	static UFunction* pFnPlayLoadMapMovie = NULL;

	if ( ! pFnPlayLoadMapMovie )
		pFnPlayLoadMapMovie = (UFunction*) UObject::GObjObjects()->Data[ 19217 ];

	UEngine_execPlayLoadMapMovie_Parms PlayLoadMapMovie_Parms;

	pFnPlayLoadMapMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayLoadMapMovie, &PlayLoadMapMovie_Parms, NULL );

	pFnPlayLoadMapMovie->FunctionFlags |= 0x400;

	return PlayLoadMapMovie_Parms.ReturnValue;
};

// Function Engine.Engine.GetLastMovieName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UEngine::GetLastMovieName ( )
{
	static UFunction* pFnGetLastMovieName = NULL;

	if ( ! pFnGetLastMovieName )
		pFnGetLastMovieName = (UFunction*) UObject::GObjObjects()->Data[ 19215 ];

	UEngine_execGetLastMovieName_Parms GetLastMovieName_Parms;

	pFnGetLastMovieName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastMovieName, &GetLastMovieName_Parms, NULL );

	pFnGetLastMovieName->FunctionFlags |= 0x400;

	return GetLastMovieName_Parms.ReturnValue;
};

// Function Engine.Engine.GetAudioDevice
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioDevice*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioDevice* UEngine::GetAudioDevice ( )
{
	static UFunction* pFnGetAudioDevice = NULL;

	if ( ! pFnGetAudioDevice )
		pFnGetAudioDevice = (UFunction*) UObject::GObjObjects()->Data[ 19213 ];

	UEngine_execGetAudioDevice_Parms GetAudioDevice_Parms;

	pFnGetAudioDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAudioDevice, &GetAudioDevice_Parms, NULL );

	pFnGetAudioDevice->FunctionFlags |= 0x400;

	return GetAudioDevice_Parms.ReturnValue;
};

// Function Engine.Engine.IsSplitScreen
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsSplitScreen ( )
{
	static UFunction* pFnIsSplitScreen = NULL;

	if ( ! pFnIsSplitScreen )
		pFnIsSplitScreen = (UFunction*) UObject::GObjObjects()->Data[ 19211 ];

	UEngine_execIsSplitScreen_Parms IsSplitScreen_Parms;

	pFnIsSplitScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSplitScreen, &IsSplitScreen_Parms, NULL );

	pFnIsSplitScreen->FunctionFlags |= 0x400;

	return IsSplitScreen_Parms.ReturnValue;
};

// Function Engine.Engine.GetAdditionalFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AdditionalFontIndex            ( CPF_Parm )

class UFont* UEngine::GetAdditionalFont ( int AdditionalFontIndex )
{
	static UFunction* pFnGetAdditionalFont = NULL;

	if ( ! pFnGetAdditionalFont )
		pFnGetAdditionalFont = (UFunction*) UObject::GObjObjects()->Data[ 19208 ];

	UEngine_execGetAdditionalFont_Parms GetAdditionalFont_Parms;
	GetAdditionalFont_Parms.AdditionalFontIndex = AdditionalFontIndex;

	pFnGetAdditionalFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdditionalFont, &GetAdditionalFont_Parms, NULL );

	pFnGetAdditionalFont->FunctionFlags |= 0x400;

	return GetAdditionalFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetLargeFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetLargeFont ( )
{
	static UFunction* pFnGetLargeFont = NULL;

	if ( ! pFnGetLargeFont )
		pFnGetLargeFont = (UFunction*) UObject::GObjObjects()->Data[ 17595 ];

	UEngine_execGetLargeFont_Parms GetLargeFont_Parms;

	pFnGetLargeFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLargeFont, &GetLargeFont_Parms, NULL );

	pFnGetLargeFont->FunctionFlags |= 0x400;

	return GetLargeFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetMediumFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetMediumFont ( )
{
	static UFunction* pFnGetMediumFont = NULL;

	if ( ! pFnGetMediumFont )
		pFnGetMediumFont = (UFunction*) UObject::GObjObjects()->Data[ 17911 ];

	UEngine_execGetMediumFont_Parms GetMediumFont_Parms;

	pFnGetMediumFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMediumFont, &GetMediumFont_Parms, NULL );

	pFnGetMediumFont->FunctionFlags |= 0x400;

	return GetMediumFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSmallFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSmallFont ( )
{
	static UFunction* pFnGetSmallFont = NULL;

	if ( ! pFnGetSmallFont )
		pFnGetSmallFont = (UFunction*) UObject::GObjObjects()->Data[ 8438 ];

	UEngine_execGetSmallFont_Parms GetSmallFont_Parms;

	pFnGetSmallFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSmallFont, &GetSmallFont_Parms, NULL );

	pFnGetSmallFont->FunctionFlags |= 0x400;

	return GetSmallFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetTinyFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetTinyFont ( )
{
	static UFunction* pFnGetTinyFont = NULL;

	if ( ! pFnGetTinyFont )
		pFnGetTinyFont = (UFunction*) UObject::GObjObjects()->Data[ 17910 ];

	UEngine_execGetTinyFont_Parms GetTinyFont_Parms;

	pFnGetTinyFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTinyFont, &GetTinyFont_Parms, NULL );

	pFnGetTinyFont->FunctionFlags |= 0x400;

	return GetTinyFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetBuildDate
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UEngine::GetBuildDate ( )
{
	static UFunction* pFnGetBuildDate = NULL;

	if ( ! pFnGetBuildDate )
		pFnGetBuildDate = (UFunction*) UObject::GObjObjects()->Data[ 19202 ];

	UEngine_execGetBuildDate_Parms GetBuildDate_Parms;

	pFnGetBuildDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildDate, &GetBuildDate_Parms, NULL );

	pFnGetBuildDate->FunctionFlags |= 0x400;

	return GetBuildDate_Parms.ReturnValue;
};

// Function Engine.Engine.GetCurrentWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UEngine::GetCurrentWorldInfo ( )
{
	static UFunction* pFnGetCurrentWorldInfo = NULL;

	if ( ! pFnGetCurrentWorldInfo )
		pFnGetCurrentWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 17600 ];

	UEngine_execGetCurrentWorldInfo_Parms GetCurrentWorldInfo_Parms;

	pFnGetCurrentWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWorldInfo, &GetCurrentWorldInfo_Parms, NULL );

	pFnGetCurrentWorldInfo->FunctionFlags |= 0x400;

	return GetCurrentWorldInfo_Parms.ReturnValue;
};

// Function Engine.GameEngine.GetOnlineSubsystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 8550 ];

	UGameEngine_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	pFnGetOnlineSubsystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	pFnGetOnlineSubsystem->FunctionFlags |= 0x400;

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.GameEngine.DestroyNamedNetDriver
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   NetDriverName                  ( CPF_Parm )

void UGameEngine::DestroyNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnDestroyNamedNetDriver = NULL;

	if ( ! pFnDestroyNamedNetDriver )
		pFnDestroyNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 20037 ];

	UGameEngine_execDestroyNamedNetDriver_Parms DestroyNamedNetDriver_Parms;
	memcpy ( &DestroyNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnDestroyNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyNamedNetDriver, &DestroyNamedNetDriver_Parms, NULL );

	pFnDestroyNamedNetDriver->FunctionFlags |= 0x400;
};

// Function Engine.GameEngine.CreateNamedNetDriver
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NetDriverName                  ( CPF_Parm )

bool UGameEngine::CreateNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnCreateNamedNetDriver = NULL;

	if ( ! pFnCreateNamedNetDriver )
		pFnCreateNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 20034 ];

	UGameEngine_execCreateNamedNetDriver_Parms CreateNamedNetDriver_Parms;
	memcpy ( &CreateNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnCreateNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateNamedNetDriver, &CreateNamedNetDriver_Parms, NULL );

	pFnCreateNamedNetDriver->FunctionFlags |= 0x400;

	return CreateNamedNetDriver_Parms.ReturnValue;
};

// Function Engine.Actor.IsInPersistentLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPersistentLevel ( )
{
	static UFunction* pFnIsInPersistentLevel = NULL;

	if ( ! pFnIsInPersistentLevel )
		pFnIsInPersistentLevel = (UFunction*) UObject::GObjObjects()->Data[ 5941 ];

	AActor_execIsInPersistentLevel_Parms IsInPersistentLevel_Parms;

	pFnIsInPersistentLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInPersistentLevel, &IsInPersistentLevel_Parms, NULL );

	pFnIsInPersistentLevel->FunctionFlags |= 0x400;

	return IsInPersistentLevel_Parms.ReturnValue;
};

// Function Engine.Actor.OnRigidBodySpringOverextension
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class URB_BodyInstance*        BodyInstance                   ( CPF_Parm )

void AActor::eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = (UFunction*) UObject::GObjObjects()->Data[ 5939 ];

	AActor_eventOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;
	OnRigidBodySpringOverextension_Parms.BodyInstance = BodyInstance;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function Engine.Actor.GetPackageGuid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FGuid                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PackageName                    ( CPF_Parm )

struct FGuid AActor::GetPackageGuid ( struct FName PackageName )
{
	static UFunction* pFnGetPackageGuid = NULL;

	if ( ! pFnGetPackageGuid )
		pFnGetPackageGuid = (UFunction*) UObject::GObjObjects()->Data[ 5936 ];

	AActor_execGetPackageGuid_Parms GetPackageGuid_Parms;
	memcpy ( &GetPackageGuid_Parms.PackageName, &PackageName, 0x8 );

	pFnGetPackageGuid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPackageGuid, &GetPackageGuid_Parms, NULL );

	pFnGetPackageGuid->FunctionFlags |= 0x400;

	return GetPackageGuid_Parms.ReturnValue;
};

// Function Engine.Actor.PostInitAnimTree
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm )

void AActor::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 5934 ];

	AActor_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.Actor.RootMotionExtracted
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm )
// struct FBoneAtom               ExtractedRootMotionDelta       ( CPF_Parm | CPF_OutParm )

void AActor::eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta )
{
	static UFunction* pFnRootMotionExtracted = NULL;

	if ( ! pFnRootMotionExtracted )
		pFnRootMotionExtracted = (UFunction*) UObject::GObjObjects()->Data[ 5931 ];

	AActor_eventRootMotionExtracted_Parms RootMotionExtracted_Parms;
	RootMotionExtracted_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionExtracted, &RootMotionExtracted_Parms, NULL );

	if ( ExtractedRootMotionDelta )
		memcpy ( ExtractedRootMotionDelta, &RootMotionExtracted_Parms.ExtractedRootMotionDelta, 0x20 );
};

// Function Engine.Actor.RootMotionModeChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm )

void AActor::eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 5925 ];

	AActor_eventRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function Engine.Actor.PostRenderFor
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 5920 ];

	AActor_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function Engine.Actor.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 5915 ];

	AActor_execNativePostRenderFor_Parms NativePostRenderFor_Parms;
	NativePostRenderFor_Parms.PC = PC;
	NativePostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &NativePostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &NativePostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHUDLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewHUDLocation                 ( CPF_Parm )

void AActor::SetHUDLocation ( struct FVector NewHUDLocation )
{
	static UFunction* pFnSetHUDLocation = NULL;

	if ( ! pFnSetHUDLocation )
		pFnSetHUDLocation = (UFunction*) UObject::GObjObjects()->Data[ 5913 ];

	AActor_execSetHUDLocation_Parms SetHUDLocation_Parms;
	memcpy ( &SetHUDLocation_Parms.NewHUDLocation, &NewHUDLocation, 0xC );

	pFnSetHUDLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHUDLocation, &SetHUDLocation_Parms, NULL );

	pFnSetHUDLocation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.OnRanOver
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )
// class UPrimitiveComponent*     RunOverComponent               ( CPF_Parm )
// int                            WheelIndex                     ( CPF_Parm )

void AActor::eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex )
{
	static UFunction* pFnOnRanOver = NULL;

	if ( ! pFnOnRanOver )
		pFnOnRanOver = (UFunction*) UObject::GObjObjects()->Data[ 5909 ];

	AActor_eventOnRanOver_Parms OnRanOver_Parms;
	OnRanOver_Parms.Vehicle = Vehicle;
	OnRanOver_Parms.RunOverComponent = RunOverComponent;
	OnRanOver_Parms.WheelIndex = WheelIndex;

	this->ProcessEvent ( pFnOnRanOver, &OnRanOver_Parms, NULL );
};

// Function Engine.Actor.RigidBodyCollision
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm )

void AActor::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 5904 ];

	AActor_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.Actor.InterpolationChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 5902 ];

	AActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.Actor.InterpolationFinished
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 5900 ];

	AActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Actor.InterpolationStarted
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 5898 ];

	AActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Actor.PickedUpBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AActor::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 5896 ];

	AActor_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.Actor.SpawnedByKismet
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 5895 ];

	AActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Actor.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AActor::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 5891 ];

	AActor_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.FindGoodEndView
// [0x00420102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FRotator                GoodRotation                   ( CPF_Parm | CPF_OutParm )

void AActor::FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation )
{
	static UFunction* pFnFindGoodEndView = NULL;

	if ( ! pFnFindGoodEndView )
		pFnFindGoodEndView = (UFunction*) UObject::GObjObjects()->Data[ 5888 ];

	AActor_execFindGoodEndView_Parms FindGoodEndView_Parms;
	FindGoodEndView_Parms.PC = PC;

	this->ProcessEvent ( pFnFindGoodEndView, &FindGoodEndView_Parms, NULL );

	if ( GoodRotation )
		memcpy ( GoodRotation, &FindGoodEndView_Parms.GoodRotation, 0xC );
};

// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// [0x00020100] 
// Parameters infos:

void AActor::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = (UFunction*) UObject::GObjObjects()->Data[ 5887 ];

	AActor_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.Actor.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AActor::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = (UFunction*) UObject::GObjObjects()->Data[ 5884 ];

	AActor_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Actor.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 5882 ];

	AActor_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );

	return ScriptGetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 5880 ];

	AActor_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.PawnBaseDied
// [0x00020000] 
// Parameters infos:

void AActor::PawnBaseDied ( )
{
	static UFunction* pFnPawnBaseDied = NULL;

	if ( ! pFnPawnBaseDied )
		pFnPawnBaseDied = (UFunction*) UObject::GObjObjects()->Data[ 5879 ];

	AActor_execPawnBaseDied_Parms PawnBaseDied_Parms;

	this->ProcessEvent ( pFnPawnBaseDied, &PawnBaseDied_Parms, NULL );
};

// Function Engine.Actor.IsPlayerOwned
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsPlayerOwned ( )
{
	static UFunction* pFnIsPlayerOwned = NULL;

	if ( ! pFnIsPlayerOwned )
		pFnIsPlayerOwned = (UFunction*) UObject::GObjObjects()->Data[ 5877 ];

	AActor_execIsPlayerOwned_Parms IsPlayerOwned_Parms;

	pFnIsPlayerOwned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerOwned, &IsPlayerOwned_Parms, NULL );

	pFnIsPlayerOwned->FunctionFlags |= 0x400;

	return IsPlayerOwned_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AActor::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 5874 ];

	AActor_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Actor.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 5872 ];

	AActor_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorFaceFXAsset
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* AActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 5870 ];

	AActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Actor.GetPlayingFaceFXFlag
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::eventGetPlayingFaceFXFlag ( )
{
	static UFunction* pFnGetPlayingFaceFXFlag = NULL;

	if ( ! pFnGetPlayingFaceFXFlag )
		pFnGetPlayingFaceFXFlag = (UFunction*) UObject::GObjObjects()->Data[ 5868 ];

	AActor_eventGetPlayingFaceFXFlag_Parms GetPlayingFaceFXFlag_Parms;

	this->ProcessEvent ( pFnGetPlayingFaceFXFlag, &GetPlayingFaceFXFlag_Parms, NULL );

	return GetPlayingFaceFXFlag_Parms.ReturnValue;
};

// Function Engine.Actor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 5866 ];

	AActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.SetSkelControlScale
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AActor::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 5863 ];

	AActor_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Actor.SetMorphWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AActor::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 5860 ];

	AActor_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Actor.StopActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 5859 ];

	AActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Actor.PlayActorFaceFXAnim
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm )
// struct FString                 SeqName                        ( CPF_Parm )
// int                            SoundTrackType                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InStopPrevious                 ( CPF_OptionalParm | CPF_Parm )

bool AActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, int SoundTrackType, unsigned long InStopPrevious )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 5852 ];

	AActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundTrackType = SoundTrackType;
	PlayActorFaceFXAnim_Parms.InStopPrevious = InStopPrevious;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.FinishAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 5851 ];

	AActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Actor.SetAnimPosition
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void AActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 5844 ];

	AActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Actor.BeginAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm )

void AActor::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 5841 ];

	AActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Actor.OnAnimPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 5839 ];

	AActor_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function Engine.Actor.OnAnimEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void AActor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 5835 ];

	AActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Engine.Actor.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AActor::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 5833 ];

	AActor_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Actor.DoKismetAttachment
// [0x00820002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 5825 ];

	AActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Actor.OnAttachToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::OnAttachToActor ( class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnOnAttachToActor = NULL;

	if ( ! pFnOnAttachToActor )
		pFnOnAttachToActor = (UFunction*) UObject::GObjObjects()->Data[ 5818 ];

	AActor_execOnAttachToActor_Parms OnAttachToActor_Parms;
	OnAttachToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAttachToActor, &OnAttachToActor_Parms, NULL );
};

// Function Engine.Actor.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AActor::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 5813 ];

	AActor_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Actor.OnChangeCollision
// [0x00020002] 
// Parameters infos:
// class USeqAct_ChangeCollision* Action                         ( CPF_Parm )

void AActor::OnChangeCollision ( class USeqAct_ChangeCollision* Action )
{
	static UFunction* pFnOnChangeCollision = NULL;

	if ( ! pFnOnChangeCollision )
		pFnOnChangeCollision = (UFunction*) UObject::GObjObjects()->Data[ 5811 ];

	AActor_execOnChangeCollision_Parms OnChangeCollision_Parms;
	OnChangeCollision_Parms.Action = Action;

	this->ProcessEvent ( pFnOnChangeCollision, &OnChangeCollision_Parms, NULL );
};

// Function Engine.Actor.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AActor::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 5809 ];

	AActor_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Actor.OnSetBlockRigidBody
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetBlockRigidBody* Action                         ( CPF_Parm )

void AActor::OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action )
{
	static UFunction* pFnOnSetBlockRigidBody = NULL;

	if ( ! pFnOnSetBlockRigidBody )
		pFnOnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 5807 ];

	AActor_execOnSetBlockRigidBody_Parms OnSetBlockRigidBody_Parms;
	OnSetBlockRigidBody_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBlockRigidBody, &OnSetBlockRigidBody_Parms, NULL );
};

// Function Engine.Actor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AActor::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 5800 ];

	AActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Actor.OnHealDamage
// [0x00020002] 
// Parameters infos:
// class USeqAct_HealDamage*      Action                         ( CPF_Parm )

void AActor::OnHealDamage ( class USeqAct_HealDamage* Action )
{
	static UFunction* pFnOnHealDamage = NULL;

	if ( ! pFnOnHealDamage )
		pFnOnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 5796 ];

	AActor_execOnHealDamage_Parms OnHealDamage_Parms;
	OnHealDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnHealDamage, &OnHealDamage_Parms, NULL );
};

// Function Engine.Actor.OnCauseDamage
// [0x00020102] 
// Parameters infos:
// class USeqAct_CauseDamage*     Action                         ( CPF_Parm )

void AActor::OnCauseDamage ( class USeqAct_CauseDamage* Action )
{
	static UFunction* pFnOnCauseDamage = NULL;

	if ( ! pFnOnCauseDamage )
		pFnOnCauseDamage = (UFunction*) UObject::GObjObjects()->Data[ 5792 ];

	AActor_execOnCauseDamage_Parms OnCauseDamage_Parms;
	OnCauseDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnCauseDamage, &OnCauseDamage_Parms, NULL );
};

// Function Engine.Actor.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 5791 ];

	AActor_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Actor.SetNetUpdateTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewUpdateTime                  ( CPF_Parm )

void AActor::SetNetUpdateTime ( float NewUpdateTime )
{
	static UFunction* pFnSetNetUpdateTime = NULL;

	if ( ! pFnSetNetUpdateTime )
		pFnSetNetUpdateTime = (UFunction*) UObject::GObjObjects()->Data[ 5789 ];

	AActor_execSetNetUpdateTime_Parms SetNetUpdateTime_Parms;
	SetNetUpdateTime_Parms.NewUpdateTime = NewUpdateTime;

	pFnSetNetUpdateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetUpdateTime, &SetNetUpdateTime_Parms, NULL );

	pFnSetNetUpdateTime->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ForceNetRelevant
// [0x00020002] 
// Parameters infos:

void AActor::ForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 5788 ];

	AActor_execForceNetRelevant_Parms ForceNetRelevant_Parms;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );
};

// Function Engine.Actor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void AActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 5783 ];

	AActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.Actor.ClearLatentAction
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class UClass*                  actionClass                    ( CPF_Parm )
// unsigned long                  bAborted                       ( CPF_OptionalParm | CPF_Parm )
// class USeqAct_Latent*          exceptionAction                ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction )
{
	static UFunction* pFnClearLatentAction = NULL;

	if ( ! pFnClearLatentAction )
		pFnClearLatentAction = (UFunction*) UObject::GObjObjects()->Data[ 5778 ];

	AActor_execClearLatentAction_Parms ClearLatentAction_Parms;
	ClearLatentAction_Parms.actionClass = actionClass;
	ClearLatentAction_Parms.bAborted = bAborted;
	ClearLatentAction_Parms.exceptionAction = exceptionAction;

	this->ProcessEvent ( pFnClearLatentAction, &ClearLatentAction_Parms, NULL );
};

// Function Engine.Actor.FindEventsOfClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EventClass                     ( CPF_Parm )
// unsigned long                  bIncludeDisabled               ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > out_EventList                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 5770 ];

	AActor_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClass = EventClass;
	FindEventsOfClass_Parms.bIncludeDisabled = bIncludeDisabled;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	if ( out_EventList )
		memcpy ( out_EventList, &FindEventsOfClass_Parms.out_EventList, 0xC );

	return FindEventsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.ActivateEventClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InClass                        ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > EventList                      ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnActivateEventClass = NULL;

	if ( ! pFnActivateEventClass )
		pFnActivateEventClass = (UFunction*) UObject::GObjObjects()->Data[ 5758 ];

	AActor_execActivateEventClass_Parms ActivateEventClass_Parms;
	ActivateEventClass_Parms.InClass = InClass;
	ActivateEventClass_Parms.InInstigator = InInstigator;
	ActivateEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnActivateEventClass, &ActivateEventClass_Parms, NULL );

	if ( EventList )
		memcpy ( EventList, &ActivateEventClass_Parms.EventList, 0xC );

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &ActivateEventClass_Parms.ActivateIndices, 0xC );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &ActivateEventClass_Parms.ActivatedEvents, 0xC );

	return ActivateEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.TriggerEventClass
// [0x00424102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnTriggerEventClass = NULL;

	if ( ! pFnTriggerEventClass )
		pFnTriggerEventClass = (UFunction*) UObject::GObjObjects()->Data[ 5748 ];

	AActor_execTriggerEventClass_Parms TriggerEventClass_Parms;
	TriggerEventClass_Parms.InEventClass = InEventClass;
	TriggerEventClass_Parms.InInstigator = InInstigator;
	TriggerEventClass_Parms.ActivateIndex = ActivateIndex;
	TriggerEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnTriggerEventClass, &TriggerEventClass_Parms, NULL );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &TriggerEventClass_Parms.ActivatedEvents, 0xC );

	return TriggerEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.TimeSince
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Time                           ( CPF_Parm )

float AActor::TimeSince ( float Time )
{
	static UFunction* pFnTimeSince = NULL;

	if ( ! pFnTimeSince )
		pFnTimeSince = (UFunction*) UObject::GObjObjects()->Data[ 5745 ];

	AActor_execTimeSince_Parms TimeSince_Parms;
	TimeSince_Parms.Time = Time;

	this->ProcessEvent ( pFnTimeSince, &TimeSince_Parms, NULL );

	return TimeSince_Parms.ReturnValue;
};

// Function Engine.Actor.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 5738 ];

	AActor_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.CheckMaxEffectDistance
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance )
{
	static UFunction* pFnCheckMaxEffectDistance = NULL;

	if ( ! pFnCheckMaxEffectDistance )
		pFnCheckMaxEffectDistance = (UFunction*) UObject::GObjObjects()->Data[ 5732 ];

	AActor_execCheckMaxEffectDistance_Parms CheckMaxEffectDistance_Parms;
	CheckMaxEffectDistance_Parms.P = P;
	memcpy ( &CheckMaxEffectDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	CheckMaxEffectDistance_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnCheckMaxEffectDistance, &CheckMaxEffectDistance_Parms, NULL );

	return CheckMaxEffectDistance_Parms.ReturnValue;
};

// Function Engine.Actor.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 5730 ];

	AActor_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Actor.PlayTeleportEffect
// [0x00020000] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void AActor::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 5727 ];

	AActor_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Actor.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = (UFunction*) UObject::GObjObjects()->Data[ 5724 ];

	AActor_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Actor.IsInVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVolume*                 aVolume                        ( CPF_Parm )

bool AActor::IsInVolume ( class AVolume* aVolume )
{
	static UFunction* pFnIsInVolume = NULL;

	if ( ! pFnIsInVolume )
		pFnIsInVolume = (UFunction*) UObject::GObjObjects()->Data[ 5720 ];

	AActor_execIsInVolume_Parms IsInVolume_Parms;
	IsInVolume_Parms.aVolume = aVolume;

	this->ProcessEvent ( pFnIsInVolume, &IsInVolume_Parms, NULL );

	return IsInVolume_Parms.ReturnValue;
};

// Function Engine.Actor.Reset
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 5719 ];

	AActor_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Actor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioComponent* AActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 5717 ];

	AActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ModifyHearSoundComponent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm )

void AActor::eventModifyHearSoundComponent ( class UAudioComponent* AC )
{
	static UFunction* pFnModifyHearSoundComponent = NULL;

	if ( ! pFnModifyHearSoundComponent )
		pFnModifyHearSoundComponent = (UFunction*) UObject::GObjObjects()->Data[ 5715 ];

	AActor_eventModifyHearSoundComponent_Parms ModifyHearSoundComponent_Parms;
	ModifyHearSoundComponent_Parms.AC = AC;

	this->ProcessEvent ( pFnModifyHearSoundComponent, &ModifyHearSoundComponent_Parms, NULL );
};

// Function Engine.Actor.GetPhysicsName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AActor::GetPhysicsName ( )
{
	static UFunction* pFnGetPhysicsName = NULL;

	if ( ! pFnGetPhysicsName )
		pFnGetPhysicsName = (UFunction*) UObject::GObjObjects()->Data[ 5713 ];

	AActor_execGetPhysicsName_Parms GetPhysicsName_Parms;

	this->ProcessEvent ( pFnGetPhysicsName, &GetPhysicsName_Parms, NULL );

	return GetPhysicsName_Parms.ReturnValue;
};

// Function Engine.Actor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 5704 ];

	AActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Actor.GetDebugName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AActor::GetDebugName ( )
{
	static UFunction* pFnGetDebugName = NULL;

	if ( ! pFnGetDebugName )
		pFnGetDebugName = (UFunction*) UObject::GObjObjects()->Data[ 5702 ];

	AActor_execGetDebugName_Parms GetDebugName_Parms;

	this->ProcessEvent ( pFnGetDebugName, &GetDebugName_Parms, NULL );

	return GetDebugName_Parms.ReturnValue;
};

// Function Engine.Actor.SetGRI
// [0x00020000] 
// Parameters infos:
// class AGameReplicationInfo*    GRI                            ( CPF_Parm )

void AActor::SetGRI ( class AGameReplicationInfo* GRI )
{
	static UFunction* pFnSetGRI = NULL;

	if ( ! pFnSetGRI )
		pFnSetGRI = (UFunction*) UObject::GObjObjects()->Data[ 5700 ];

	AActor_execSetGRI_Parms SetGRI_Parms;
	SetGRI_Parms.GRI = GRI;

	this->ProcessEvent ( pFnSetGRI, &SetGRI_Parms, NULL );
};

// Function Engine.Actor.MatchStarting
// [0x00020000] 
// Parameters infos:

void AActor::MatchStarting ( )
{
	static UFunction* pFnMatchStarting = NULL;

	if ( ! pFnMatchStarting )
		pFnMatchStarting = (UFunction*) UObject::GObjObjects()->Data[ 5699 ];

	AActor_execMatchStarting_Parms MatchStarting_Parms;

	this->ProcessEvent ( pFnMatchStarting, &MatchStarting_Parms, NULL );
};

// Function Engine.Actor.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 5694 ];

	AActor_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Actor.ReplaceText
// [0x00422002] 
// Parameters infos:
// struct FString                 Replace                        ( CPF_Parm )
// struct FString                 With                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_OutParm )

void AActor::ReplaceText ( struct FString Replace, struct FString With, struct FString* Text )
{
	static UFunction* pFnReplaceText = NULL;

	if ( ! pFnReplaceText )
		pFnReplaceText = (UFunction*) UObject::GObjObjects()->Data[ 5688 ];

	AActor_execReplaceText_Parms ReplaceText_Parms;
	memcpy ( &ReplaceText_Parms.Replace, &Replace, 0xC );
	memcpy ( &ReplaceText_Parms.With, &With, 0xC );

	this->ProcessEvent ( pFnReplaceText, &ReplaceText_Parms, NULL );

	if ( Text )
		memcpy ( Text, &ReplaceText_Parms.Text, 0xC );
};

// Function Engine.Actor.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AActor::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 5686 ];

	AActor_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Actor.GetItemName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FullName                       ( CPF_Parm )

struct FString AActor::GetItemName ( struct FString FullName )
{
	static UFunction* pFnGetItemName = NULL;

	if ( ! pFnGetItemName )
		pFnGetItemName = (UFunction*) UObject::GObjObjects()->Data[ 5682 ];

	AActor_execGetItemName_Parms GetItemName_Parms;
	memcpy ( &GetItemName_Parms.FullName, &FullName, 0xC );

	this->ProcessEvent ( pFnGetItemName, &GetItemName_Parms, NULL );

	return GetItemName_Parms.ReturnValue;
};

// Function Engine.Actor.CalcCamera
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool AActor::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 5673 ];

	AActor_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.Actor.EndViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventEndViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnEndViewTarget = NULL;

	if ( ! pFnEndViewTarget )
		pFnEndViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 5671 ];

	AActor_eventEndViewTarget_Parms EndViewTarget_Parms;
	EndViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnEndViewTarget, &EndViewTarget_Parms, NULL );
};

// Function Engine.Actor.BecomeViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 5669 ];

	AActor_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Actor.CheckForErrors
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 5667 ];

	AActor_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.Actor.DebugFreezeGame
// [0x00020002] 
// Parameters infos:

void AActor::DebugFreezeGame ( )
{
	static UFunction* pFnDebugFreezeGame = NULL;

	if ( ! pFnDebugFreezeGame )
		pFnDebugFreezeGame = (UFunction*) UObject::GObjObjects()->Data[ 5665 ];

	AActor_execDebugFreezeGame_Parms DebugFreezeGame_Parms;

	this->ProcessEvent ( pFnDebugFreezeGame, &DebugFreezeGame_Parms, NULL );
};

// Function Engine.Actor.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 5663 ];

	AActor_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.Actor.CheckHitInfo
// [0x00C20103] ( FUNC_Final )
// Parameters infos:
// class UPrimitiveComponent*     FallBackComponent              ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitLocation                ( CPF_Parm | CPF_OutParm )

void AActor::CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation )
{
	static UFunction* pFnCheckHitInfo = NULL;

	if ( ! pFnCheckHitInfo )
		pFnCheckHitInfo = (UFunction*) UObject::GObjObjects()->Data[ 5653 ];

	AActor_execCheckHitInfo_Parms CheckHitInfo_Parms;
	CheckHitInfo_Parms.FallBackComponent = FallBackComponent;
	memcpy ( &CheckHitInfo_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnCheckHitInfo, &CheckHitInfo_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &CheckHitInfo_Parms.HitInfo, 0x1C );

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &CheckHitInfo_Parms.out_HitLocation, 0xC );
};

// Function Engine.Actor.TakeRadiusDamage
// [0x00820102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 5639 ];

	AActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Actor.HealDamage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool AActor::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 5634 ];

	AActor_execHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Actor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AActor::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 5624 ];

	AActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Actor.KilledBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void AActor::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 5622 ];

	AActor_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Actor.HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 5610 ];

	AActor_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.BaseDamage = BaseDamage;
	HurtRadius_Parms.DamageRadius = DamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Actor.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool AActor::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 5607 ];

	AActor_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Actor.NotifySkelControlBeyondLimit
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkelControlLookAt*      LookAt                         ( CPF_Parm )

void AActor::eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt )
{
	static UFunction* pFnNotifySkelControlBeyondLimit = NULL;

	if ( ! pFnNotifySkelControlBeyondLimit )
		pFnNotifySkelControlBeyondLimit = (UFunction*) UObject::GObjObjects()->Data[ 5605 ];

	AActor_eventNotifySkelControlBeyondLimit_Parms NotifySkelControlBeyondLimit_Parms;
	NotifySkelControlBeyondLimit_Parms.LookAt = LookAt;

	this->ProcessEvent ( pFnNotifySkelControlBeyondLimit, &NotifySkelControlBeyondLimit_Parms, NULL );
};

// Function Engine.Actor.ConstraintBrokenNotify
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ConOwner                       ( CPF_Parm )
// class URB_ConstraintSetup*     ConSetup                       ( CPF_Parm )
// class URB_ConstraintInstance*  ConInstance                    ( CPF_Parm )

void AActor::eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance )
{
	static UFunction* pFnConstraintBrokenNotify = NULL;

	if ( ! pFnConstraintBrokenNotify )
		pFnConstraintBrokenNotify = (UFunction*) UObject::GObjObjects()->Data[ 5601 ];

	AActor_eventConstraintBrokenNotify_Parms ConstraintBrokenNotify_Parms;
	ConstraintBrokenNotify_Parms.ConOwner = ConOwner;
	ConstraintBrokenNotify_Parms.ConSetup = ConSetup;
	ConstraintBrokenNotify_Parms.ConInstance = ConInstance;

	this->ProcessEvent ( pFnConstraintBrokenNotify, &ConstraintBrokenNotify_Parms, NULL );
};

// Function Engine.Actor.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 5600 ];

	AActor_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.Actor.PostBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 5599 ];

	AActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedTeamMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeamMessage = NULL;

	if ( ! pFnBroadcastLocalizedTeamMessage )
		pFnBroadcastLocalizedTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 5592 ];

	AActor_eventBroadcastLocalizedTeamMessage_Parms BroadcastLocalizedTeamMessage_Parms;
	BroadcastLocalizedTeamMessage_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeamMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedTeamMessage_Parms.Switch = Switch;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeamMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeamMessage, &BroadcastLocalizedTeamMessage_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedMessage = NULL;

	if ( ! pFnBroadcastLocalizedMessage )
		pFnBroadcastLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 5586 ];

	AActor_eventBroadcastLocalizedMessage_Parms BroadcastLocalizedMessage_Parms;
	BroadcastLocalizedMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedMessage_Parms.Switch = Switch;
	BroadcastLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedMessage, &BroadcastLocalizedMessage_Parms, NULL );
};

// Function Engine.Actor.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 5585 ];

	AActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Actor.FindActorsOfClass
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ActorClass                     ( CPF_Parm )
// TArray< class AActor* >        out_Actors                     ( CPF_Parm | CPF_OutParm )

bool AActor::FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors )
{
	static UFunction* pFnFindActorsOfClass = NULL;

	if ( ! pFnFindActorsOfClass )
		pFnFindActorsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 5579 ];

	AActor_execFindActorsOfClass_Parms FindActorsOfClass_Parms;
	FindActorsOfClass_Parms.ActorClass = ActorClass;

	this->ProcessEvent ( pFnFindActorsOfClass, &FindActorsOfClass_Parms, NULL );

	if ( out_Actors )
		memcpy ( out_Actors, &FindActorsOfClass_Parms.out_Actors, 0xC );

	return FindActorsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.LocalPlayerControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm | CPF_OutParm )

void AActor::LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC )
{
	static UFunction* pFnLocalPlayerControllers = NULL;

	if ( ! pFnLocalPlayerControllers )
		pFnLocalPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 5576 ];

	AActor_execLocalPlayerControllers_Parms LocalPlayerControllers_Parms;
	LocalPlayerControllers_Parms.BaseClass = BaseClass;

	pFnLocalPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalPlayerControllers, &LocalPlayerControllers_Parms, NULL );

	pFnLocalPlayerControllers->FunctionFlags |= 0x400;

	if ( PC )
		*PC = LocalPlayerControllers_Parms.PC;
};

// Function Engine.Actor.AllOwnedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm )

void AActor::AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAllOwnedComponents = NULL;

	if ( ! pFnAllOwnedComponents )
		pFnAllOwnedComponents = (UFunction*) UObject::GObjObjects()->Data[ 5573 ];

	AActor_execAllOwnedComponents_Parms AllOwnedComponents_Parms;
	AllOwnedComponents_Parms.BaseClass = BaseClass;

	pFnAllOwnedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllOwnedComponents, &AllOwnedComponents_Parms, NULL );

	pFnAllOwnedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AllOwnedComponents_Parms.OutComponent;
};

// Function Engine.Actor.ComponentList
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         out_Component                  ( CPF_Parm | CPF_OutParm )

void AActor::ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component )
{
	static UFunction* pFnComponentList = NULL;

	if ( ! pFnComponentList )
		pFnComponentList = (UFunction*) UObject::GObjObjects()->Data[ 5570 ];

	AActor_execComponentList_Parms ComponentList_Parms;
	ComponentList_Parms.BaseClass = BaseClass;

	pFnComponentList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComponentList, &ComponentList_Parms, NULL );

	pFnComponentList->FunctionFlags |= 0x400;

	if ( out_Component )
		*out_Component = ComponentList_Parms.out_Component;
};

// Function Engine.Actor.OverlappingActors
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  out_Actor                      ( CPF_Parm | CPF_OutParm )

void AActor::OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor )
{
	static UFunction* pFnOverlappingActors = NULL;

	if ( ! pFnOverlappingActors )
		pFnOverlappingActors = (UFunction*) UObject::GObjObjects()->Data[ 5564 ];

	AActor_execOverlappingActors_Parms OverlappingActors_Parms;
	OverlappingActors_Parms.BaseClass = BaseClass;
	OverlappingActors_Parms.Radius = Radius;
	memcpy ( &OverlappingActors_Parms.Loc, &Loc, 0xC );
	OverlappingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	pFnOverlappingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverlappingActors, &OverlappingActors_Parms, NULL );

	pFnOverlappingActors->FunctionFlags |= 0x400;

	if ( out_Actor )
		*out_Actor = OverlappingActors_Parms.out_Actor;
};

// Function Engine.Actor.CollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0141]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseOverlapCheck               ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class AActor** Actor )
{
	static UFunction* pFnCollidingActors = NULL;

	if ( ! pFnCollidingActors )
		pFnCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 5558 ];

	AActor_execCollidingActors_Parms CollidingActors_Parms;
	CollidingActors_Parms.BaseClass = BaseClass;
	CollidingActors_Parms.Radius = Radius;
	memcpy ( &CollidingActors_Parms.Loc, &Loc, 0xC );
	CollidingActors_Parms.bUseOverlapCheck = bUseOverlapCheck;

	unsigned short NativeIndex = pFnCollidingActors->iNative;
	pFnCollidingActors->iNative = 0;

	pFnCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCollidingActors, &CollidingActors_Parms, NULL );

	pFnCollidingActors->FunctionFlags |= 0x400;

	pFnCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = CollidingActors_Parms.Actor;
};

// Function Engine.Actor.VisibleCollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0138]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** Actor )
{
	static UFunction* pFnVisibleCollidingActors = NULL;

	if ( ! pFnVisibleCollidingActors )
		pFnVisibleCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 5552 ];

	AActor_execVisibleCollidingActors_Parms VisibleCollidingActors_Parms;
	VisibleCollidingActors_Parms.BaseClass = BaseClass;
	VisibleCollidingActors_Parms.Radius = Radius;
	memcpy ( &VisibleCollidingActors_Parms.Loc, &Loc, 0xC );
	VisibleCollidingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	unsigned short NativeIndex = pFnVisibleCollidingActors->iNative;
	pFnVisibleCollidingActors->iNative = 0;

	pFnVisibleCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleCollidingActors, &VisibleCollidingActors_Parms, NULL );

	pFnVisibleCollidingActors->FunctionFlags |= 0x400;

	pFnVisibleCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleCollidingActors_Parms.Actor;
};

// Function Engine.Actor.VisibleActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0137]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor )
{
	static UFunction* pFnVisibleActors = NULL;

	if ( ! pFnVisibleActors )
		pFnVisibleActors = (UFunction*) UObject::GObjObjects()->Data[ 5547 ];

	AActor_execVisibleActors_Parms VisibleActors_Parms;
	VisibleActors_Parms.BaseClass = BaseClass;
	VisibleActors_Parms.Radius = Radius;
	memcpy ( &VisibleActors_Parms.Loc, &Loc, 0xC );

	unsigned short NativeIndex = pFnVisibleActors->iNative;
	pFnVisibleActors->iNative = 0;

	pFnVisibleActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleActors, &VisibleActors_Parms, NULL );

	pFnVisibleActors->FunctionFlags |= 0x400;

	pFnVisibleActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleActors_Parms.Actor;
};

// Function Engine.Actor.TraceActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0135]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLoc                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNorm                        ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceActors = NULL;

	if ( ! pFnTraceActors )
		pFnTraceActors = (UFunction*) UObject::GObjObjects()->Data[ 5537 ];

	AActor_execTraceActors_Parms TraceActors_Parms;
	TraceActors_Parms.BaseClass = BaseClass;
	memcpy ( &TraceActors_Parms.End, &End, 0xC );
	memcpy ( &TraceActors_Parms.Start, &Start, 0xC );
	memcpy ( &TraceActors_Parms.Extent, &Extent, 0xC );
	TraceActors_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned short NativeIndex = pFnTraceActors->iNative;
	pFnTraceActors->iNative = 0;

	pFnTraceActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceActors, &TraceActors_Parms, NULL );

	pFnTraceActors->FunctionFlags |= 0x400;

	pFnTraceActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TraceActors_Parms.Actor;

	if ( HitLoc )
		memcpy ( HitLoc, &TraceActors_Parms.HitLoc, 0xC );

	if ( HitNorm )
		memcpy ( HitNorm, &TraceActors_Parms.HitNorm, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceActors_Parms.HitInfo, 0x1C );
};

// Function Engine.Actor.TouchingActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0133]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::TouchingActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnTouchingActors = NULL;

	if ( ! pFnTouchingActors )
		pFnTouchingActors = (UFunction*) UObject::GObjObjects()->Data[ 5534 ];

	AActor_execTouchingActors_Parms TouchingActors_Parms;
	TouchingActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnTouchingActors->iNative;
	pFnTouchingActors->iNative = 0;

	pFnTouchingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchingActors, &TouchingActors_Parms, NULL );

	pFnTouchingActors->FunctionFlags |= 0x400;

	pFnTouchingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TouchingActors_Parms.Actor;
};

// Function Engine.Actor.BasedActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0132]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::BasedActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnBasedActors = NULL;

	if ( ! pFnBasedActors )
		pFnBasedActors = (UFunction*) UObject::GObjObjects()->Data[ 5531 ];

	AActor_execBasedActors_Parms BasedActors_Parms;
	BasedActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnBasedActors->iNative;
	pFnBasedActors->iNative = 0;

	pFnBasedActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasedActors, &BasedActors_Parms, NULL );

	pFnBasedActors->FunctionFlags |= 0x400;

	pFnBasedActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = BasedActors_Parms.Actor;
};

// Function Engine.Actor.ChildActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0131]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::ChildActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnChildActors = NULL;

	if ( ! pFnChildActors )
		pFnChildActors = (UFunction*) UObject::GObjObjects()->Data[ 5528 ];

	AActor_execChildActors_Parms ChildActors_Parms;
	ChildActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnChildActors->iNative;
	pFnChildActors->iNative = 0;

	pFnChildActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChildActors, &ChildActors_Parms, NULL );

	pFnChildActors->FunctionFlags |= 0x400;

	pFnChildActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = ChildActors_Parms.Actor;
};

// Function Engine.Actor.DynamicActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0139]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::DynamicActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnDynamicActors = NULL;

	if ( ! pFnDynamicActors )
		pFnDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 5525 ];

	AActor_execDynamicActors_Parms DynamicActors_Parms;
	DynamicActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnDynamicActors->iNative;
	pFnDynamicActors->iNative = 0;

	pFnDynamicActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDynamicActors, &DynamicActors_Parms, NULL );

	pFnDynamicActors->FunctionFlags |= 0x400;

	pFnDynamicActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = DynamicActors_Parms.Actor;
};

// Function Engine.Actor.AllActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0130]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::AllActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnAllActors = NULL;

	if ( ! pFnAllActors )
		pFnAllActors = (UFunction*) UObject::GObjObjects()->Data[ 5522 ];

	AActor_execAllActors_Parms AllActors_Parms;
	AllActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnAllActors->iNative;
	pFnAllActors->iNative = 0;

	pFnAllActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllActors, &AllActors_Parms, NULL );

	pFnAllActors->FunctionFlags |= 0x400;

	pFnAllActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = AllActors_Parms.Actor;
};

// Function Engine.Actor.GetURLMap
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0223]
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AActor::GetURLMap ( )
{
	static UFunction* pFnGetURLMap = NULL;

	if ( ! pFnGetURLMap )
		pFnGetURLMap = (UFunction*) UObject::GObjObjects()->Data[ 5520 ];

	AActor_execGetURLMap_Parms GetURLMap_Parms;

	unsigned short NativeIndex = pFnGetURLMap->iNative;
	pFnGetURLMap->iNative = 0;

	pFnGetURLMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURLMap, &GetURLMap_Parms, NULL );

	pFnGetURLMap->FunctionFlags |= 0x400;

	pFnGetURLMap->iNative = NativeIndex;

	return GetURLMap_Parms.ReturnValue;
};

// Function Engine.Actor.PostTeleport
// [0x00020000] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void AActor::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 5518 ];

	AActor_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.Actor.PreTeleport
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeleporter*             InTeleporter                   ( CPF_Parm )

bool AActor::PreTeleport ( class ATeleporter* InTeleporter )
{
	static UFunction* pFnPreTeleport = NULL;

	if ( ! pFnPreTeleport )
		pFnPreTeleport = (UFunction*) UObject::GObjObjects()->Data[ 5515 ];

	AActor_execPreTeleport_Parms PreTeleport_Parms;
	PreTeleport_Parms.InTeleporter = InTeleporter;

	this->ProcessEvent ( pFnPreTeleport, &PreTeleport_Parms, NULL );

	return PreTeleport_Parms.ReturnValue;
};

// Function Engine.Actor.GetDestination
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

struct FVector AActor::GetDestination ( class AController* C )
{
	static UFunction* pFnGetDestination = NULL;

	if ( ! pFnGetDestination )
		pFnGetDestination = (UFunction*) UObject::GObjObjects()->Data[ 5512 ];

	AActor_execGetDestination_Parms GetDestination_Parms;
	GetDestination_Parms.C = C;

	pFnGetDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestination, &GetDestination_Parms, NULL );

	pFnGetDestination->FunctionFlags |= 0x400;

	return GetDestination_Parms.ReturnValue;
};

// Function Engine.Actor.SuggestTossVelocity
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          TossSpeed                      ( CPF_Parm )
// float                          BaseTossZ                      ( CPF_OptionalParm | CPF_Parm )
// float                          DesiredZPct                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 CollisionSize                  ( CPF_OptionalParm | CPF_Parm )
// float                          TerminalVelocity               ( CPF_OptionalParm | CPF_Parm )
// float                          OverrideGravityZ               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 TossVelocity                   ( CPF_Parm | CPF_OutParm )

bool AActor::SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, struct FVector* TossVelocity )
{
	static UFunction* pFnSuggestTossVelocity = NULL;

	if ( ! pFnSuggestTossVelocity )
		pFnSuggestTossVelocity = (UFunction*) UObject::GObjObjects()->Data[ 5501 ];

	AActor_execSuggestTossVelocity_Parms SuggestTossVelocity_Parms;
	memcpy ( &SuggestTossVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestTossVelocity_Parms.Start, &Start, 0xC );
	SuggestTossVelocity_Parms.TossSpeed = TossSpeed;
	SuggestTossVelocity_Parms.BaseTossZ = BaseTossZ;
	SuggestTossVelocity_Parms.DesiredZPct = DesiredZPct;
	memcpy ( &SuggestTossVelocity_Parms.CollisionSize, &CollisionSize, 0xC );
	SuggestTossVelocity_Parms.TerminalVelocity = TerminalVelocity;
	SuggestTossVelocity_Parms.OverrideGravityZ = OverrideGravityZ;

	pFnSuggestTossVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestTossVelocity, &SuggestTossVelocity_Parms, NULL );

	pFnSuggestTossVelocity->FunctionFlags |= 0x400;

	if ( TossVelocity )
		memcpy ( TossVelocity, &SuggestTossVelocity_Parms.TossVelocity, 0xC );

	return SuggestTossVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.PlayerCanSeeMe
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0214]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::PlayerCanSeeMe ( )
{
	static UFunction* pFnPlayerCanSeeMe = NULL;

	if ( ! pFnPlayerCanSeeMe )
		pFnPlayerCanSeeMe = (UFunction*) UObject::GObjObjects()->Data[ 5499 ];

	AActor_execPlayerCanSeeMe_Parms PlayerCanSeeMe_Parms;

	unsigned short NativeIndex = pFnPlayerCanSeeMe->iNative;
	pFnPlayerCanSeeMe->iNative = 0;

	pFnPlayerCanSeeMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayerCanSeeMe, &PlayerCanSeeMe_Parms, NULL );

	pFnPlayerCanSeeMe->FunctionFlags |= 0x400;

	pFnPlayerCanSeeMe->iNative = NativeIndex;

	return PlayerCanSeeMe_Parms.ReturnValue;
};

// Function Engine.Actor.MakeNoise
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0200]
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AActor::MakeNoise ( float Loudness, struct FName NoiseType )
{
	static UFunction* pFnMakeNoise = NULL;

	if ( ! pFnMakeNoise )
		pFnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 5496 ];

	AActor_execMakeNoise_Parms MakeNoise_Parms;
	MakeNoise_Parms.Loudness = Loudness;
	memcpy ( &MakeNoise_Parms.NoiseType, &NoiseType, 0x8 );

	unsigned short NativeIndex = pFnMakeNoise->iNative;
	pFnMakeNoise->iNative = 0;

	pFnMakeNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNoise, &MakeNoise_Parms, NULL );

	pFnMakeNoise->FunctionFlags |= 0x400;

	pFnMakeNoise->iNative = NativeIndex;
};

// Function Engine.Actor.PlaySound
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bNotReplicated                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 5489 ];

	AActor_execPlaySound_Parms PlaySound_Parms;
	PlaySound_Parms.InSoundCue = InSoundCue;
	PlaySound_Parms.bNotReplicated = bNotReplicated;
	PlaySound_Parms.bNoRepToOwner = bNoRepToOwner;
	PlaySound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlaySound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlaySound_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;
};

// Function Engine.Actor.CreateAudioComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bPlay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAttachToSelf                  ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* AActor::CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf )
{
	static UFunction* pFnCreateAudioComponent = NULL;

	if ( ! pFnCreateAudioComponent )
		pFnCreateAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 5481 ];

	AActor_execCreateAudioComponent_Parms CreateAudioComponent_Parms;
	CreateAudioComponent_Parms.InSoundCue = InSoundCue;
	CreateAudioComponent_Parms.bPlay = bPlay;
	CreateAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	CreateAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &CreateAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );
	CreateAudioComponent_Parms.bAttachToSelf = bAttachToSelf;

	pFnCreateAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAudioComponent, &CreateAudioComponent_Parms, NULL );

	pFnCreateAudioComponent->FunctionFlags |= 0x400;

	return CreateAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerRate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerRate ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetTimerRate = NULL;

	if ( ! pFnGetTimerRate )
		pFnGetTimerRate = (UFunction*) UObject::GObjObjects()->Data[ 5477 ];

	AActor_execGetTimerRate_Parms GetTimerRate_Parms;
	memcpy ( &GetTimerRate_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetTimerRate_Parms.inObj = inObj;

	pFnGetTimerRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerRate, &GetTimerRate_Parms, NULL );

	pFnGetTimerRate->FunctionFlags |= 0x400;

	return GetTimerRate_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerCount
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerCount ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnGetTimerCount = NULL;

	if ( ! pFnGetTimerCount )
		pFnGetTimerCount = (UFunction*) UObject::GObjObjects()->Data[ 5473 ];

	AActor_execGetTimerCount_Parms GetTimerCount_Parms;
	memcpy ( &GetTimerCount_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	GetTimerCount_Parms.inObj = inObj;

	pFnGetTimerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerCount, &GetTimerCount_Parms, NULL );

	pFnGetTimerCount->FunctionFlags |= 0x400;

	return GetTimerCount_Parms.ReturnValue;
};

// Function Engine.Actor.IsTimerActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

bool AActor::IsTimerActive ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnIsTimerActive = NULL;

	if ( ! pFnIsTimerActive )
		pFnIsTimerActive = (UFunction*) UObject::GObjObjects()->Data[ 5469 ];

	AActor_execIsTimerActive_Parms IsTimerActive_Parms;
	memcpy ( &IsTimerActive_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	IsTimerActive_Parms.inObj = inObj;

	pFnIsTimerActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTimerActive, &IsTimerActive_Parms, NULL );

	pFnIsTimerActive->FunctionFlags |= 0x400;

	return IsTimerActive_Parms.ReturnValue;
};

// Function Engine.Actor.PauseTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnPauseTimer = NULL;

	if ( ! pFnPauseTimer )
		pFnPauseTimer = (UFunction*) UObject::GObjObjects()->Data[ 5465 ];

	AActor_execPauseTimer_Parms PauseTimer_Parms;
	PauseTimer_Parms.bPause = bPause;
	memcpy ( &PauseTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	PauseTimer_Parms.inObj = inObj;

	pFnPauseTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseTimer, &PauseTimer_Parms, NULL );

	pFnPauseTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearTimer ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnClearTimer = NULL;

	if ( ! pFnClearTimer )
		pFnClearTimer = (UFunction*) UObject::GObjObjects()->Data[ 5462 ];

	AActor_execClearTimer_Parms ClearTimer_Parms;
	memcpy ( &ClearTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	ClearTimer_Parms.inObj = inObj;

	pFnClearTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearTimer, &ClearTimer_Parms, NULL );

	pFnClearTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTimer
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0118]
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnSetTimer = NULL;

	if ( ! pFnSetTimer )
		pFnSetTimer = (UFunction*) UObject::GObjObjects()->Data[ 5457 ];

	AActor_execSetTimer_Parms SetTimer_Parms;
	SetTimer_Parms.InRate = InRate;
	SetTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	SetTimer_Parms.inObj = inObj;

	unsigned short NativeIndex = pFnSetTimer->iNative;
	pFnSetTimer->iNative = 0;

	pFnSetTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimer, &SetTimer_Parms, NULL );

	pFnSetTimer->FunctionFlags |= 0x400;

	pFnSetTimer->iNative = NativeIndex;
};

// Function Engine.Actor.TornOff
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 5456 ];

	AActor_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Actor.Destroy
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0117]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::Destroy ( )
{
	static UFunction* pFnDestroy = NULL;

	if ( ! pFnDestroy )
		pFnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 5454 ];

	AActor_execDestroy_Parms Destroy_Parms;

	unsigned short NativeIndex = pFnDestroy->iNative;
	pFnDestroy->iNative = 0;

	pFnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroy, &Destroy_Parms, NULL );

	pFnDestroy->FunctionFlags |= 0x400;

	pFnDestroy->iNative = NativeIndex;

	return Destroy_Parms.ReturnValue;
};

// Function Engine.Actor.Spawn
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SpawnClass                     ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  ActorTemplate                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AActor::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawn = NULL;

	if ( ! pFnSpawn )
		pFnSpawn = (UFunction*) UObject::GObjObjects()->Data[ 5445 ];

	AActor_execSpawn_Parms Spawn_Parms;
	Spawn_Parms.SpawnClass = SpawnClass;
	Spawn_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &Spawn_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &Spawn_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &Spawn_Parms.SpawnRotation, &SpawnRotation, 0xC );
	Spawn_Parms.ActorTemplate = ActorTemplate;
	Spawn_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawn, &Spawn_Parms, NULL );

	pFnSpawn->FunctionFlags |= 0x400;

	return Spawn_Parms.ReturnValue;
};

// Function Engine.Actor.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void AActor::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 5442 ];

	AActor_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Actor.GetComponentsBoundingBox
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBox                    ActorBox                       ( CPF_Parm | CPF_OutParm )

void AActor::GetComponentsBoundingBox ( struct FBox* ActorBox )
{
	static UFunction* pFnGetComponentsBoundingBox = NULL;

	if ( ! pFnGetComponentsBoundingBox )
		pFnGetComponentsBoundingBox = (UFunction*) UObject::GObjObjects()->Data[ 5440 ];

	AActor_execGetComponentsBoundingBox_Parms GetComponentsBoundingBox_Parms;

	pFnGetComponentsBoundingBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Parms, NULL );

	pFnGetComponentsBoundingBox->FunctionFlags |= 0x400;

	if ( ActorBox )
		memcpy ( ActorBox, &GetComponentsBoundingBox_Parms.ActorBox, 0x1C );
};

// Function Engine.Actor.IsOverlapping
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool AActor::IsOverlapping ( class AActor* A )
{
	static UFunction* pFnIsOverlapping = NULL;

	if ( ! pFnIsOverlapping )
		pFnIsOverlapping = (UFunction*) UObject::GObjObjects()->Data[ 5437 ];

	AActor_execIsOverlapping_Parms IsOverlapping_Parms;
	IsOverlapping_Parms.A = A;

	pFnIsOverlapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOverlapping, &IsOverlapping_Parms, NULL );

	pFnIsOverlapping->FunctionFlags |= 0x400;

	return IsOverlapping_Parms.ReturnValue;
};

// Function Engine.Actor.ContainsPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Spot                           ( CPF_Parm )

bool AActor::ContainsPoint ( struct FVector Spot )
{
	static UFunction* pFnContainsPoint = NULL;

	if ( ! pFnContainsPoint )
		pFnContainsPoint = (UFunction*) UObject::GObjObjects()->Data[ 5434 ];

	AActor_execContainsPoint_Parms ContainsPoint_Parms;
	memcpy ( &ContainsPoint_Parms.Spot, &Spot, 0xC );

	pFnContainsPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsPoint, &ContainsPoint_Parms, NULL );

	pFnContainsPoint->FunctionFlags |= 0x400;

	return ContainsPoint_Parms.ReturnValue;
};

// Function Engine.Actor.FindSpot
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 BoxExtent                      ( CPF_Parm )
// struct FVector                 SpotLocation                   ( CPF_Parm | CPF_OutParm )

bool AActor::FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation )
{
	static UFunction* pFnFindSpot = NULL;

	if ( ! pFnFindSpot )
		pFnFindSpot = (UFunction*) UObject::GObjObjects()->Data[ 5430 ];

	AActor_execFindSpot_Parms FindSpot_Parms;
	memcpy ( &FindSpot_Parms.BoxExtent, &BoxExtent, 0xC );

	pFnFindSpot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSpot, &FindSpot_Parms, NULL );

	pFnFindSpot->FunctionFlags |= 0x400;

	if ( SpotLocation )
		memcpy ( SpotLocation, &FindSpot_Parms.SpotLocation, 0xC );

	return FindSpot_Parms.ReturnValue;
};

// Function Engine.Actor.FastTrace
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0224]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoxExtent                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceBullet                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet )
{
	static UFunction* pFnFastTrace = NULL;

	if ( ! pFnFastTrace )
		pFnFastTrace = (UFunction*) UObject::GObjObjects()->Data[ 5424 ];

	AActor_execFastTrace_Parms FastTrace_Parms;
	memcpy ( &FastTrace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &FastTrace_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &FastTrace_Parms.BoxExtent, &BoxExtent, 0xC );
	FastTrace_Parms.bTraceBullet = bTraceBullet;

	unsigned short NativeIndex = pFnFastTrace->iNative;
	pFnFastTrace->iNative = 0;

	pFnFastTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastTrace, &FastTrace_Parms, NULL );

	pFnFastTrace->FunctionFlags |= 0x400;

	pFnFastTrace->iNative = NativeIndex;

	return FastTrace_Parms.ReturnValue;
};

// Function Engine.Actor.PointCheckComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm )
// struct FVector                 PointLocation                  ( CPF_Parm )
// struct FVector                 PointExtent                    ( CPF_Parm )

bool AActor::PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent )
{
	static UFunction* pFnPointCheckComponent = NULL;

	if ( ! pFnPointCheckComponent )
		pFnPointCheckComponent = (UFunction*) UObject::GObjObjects()->Data[ 5419 ];

	AActor_execPointCheckComponent_Parms PointCheckComponent_Parms;
	PointCheckComponent_Parms.InComponent = InComponent;
	memcpy ( &PointCheckComponent_Parms.PointLocation, &PointLocation, 0xC );
	memcpy ( &PointCheckComponent_Parms.PointExtent, &PointExtent, 0xC );

	pFnPointCheckComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheckComponent, &PointCheckComponent_Parms, NULL );

	pFnPointCheckComponent->FunctionFlags |= 0x400;

	return PointCheckComponent_Parms.ReturnValue;
};

// Function Engine.Actor.TraceComponent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceComponent = NULL;

	if ( ! pFnTraceComponent )
		pFnTraceComponent = (UFunction*) UObject::GObjObjects()->Data[ 5410 ];

	AActor_execTraceComponent_Parms TraceComponent_Parms;
	TraceComponent_Parms.InComponent = InComponent;
	memcpy ( &TraceComponent_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &TraceComponent_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &TraceComponent_Parms.Extent, &Extent, 0xC );

	pFnTraceComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceComponent, &TraceComponent_Parms, NULL );

	pFnTraceComponent->FunctionFlags |= 0x400;

	if ( HitLocation )
		memcpy ( HitLocation, &TraceComponent_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &TraceComponent_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceComponent_Parms.HitInfo, 0x1C );

	return TraceComponent_Parms.ReturnValue;
};

// Function Engine.Actor.Trace
// [0x00424401] ( FUNC_Final | FUNC_Native ) iNative [0x0115]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class AActor* AActor::Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTrace = NULL;

	if ( ! pFnTrace )
		pFnTrace = (UFunction*) UObject::GObjObjects()->Data[ 5400 ];

	AActor_execTrace_Parms Trace_Parms;
	memcpy ( &Trace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &Trace_Parms.TraceStart, &TraceStart, 0xC );
	Trace_Parms.bTraceActors = bTraceActors;
	memcpy ( &Trace_Parms.Extent, &Extent, 0xC );
	Trace_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned short NativeIndex = pFnTrace->iNative;
	pFnTrace->iNative = 0;

	pFnTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrace, &Trace_Parms, NULL );

	pFnTrace->FunctionFlags |= 0x400;

	pFnTrace->iNative = NativeIndex;

	if ( HitLocation )
		memcpy ( HitLocation, &Trace_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &Trace_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &Trace_Parms.HitInfo, 0x1C );

	return Trace_Parms.ReturnValue;
};

// Function Engine.Actor.VolumeBasedDestroy
// [0x00020102] 
// Parameters infos:
// class APhysicsVolume*          PV                             ( CPF_Parm )

void AActor::VolumeBasedDestroy ( class APhysicsVolume* PV )
{
	static UFunction* pFnVolumeBasedDestroy = NULL;

	if ( ! pFnVolumeBasedDestroy )
		pFnVolumeBasedDestroy = (UFunction*) UObject::GObjObjects()->Data[ 5398 ];

	AActor_execVolumeBasedDestroy_Parms VolumeBasedDestroy_Parms;
	VolumeBasedDestroy_Parms.PV = PV;

	this->ProcessEvent ( pFnVolumeBasedDestroy, &VolumeBasedDestroy_Parms, NULL );
};

// Function Engine.Actor.OutsideWorldBounds
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 5397 ];

	AActor_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Actor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 5395 ];

	AActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Actor.UsedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   User                           ( CPF_Parm )

bool AActor::UsedBy ( class APawn* User )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = (UFunction*) UObject::GObjObjects()->Data[ 5392 ];

	AActor_execUsedBy_Parms UsedBy_Parms;
	UsedBy_Parms.User = User;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );

	return UsedBy_Parms.ReturnValue;
};

// Function Engine.Actor.OverRotated
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                out_Desired                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Actual                     ( CPF_Parm | CPF_OutParm )

bool AActor::eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual )
{
	static UFunction* pFnOverRotated = NULL;

	if ( ! pFnOverRotated )
		pFnOverRotated = (UFunction*) UObject::GObjObjects()->Data[ 5388 ];

	AActor_eventOverRotated_Parms OverRotated_Parms;

	this->ProcessEvent ( pFnOverRotated, &OverRotated_Parms, NULL );

	if ( out_Desired )
		memcpy ( out_Desired, &OverRotated_Parms.out_Desired, 0xC );

	if ( out_Actual )
		memcpy ( out_Actual, &OverRotated_Parms.out_Actual, 0xC );

	return OverRotated_Parms.ReturnValue;
};

// Function Engine.Actor.ClampRotation
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                rBase                          ( CPF_Parm )
// struct FRotator                rUpperLimits                   ( CPF_Parm )
// struct FRotator                rLowerLimits                   ( CPF_Parm )
// struct FRotator                out_Rot                        ( CPF_Parm | CPF_OutParm )

bool AActor::ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot )
{
	static UFunction* pFnClampRotation = NULL;

	if ( ! pFnClampRotation )
		pFnClampRotation = (UFunction*) UObject::GObjObjects()->Data[ 5382 ];

	AActor_execClampRotation_Parms ClampRotation_Parms;
	memcpy ( &ClampRotation_Parms.rBase, &rBase, 0xC );
	memcpy ( &ClampRotation_Parms.rUpperLimits, &rUpperLimits, 0xC );
	memcpy ( &ClampRotation_Parms.rLowerLimits, &rLowerLimits, 0xC );

	pFnClampRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClampRotation, &ClampRotation_Parms, NULL );

	pFnClampRotation->FunctionFlags |= 0x400;

	if ( out_Rot )
		memcpy ( out_Rot, &ClampRotation_Parms.out_Rot, 0xC );

	return ClampRotation_Parms.ReturnValue;
};

// Function Engine.Actor.RanInto
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 5380 ];

	AActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.Actor.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 5378 ];

	AActor_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Actor.EncroachingOn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 5375 ];

	AActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Actor.CollisionChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 5374 ];

	AActor_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Actor.SpecialHandling
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* AActor::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 5371 ];

	AActor_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Actor.Detach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 5369 ];

	AActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.Actor.Attach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 5367 ];

	AActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.Actor.BaseChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 5366 ];

	AActor_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Actor.Bump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 5362 ];

	AActor_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.Actor.UnTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 5360 ];

	AActor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.Actor.PostTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 5358 ];

	AActor_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Actor.Touch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 5353 ];

	AActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Actor.PhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AActor::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnPhysicsVolumeChange = NULL;

	if ( ! pFnPhysicsVolumeChange )
		pFnPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 5351 ];

	AActor_eventPhysicsVolumeChange_Parms PhysicsVolumeChange_Parms;
	PhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnPhysicsVolumeChange, &PhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Actor.Landed
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void AActor::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 5348 ];

	AActor_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Actor.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 5347 ];

	AActor_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Actor.HitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm )

void AActor::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 5343 ];

	AActor_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Actor.Timer
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 5342 ];

	AActor_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.Actor.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 5340 ];

	AActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Actor.LostChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventLostChild ( class AActor* Other )
{
	static UFunction* pFnLostChild = NULL;

	if ( ! pFnLostChild )
		pFnLostChild = (UFunction*) UObject::GObjObjects()->Data[ 5338 ];

	AActor_eventLostChild_Parms LostChild_Parms;
	LostChild_Parms.Other = Other;

	this->ProcessEvent ( pFnLostChild, &LostChild_Parms, NULL );
};

// Function Engine.Actor.GainedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventGainedChild ( class AActor* Other )
{
	static UFunction* pFnGainedChild = NULL;

	if ( ! pFnGainedChild )
		pFnGainedChild = (UFunction*) UObject::GObjObjects()->Data[ 5336 ];

	AActor_eventGainedChild_Parms GainedChild_Parms;
	GainedChild_Parms.Other = Other;

	this->ProcessEvent ( pFnGainedChild, &GainedChild_Parms, NULL );
};

// Function Engine.Actor.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 5335 ];

	AActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Actor.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void AActor::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 5333 ];

	AActor_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ExComponent                    ( CPF_Parm )

void AActor::DetachComponent ( class UActorComponent* ExComponent )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 5331 ];

	AActor_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.ExComponent = ExComponent;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.AttachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         NewComponent                   ( CPF_Parm )

void AActor::AttachComponent ( class UActorComponent* NewComponent )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 5329 ];

	AActor_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.NewComponent = NewComponent;

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.UnClock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::UnClock ( float* Time )
{
	static UFunction* pFnUnClock = NULL;

	if ( ! pFnUnClock )
		pFnUnClock = (UFunction*) UObject::GObjObjects()->Data[ 5327 ];

	AActor_execUnClock_Parms UnClock_Parms;

	pFnUnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClock, &UnClock_Parms, NULL );

	pFnUnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = UnClock_Parms.Time;
};

// Function Engine.Actor.Clock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::Clock ( float* Time )
{
	static UFunction* pFnClock = NULL;

	if ( ! pFnClock )
		pFnClock = (UFunction*) UObject::GObjObjects()->Data[ 5325 ];

	AActor_execClock_Parms Clock_Parms;

	pFnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClock, &Clock_Parms, NULL );

	pFnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = Clock_Parms.Time;
};

// Function Engine.Actor.SetPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F82]
// Parameters infos:
// unsigned char                  newPhysics                     ( CPF_Parm )

void AActor::SetPhysics ( unsigned char newPhysics )
{
	static UFunction* pFnSetPhysics = NULL;

	if ( ! pFnSetPhysics )
		pFnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 5323 ];

	AActor_execSetPhysics_Parms SetPhysics_Parms;
	SetPhysics_Parms.newPhysics = newPhysics;

	unsigned short NativeIndex = pFnSetPhysics->iNative;
	pFnSetPhysics->iNative = 0;

	pFnSetPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysics, &SetPhysics_Parms, NULL );

	pFnSetPhysics->FunctionFlags |= 0x400;

	pFnSetPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void AActor::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 5321 ];

	AActor_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHidden                     ( CPF_Parm )

void AActor::SetHidden ( unsigned long bNewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 5319 ];

	AActor_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.bNewHidden = bNewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ChartData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 DataName                       ( CPF_Parm )
// float                          DataValue                      ( CPF_Parm )

void AActor::ChartData ( struct FString DataName, float DataValue )
{
	static UFunction* pFnChartData = NULL;

	if ( ! pFnChartData )
		pFnChartData = (UFunction*) UObject::GObjObjects()->Data[ 5316 ];

	AActor_execChartData_Parms ChartData_Parms;
	memcpy ( &ChartData_Parms.DataName, &DataName, 0xC );
	ChartData_Parms.DataValue = DataValue;

	pFnChartData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChartData, &ChartData_Parms, NULL );

	pFnChartData->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCone
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// float                          Length                         ( CPF_Parm )
// float                          AngleWidth                     ( CPF_Parm )
// float                          AngleHeight                    ( CPF_Parm )
// int                            NumSides                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCone = NULL;

	if ( ! pFnDrawDebugCone )
		pFnDrawDebugCone = (UFunction*) UObject::GObjObjects()->Data[ 5307 ];

	AActor_execDrawDebugCone_Parms DrawDebugCone_Parms;
	memcpy ( &DrawDebugCone_Parms.Origin, &Origin, 0xC );
	memcpy ( &DrawDebugCone_Parms.Direction, &Direction, 0xC );
	DrawDebugCone_Parms.Length = Length;
	DrawDebugCone_Parms.AngleWidth = AngleWidth;
	DrawDebugCone_Parms.AngleHeight = AngleHeight;
	DrawDebugCone_Parms.NumSides = NumSides;
	memcpy ( &DrawDebugCone_Parms.DrawColor, &DrawColor, 0x4 );
	DrawDebugCone_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCone, &DrawDebugCone_Parms, NULL );

	pFnDrawDebugCone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCylinder
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCylinder = NULL;

	if ( ! pFnDrawDebugCylinder )
		pFnDrawDebugCylinder = (UFunction*) UObject::GObjObjects()->Data[ 5298 ];

	AActor_execDrawDebugCylinder_Parms DrawDebugCylinder_Parms;
	memcpy ( &DrawDebugCylinder_Parms.Start, &Start, 0xC );
	memcpy ( &DrawDebugCylinder_Parms.End, &End, 0xC );
	DrawDebugCylinder_Parms.Radius = Radius;
	DrawDebugCylinder_Parms.Segments = Segments;
	DrawDebugCylinder_Parms.R = R;
	DrawDebugCylinder_Parms.G = G;
	DrawDebugCylinder_Parms.B = B;
	DrawDebugCylinder_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCylinder, &DrawDebugCylinder_Parms, NULL );

	pFnDrawDebugCylinder->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugSphere
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugSphere = NULL;

	if ( ! pFnDrawDebugSphere )
		pFnDrawDebugSphere = (UFunction*) UObject::GObjObjects()->Data[ 5290 ];

	AActor_execDrawDebugSphere_Parms DrawDebugSphere_Parms;
	memcpy ( &DrawDebugSphere_Parms.Center, &Center, 0xC );
	DrawDebugSphere_Parms.Radius = Radius;
	DrawDebugSphere_Parms.Segments = Segments;
	DrawDebugSphere_Parms.R = R;
	DrawDebugSphere_Parms.G = G;
	DrawDebugSphere_Parms.B = B;
	DrawDebugSphere_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugSphere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugSphere, &DrawDebugSphere_Parms, NULL );

	pFnDrawDebugSphere->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCoordinateSystem
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCoordinateSystem = NULL;

	if ( ! pFnDrawDebugCoordinateSystem )
		pFnDrawDebugCoordinateSystem = (UFunction*) UObject::GObjObjects()->Data[ 5285 ];

	AActor_execDrawDebugCoordinateSystem_Parms DrawDebugCoordinateSystem_Parms;
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	DrawDebugCoordinateSystem_Parms.Scale = Scale;
	DrawDebugCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCoordinateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCoordinateSystem, &DrawDebugCoordinateSystem_Parms, NULL );

	pFnDrawDebugCoordinateSystem->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugBox
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugBox = NULL;

	if ( ! pFnDrawDebugBox )
		pFnDrawDebugBox = (UFunction*) UObject::GObjObjects()->Data[ 5278 ];

	AActor_execDrawDebugBox_Parms DrawDebugBox_Parms;
	memcpy ( &DrawDebugBox_Parms.Center, &Center, 0xC );
	memcpy ( &DrawDebugBox_Parms.Extent, &Extent, 0xC );
	DrawDebugBox_Parms.R = R;
	DrawDebugBox_Parms.G = G;
	DrawDebugBox_Parms.B = B;
	DrawDebugBox_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugBox, &DrawDebugBox_Parms, NULL );

	pFnDrawDebugBox->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugLine
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 LineStart                      ( CPF_Parm )
// struct FVector                 LineEnd                        ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugLine = NULL;

	if ( ! pFnDrawDebugLine )
		pFnDrawDebugLine = (UFunction*) UObject::GObjObjects()->Data[ 5271 ];

	AActor_execDrawDebugLine_Parms DrawDebugLine_Parms;
	memcpy ( &DrawDebugLine_Parms.LineStart, &LineStart, 0xC );
	memcpy ( &DrawDebugLine_Parms.LineEnd, &LineEnd, 0xC );
	DrawDebugLine_Parms.R = R;
	DrawDebugLine_Parms.G = G;
	DrawDebugLine_Parms.B = B;
	DrawDebugLine_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugLine, &DrawDebugLine_Parms, NULL );

	pFnDrawDebugLine->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushPersistentDebugLines
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::FlushPersistentDebugLines ( )
{
	static UFunction* pFnFlushPersistentDebugLines = NULL;

	if ( ! pFnFlushPersistentDebugLines )
		pFnFlushPersistentDebugLines = (UFunction*) UObject::GObjObjects()->Data[ 5270 ];

	AActor_execFlushPersistentDebugLines_Parms FlushPersistentDebugLines_Parms;

	pFnFlushPersistentDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPersistentDebugLines, &FlushPersistentDebugLines_Parms, NULL );

	pFnFlushPersistentDebugLines->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetForcedInitialReplicatedProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UProperty*               PropToReplicate                ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void AActor::SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd )
{
	static UFunction* pFnSetForcedInitialReplicatedProperty = NULL;

	if ( ! pFnSetForcedInitialReplicatedProperty )
		pFnSetForcedInitialReplicatedProperty = (UFunction*) UObject::GObjObjects()->Data[ 5267 ];

	AActor_execSetForcedInitialReplicatedProperty_Parms SetForcedInitialReplicatedProperty_Parms;
	SetForcedInitialReplicatedProperty_Parms.PropToReplicate = PropToReplicate;
	SetForcedInitialReplicatedProperty_Parms.bAdd = bAdd;

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedInitialReplicatedProperty, &SetForcedInitialReplicatedProperty_Parms, NULL );

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReplicatedDataBinding
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 5265 ];

	AActor_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.Actor.ReplicatedEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 5263 ];

	AActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Actor.IsOwnedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsOwnedBy ( class AActor* TestActor )
{
	static UFunction* pFnIsOwnedBy = NULL;

	if ( ! pFnIsOwnedBy )
		pFnIsOwnedBy = (UFunction*) UObject::GObjObjects()->Data[ 5260 ];

	AActor_execIsOwnedBy_Parms IsOwnedBy_Parms;
	IsOwnedBy_Parms.TestActor = TestActor;

	pFnIsOwnedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOwnedBy, &IsOwnedBy_Parms, NULL );

	pFnIsOwnedBy->FunctionFlags |= 0x400;

	return IsOwnedBy_Parms.ReturnValue;
};

// Function Engine.Actor.GetBaseMost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AActor::GetBaseMost ( )
{
	static UFunction* pFnGetBaseMost = NULL;

	if ( ! pFnGetBaseMost )
		pFnGetBaseMost = (UFunction*) UObject::GObjObjects()->Data[ 5258 ];

	AActor_execGetBaseMost_Parms GetBaseMost_Parms;

	pFnGetBaseMost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMost, &GetBaseMost_Parms, NULL );

	pFnGetBaseMost->FunctionFlags |= 0x400;

	return GetBaseMost_Parms.ReturnValue;
};

// Function Engine.Actor.IsBasedOn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsBasedOn ( class AActor* TestActor )
{
	static UFunction* pFnIsBasedOn = NULL;

	if ( ! pFnIsBasedOn )
		pFnIsBasedOn = (UFunction*) UObject::GObjObjects()->Data[ 5255 ];

	AActor_execIsBasedOn_Parms IsBasedOn_Parms;
	IsBasedOn_Parms.TestActor = TestActor;

	pFnIsBasedOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBasedOn, &IsBasedOn_Parms, NULL );

	pFnIsBasedOn->FunctionFlags |= 0x400;

	return IsBasedOn_Parms.ReturnValue;
};

// Function Engine.Actor.FindBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::FindBase ( )
{
	static UFunction* pFnFindBase = NULL;

	if ( ! pFnFindBase )
		pFnFindBase = (UFunction*) UObject::GObjObjects()->Data[ 5254 ];

	AActor_execFindBase_Parms FindBase_Parms;

	pFnFindBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBase, &FindBase_Parms, NULL );

	pFnFindBase->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0110]
// Parameters infos:
// class AActor*                  NewOwner                       ( CPF_Parm )

void AActor::SetOwner ( class AActor* NewOwner )
{
	static UFunction* pFnSetOwner = NULL;

	if ( ! pFnSetOwner )
		pFnSetOwner = (UFunction*) UObject::GObjObjects()->Data[ 5252 ];

	AActor_execSetOwner_Parms SetOwner_Parms;
	SetOwner_Parms.NewOwner = NewOwner;

	unsigned short NativeIndex = pFnSetOwner->iNative;
	pFnSetOwner->iNative = 0;

	pFnSetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwner, &SetOwner_Parms, NULL );

	pFnSetOwner->FunctionFlags |= 0x400;

	pFnSetOwner->iNative = NativeIndex;
};

// Function Engine.Actor.SetBase
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x012A]
// Parameters infos:
// class AActor*                  NewBase                        ( CPF_Parm )
// struct FVector                 NewFloor                       ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   AttachName                     ( CPF_OptionalParm | CPF_Parm )

void AActor::SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName )
{
	static UFunction* pFnSetBase = NULL;

	if ( ! pFnSetBase )
		pFnSetBase = (UFunction*) UObject::GObjObjects()->Data[ 5247 ];

	AActor_execSetBase_Parms SetBase_Parms;
	SetBase_Parms.NewBase = NewBase;
	memcpy ( &SetBase_Parms.NewFloor, &NewFloor, 0xC );
	SetBase_Parms.SkelComp = SkelComp;
	memcpy ( &SetBase_Parms.AttachName, &AttachName, 0x8 );

	unsigned short NativeIndex = pFnSetBase->iNative;
	pFnSetBase->iNative = 0;

	pFnSetBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBase, &SetBase_Parms, NULL );

	pFnSetBase->FunctionFlags |= 0x400;

	pFnSetBase->iNative = NativeIndex;
};

// Function Engine.Actor.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = (UFunction*) UObject::GObjObjects()->Data[ 5245 ];

	AActor_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;

	return GetTerminalVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.AutonomousPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F83]
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void AActor::AutonomousPhysics ( float DeltaSeconds )
{
	static UFunction* pFnAutonomousPhysics = NULL;

	if ( ! pFnAutonomousPhysics )
		pFnAutonomousPhysics = (UFunction*) UObject::GObjObjects()->Data[ 5243 ];

	AActor_execAutonomousPhysics_Parms AutonomousPhysics_Parms;
	AutonomousPhysics_Parms.DeltaSeconds = DeltaSeconds;

	unsigned short NativeIndex = pFnAutonomousPhysics->iNative;
	pFnAutonomousPhysics->iNative = 0;

	pFnAutonomousPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutonomousPhysics, &AutonomousPhysics_Parms, NULL );

	pFnAutonomousPhysics->FunctionFlags |= 0x400;

	pFnAutonomousPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.MoveSmooth
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F81]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::MoveSmooth ( struct FVector Delta )
{
	static UFunction* pFnMoveSmooth = NULL;

	if ( ! pFnMoveSmooth )
		pFnMoveSmooth = (UFunction*) UObject::GObjObjects()->Data[ 5240 ];

	AActor_execMoveSmooth_Parms MoveSmooth_Parms;
	memcpy ( &MoveSmooth_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMoveSmooth->iNative;
	pFnMoveSmooth->iNative = 0;

	pFnMoveSmooth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveSmooth, &MoveSmooth_Parms, NULL );

	pFnMoveSmooth->FunctionFlags |= 0x400;

	pFnMoveSmooth->iNative = NativeIndex;

	return MoveSmooth_Parms.ReturnValue;
};

// Function Engine.Actor.fixedTurn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Current                        ( CPF_Parm )
// int                            Desired                        ( CPF_Parm )
// int                            DeltaRate                      ( CPF_Parm )

int AActor::fixedTurn ( int Current, int Desired, int DeltaRate )
{
	static UFunction* pFnfixedTurn = NULL;

	if ( ! pFnfixedTurn )
		pFnfixedTurn = (UFunction*) UObject::GObjObjects()->Data[ 5235 ];

	AActor_execfixedTurn_Parms fixedTurn_Parms;
	fixedTurn_Parms.Current = Current;
	fixedTurn_Parms.Desired = Desired;
	fixedTurn_Parms.DeltaRate = DeltaRate;

	pFnfixedTurn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnfixedTurn, &fixedTurn_Parms, NULL );

	pFnfixedTurn->FunctionFlags |= 0x400;

	return fixedTurn_Parms.ReturnValue;
};

// Function Engine.Actor.SetHardAttach
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHardAttach                 ( CPF_OptionalParm | CPF_Parm )

void AActor::SetHardAttach ( unsigned long bNewHardAttach )
{
	static UFunction* pFnSetHardAttach = NULL;

	if ( ! pFnSetHardAttach )
		pFnSetHardAttach = (UFunction*) UObject::GObjObjects()->Data[ 5233 ];

	AActor_execSetHardAttach_Parms SetHardAttach_Parms;
	SetHardAttach_Parms.bNewHardAttach = bNewHardAttach;

	pFnSetHardAttach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHardAttach, &SetHardAttach_Parms, NULL );

	pFnSetHardAttach->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetRelativeLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetRelativeLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetRelativeLocation = NULL;

	if ( ! pFnSetRelativeLocation )
		pFnSetRelativeLocation = (UFunction*) UObject::GObjObjects()->Data[ 5230 ];

	AActor_execSetRelativeLocation_Parms SetRelativeLocation_Parms;
	memcpy ( &SetRelativeLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetRelativeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeLocation, &SetRelativeLocation_Parms, NULL );

	pFnSetRelativeLocation->FunctionFlags |= 0x400;

	return SetRelativeLocation_Parms.ReturnValue;
};

// Function Engine.Actor.SetRelativeRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRelativeRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRelativeRotation = NULL;

	if ( ! pFnSetRelativeRotation )
		pFnSetRelativeRotation = (UFunction*) UObject::GObjObjects()->Data[ 5227 ];

	AActor_execSetRelativeRotation_Parms SetRelativeRotation_Parms;
	memcpy ( &SetRelativeRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRelativeRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeRotation, &SetRelativeRotation_Parms, NULL );

	pFnSetRelativeRotation->FunctionFlags |= 0x400;

	return SetRelativeRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRefresh                  ( CPF_Parm )

void AActor::SetZone ( unsigned long bForceRefresh )
{
	static UFunction* pFnSetZone = NULL;

	if ( ! pFnSetZone )
		pFnSetZone = (UFunction*) UObject::GObjObjects()->Data[ 5225 ];

	AActor_execSetZone_Parms SetZone_Parms;
	SetZone_Parms.bForceRefresh = bForceRefresh;

	pFnSetZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZone, &SetZone_Parms, NULL );

	pFnSetZone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MovingWhichWay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm | CPF_OutParm )

unsigned char AActor::MovingWhichWay ( float* Amount )
{
	static UFunction* pFnMovingWhichWay = NULL;

	if ( ! pFnMovingWhichWay )
		pFnMovingWhichWay = (UFunction*) UObject::GObjObjects()->Data[ 5222 ];

	AActor_execMovingWhichWay_Parms MovingWhichWay_Parms;

	pFnMovingWhichWay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovingWhichWay, &MovingWhichWay_Parms, NULL );

	pFnMovingWhichWay->FunctionFlags |= 0x400;

	if ( Amount )
		*Amount = MovingWhichWay_Parms.Amount;

	return MovingWhichWay_Parms.ReturnValue;
};

// Function Engine.Actor.SetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x012B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 5219 ];

	AActor_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	unsigned short NativeIndex = pFnSetRotation->iNative;
	pFnSetRotation->iNative = 0;

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;

	pFnSetRotation->iNative = NativeIndex;

	return SetRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 5216 ];

	AActor_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	unsigned short NativeIndex = pFnSetLocation->iNative;
	pFnSetLocation->iNative = 0;

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;

	pFnSetLocation->iNative = NativeIndex;

	return SetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.Move
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010A]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::Move ( struct FVector Delta )
{
	static UFunction* pFnMove = NULL;

	if ( ! pFnMove )
		pFnMove = (UFunction*) UObject::GObjObjects()->Data[ 5213 ];

	AActor_execMove_Parms Move_Parms;
	memcpy ( &Move_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMove->iNative;
	pFnMove->iNative = 0;

	pFnMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMove, &Move_Parms, NULL );

	pFnMove->FunctionFlags |= 0x400;

	pFnMove->iNative = NativeIndex;

	return Move_Parms.ReturnValue;
};

// Function Engine.Actor.UpdateLastNonRuleMoveLocationAndRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::UpdateLastNonRuleMoveLocationAndRotation ( )
{
	static UFunction* pFnUpdateLastNonRuleMoveLocationAndRotation = NULL;

	if ( ! pFnUpdateLastNonRuleMoveLocationAndRotation )
		pFnUpdateLastNonRuleMoveLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 5212 ];

	AActor_execUpdateLastNonRuleMoveLocationAndRotation_Parms UpdateLastNonRuleMoveLocationAndRotation_Parms;

	pFnUpdateLastNonRuleMoveLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLastNonRuleMoveLocationAndRotation, &UpdateLastNonRuleMoveLocationAndRotation_Parms, NULL );

	pFnUpdateLastNonRuleMoveLocationAndRotation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetDrawScale3D
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void AActor::SetDrawScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetDrawScale3D = NULL;

	if ( ! pFnSetDrawScale3D )
		pFnSetDrawScale3D = (UFunction*) UObject::GObjObjects()->Data[ 5210 ];

	AActor_execSetDrawScale3D_Parms SetDrawScale3D_Parms;
	memcpy ( &SetDrawScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetDrawScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale3D, &SetDrawScale3D_Parms, NULL );

	pFnSetDrawScale3D->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetDrawScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void AActor::SetDrawScale ( float NewScale )
{
	static UFunction* pFnSetDrawScale = NULL;

	if ( ! pFnSetDrawScale )
		pFnSetDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 5208 ];

	AActor_execSetDrawScale_Parms SetDrawScale_Parms;
	SetDrawScale_Parms.NewScale = NewScale;

	pFnSetDrawScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale, &SetDrawScale_Parms, NULL );

	pFnSetDrawScale->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionType
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewCollisionType               ( CPF_Parm )

void AActor::SetCollisionType ( unsigned char NewCollisionType )
{
	static UFunction* pFnSetCollisionType = NULL;

	if ( ! pFnSetCollisionType )
		pFnSetCollisionType = (UFunction*) UObject::GObjObjects()->Data[ 5206 ];

	AActor_execSetCollisionType_Parms SetCollisionType_Parms;
	SetCollisionType_Parms.NewCollisionType = NewCollisionType;

	pFnSetCollisionType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionType, &SetCollisionType_Parms, NULL );

	pFnSetCollisionType->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionSize
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x011B]
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void AActor::SetCollisionSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCollisionSize = NULL;

	if ( ! pFnSetCollisionSize )
		pFnSetCollisionSize = (UFunction*) UObject::GObjObjects()->Data[ 5203 ];

	AActor_execSetCollisionSize_Parms SetCollisionSize_Parms;
	SetCollisionSize_Parms.NewRadius = NewRadius;
	SetCollisionSize_Parms.NewHeight = NewHeight;

	unsigned short NativeIndex = pFnSetCollisionSize->iNative;
	pFnSetCollisionSize->iNative = 0;

	pFnSetCollisionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionSize, &SetCollisionSize_Parms, NULL );

	pFnSetCollisionSize->FunctionFlags |= 0x400;

	pFnSetCollisionSize->iNative = NativeIndex;
};

// Function Engine.Actor.SetCollision
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0106]
// Parameters infos:
// unsigned long                  bNewColActors                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewBlockActors                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewIgnoreEncroachers          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers )
{
	static UFunction* pFnSetCollision = NULL;

	if ( ! pFnSetCollision )
		pFnSetCollision = (UFunction*) UObject::GObjObjects()->Data[ 5199 ];

	AActor_execSetCollision_Parms SetCollision_Parms;
	SetCollision_Parms.bNewColActors = bNewColActors;
	SetCollision_Parms.bNewBlockActors = bNewBlockActors;
	SetCollision_Parms.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	unsigned short NativeIndex = pFnSetCollision->iNative;
	pFnSetCollision->iNative = 0;

	pFnSetCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollision, &SetCollision_Parms, NULL );

	pFnSetCollision->FunctionFlags |= 0x400;

	pFnSetCollision->iNative = NativeIndex;
};

// Function Engine.Actor.FinishAnim
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0105]
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::FinishAnim ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnFinishAnim = NULL;

	if ( ! pFnFinishAnim )
		pFnFinishAnim = (UFunction*) UObject::GObjObjects()->Data[ 5197 ];

	AActor_execFinishAnim_Parms FinishAnim_Parms;
	FinishAnim_Parms.SeqNode = SeqNode;

	unsigned short NativeIndex = pFnFinishAnim->iNative;
	pFnFinishAnim->iNative = 0;

	pFnFinishAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishAnim, &FinishAnim_Parms, NULL );

	pFnFinishAnim->FunctionFlags |= 0x400;

	pFnFinishAnim->iNative = NativeIndex;
};

// Function Engine.Actor.Sleep
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0100]
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void AActor::Sleep ( float Seconds )
{
	static UFunction* pFnSleep = NULL;

	if ( ! pFnSleep )
		pFnSleep = (UFunction*) UObject::GObjObjects()->Data[ 5195 ];

	AActor_execSleep_Parms Sleep_Parms;
	Sleep_Parms.Seconds = Seconds;

	unsigned short NativeIndex = pFnSleep->iNative;
	pFnSleep->iNative = 0;

	pFnSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSleep, &Sleep_Parms, NULL );

	pFnSleep->FunctionFlags |= 0x400;

	pFnSleep->iNative = NativeIndex;
};

// Function Engine.Actor.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Command                        ( CPF_Parm )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 5191 ];

	AActor_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.Actor.ForceUpdateComponents
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCollisionUpdate               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTransformOnly                 ( CPF_OptionalParm | CPF_Parm )

void AActor::ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdateComponents = NULL;

	if ( ! pFnForceUpdateComponents )
		pFnForceUpdateComponents = (UFunction*) UObject::GObjObjects()->Data[ 5188 ];

	AActor_execForceUpdateComponents_Parms ForceUpdateComponents_Parms;
	ForceUpdateComponents_Parms.bCollisionUpdate = bCollisionUpdate;
	ForceUpdateComponents_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdateComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateComponents, &ForceUpdateComponents_Parms, NULL );

	pFnForceUpdateComponents->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.DetachFromAny
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UActorComponent::DetachFromAny ( )
{
	static UFunction* pFnDetachFromAny = NULL;

	if ( ! pFnDetachFromAny )
		pFnDetachFromAny = (UFunction*) UObject::GObjObjects()->Data[ 6019 ];

	UActorComponent_execDetachFromAny_Parms DetachFromAny_Parms;

	pFnDetachFromAny->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachFromAny, &DetachFromAny_Parms, NULL );

	pFnDetachFromAny->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.ForceUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransformOnly                 ( CPF_Parm )

void UActorComponent::ForceUpdate ( unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdate = NULL;

	if ( ! pFnForceUpdate )
		pFnForceUpdate = (UFunction*) UObject::GObjObjects()->Data[ 6017 ];

	UActorComponent_execForceUpdate_Parms ForceUpdate_Parms;
	ForceUpdate_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdate, &ForceUpdate_Parms, NULL );

	pFnForceUpdate->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetComponentRBFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFixed                         ( CPF_Parm )

void UActorComponent::SetComponentRBFixed ( unsigned long bFixed )
{
	static UFunction* pFnSetComponentRBFixed = NULL;

	if ( ! pFnSetComponentRBFixed )
		pFnSetComponentRBFixed = (UFunction*) UObject::GObjObjects()->Data[ 6015 ];

	UActorComponent_execSetComponentRBFixed_Parms SetComponentRBFixed_Parms;
	SetComponentRBFixed_Parms.bFixed = bFixed;

	pFnSetComponentRBFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponentRBFixed, &SetComponentRBFixed_Parms, NULL );

	pFnSetComponentRBFixed->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void UActorComponent::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 6013 ];

	UActorComponent_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.ReachSpec.IsBlockedFor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UReachSpec::IsBlockedFor ( class APawn* P )
{
	static UFunction* pFnIsBlockedFor = NULL;

	if ( ! pFnIsBlockedFor )
		pFnIsBlockedFor = (UFunction*) UObject::GObjObjects()->Data[ 8607 ];

	UReachSpec_execIsBlockedFor_Parms IsBlockedFor_Parms;
	IsBlockedFor_Parms.P = P;

	this->ProcessEvent ( pFnIsBlockedFor, &IsBlockedFor_Parms, NULL );

	return IsBlockedFor_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UReachSpec::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 8605 ];

	UReachSpec_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* UReachSpec::GetEnd ( )
{
	static UFunction* pFnGetEnd = NULL;

	if ( ! pFnGetEnd )
		pFnGetEnd = (UFunction*) UObject::GObjObjects()->Data[ 8603 ];

	UReachSpec_execGetEnd_Parms GetEnd_Parms;

	pFnGetEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnd, &GetEnd_Parms, NULL );

	pFnGetEnd->FunctionFlags |= 0x400;

	return GetEnd_Parms.ReturnValue;
};

// Function Engine.ReachSpec.CostFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int UReachSpec::CostFor ( class APawn* P )
{
	static UFunction* pFnCostFor = NULL;

	if ( ! pFnCostFor )
		pFnCostFor = (UFunction*) UObject::GObjObjects()->Data[ 8600 ];

	UReachSpec_execCostFor_Parms CostFor_Parms;
	CostFor_Parms.P = P;

	pFnCostFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCostFor, &CostFor_Parms, NULL );

	pFnCostFor->FunctionFlags |= 0x400;

	return CostFor_Parms.ReturnValue;
};

// Function Engine.Volume.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 10069 ];

	AVolume_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.Volume.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 10067 ];

	AVolume_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.Volume.ProcessActorSetVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventProcessActorSetVolume ( class AActor* Other )
{
	static UFunction* pFnProcessActorSetVolume = NULL;

	if ( ! pFnProcessActorSetVolume )
		pFnProcessActorSetVolume = (UFunction*) UObject::GObjObjects()->Data[ 10065 ];

	AVolume_eventProcessActorSetVolume_Parms ProcessActorSetVolume_Parms;
	ProcessActorSetVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnProcessActorSetVolume, &ProcessActorSetVolume_Parms, NULL );
};

// Function Engine.Volume.CollisionChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 10064 ];

	AVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Volume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 10062 ];

	AVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Volume.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVolume::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 10047 ];

	AVolume_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Volume.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AVolume::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = (UFunction*) UObject::GObjObjects()->Data[ 10044 ];

	AVolume_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Volume.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 10043 ];

	AVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Volume.Encompasses
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVolume::Encompasses ( class AActor* Other )
{
	static UFunction* pFnEncompasses = NULL;

	if ( ! pFnEncompasses )
		pFnEncompasses = (UFunction*) UObject::GObjObjects()->Data[ 10040 ];

	AVolume_execEncompasses_Parms Encompasses_Parms;
	Encompasses_Parms.Other = Other;

	pFnEncompasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompasses, &Encompasses_Parms, NULL );

	pFnEncompasses->FunctionFlags |= 0x400;

	return Encompasses_Parms.ReturnValue;
};

// Function Engine.MusicVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void AMusicVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 10107 ];

	AMusicVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Camera.StartCameraMove
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// float                          Pct                            ( CPF_Parm )
// struct FRawDistributionVector  newRotAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRawDistributionVector  newLocAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRawDistributionFloat   newFovAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACamera::eventStartCameraMove ( float Duration, float Pct, struct FRawDistributionVector* newRotAdjust, struct FRawDistributionVector* newLocAdjust, struct FRawDistributionFloat* newFovAdjust )
{
	static UFunction* pFnStartCameraMove = NULL;

	if ( ! pFnStartCameraMove )
		pFnStartCameraMove = (UFunction*) UObject::GObjObjects()->Data[ 10287 ];

	ACamera_eventStartCameraMove_Parms StartCameraMove_Parms;
	StartCameraMove_Parms.Duration = Duration;
	StartCameraMove_Parms.Pct = Pct;

	this->ProcessEvent ( pFnStartCameraMove, &StartCameraMove_Parms, NULL );

	if ( newRotAdjust )
		memcpy ( newRotAdjust, &StartCameraMove_Parms.newRotAdjust, 0x1C );

	if ( newLocAdjust )
		memcpy ( newLocAdjust, &StartCameraMove_Parms.newLocAdjust, 0x1C );

	if ( newFovAdjust )
		memcpy ( newFovAdjust, &StartCameraMove_Parms.newFovAdjust, 0x1C );
};

// Function Engine.Camera.StartCameraShake
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )
// unsigned long                  bRotRandom                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLocRandom                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFOVRandom                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::eventStartCameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency, unsigned long bRotRandom, unsigned long bLocRandom, unsigned long bFOVRandom )
{
	static UFunction* pFnStartCameraShake = NULL;

	if ( ! pFnStartCameraShake )
		pFnStartCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 10276 ];

	ACamera_eventStartCameraShake_Parms StartCameraShake_Parms;
	StartCameraShake_Parms.Duration = Duration;
	memcpy ( &StartCameraShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &StartCameraShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &StartCameraShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &StartCameraShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	StartCameraShake_Parms.newFOVAmplitude = newFOVAmplitude;
	StartCameraShake_Parms.newFOVFrequency = newFOVFrequency;
	StartCameraShake_Parms.bRotRandom = bRotRandom;
	StartCameraShake_Parms.bLocRandom = bLocRandom;
	StartCameraShake_Parms.bFOVRandom = bFOVRandom;

	this->ProcessEvent ( pFnStartCameraShake, &StartCameraShake_Parms, NULL );
};

// Function Engine.Camera.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACamera::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 10269 ];

	ACamera_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Camera.AllowPawnRotation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACamera::AllowPawnRotation ( )
{
	static UFunction* pFnAllowPawnRotation = NULL;

	if ( ! pFnAllowPawnRotation )
		pFnAllowPawnRotation = (UFunction*) UObject::GObjObjects()->Data[ 10267 ];

	ACamera_execAllowPawnRotation_Parms AllowPawnRotation_Parms;

	this->ProcessEvent ( pFnAllowPawnRotation, &AllowPawnRotation_Parms, NULL );

	return AllowPawnRotation_Parms.ReturnValue;
};

// Function Engine.Camera.ApplyCameraModifiers
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACamera::eventApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = (UFunction*) UObject::GObjObjects()->Data[ 10263 ];

	ACamera_eventApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.Camera.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                OutViewRotation                ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutDeltaRot                    ( CPF_Parm | CPF_OutParm )

void ACamera::ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 10258 ];

	ACamera_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( OutViewRotation )
		memcpy ( OutViewRotation, &ProcessViewRotation_Parms.OutViewRotation, 0xC );

	if ( OutDeltaRot )
		memcpy ( OutDeltaRot, &ProcessViewRotation_Parms.OutDeltaRot, 0xC );
};

// Function Engine.Camera.SetViewTarget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void ACamera::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10255 ];

	ACamera_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.Camera.UpdateViewTarget
// [0x00C20002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTViewTarget            OutVT                          ( CPF_Parm | CPF_OutParm )

void ACamera::UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT )
{
	static UFunction* pFnUpdateViewTarget = NULL;

	if ( ! pFnUpdateViewTarget )
		pFnUpdateViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10243 ];

	ACamera_execUpdateViewTarget_Parms UpdateViewTarget_Parms;
	UpdateViewTarget_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateViewTarget, &UpdateViewTarget_Parms, NULL );

	if ( OutVT )
		memcpy ( OutVT, &UpdateViewTarget_Parms.OutVT, 0x2C );
};

// Function Engine.Camera.CheckViewTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FTViewTarget            VT                             ( CPF_Parm | CPF_OutParm )

void ACamera::CheckViewTarget ( struct FTViewTarget* VT )
{
	static UFunction* pFnCheckViewTarget = NULL;

	if ( ! pFnCheckViewTarget )
		pFnCheckViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10241 ];

	ACamera_execCheckViewTarget_Parms CheckViewTarget_Parms;

	pFnCheckViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckViewTarget, &CheckViewTarget_Parms, NULL );

	pFnCheckViewTarget->FunctionFlags |= 0x400;

	if ( VT )
		memcpy ( VT, &CheckViewTarget_Parms.VT, 0x2C );
};

// Function Engine.Camera.FillCameraCache
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   NewPOV                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACamera::FillCameraCache ( struct FTPOV* NewPOV )
{
	static UFunction* pFnFillCameraCache = NULL;

	if ( ! pFnFillCameraCache )
		pFnFillCameraCache = (UFunction*) UObject::GObjObjects()->Data[ 10239 ];

	ACamera_execFillCameraCache_Parms FillCameraCache_Parms;

	this->ProcessEvent ( pFnFillCameraCache, &FillCameraCache_Parms, NULL );

	if ( NewPOV )
		memcpy ( NewPOV, &FillCameraCache_Parms.NewPOV, 0x1C );
};

// Function Engine.Camera.BlendViewTargets
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Alpha                          ( CPF_Parm )
// struct FTViewTarget            A                              ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FTViewTarget            B                              ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FTPOV ACamera::BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B )
{
	static UFunction* pFnBlendViewTargets = NULL;

	if ( ! pFnBlendViewTargets )
		pFnBlendViewTargets = (UFunction*) UObject::GObjObjects()->Data[ 10233 ];

	ACamera_execBlendViewTargets_Parms BlendViewTargets_Parms;
	BlendViewTargets_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnBlendViewTargets, &BlendViewTargets_Parms, NULL );

	if ( A )
		memcpy ( A, &BlendViewTargets_Parms.A, 0x2C );

	if ( B )
		memcpy ( B, &BlendViewTargets_Parms.B, 0x2C );

	return BlendViewTargets_Parms.ReturnValue;
};

// Function Engine.Camera.UpdateCamera
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::eventUpdateCamera ( float DeltaTime )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 10228 ];

	ACamera_eventUpdateCamera_Parms UpdateCamera_Parms;
	UpdateCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function Engine.Camera.SetDesiredColorScale
// [0x00020102] 
// Parameters infos:
// struct FVector                 NewColorScale                  ( CPF_Parm )
// float                          InterpTime                     ( CPF_Parm )

void ACamera::SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime )
{
	static UFunction* pFnSetDesiredColorScale = NULL;

	if ( ! pFnSetDesiredColorScale )
		pFnSetDesiredColorScale = (UFunction*) UObject::GObjObjects()->Data[ 10225 ];

	ACamera_execSetDesiredColorScale_Parms SetDesiredColorScale_Parms;
	memcpy ( &SetDesiredColorScale_Parms.NewColorScale, &NewColorScale, 0xC );
	SetDesiredColorScale_Parms.InterpTime = InterpTime;

	this->ProcessEvent ( pFnSetDesiredColorScale, &SetDesiredColorScale_Parms, NULL );
};

// Function Engine.Camera.GetCameraViewPoint
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 OutCamLoc                      ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutCamRot                      ( CPF_Parm | CPF_OutParm )

void ACamera::GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot )
{
	static UFunction* pFnGetCameraViewPoint = NULL;

	if ( ! pFnGetCameraViewPoint )
		pFnGetCameraViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 8503 ];

	ACamera_execGetCameraViewPoint_Parms GetCameraViewPoint_Parms;

	this->ProcessEvent ( pFnGetCameraViewPoint, &GetCameraViewPoint_Parms, NULL );

	if ( OutCamLoc )
		memcpy ( OutCamLoc, &GetCameraViewPoint_Parms.OutCamLoc, 0xC );

	if ( OutCamRot )
		memcpy ( OutCamRot, &GetCameraViewPoint_Parms.OutCamRot, 0xC );
};

// Function Engine.Camera.eventSetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ACamera::eventeventSetFOV ( float NewFOV )
{
	static UFunction* pFneventSetFOV = NULL;

	if ( ! pFneventSetFOV )
		pFneventSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 10221 ];

	ACamera_eventeventSetFOV_Parms eventSetFOV_Parms;
	eventSetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFneventSetFOV, &eventSetFOV_Parms, NULL );
};

// Function Engine.Camera.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ACamera::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 10219 ];

	ACamera_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.Camera.GetFOVAngle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ACamera::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 10217 ];

	ACamera_execGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.Camera.SetFovInterpolation
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          fNewFOV                        ( CPF_Parm )
// float                          fInterpolPerSec                ( CPF_Parm )
// float                          fNewAddDistance                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bJustChangeAddDist             ( CPF_OptionalParm | CPF_Parm )

void ACamera::SetFovInterpolation ( float fNewFOV, float fInterpolPerSec, float fNewAddDistance, unsigned long bJustChangeAddDist )
{
	static UFunction* pFnSetFovInterpolation = NULL;

	if ( ! pFnSetFovInterpolation )
		pFnSetFovInterpolation = (UFunction*) UObject::GObjObjects()->Data[ 10212 ];

	ACamera_execSetFovInterpolation_Parms SetFovInterpolation_Parms;
	SetFovInterpolation_Parms.fNewFOV = fNewFOV;
	SetFovInterpolation_Parms.fInterpolPerSec = fInterpolPerSec;
	SetFovInterpolation_Parms.fNewAddDistance = fNewAddDistance;
	SetFovInterpolation_Parms.bJustChangeAddDist = bJustChangeAddDist;

	pFnSetFovInterpolation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFovInterpolation, &SetFovInterpolation_Parms, NULL );

	pFnSetFovInterpolation->FunctionFlags |= 0x400;
};

// Function Engine.Camera.InitializeFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ACamera::InitializeFor ( class APlayerController* PC )
{
	static UFunction* pFnInitializeFor = NULL;

	if ( ! pFnInitializeFor )
		pFnInitializeFor = (UFunction*) UObject::GObjObjects()->Data[ 10210 ];

	ACamera_execInitializeFor_Parms InitializeFor_Parms;
	InitializeFor_Parms.PC = PC;

	this->ProcessEvent ( pFnInitializeFor, &InitializeFor_Parms, NULL );
};

// Function Engine.AnimatedCamera.StopCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         AnimInst                       ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void AAnimatedCamera::StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate )
{
	static UFunction* pFnStopCameraAnim = NULL;

	if ( ! pFnStopCameraAnim )
		pFnStopCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 10342 ];

	AAnimatedCamera_execStopCameraAnim_Parms StopCameraAnim_Parms;
	StopCameraAnim_Parms.AnimInst = AnimInst;
	StopCameraAnim_Parms.bImmediate = bImmediate;

	pFnStopCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCameraAnim, &StopCameraAnim_Parms, NULL );

	pFnStopCameraAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimatedCamera.StopAllCameraAnimsByType
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void AAnimatedCamera::StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnimsByType = NULL;

	if ( ! pFnStopAllCameraAnimsByType )
		pFnStopAllCameraAnimsByType = (UFunction*) UObject::GObjObjects()->Data[ 10339 ];

	AAnimatedCamera_execStopAllCameraAnimsByType_Parms StopAllCameraAnimsByType_Parms;
	StopAllCameraAnimsByType_Parms.Anim = Anim;
	StopAllCameraAnimsByType_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnimsByType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnimsByType, &StopAllCameraAnimsByType_Parms, NULL );

	pFnStopAllCameraAnimsByType->FunctionFlags |= 0x400;
};

// Function Engine.AnimatedCamera.PlayCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraAnim*             Anim                           ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSingleInstance                ( CPF_OptionalParm | CPF_Parm )

class UCameraAnimInst* AAnimatedCamera::PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 10328 ];

	AAnimatedCamera_execPlayCameraAnim_Parms PlayCameraAnim_Parms;
	PlayCameraAnim_Parms.Anim = Anim;
	PlayCameraAnim_Parms.Rate = Rate;
	PlayCameraAnim_Parms.Scale = Scale;
	PlayCameraAnim_Parms.BlendInTime = BlendInTime;
	PlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCameraAnim_Parms.bLoop = bLoop;
	PlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	PlayCameraAnim_Parms.Duration = Duration;
	PlayCameraAnim_Parms.bSingleInstance = bSingleInstance;

	pFnPlayCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );

	pFnPlayCameraAnim->FunctionFlags |= 0x400;

	return PlayCameraAnim_Parms.ReturnValue;
};

// Function Engine.AnimatedCamera.ApplyCameraModifiersNative
// [0x00440501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void AAnimatedCamera::ApplyCameraModifiersNative ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiersNative = NULL;

	if ( ! pFnApplyCameraModifiersNative )
		pFnApplyCameraModifiersNative = (UFunction*) UObject::GObjObjects()->Data[ 10325 ];

	AAnimatedCamera_execApplyCameraModifiersNative_Parms ApplyCameraModifiersNative_Parms;
	ApplyCameraModifiersNative_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiersNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiersNative, &ApplyCameraModifiersNative_Parms, NULL );

	pFnApplyCameraModifiersNative->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiersNative_Parms.OutPOV, 0x1C );
};

// Function Engine.AnimatedCamera.ApplyCameraModifiers
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void AAnimatedCamera::eventApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = (UFunction*) UObject::GObjObjects()->Data[ 10322 ];

	AAnimatedCamera_eventApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.AnimatedCamera.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAnimatedCamera::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 10321 ];

	AAnimatedCamera_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.AnimatedCamera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAnimatedCamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 10319 ];

	AAnimatedCamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AnimatedCamera.IsPlayingAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAnimatedCamera::IsPlayingAnim ( )
{
	static UFunction* pFnIsPlayingAnim = NULL;

	if ( ! pFnIsPlayingAnim )
		pFnIsPlayingAnim = (UFunction*) UObject::GObjObjects()->Data[ 10317 ];

	AAnimatedCamera_execIsPlayingAnim_Parms IsPlayingAnim_Parms;

	pFnIsPlayingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingAnim, &IsPlayingAnim_Parms, NULL );

	pFnIsPlayingAnim->FunctionFlags |= 0x400;

	return IsPlayingAnim_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator UPrimitiveComponent::GetRotation ( )
{
	static UFunction* pFnGetRotation = NULL;

	if ( ! pFnGetRotation )
		pFnGetRotation = (UFunction*) UObject::GObjObjects()->Data[ 6318 ];

	UPrimitiveComponent_execGetRotation_Parms GetRotation_Parms;

	pFnGetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotation, &GetRotation_Parms, NULL );

	pFnGetRotation->FunctionFlags |= 0x400;

	return GetRotation_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetPosition
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UPrimitiveComponent::GetPosition ( )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 6315 ];

	UPrimitiveComponent_execGetPosition_Parms GetPosition_Parms;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetOutlineBloom
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bOutLineFlag                   ( CPF_Parm )
// struct FColor                  InColor                        ( CPF_Parm )
// int                            InAlpha                        ( CPF_Parm )

void UPrimitiveComponent::SetOutlineBloom ( unsigned long bOutLineFlag, struct FColor InColor, int InAlpha )
{
	static UFunction* pFnSetOutlineBloom = NULL;

	if ( ! pFnSetOutlineBloom )
		pFnSetOutlineBloom = (UFunction*) UObject::GObjObjects()->Data[ 6311 ];

	UPrimitiveComponent_execSetOutlineBloom_Parms SetOutlineBloom_Parms;
	SetOutlineBloom_Parms.bOutLineFlag = bOutLineFlag;
	memcpy ( &SetOutlineBloom_Parms.InColor, &InColor, 0x4 );
	SetOutlineBloom_Parms.InAlpha = InAlpha;

	pFnSetOutlineBloom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOutlineBloom, &SetOutlineBloom_Parms, NULL );

	pFnSetOutlineBloom->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetFadingAlpha
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fAlpha                         ( CPF_Parm )

void UPrimitiveComponent::SetFadingAlpha ( float fAlpha )
{
	static UFunction* pFnSetFadingAlpha = NULL;

	if ( ! pFnSetFadingAlpha )
		pFnSetFadingAlpha = (UFunction*) UObject::GObjObjects()->Data[ 6309 ];

	UPrimitiveComponent_execSetFadingAlpha_Parms SetFadingAlpha_Parms;
	SetFadingAlpha_Parms.fAlpha = fAlpha;

	pFnSetFadingAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFadingAlpha, &SetFadingAlpha_Parms, NULL );

	pFnSetFadingAlpha->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetFadingState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            iType                          ( CPF_Parm )

void UPrimitiveComponent::SetFadingState ( int iType )
{
	static UFunction* pFnSetFadingState = NULL;

	if ( ! pFnSetFadingState )
		pFnSetFadingState = (UFunction*) UObject::GObjObjects()->Data[ 6307 ];

	UPrimitiveComponent_execSetFadingState_Parms SetFadingState_Parms;
	SetFadingState_Parms.iType = iType;

	pFnSetFadingState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFadingState, &SetFadingState_Parms, NULL );

	pFnSetFadingState->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetAbsolute
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewAbsoluteTranslation         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteRotation            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteScale               ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale )
{
	static UFunction* pFnSetAbsolute = NULL;

	if ( ! pFnSetAbsolute )
		pFnSetAbsolute = (UFunction*) UObject::GObjObjects()->Data[ 6303 ];

	UPrimitiveComponent_execSetAbsolute_Parms SetAbsolute_Parms;
	SetAbsolute_Parms.NewAbsoluteTranslation = NewAbsoluteTranslation;
	SetAbsolute_Parms.NewAbsoluteRotation = NewAbsoluteRotation;
	SetAbsolute_Parms.NewAbsoluteScale = NewAbsoluteScale;

	pFnSetAbsolute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAbsolute, &SetAbsolute_Parms, NULL );

	pFnSetAbsolute->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale3D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void UPrimitiveComponent::SetScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetScale3D = NULL;

	if ( ! pFnSetScale3D )
		pFnSetScale3D = (UFunction*) UObject::GObjObjects()->Data[ 6301 ];

	UPrimitiveComponent_execSetScale3D_Parms SetScale3D_Parms;
	memcpy ( &SetScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale3D, &SetScale3D_Parms, NULL );

	pFnSetScale3D->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void UPrimitiveComponent::SetScale ( float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 6299 ];

	UPrimitiveComponent_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void UPrimitiveComponent::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 6297 ];

	UPrimitiveComponent_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPrimitiveComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 6295 ];

	UPrimitiveComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetActorCollision
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewCollideActors               ( CPF_Parm )
// unsigned long                  NewBlockActors                 ( CPF_Parm )
// unsigned long                  NewAlwaysCheckCollision        ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision )
{
	static UFunction* pFnSetActorCollision = NULL;

	if ( ! pFnSetActorCollision )
		pFnSetActorCollision = (UFunction*) UObject::GObjObjects()->Data[ 6291 ];

	UPrimitiveComponent_execSetActorCollision_Parms SetActorCollision_Parms;
	SetActorCollision_Parms.NewCollideActors = NewCollideActors;
	SetActorCollision_Parms.NewBlockActors = NewBlockActors;
	SetActorCollision_Parms.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	pFnSetActorCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorCollision, &SetActorCollision_Parms, NULL );

	pFnSetActorCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTraceBlocking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewBlockZeroExtent             ( CPF_Parm )
// unsigned long                  NewBlockNonZeroExtent          ( CPF_Parm )

void UPrimitiveComponent::SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent )
{
	static UFunction* pFnSetTraceBlocking = NULL;

	if ( ! pFnSetTraceBlocking )
		pFnSetTraceBlocking = (UFunction*) UObject::GObjObjects()->Data[ 6288 ];

	UPrimitiveComponent_execSetTraceBlocking_Parms SetTraceBlocking_Parms;
	SetTraceBlocking_Parms.NewBlockZeroExtent = NewBlockZeroExtent;
	SetTraceBlocking_Parms.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	pFnSetTraceBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTraceBlocking, &SetTraceBlocking_Parms, NULL );

	pFnSetTraceBlocking->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewUseViewOwnerDepthPriorityGroup ( CPF_Parm )
// unsigned char                  NewViewOwnerDepthPriorityGroup ( CPF_Parm )

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup )
{
	static UFunction* pFnSetViewOwnerDepthPriorityGroup = NULL;

	if ( ! pFnSetViewOwnerDepthPriorityGroup )
		pFnSetViewOwnerDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 6285 ];

	UPrimitiveComponent_execSetViewOwnerDepthPriorityGroup_Parms SetViewOwnerDepthPriorityGroup_Parms;
	SetViewOwnerDepthPriorityGroup_Parms.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	SetViewOwnerDepthPriorityGroup_Parms.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewOwnerDepthPriorityGroup, &SetViewOwnerDepthPriorityGroup_Parms, NULL );

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewDepthPriorityGroup          ( CPF_Parm )

void UPrimitiveComponent::SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup )
{
	static UFunction* pFnSetDepthPriorityGroup = NULL;

	if ( ! pFnSetDepthPriorityGroup )
		pFnSetDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 6282 ];

	UPrimitiveComponent_execSetDepthPriorityGroup_Parms SetDepthPriorityGroup_Parms;
	SetDepthPriorityGroup_Parms.NewDepthPriorityGroup = NewDepthPriorityGroup;

	pFnSetDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Parms, NULL );

	pFnSetDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightingChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLightingChannelContainer NewLightingChannels            ( CPF_Parm )

void UPrimitiveComponent::SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels )
{
	static UFunction* pFnSetLightingChannels = NULL;

	if ( ! pFnSetLightingChannels )
		pFnSetLightingChannels = (UFunction*) UObject::GObjObjects()->Data[ 6280 ];

	UPrimitiveComponent_execSetLightingChannels_Parms SetLightingChannels_Parms;
	memcpy ( &SetLightingChannels_Parms.NewLightingChannels, &NewLightingChannels, 0x8 );

	pFnSetLightingChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightingChannels, &SetLightingChannels_Parms, NULL );

	pFnSetLightingChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetCullDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewCullDistance                ( CPF_Parm )

void UPrimitiveComponent::SetCullDistance ( float NewCullDistance )
{
	static UFunction* pFnSetCullDistance = NULL;

	if ( ! pFnSetCullDistance )
		pFnSetCullDistance = (UFunction*) UObject::GObjObjects()->Data[ 6241 ];

	UPrimitiveComponent_execSetCullDistance_Parms SetCullDistance_Parms;
	SetCullDistance_Parms.NewCullDistance = NewCullDistance;

	pFnSetCullDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCullDistance, &SetCullDistance_Parms, NULL );

	pFnSetCullDistance->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightEnvironment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULightEnvironmentComponent* NewLightEnvironment            ( CPF_Parm )

void UPrimitiveComponent::SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment )
{
	static UFunction* pFnSetLightEnvironment = NULL;

	if ( ! pFnSetLightEnvironment )
		pFnSetLightEnvironment = (UFunction*) UObject::GObjObjects()->Data[ 6239 ];

	UPrimitiveComponent_execSetLightEnvironment_Parms SetLightEnvironment_Parms;
	SetLightEnvironment_Parms.NewLightEnvironment = NewLightEnvironment;

	pFnSetLightEnvironment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightEnvironment, &SetLightEnvironment_Parms, NULL );

	pFnSetLightEnvironment->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetShadowParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     NewShadowParent                ( CPF_Parm )

void UPrimitiveComponent::SetShadowParent ( class UPrimitiveComponent* NewShadowParent )
{
	static UFunction* pFnSetShadowParent = NULL;

	if ( ! pFnSetShadowParent )
		pFnSetShadowParent = (UFunction*) UObject::GObjObjects()->Data[ 6237 ];

	UPrimitiveComponent_execSetShadowParent_Parms SetShadowParent_Parms;
	SetShadowParent_Parms.NewShadowParent = NewShadowParent;

	pFnSetShadowParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParent, &SetShadowParent_Parms, NULL );

	pFnSetShadowParent->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIgnoreOwnerHidden          ( CPF_Parm )

void UPrimitiveComponent::SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden )
{
	static UFunction* pFnSetIgnoreOwnerHidden = NULL;

	if ( ! pFnSetIgnoreOwnerHidden )
		pFnSetIgnoreOwnerHidden = (UFunction*) UObject::GObjObjects()->Data[ 6235 ];

	UPrimitiveComponent_execSetIgnoreOwnerHidden_Parms SetIgnoreOwnerHidden_Parms;
	SetIgnoreOwnerHidden_Parms.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	pFnSetIgnoreOwnerHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIgnoreOwnerHidden, &SetIgnoreOwnerHidden_Parms, NULL );

	pFnSetIgnoreOwnerHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void UPrimitiveComponent::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 6233 ];

	UPrimitiveComponent_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOwnerNoSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOwnerNoSee                 ( CPF_Parm )

void UPrimitiveComponent::SetOwnerNoSee ( unsigned long bNewOwnerNoSee )
{
	static UFunction* pFnSetOwnerNoSee = NULL;

	if ( ! pFnSetOwnerNoSee )
		pFnSetOwnerNoSee = (UFunction*) UObject::GObjObjects()->Data[ 6231 ];

	UPrimitiveComponent_execSetOwnerNoSee_Parms SetOwnerNoSee_Parms;
	SetOwnerNoSee_Parms.bNewOwnerNoSee = bNewOwnerNoSee;

	pFnSetOwnerNoSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerNoSee, &SetOwnerNoSee_Parms, NULL );

	pFnSetOwnerNoSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewHidden                      ( CPF_Parm )

void UPrimitiveComponent::SetHidden ( unsigned long NewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 6229 ];

	UPrimitiveComponent_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.NewHidden = NewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  InDomGroup                     ( CPF_Parm )

void UPrimitiveComponent::SetRBDominanceGroup ( unsigned char InDomGroup )
{
	static UFunction* pFnSetRBDominanceGroup = NULL;

	if ( ! pFnSetRBDominanceGroup )
		pFnSetRBDominanceGroup = (UFunction*) UObject::GObjObjects()->Data[ 6227 ];

	UPrimitiveComponent_execSetRBDominanceGroup_Parms SetRBDominanceGroup_Parms;
	SetRBDominanceGroup_Parms.InDomGroup = InDomGroup;

	pFnSetRBDominanceGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBDominanceGroup, &SetRBDominanceGroup_Parms, NULL );

	pFnSetRBDominanceGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetRootBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance ( )
{
	static UFunction* pFnGetRootBodyInstance = NULL;

	if ( ! pFnGetRootBodyInstance )
		pFnGetRootBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 6225 ];

	UPrimitiveComponent_execGetRootBodyInstance_Parms GetRootBodyInstance_Parms;

	pFnGetRootBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRootBodyInstance, &GetRootBodyInstance_Parms, NULL );

	pFnGetRootBodyInstance->FunctionFlags |= 0x400;

	return GetRootBodyInstance_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void UPrimitiveComponent::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 6223 ];

	UPrimitiveComponent_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.InitRBPhys
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UPrimitiveComponent::InitRBPhys ( )
{
	static UFunction* pFnInitRBPhys = NULL;

	if ( ! pFnInitRBPhys )
		pFnInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 6222 ];

	UPrimitiveComponent_execInitRBPhys_Parms InitRBPhys_Parms;

	pFnInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRBPhys, &InitRBPhys_Parms, NULL );

	pFnInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewNotifyRigidBodyCollision   ( CPF_Parm )

void UPrimitiveComponent::SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision )
{
	static UFunction* pFnSetNotifyRigidBodyCollision = NULL;

	if ( ! pFnSetNotifyRigidBodyCollision )
		pFnSetNotifyRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 6220 ];

	UPrimitiveComponent_execSetNotifyRigidBodyCollision_Parms SetNotifyRigidBodyCollision_Parms;
	SetNotifyRigidBodyCollision_Parms.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNotifyRigidBodyCollision, &SetNotifyRigidBodyCollision_Parms, NULL );

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )

void UPrimitiveComponent::SetRBChannel ( unsigned char Channel )
{
	static UFunction* pFnSetRBChannel = NULL;

	if ( ! pFnSetRBChannel )
		pFnSetRBChannel = (UFunction*) UObject::GObjObjects()->Data[ 6218 ];

	UPrimitiveComponent_execSetRBChannel_Parms SetRBChannel_Parms;
	SetRBChannel_Parms.Channel = Channel;

	pFnSetRBChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBChannel, &SetRBChannel_Parms, NULL );

	pFnSetRBChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )
// unsigned long                  bNewCollides                   ( CPF_Parm )

void UPrimitiveComponent::SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides )
{
	static UFunction* pFnSetRBCollidesWithChannel = NULL;

	if ( ! pFnSetRBCollidesWithChannel )
		pFnSetRBCollidesWithChannel = (UFunction*) UObject::GObjObjects()->Data[ 6215 ];

	UPrimitiveComponent_execSetRBCollidesWithChannel_Parms SetRBCollidesWithChannel_Parms;
	SetRBCollidesWithChannel_Parms.Channel = Channel;
	SetRBCollidesWithChannel_Parms.bNewCollides = bNewCollides;

	pFnSetRBCollidesWithChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollidesWithChannel, &SetRBCollidesWithChannel_Parms, NULL );

	pFnSetRBCollidesWithChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void UPrimitiveComponent::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 5966 ];

	UPrimitiveComponent_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool UPrimitiveComponent::RigidBodyIsAwake ( struct FName BoneName )
{
	static UFunction* pFnRigidBodyIsAwake = NULL;

	if ( ! pFnRigidBodyIsAwake )
		pFnRigidBodyIsAwake = (UFunction*) UObject::GObjObjects()->Data[ 6211 ];

	UPrimitiveComponent_execRigidBodyIsAwake_Parms RigidBodyIsAwake_Parms;
	memcpy ( &RigidBodyIsAwake_Parms.BoneName, &BoneName, 0x8 );

	pFnRigidBodyIsAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRigidBodyIsAwake, &RigidBodyIsAwake_Parms, NULL );

	pFnRigidBodyIsAwake->FunctionFlags |= 0x400;

	return RigidBodyIsAwake_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::PutRigidBodyToSleep ( struct FName BoneName )
{
	static UFunction* pFnPutRigidBodyToSleep = NULL;

	if ( ! pFnPutRigidBodyToSleep )
		pFnPutRigidBodyToSleep = (UFunction*) UObject::GObjObjects()->Data[ 6209 ];

	UPrimitiveComponent_execPutRigidBodyToSleep_Parms PutRigidBodyToSleep_Parms;
	memcpy ( &PutRigidBodyToSleep_Parms.BoneName, &BoneName, 0x8 );

	pFnPutRigidBodyToSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPutRigidBodyToSleep, &PutRigidBodyToSleep_Parms, NULL );

	pFnPutRigidBodyToSleep->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.WakeRigidBody
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::WakeRigidBody ( struct FName BoneName )
{
	static UFunction* pFnWakeRigidBody = NULL;

	if ( ! pFnWakeRigidBody )
		pFnWakeRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 6207 ];

	UPrimitiveComponent_execWakeRigidBody_Parms WakeRigidBody_Parms;
	memcpy ( &WakeRigidBody_Parms.BoneName, &BoneName, 0x8 );

	pFnWakeRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeRigidBody, &WakeRigidBody_Parms, NULL );

	pFnWakeRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRot                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBRotation ( struct FRotator NewRot, struct FName BoneName )
{
	static UFunction* pFnSetRBRotation = NULL;

	if ( ! pFnSetRBRotation )
		pFnSetRBRotation = (UFunction*) UObject::GObjObjects()->Data[ 6204 ];

	UPrimitiveComponent_execSetRBRotation_Parms SetRBRotation_Parms;
	memcpy ( &SetRBRotation_Parms.NewRot, &NewRot, 0xC );
	memcpy ( &SetRBRotation_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBRotation, &SetRBRotation_Parms, NULL );

	pFnSetRBRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewPos                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBPosition ( struct FVector NewPos, struct FName BoneName )
{
	static UFunction* pFnSetRBPosition = NULL;

	if ( ! pFnSetRBPosition )
		pFnSetRBPosition = (UFunction*) UObject::GObjObjects()->Data[ 6201 ];

	UPrimitiveComponent_execSetRBPosition_Parms SetRBPosition_Parms;
	memcpy ( &SetRBPosition_Parms.NewPos, &NewPos, 0xC );
	memcpy ( &SetRBPosition_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBPosition, &SetRBPosition_Parms, NULL );

	pFnSetRBPosition->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAngVel                      ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBAngularVelocity = NULL;

	if ( ! pFnSetRBAngularVelocity )
		pFnSetRBAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6198 ];

	UPrimitiveComponent_execSetRBAngularVelocity_Parms SetRBAngularVelocity_Parms;
	memcpy ( &SetRBAngularVelocity_Parms.NewAngVel, &NewAngVel, 0xC );
	SetRBAngularVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBAngularVelocity, &SetRBAngularVelocity_Parms, NULL );

	pFnSetRBAngularVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewVel                         ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBLinearVelocity = NULL;

	if ( ! pFnSetRBLinearVelocity )
		pFnSetRBLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6195 ];

	UPrimitiveComponent_execSetRBLinearVelocity_Parms SetRBLinearVelocity_Parms;
	memcpy ( &SetRBLinearVelocity_Parms.NewVel, &NewVel, 0xC );
	SetRBLinearVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBLinearVelocity, &SetRBLinearVelocity_Parms, NULL );

	pFnSetRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddTorque
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Torque                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddTorque ( struct FVector Torque, struct FName BoneName )
{
	static UFunction* pFnAddTorque = NULL;

	if ( ! pFnAddTorque )
		pFnAddTorque = (UFunction*) UObject::GObjObjects()->Data[ 6192 ];

	UPrimitiveComponent_execAddTorque_Parms AddTorque_Parms;
	memcpy ( &AddTorque_Parms.Torque, &Torque, 0xC );
	memcpy ( &AddTorque_Parms.BoneName, &BoneName, 0x8 );

	pFnAddTorque->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTorque, &AddTorque_Parms, NULL );

	pFnAddTorque->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialForce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )

void UPrimitiveComponent::AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff )
{
	static UFunction* pFnAddRadialForce = NULL;

	if ( ! pFnAddRadialForce )
		pFnAddRadialForce = (UFunction*) UObject::GObjObjects()->Data[ 6187 ];

	UPrimitiveComponent_execAddRadialForce_Parms AddRadialForce_Parms;
	memcpy ( &AddRadialForce_Parms.Origin, &Origin, 0xC );
	AddRadialForce_Parms.Radius = Radius;
	AddRadialForce_Parms.Strength = Strength;
	AddRadialForce_Parms.Falloff = Falloff;

	pFnAddRadialForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialForce, &AddRadialForce_Parms, NULL );

	pFnAddRadialForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddForce
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = (UFunction*) UObject::GObjObjects()->Data[ 6183 ];

	UPrimitiveComponent_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );
	memcpy ( &AddForce_Parms.Position, &Position, 0xC );
	memcpy ( &AddForce_Parms.BoneName, &BoneName, 0x8 );

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialImpulse
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange )
{
	static UFunction* pFnAddRadialImpulse = NULL;

	if ( ! pFnAddRadialImpulse )
		pFnAddRadialImpulse = (UFunction*) UObject::GObjObjects()->Data[ 6177 ];

	UPrimitiveComponent_execAddRadialImpulse_Parms AddRadialImpulse_Parms;
	memcpy ( &AddRadialImpulse_Parms.Origin, &Origin, 0xC );
	AddRadialImpulse_Parms.Radius = Radius;
	AddRadialImpulse_Parms.Strength = Strength;
	AddRadialImpulse_Parms.Falloff = Falloff;
	AddRadialImpulse_Parms.bVelChange = bVelChange;

	pFnAddRadialImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialImpulse, &AddRadialImpulse_Parms, NULL );

	pFnAddRadialImpulse->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddImpulse
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = (UFunction*) UObject::GObjObjects()->Data[ 6172 ];

	UPrimitiveComponent_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &AddImpulse_Parms.Position, &Position, 0xC );
	memcpy ( &AddImpulse_Parms.BoneName, &BoneName, 0x8 );
	AddImpulse_Parms.bVelChange = bVelChange;

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.OcclusionChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowOccluded                   ( CPF_Parm )

void UAudioComponent::eventOcclusionChanged ( unsigned long bNowOccluded )
{
	static UFunction* pFnOcclusionChanged = NULL;

	if ( ! pFnOcclusionChanged )
		pFnOcclusionChanged = (UFunction*) UObject::GObjObjects()->Data[ 9580 ];

	UAudioComponent_eventOcclusionChanged_Parms OcclusionChanged_Parms;
	OcclusionChanged_Parms.bNowOccluded = bNowOccluded;

	this->ProcessEvent ( pFnOcclusionChanged, &OcclusionChanged_Parms, NULL );
};

// Function Engine.AudioComponent.OnAudioFinished
// [0x00120000] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm )

void UAudioComponent::OnAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnOnAudioFinished = NULL;

	if ( ! pFnOnAudioFinished )
		pFnOnAudioFinished = (UFunction*) UObject::GObjObjects()->Data[ 9578 ];

	UAudioComponent_execOnAudioFinished_Parms OnAudioFinished_Parms;
	OnAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnOnAudioFinished, &OnAudioFinished_Parms, NULL );
};

// Function Engine.AudioComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 8542 ];

	UAudioComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetWaveParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// class USoundNodeWave*          InWave                         ( CPF_Parm )

void UAudioComponent::SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave )
{
	static UFunction* pFnSetWaveParameter = NULL;

	if ( ! pFnSetWaveParameter )
		pFnSetWaveParameter = (UFunction*) UObject::GObjObjects()->Data[ 9575 ];

	UAudioComponent_execSetWaveParameter_Parms SetWaveParameter_Parms;
	memcpy ( &SetWaveParameter_Parms.InName, &InName, 0x8 );
	SetWaveParameter_Parms.InWave = InWave;

	pFnSetWaveParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWaveParameter, &SetWaveParameter_Parms, NULL );

	pFnSetWaveParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// float                          InFloat                        ( CPF_Parm )

void UAudioComponent::SetFloatParameter ( struct FName InName, float InFloat )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 9572 ];

	UAudioComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.InName, &InName, 0x8 );
	SetFloatParameter_Parms.InFloat = InFloat;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.AdjustVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void UAudioComponent::AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnAdjustVolume = NULL;

	if ( ! pFnAdjustVolume )
		pFnAdjustVolume = (UFunction*) UObject::GObjObjects()->Data[ 9569 ];

	UAudioComponent_execAdjustVolume_Parms AdjustVolume_Parms;
	AdjustVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	AdjustVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	pFnAdjustVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustVolume, &AdjustVolume_Parms, NULL );

	pFnAdjustVolume->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeOutDuration                ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeOut ( float FadeOutDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = (UFunction*) UObject::GObjObjects()->Data[ 8531 ];

	UAudioComponent_execFadeOut_Parms FadeOut_Parms;
	FadeOut_Parms.FadeOutDuration = FadeOutDuration;
	FadeOut_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );

	pFnFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeInDuration                 ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeIn ( float FadeInDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeIn = NULL;

	if ( ! pFnFadeIn )
		pFnFadeIn = (UFunction*) UObject::GObjObjects()->Data[ 8539 ];

	UAudioComponent_execFadeIn_Parms FadeIn_Parms;
	FadeIn_Parms.FadeInDuration = FadeInDuration;
	FadeIn_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeIn, &FadeIn_Parms, NULL );

	pFnFadeIn->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.IsPlaying
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::IsPlaying ( )
{
	static UFunction* pFnIsPlaying = NULL;

	if ( ! pFnIsPlaying )
		pFnIsPlaying = (UFunction*) UObject::GObjObjects()->Data[ 9563 ];

	UAudioComponent_execIsPlaying_Parms IsPlaying_Parms;

	pFnIsPlaying->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlaying, &IsPlaying_Parms, NULL );

	pFnIsPlaying->FunctionFlags |= 0x400;

	return IsPlaying_Parms.ReturnValue;
};

// Function Engine.AudioComponent.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 9562 ];

	UAudioComponent_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.Play
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 8529 ];

	UAudioComponent_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.NavigationPoint.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString ANavigationPoint::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 11503 ];

	ANavigationPoint_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANavigationPoint::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 11502 ];

	ANavigationPoint_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.NavigationPoint.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANavigationPoint::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 11500 ];

	ANavigationPoint_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavigationPoint.IsOnDifferentNetwork
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ANavigationPoint::IsOnDifferentNetwork ( class ANavigationPoint* Nav )
{
	static UFunction* pFnIsOnDifferentNetwork = NULL;

	if ( ! pFnIsOnDifferentNetwork )
		pFnIsOnDifferentNetwork = (UFunction*) UObject::GObjObjects()->Data[ 11497 ];

	ANavigationPoint_execIsOnDifferentNetwork_Parms IsOnDifferentNetwork_Parms;
	IsOnDifferentNetwork_Parms.Nav = Nav;

	pFnIsOnDifferentNetwork->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnDifferentNetwork, &IsOnDifferentNetwork_Parms, NULL );

	pFnIsOnDifferentNetwork->FunctionFlags |= 0x400;

	return IsOnDifferentNetwork_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetAllNavInRadius
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bSkipBlocked                   ( CPF_OptionalParm | CPF_Parm )
// int                            inNetworkID                    ( CPF_OptionalParm | CPF_Parm )
// struct FCylinder               MinSize                        ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > out_NavList                    ( CPF_Parm | CPF_OutParm )

bool ANavigationPoint::GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList )
{
	static UFunction* pFnGetAllNavInRadius = NULL;

	if ( ! pFnGetAllNavInRadius )
		pFnGetAllNavInRadius = (UFunction*) UObject::GObjObjects()->Data[ 11487 ];

	ANavigationPoint_execGetAllNavInRadius_Parms GetAllNavInRadius_Parms;
	GetAllNavInRadius_Parms.ChkActor = ChkActor;
	memcpy ( &GetAllNavInRadius_Parms.ChkPoint, &ChkPoint, 0xC );
	GetAllNavInRadius_Parms.Radius = Radius;
	GetAllNavInRadius_Parms.bSkipBlocked = bSkipBlocked;
	GetAllNavInRadius_Parms.inNetworkID = inNetworkID;
	memcpy ( &GetAllNavInRadius_Parms.MinSize, &MinSize, 0x8 );

	pFnGetAllNavInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllNavInRadius, &GetAllNavInRadius_Parms, NULL );

	pFnGetAllNavInRadius->FunctionFlags |= 0x400;

	if ( out_NavList )
		memcpy ( out_NavList, &GetAllNavInRadius_Parms.out_NavList, 0xC );

	return GetAllNavInRadius_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToPoint
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList )
{
	static UFunction* pFnGetNearestNavToPoint = NULL;

	if ( ! pFnGetNearestNavToPoint )
		pFnGetNearestNavToPoint = (UFunction*) UObject::GObjObjects()->Data[ 11476 ];

	ANavigationPoint_execGetNearestNavToPoint_Parms GetNearestNavToPoint_Parms;
	GetNearestNavToPoint_Parms.ChkActor = ChkActor;
	memcpy ( &GetNearestNavToPoint_Parms.ChkPoint, &ChkPoint, 0xC );
	GetNearestNavToPoint_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToPoint_Parms.ExcludeList, &ExcludeList, 0xC );

	this->ProcessEvent ( pFnGetNearestNavToPoint, &GetNearestNavToPoint_Parms, NULL );

	return GetNearestNavToPoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToActor
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm )
// float                          MinDist                        ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ANavigationPoint::GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist )
{
	static UFunction* pFnGetNearestNavToActor = NULL;

	if ( ! pFnGetNearestNavToActor )
		pFnGetNearestNavToActor = (UFunction*) UObject::GObjObjects()->Data[ 11465 ];

	ANavigationPoint_execGetNearestNavToActor_Parms GetNearestNavToActor_Parms;
	GetNearestNavToActor_Parms.ChkActor = ChkActor;
	GetNearestNavToActor_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToActor_Parms.ExcludeList, &ExcludeList, 0xC );
	GetNearestNavToActor_Parms.MinDist = MinDist;

	this->ProcessEvent ( pFnGetNearestNavToActor, &GetNearestNavToActor_Parms, NULL );

	return GetNearestNavToActor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 11462 ];

	ANavigationPoint_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 11459 ];

	ANavigationPoint_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.DetourWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ANavigationPoint::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 11455 ];

	ANavigationPoint_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.Accept
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ANavigationPoint::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 11450 ];

	ANavigationPoint_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SpecialCost
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Seeker                         ( CPF_Parm )
// class UReachSpec*              Path                           ( CPF_Parm )

int ANavigationPoint::eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path )
{
	static UFunction* pFnSpecialCost = NULL;

	if ( ! pFnSpecialCost )
		pFnSpecialCost = (UFunction*) UObject::GObjObjects()->Data[ 11446 ];

	ANavigationPoint_eventSpecialCost_Parms SpecialCost_Parms;
	SpecialCost_Parms.Seeker = Seeker;
	SpecialCost_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCost, &SpecialCost_Parms, NULL );

	return SpecialCost_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ANavigationPoint::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 11443 ];

	ANavigationPoint_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetReachSpecTo
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UReachSpec*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// class UClass*                  SpecClass                      ( CPF_OptionalParm | CPF_Parm )

class UReachSpec* ANavigationPoint::GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass )
{
	static UFunction* pFnGetReachSpecTo = NULL;

	if ( ! pFnGetReachSpecTo )
		pFnGetReachSpecTo = (UFunction*) UObject::GObjObjects()->Data[ 11439 ];

	ANavigationPoint_execGetReachSpecTo_Parms GetReachSpecTo_Parms;
	GetReachSpecTo_Parms.Nav = Nav;
	GetReachSpecTo_Parms.SpecClass = SpecClass;

	pFnGetReachSpecTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReachSpecTo, &GetReachSpecTo_Parms, NULL );

	pFnGetReachSpecTo->FunctionFlags |= 0x400;

	return GetReachSpecTo_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 11436 ];

	ANavigationPoint_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Ladder.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALadder::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 11509 ];

	ALadder_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.BlockingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ABlockingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 11541 ];

	ABlockingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CameraActor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACameraActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 11633 ];

	ACameraActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.CameraActor.GetCameraView
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACameraActor::eventGetCameraView ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnGetCameraView = NULL;

	if ( ! pFnGetCameraView )
		pFnGetCameraView = (UFunction*) UObject::GObjObjects()->Data[ 11630 ];

	ACameraActor_eventGetCameraView_Parms GetCameraView_Parms;
	GetCameraView_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnGetCameraView, &GetCameraView_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &GetCameraView_Parms.OutPOV, 0x1C );
};

// Function Engine.CameraAnimInst.ApplyTransientScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Scalar                         ( CPF_Parm )

void UCameraAnimInst::ApplyTransientScaling ( float Scalar )
{
	static UFunction* pFnApplyTransientScaling = NULL;

	if ( ! pFnApplyTransientScaling )
		pFnApplyTransientScaling = (UFunction*) UObject::GObjObjects()->Data[ 11694 ];

	UCameraAnimInst_execApplyTransientScaling_Parms ApplyTransientScaling_Parms;
	ApplyTransientScaling_Parms.Scalar = Scalar;

	pFnApplyTransientScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyTransientScaling, &ApplyTransientScaling_Parms, NULL );

	pFnApplyTransientScaling->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Stop
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Stop ( unsigned long bImmediate )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 11692 ];

	UCameraAnimInst_execStop_Parms Stop_Parms;
	Stop_Parms.bImmediate = bImmediate;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.AdvanceAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_Parm )

void UCameraAnimInst::AdvanceAnim ( float DeltaTime, unsigned long bJump )
{
	static UFunction* pFnAdvanceAnim = NULL;

	if ( ! pFnAdvanceAnim )
		pFnAdvanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 11689 ];

	UCameraAnimInst_execAdvanceAnim_Parms AdvanceAnim_Parms;
	AdvanceAnim_Parms.DeltaTime = DeltaTime;
	AdvanceAnim_Parms.bJump = bJump;

	pFnAdvanceAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvanceAnim, &AdvanceAnim_Parms, NULL );

	pFnAdvanceAnim->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Update
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRate                        ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )
// float                          NewBlendInTime                 ( CPF_Parm )
// float                          NewBlendOutTime                ( CPF_Parm )
// float                          NewDuration                    ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 11683 ];

	UCameraAnimInst_execUpdate_Parms Update_Parms;
	Update_Parms.NewRate = NewRate;
	Update_Parms.NewScale = NewScale;
	Update_Parms.NewBlendInTime = NewBlendInTime;
	Update_Parms.NewBlendOutTime = NewBlendOutTime;
	Update_Parms.NewDuration = NewDuration;

	pFnUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	pFnUpdate->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.SetInitialLocationAndRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUseInitial                    ( CPF_Parm )
// unsigned char                  _PostAnimSetting               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 InitialLoc                     ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                InitialRot                     ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::SetInitialLocationAndRotation ( unsigned long bUseInitial, unsigned char _PostAnimSetting, struct FVector InitialLoc, struct FRotator InitialRot )
{
	static UFunction* pFnSetInitialLocationAndRotation = NULL;

	if ( ! pFnSetInitialLocationAndRotation )
		pFnSetInitialLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 11678 ];

	UCameraAnimInst_execSetInitialLocationAndRotation_Parms SetInitialLocationAndRotation_Parms;
	SetInitialLocationAndRotation_Parms.bUseInitial = bUseInitial;
	SetInitialLocationAndRotation_Parms._PostAnimSetting = _PostAnimSetting;
	memcpy ( &SetInitialLocationAndRotation_Parms.InitialLoc, &InitialLoc, 0xC );
	memcpy ( &SetInitialLocationAndRotation_Parms.InitialRot, &InitialRot, 0xC );

	pFnSetInitialLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInitialLocationAndRotation, &SetInitialLocationAndRotation_Parms, NULL );

	pFnSetInitialLocationAndRotation->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Play
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// class AActor*                  CamActor                       ( CPF_Parm )
// float                          InRate                         ( CPF_Parm )
// float                          InScale                        ( CPF_Parm )
// float                          InBlendInTime                  ( CPF_Parm )
// float                          InBlendOutTime                 ( CPF_Parm )
// unsigned long                  bInLoop                        ( CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 11668 ];

	UCameraAnimInst_execPlay_Parms Play_Parms;
	Play_Parms.Anim = Anim;
	Play_Parms.CamActor = CamActor;
	Play_Parms.InRate = InRate;
	Play_Parms.InScale = InScale;
	Play_Parms.InBlendInTime = InBlendInTime;
	Play_Parms.InBlendOutTime = InBlendOutTime;
	Play_Parms.bInLoop = bInLoop;
	Play_Parms.bRandomStartTime = bRandomStartTime;
	Play_Parms.Duration = Duration;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.CameraMode.AllowPawnRotation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCameraMode::AllowPawnRotation ( )
{
	static UFunction* pFnAllowPawnRotation = NULL;

	if ( ! pFnAllowPawnRotation )
		pFnAllowPawnRotation = (UFunction*) UObject::GObjObjects()->Data[ 11702 ];

	UCameraMode_execAllowPawnRotation_Parms AllowPawnRotation_Parms;

	this->ProcessEvent ( pFnAllowPawnRotation, &AllowPawnRotation_Parms, NULL );

	return AllowPawnRotation_Parms.ReturnValue;
};

// Function Engine.CameraMode.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void UCameraMode::ProcessViewRotation ( float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 11697 ];

	UCameraMode_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.CameraModifier.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 11726 ];

	UCameraModifier_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );

	return ProcessViewRotation_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ToggleModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::ToggleModifier ( )
{
	static UFunction* pFnToggleModifier = NULL;

	if ( ! pFnToggleModifier )
		pFnToggleModifier = (UFunction*) UObject::GObjObjects()->Data[ 11725 ];

	UCameraModifier_execToggleModifier_Parms ToggleModifier_Parms;

	this->ProcessEvent ( pFnToggleModifier, &ToggleModifier_Parms, NULL );
};

// Function Engine.CameraModifier.EnableModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::EnableModifier ( )
{
	static UFunction* pFnEnableModifier = NULL;

	if ( ! pFnEnableModifier )
		pFnEnableModifier = (UFunction*) UObject::GObjObjects()->Data[ 11724 ];

	UCameraModifier_execEnableModifier_Parms EnableModifier_Parms;

	this->ProcessEvent ( pFnEnableModifier, &EnableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.DisableModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::DisableModifier ( )
{
	static UFunction* pFnDisableModifier = NULL;

	if ( ! pFnDisableModifier )
		pFnDisableModifier = (UFunction*) UObject::GObjObjects()->Data[ 11723 ];

	UCameraModifier_execDisableModifier_Parms DisableModifier_Parms;

	this->ProcessEvent ( pFnDisableModifier, &DisableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.IsDisabled
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCameraModifier::IsDisabled ( )
{
	static UFunction* pFnIsDisabled = NULL;

	if ( ! pFnIsDisabled )
		pFnIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 11721 ];

	UCameraModifier_execIsDisabled_Parms IsDisabled_Parms;

	this->ProcessEvent ( pFnIsDisabled, &IsDisabled_Parms, NULL );

	return IsDisabled_Parms.ReturnValue;
};

// Function Engine.CameraModifier.RemoveCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::RemoveCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnRemoveCameraModifier = NULL;

	if ( ! pFnRemoveCameraModifier )
		pFnRemoveCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 11717 ];

	UCameraModifier_execRemoveCameraModifier_Parms RemoveCameraModifier_Parms;
	RemoveCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnRemoveCameraModifier, &RemoveCameraModifier_Parms, NULL );

	return RemoveCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.AddCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::AddCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnAddCameraModifier = NULL;

	if ( ! pFnAddCameraModifier )
		pFnAddCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 11714 ];

	UCameraModifier_execAddCameraModifier_Parms AddCameraModifier_Parms;
	AddCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnAddCameraModifier, &AddCameraModifier_Parms, NULL );

	return AddCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ModifyCamera
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 11709 ];

	UCameraModifier_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function Engine.CameraModifier.Init
// [0x00020000] 
// Parameters infos:

void UCameraModifier::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 11708 ];

	UCameraModifier_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.PostProcessVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APostProcessVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 11816 ];

	APostProcessVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Canvas.DrawTextureDoubleLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Spacing                        ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// struct FColor                  AltLineColor                   ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureDoubleLine = NULL;

	if ( ! pFnDrawTextureDoubleLine )
		pFnDrawTextureDoubleLine = (UFunction*) UObject::GObjObjects()->Data[ 12093 ];

	UCanvas_execDrawTextureDoubleLine_Parms DrawTextureDoubleLine_Parms;
	memcpy ( &DrawTextureDoubleLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureDoubleLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureDoubleLine_Parms.Perc = Perc;
	DrawTextureDoubleLine_Parms.Spacing = Spacing;
	DrawTextureDoubleLine_Parms.Width = Width;
	memcpy ( &DrawTextureDoubleLine_Parms.LineColor, &LineColor, 0x4 );
	memcpy ( &DrawTextureDoubleLine_Parms.AltLineColor, &AltLineColor, 0x4 );
	DrawTextureDoubleLine_Parms.Tex = Tex;
	DrawTextureDoubleLine_Parms.U = U;
	DrawTextureDoubleLine_Parms.V = V;
	DrawTextureDoubleLine_Parms.UL = UL;
	DrawTextureDoubleLine_Parms.VL = VL;

	pFnDrawTextureDoubleLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureDoubleLine, &DrawTextureDoubleLine_Parms, NULL );

	pFnDrawTextureDoubleLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextureLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// class UTexture*                LineTexture                    ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureLine = NULL;

	if ( ! pFnDrawTextureLine )
		pFnDrawTextureLine = (UFunction*) UObject::GObjObjects()->Data[ 12082 ];

	UCanvas_execDrawTextureLine_Parms DrawTextureLine_Parms;
	memcpy ( &DrawTextureLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureLine_Parms.Perc = Perc;
	DrawTextureLine_Parms.Width = Width;
	memcpy ( &DrawTextureLine_Parms.LineColor, &LineColor, 0x4 );
	DrawTextureLine_Parms.LineTexture = LineTexture;
	DrawTextureLine_Parms.U = U;
	DrawTextureLine_Parms.V = V;
	DrawTextureLine_Parms.UL = UL;
	DrawTextureLine_Parms.VL = VL;

	pFnDrawTextureLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureLine, &DrawTextureLine_Parms, NULL );

	pFnDrawTextureLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void UCanvas::Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 12076 ];

	UCanvas_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedMaterialTile = NULL;

	if ( ! pFnDrawRotatedMaterialTile )
		pFnDrawRotatedMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 12065 ];

	UCanvas_execDrawRotatedMaterialTile_Parms DrawRotatedMaterialTile_Parms;
	DrawRotatedMaterialTile_Parms.Mat = Mat;
	memcpy ( &DrawRotatedMaterialTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedMaterialTile_Parms.XL = XL;
	DrawRotatedMaterialTile_Parms.YL = YL;
	DrawRotatedMaterialTile_Parms.U = U;
	DrawRotatedMaterialTile_Parms.V = V;
	DrawRotatedMaterialTile_Parms.UL = UL;
	DrawRotatedMaterialTile_Parms.VL = VL;
	DrawRotatedMaterialTile_Parms.AnchorX = AnchorX;
	DrawRotatedMaterialTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedMaterialTile, &DrawRotatedMaterialTile_Parms, NULL );

	pFnDrawRotatedMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedTile = NULL;

	if ( ! pFnDrawRotatedTile )
		pFnDrawRotatedTile = (UFunction*) UObject::GObjObjects()->Data[ 12054 ];

	UCanvas_execDrawRotatedTile_Parms DrawRotatedTile_Parms;
	DrawRotatedTile_Parms.Tex = Tex;
	memcpy ( &DrawRotatedTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedTile_Parms.XL = XL;
	DrawRotatedTile_Parms.YL = YL;
	DrawRotatedTile_Parms.U = U;
	DrawRotatedTile_Parms.V = V;
	DrawRotatedTile_Parms.UL = UL;
	DrawRotatedTile_Parms.VL = VL;
	DrawRotatedTile_Parms.AnchorX = AnchorX;
	DrawRotatedTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedTile, &DrawRotatedTile_Parms, NULL );

	pFnDrawRotatedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.SetDrawColor
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned char                  A                              ( CPF_OptionalParm | CPF_Parm )

void UCanvas::SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pFnSetDrawColor = NULL;

	if ( ! pFnSetDrawColor )
		pFnSetDrawColor = (UFunction*) UObject::GObjObjects()->Data[ 5998 ];

	UCanvas_execSetDrawColor_Parms SetDrawColor_Parms;
	SetDrawColor_Parms.R = R;
	SetDrawColor_Parms.G = G;
	SetDrawColor_Parms.B = B;
	SetDrawColor_Parms.A = A;

	pFnSetDrawColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawColor, &SetDrawColor_Parms, NULL );

	pFnSetDrawColor->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawBox
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

void UCanvas::DrawBox ( float Width, float Height )
{
	static UFunction* pFnDrawBox = NULL;

	if ( ! pFnDrawBox )
		pFnDrawBox = (UFunction*) UObject::GObjObjects()->Data[ 12045 ];

	UCanvas_execDrawBox_Parms DrawBox_Parms;
	DrawBox_Parms.Width = Width;
	DrawBox_Parms.Height = Height;

	this->ProcessEvent ( pFnDrawBox, &DrawBox_Parms, NULL );
};

// Function Engine.Canvas.DrawRect
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          RectX                          ( CPF_Parm )
// float                          RectY                          ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRect ( float RectX, float RectY, class UTexture* Tex )
{
	static UFunction* pFnDrawRect = NULL;

	if ( ! pFnDrawRect )
		pFnDrawRect = (UFunction*) UObject::GObjObjects()->Data[ 12041 ];

	UCanvas_execDrawRect_Parms DrawRect_Parms;
	DrawRect_Parms.RectX = RectX;
	DrawRect_Parms.RectY = RectY;
	DrawRect_Parms.Tex = Tex;

	this->ProcessEvent ( pFnDrawRect, &DrawRect_Parms, NULL );
};

// Function Engine.Canvas.DrawIconSection
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          UStartPct                      ( CPF_Parm )
// float                          VStartPct                      ( CPF_Parm )
// float                          UEndPct                        ( CPF_Parm )
// float                          VEndPct                        ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale )
{
	static UFunction* pFnDrawIconSection = NULL;

	if ( ! pFnDrawIconSection )
		pFnDrawIconSection = (UFunction*) UObject::GObjObjects()->Data[ 12032 ];

	UCanvas_execDrawIconSection_Parms DrawIconSection_Parms;
	memcpy ( &DrawIconSection_Parms.Icon, &Icon, 0x14 );
	DrawIconSection_Parms.X = X;
	DrawIconSection_Parms.Y = Y;
	DrawIconSection_Parms.UStartPct = UStartPct;
	DrawIconSection_Parms.VStartPct = VStartPct;
	DrawIconSection_Parms.UEndPct = UEndPct;
	DrawIconSection_Parms.VEndPct = VEndPct;
	DrawIconSection_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIconSection, &DrawIconSection_Parms, NULL );
};

// Function Engine.Canvas.DrawIcon
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale )
{
	static UFunction* pFnDrawIcon = NULL;

	if ( ! pFnDrawIcon )
		pFnDrawIcon = (UFunction*) UObject::GObjObjects()->Data[ 12027 ];

	UCanvas_execDrawIcon_Parms DrawIcon_Parms;
	memcpy ( &DrawIcon_Parms.Icon, &Icon, 0x14 );
	DrawIcon_Parms.X = X;
	DrawIcon_Parms.Y = Y;
	DrawIcon_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIcon, &DrawIcon_Parms, NULL );
};

// Function Engine.Canvas.MakeIcon
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTexture*                Texture                        ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

struct FCanvasIcon UCanvas::MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL )
{
	static UFunction* pFnMakeIcon = NULL;

	if ( ! pFnMakeIcon )
		pFnMakeIcon = (UFunction*) UObject::GObjObjects()->Data[ 12019 ];

	UCanvas_execMakeIcon_Parms MakeIcon_Parms;
	MakeIcon_Parms.Texture = Texture;
	MakeIcon_Parms.U = U;
	MakeIcon_Parms.V = V;
	MakeIcon_Parms.UL = UL;
	MakeIcon_Parms.VL = VL;

	this->ProcessEvent ( pFnMakeIcon, &MakeIcon_Parms, NULL );

	return MakeIcon_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTexture
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCanvas::DrawTexture ( class UTexture* Tex, float Scale )
{
	static UFunction* pFnDrawTexture = NULL;

	if ( ! pFnDrawTexture )
		pFnDrawTexture = (UFunction*) UObject::GObjObjects()->Data[ 12016 ];

	UCanvas_execDrawTexture_Parms DrawTexture_Parms;
	DrawTexture_Parms.Tex = Tex;
	DrawTexture_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawTexture, &DrawTexture_Parms, NULL );
};

// Function Engine.Canvas.SetClip
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetClip ( float X, float Y )
{
	static UFunction* pFnSetClip = NULL;

	if ( ! pFnSetClip )
		pFnSetClip = (UFunction*) UObject::GObjObjects()->Data[ 12013 ];

	UCanvas_execSetClip_Parms SetClip_Parms;
	SetClip_Parms.X = X;
	SetClip_Parms.Y = Y;

	this->ProcessEvent ( pFnSetClip, &SetClip_Parms, NULL );
};

// Function Engine.Canvas.SetOrigin
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetOrigin ( float X, float Y )
{
	static UFunction* pFnSetOrigin = NULL;

	if ( ! pFnSetOrigin )
		pFnSetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 12010 ];

	UCanvas_execSetOrigin_Parms SetOrigin_Parms;
	SetOrigin_Parms.X = X;
	SetOrigin_Parms.Y = Y;

	this->ProcessEvent ( pFnSetOrigin, &SetOrigin_Parms, NULL );
};

// Function Engine.Canvas.SetPos
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PosX                           ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )

void UCanvas::SetPos ( float PosX, float PosY )
{
	static UFunction* pFnSetPos = NULL;

	if ( ! pFnSetPos )
		pFnSetPos = (UFunction*) UObject::GObjObjects()->Data[ 5997 ];

	UCanvas_execSetPos_Parms SetPos_Parms;
	SetPos_Parms.PosX = PosX;
	SetPos_Parms.PosY = PosY;

	pFnSetPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPos, &SetPos_Parms, NULL );

	pFnSetPos->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Reset
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bKeepOrigin                    ( CPF_OptionalParm | CPF_Parm )

void UCanvas::eventReset ( unsigned long bKeepOrigin )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 12006 ];

	UCanvas_eventReset_Parms Reset_Parms;
	Reset_Parms.bKeepOrigin = bKeepOrigin;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Canvas.DrawColorizedTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_Parm )

void UCanvas::DrawColorizedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor )
{
	static UFunction* pFnDrawColorizedTile = NULL;

	if ( ! pFnDrawColorizedTile )
		pFnDrawColorizedTile = (UFunction*) UObject::GObjObjects()->Data[ 11997 ];

	UCanvas_execDrawColorizedTile_Parms DrawColorizedTile_Parms;
	DrawColorizedTile_Parms.Tex = Tex;
	DrawColorizedTile_Parms.XL = XL;
	DrawColorizedTile_Parms.YL = YL;
	DrawColorizedTile_Parms.U = U;
	DrawColorizedTile_Parms.V = V;
	DrawColorizedTile_Parms.UL = UL;
	DrawColorizedTile_Parms.VL = VL;
	memcpy ( &DrawColorizedTile_Parms.LColor, &LColor, 0x10 );

	pFnDrawColorizedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawColorizedTile, &DrawColorizedTile_Parms, NULL );

	pFnDrawColorizedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTileStretched
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_Parm )
// unsigned long                  bStretchHorizontally           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStretchVertically             ( CPF_OptionalParm | CPF_Parm )
// float                          ScalingFactor                  ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor )
{
	static UFunction* pFnDrawTileStretched = NULL;

	if ( ! pFnDrawTileStretched )
		pFnDrawTileStretched = (UFunction*) UObject::GObjObjects()->Data[ 11985 ];

	UCanvas_execDrawTileStretched_Parms DrawTileStretched_Parms;
	DrawTileStretched_Parms.Tex = Tex;
	DrawTileStretched_Parms.XL = XL;
	DrawTileStretched_Parms.YL = YL;
	DrawTileStretched_Parms.U = U;
	DrawTileStretched_Parms.V = V;
	DrawTileStretched_Parms.UL = UL;
	DrawTileStretched_Parms.VL = VL;
	memcpy ( &DrawTileStretched_Parms.LColor, &LColor, 0x10 );
	DrawTileStretched_Parms.bStretchHorizontally = bStretchHorizontally;
	DrawTileStretched_Parms.bStretchVertically = bStretchVertically;
	DrawTileStretched_Parms.ScalingFactor = ScalingFactor;

	pFnDrawTileStretched->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileStretched, &DrawTileStretched_Parms, NULL );

	pFnDrawTileStretched->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PopTransform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCanvas::PopTransform ( )
{
	static UFunction* pFnPopTransform = NULL;

	if ( ! pFnPopTransform )
		pFnPopTransform = (UFunction*) UObject::GObjObjects()->Data[ 11984 ];

	UCanvas_execPopTransform_Parms PopTransform_Parms;

	pFnPopTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopTransform, &PopTransform_Parms, NULL );

	pFnPopTransform->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PushTranslationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TranslationVector              ( CPF_Parm )

void UCanvas::PushTranslationMatrix ( struct FVector TranslationVector )
{
	static UFunction* pFnPushTranslationMatrix = NULL;

	if ( ! pFnPushTranslationMatrix )
		pFnPushTranslationMatrix = (UFunction*) UObject::GObjObjects()->Data[ 11982 ];

	UCanvas_execPushTranslationMatrix_Parms PushTranslationMatrix_Parms;
	memcpy ( &PushTranslationMatrix_Parms.TranslationVector, &TranslationVector, 0xC );

	pFnPushTranslationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushTranslationMatrix, &PushTranslationMatrix_Parms, NULL );

	pFnPushTranslationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Project
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

struct FVector UCanvas::Project ( struct FVector Location )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 8439 ];

	UCanvas_execProject_Parms Project_Parms;
	memcpy ( &Project_Parms.Location, &Location, 0xC );

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	return Project_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTileClipped
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x01D4]
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTileClipped ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTileClipped = NULL;

	if ( ! pFnDrawTileClipped )
		pFnDrawTileClipped = (UFunction*) UObject::GObjObjects()->Data[ 11972 ];

	UCanvas_execDrawTileClipped_Parms DrawTileClipped_Parms;
	DrawTileClipped_Parms.Tex = Tex;
	DrawTileClipped_Parms.XL = XL;
	DrawTileClipped_Parms.YL = YL;
	DrawTileClipped_Parms.U = U;
	DrawTileClipped_Parms.V = V;
	DrawTileClipped_Parms.UL = UL;
	DrawTileClipped_Parms.VL = VL;

	unsigned short NativeIndex = pFnDrawTileClipped->iNative;
	pFnDrawTileClipped->iNative = 0;

	pFnDrawTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileClipped, &DrawTileClipped_Parms, NULL );

	pFnDrawTileClipped->FunctionFlags |= 0x400;

	pFnDrawTileClipped->iNative = NativeIndex;
};

// Function Engine.Canvas.DrawTextRA
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextRA ( struct FString Text, unsigned long CR )
{
	static UFunction* pFnDrawTextRA = NULL;

	if ( ! pFnDrawTextRA )
		pFnDrawTextRA = (UFunction*) UObject::GObjObjects()->Data[ 11967 ];

	UCanvas_execDrawTextRA_Parms DrawTextRA_Parms;
	memcpy ( &DrawTextRA_Parms.Text, &Text, 0xC );
	DrawTextRA_Parms.CR = CR;

	this->ProcessEvent ( pFnDrawTextRA, &DrawTextRA_Parms, NULL );
};

// Function Engine.Canvas.DrawTextClipped
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  bCheckHotKey                   ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextClipped ( struct FString Text, unsigned long bCheckHotKey, float XScale, float YScale )
{
	static UFunction* pFnDrawTextClipped = NULL;

	if ( ! pFnDrawTextClipped )
		pFnDrawTextClipped = (UFunction*) UObject::GObjObjects()->Data[ 11962 ];

	UCanvas_execDrawTextClipped_Parms DrawTextClipped_Parms;
	memcpy ( &DrawTextClipped_Parms.Text, &Text, 0xC );
	DrawTextClipped_Parms.bCheckHotKey = bCheckHotKey;
	DrawTextClipped_Parms.XScale = XScale;
	DrawTextClipped_Parms.YScale = YScale;

	pFnDrawTextClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextClipped, &DrawTextClipped_Parms, NULL );

	pFnDrawTextClipped->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawText
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 5999 ];

	UCanvas_execDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.Text, &Text, 0xC );
	DrawText_Parms.CR = CR;
	DrawText_Parms.XScale = XScale;
	DrawText_Parms.YScale = YScale;

	pFnDrawText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );

	pFnDrawText->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.TextSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::TextSize ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnTextSize = NULL;

	if ( ! pFnTextSize )
		pFnTextSize = (UFunction*) UObject::GObjObjects()->Data[ 11954 ];

	UCanvas_execTextSize_Parms TextSize_Parms;
	memcpy ( &TextSize_Parms.String, &String, 0xC );

	pFnTextSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTextSize, &TextSize_Parms, NULL );

	pFnTextSize->FunctionFlags |= 0x400;

	if ( XL )
		*XL = TextSize_Parms.XL;

	if ( YL )
		*YL = TextSize_Parms.YL;
};

// Function Engine.Canvas.StrLen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::StrLen ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnStrLen = NULL;

	if ( ! pFnStrLen )
		pFnStrLen = (UFunction*) UObject::GObjObjects()->Data[ 11639 ];

	UCanvas_execStrLen_Parms StrLen_Parms;
	memcpy ( &StrLen_Parms.String, &String, 0xC );

	pFnStrLen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStrLen, &StrLen_Parms, NULL );

	pFnStrLen->FunctionFlags |= 0x400;

	if ( XL )
		*XL = StrLen_Parms.XL;

	if ( YL )
		*YL = StrLen_Parms.YL;
};

// Function Engine.Canvas.DrawMaterialTileClipped
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTileClipped = NULL;

	if ( ! pFnDrawMaterialTileClipped )
		pFnDrawMaterialTileClipped = (UFunction*) UObject::GObjObjects()->Data[ 11943 ];

	UCanvas_execDrawMaterialTileClipped_Parms DrawMaterialTileClipped_Parms;
	DrawMaterialTileClipped_Parms.Mat = Mat;
	DrawMaterialTileClipped_Parms.XL = XL;
	DrawMaterialTileClipped_Parms.YL = YL;
	DrawMaterialTileClipped_Parms.U = U;
	DrawMaterialTileClipped_Parms.V = V;
	DrawMaterialTileClipped_Parms.UL = UL;
	DrawMaterialTileClipped_Parms.VL = VL;

	pFnDrawMaterialTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTileClipped, &DrawMaterialTileClipped_Parms, NULL );

	pFnDrawMaterialTileClipped->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTile = NULL;

	if ( ! pFnDrawMaterialTile )
		pFnDrawMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 11935 ];

	UCanvas_execDrawMaterialTile_Parms DrawMaterialTile_Parms;
	DrawMaterialTile_Parms.Mat = Mat;
	DrawMaterialTile_Parms.XL = XL;
	DrawMaterialTile_Parms.YL = YL;
	DrawMaterialTile_Parms.U = U;
	DrawMaterialTile_Parms.V = V;
	DrawMaterialTile_Parms.UL = UL;
	DrawMaterialTile_Parms.VL = VL;

	pFnDrawMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTile, &DrawMaterialTile_Parms, NULL );

	pFnDrawMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTile = NULL;

	if ( ! pFnDrawTile )
		pFnDrawTile = (UFunction*) UObject::GObjObjects()->Data[ 11927 ];

	UCanvas_execDrawTile_Parms DrawTile_Parms;
	DrawTile_Parms.Tex = Tex;
	DrawTile_Parms.XL = XL;
	DrawTile_Parms.YL = YL;
	DrawTile_Parms.U = U;
	DrawTile_Parms.V = V;
	DrawTile_Parms.UL = UL;
	DrawTile_Parms.VL = VL;

	pFnDrawTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTile, &DrawTile_Parms, NULL );

	pFnDrawTile->FunctionFlags |= 0x400;
};

// Function Engine.Controller.ReadyForLift
// [0x00020000] 
// Parameters infos:

void AController::ReadyForLift ( )
{
	static UFunction* pFnReadyForLift = NULL;

	if ( ! pFnReadyForLift )
		pFnReadyForLift = (UFunction*) UObject::GObjObjects()->Data[ 7089 ];

	AController_execReadyForLift_Parms ReadyForLift_Parms;

	this->ProcessEvent ( pFnReadyForLift, &ReadyForLift_Parms, NULL );
};

// Function Engine.Controller.SendMessage
// [0x00024000] 
// Parameters infos:
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// float                          Wait                           ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AController::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType )
{
	static UFunction* pFnSendMessage = NULL;

	if ( ! pFnSendMessage )
		pFnSendMessage = (UFunction*) UObject::GObjObjects()->Data[ 7084 ];

	AController_execSendMessage_Parms SendMessage_Parms;
	SendMessage_Parms.Recipient = Recipient;
	memcpy ( &SendMessage_Parms.MessageType, &MessageType, 0x8 );
	SendMessage_Parms.Wait = Wait;
	SendMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSendMessage, &SendMessage_Parms, NULL );
};

// Function Engine.Controller.CurrentLevelUnloaded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventCurrentLevelUnloaded ( )
{
	static UFunction* pFnCurrentLevelUnloaded = NULL;

	if ( ! pFnCurrentLevelUnloaded )
		pFnCurrentLevelUnloaded = (UFunction*) UObject::GObjObjects()->Data[ 7083 ];

	AController_eventCurrentLevelUnloaded_Parms CurrentLevelUnloaded_Parms;

	this->ProcessEvent ( pFnCurrentLevelUnloaded, &CurrentLevelUnloaded_Parms, NULL );
};

// Function Engine.Controller.GetRouteGoalAfter
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RouteIdx                       ( CPF_Parm )

class AActor* AController::GetRouteGoalAfter ( int RouteIdx )
{
	static UFunction* pFnGetRouteGoalAfter = NULL;

	if ( ! pFnGetRouteGoalAfter )
		pFnGetRouteGoalAfter = (UFunction*) UObject::GObjObjects()->Data[ 7080 ];

	AController_execGetRouteGoalAfter_Parms GetRouteGoalAfter_Parms;
	GetRouteGoalAfter_Parms.RouteIdx = RouteIdx;

	this->ProcessEvent ( pFnGetRouteGoalAfter, &GetRouteGoalAfter_Parms, NULL );

	return GetRouteGoalAfter_Parms.ReturnValue;
};

// Function Engine.Controller.IsInCombat
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsInCombat ( )
{
	static UFunction* pFnIsInCombat = NULL;

	if ( ! pFnIsInCombat )
		pFnIsInCombat = (UFunction*) UObject::GObjObjects()->Data[ 7078 ];

	AController_eventIsInCombat_Parms IsInCombat_Parms;

	this->ProcessEvent ( pFnIsInCombat, &IsInCombat_Parms, NULL );

	return IsInCombat_Parms.ReturnValue;
};

// Function Engine.Controller.IsSpectating
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 7076 ];

	AController_eventIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.Controller.GetKillerController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AController* AController::GetKillerController ( )
{
	static UFunction* pFnGetKillerController = NULL;

	if ( ! pFnGetKillerController )
		pFnGetKillerController = (UFunction*) UObject::GObjObjects()->Data[ 7074 ];

	AController_execGetKillerController_Parms GetKillerController_Parms;

	this->ProcessEvent ( pFnGetKillerController, &GetKillerController_Parms, NULL );

	return GetKillerController_Parms.ReturnValue;
};

// Function Engine.Controller.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AController::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 7072 ];

	AController_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Controller.NotifyAddInventory
// [0x00020000] 
// Parameters infos:
// class AInventory*              NewItem                        ( CPF_Parm )

void AController::NotifyAddInventory ( class AInventory* NewItem )
{
	static UFunction* pFnNotifyAddInventory = NULL;

	if ( ! pFnNotifyAddInventory )
		pFnNotifyAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 7070 ];

	AController_execNotifyAddInventory_Parms NotifyAddInventory_Parms;
	NotifyAddInventory_Parms.NewItem = NewItem;

	this->ProcessEvent ( pFnNotifyAddInventory, &NotifyAddInventory_Parms, NULL );
};

// Function Engine.Controller.OnCauseDamage
// [0x00020102] 
// Parameters infos:
// class USeqAct_CauseDamage*     Action                         ( CPF_Parm )

void AController::OnCauseDamage ( class USeqAct_CauseDamage* Action )
{
	static UFunction* pFnOnCauseDamage = NULL;

	if ( ! pFnOnCauseDamage )
		pFnOnCauseDamage = (UFunction*) UObject::GObjObjects()->Data[ 7068 ];

	AController_execOnCauseDamage_Parms OnCauseDamage_Parms;
	OnCauseDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnCauseDamage, &OnCauseDamage_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverClaimViolation
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool AController::NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverClaimViolation = NULL;

	if ( ! pFnNotifyCoverClaimViolation )
		pFnNotifyCoverClaimViolation = (UFunction*) UObject::GObjObjects()->Data[ 7063 ];

	AController_execNotifyCoverClaimViolation_Parms NotifyCoverClaimViolation_Parms;
	NotifyCoverClaimViolation_Parms.NewClaim = NewClaim;
	NotifyCoverClaimViolation_Parms.Link = Link;
	NotifyCoverClaimViolation_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverClaimViolation, &NotifyCoverClaimViolation_Parms, NULL );

	return NotifyCoverClaimViolation_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyCoverAdjusted
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyCoverAdjusted ( )
{
	static UFunction* pFnNotifyCoverAdjusted = NULL;

	if ( ! pFnNotifyCoverAdjusted )
		pFnNotifyCoverAdjusted = (UFunction*) UObject::GObjObjects()->Data[ 7062 ];

	AController_eventNotifyCoverAdjusted_Parms NotifyCoverAdjusted_Parms;

	this->ProcessEvent ( pFnNotifyCoverAdjusted, &NotifyCoverAdjusted_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverDisabled
// [0x00020100] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

void AController::NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 7059 ];

	AController_execNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function Engine.Controller.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AController::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 7057 ];

	AController_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Controller.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AController::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 7055 ];

	AController_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Controller.IsDead
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsDead ( )
{
	static UFunction* pFnIsDead = NULL;

	if ( ! pFnIsDead )
		pFnIsDead = (UFunction*) UObject::GObjObjects()->Data[ 7030 ];

	AController_execIsDead_Parms IsDead_Parms;

	this->ProcessEvent ( pFnIsDead, &IsDead_Parms, NULL );

	return IsDead_Parms.ReturnValue;
};

// Function Engine.Controller.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AController::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 7028 ];

	AController_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Controller.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 7023 ];

	AController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Controller.StopLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AController::StopLatentExecution ( )
{
	static UFunction* pFnStopLatentExecution = NULL;

	if ( ! pFnStopLatentExecution )
		pFnStopLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 7022 ];

	AController_execStopLatentExecution_Parms StopLatentExecution_Parms;

	pFnStopLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopLatentExecution, &StopLatentExecution_Parms, NULL );

	pFnStopLatentExecution->FunctionFlags |= 0x400;
};

// Function Engine.Controller.InLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LatentActionNumber             ( CPF_Parm )

bool AController::InLatentExecution ( int LatentActionNumber )
{
	static UFunction* pFnInLatentExecution = NULL;

	if ( ! pFnInLatentExecution )
		pFnInLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 7019 ];

	AController_execInLatentExecution_Parms InLatentExecution_Parms;
	InLatentExecution_Parms.LatentActionNumber = LatentActionNumber;

	pFnInLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInLatentExecution, &InLatentExecution_Parms, NULL );

	pFnInLatentExecution->FunctionFlags |= 0x400;

	return InLatentExecution_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyMissedJump
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyMissedJump ( )
{
	static UFunction* pFnNotifyMissedJump = NULL;

	if ( ! pFnNotifyMissedJump )
		pFnNotifyMissedJump = (UFunction*) UObject::GObjObjects()->Data[ 7018 ];

	AController_eventNotifyMissedJump_Parms NotifyMissedJump_Parms;

	this->ProcessEvent ( pFnNotifyMissedJump, &NotifyMissedJump_Parms, NULL );
};

// Function Engine.Controller.NotifyJumpApex
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyJumpApex ( )
{
	static UFunction* pFnNotifyJumpApex = NULL;

	if ( ! pFnNotifyJumpApex )
		pFnNotifyJumpApex = (UFunction*) UObject::GObjObjects()->Data[ 7017 ];

	AController_eventNotifyJumpApex_Parms NotifyJumpApex_Parms;

	this->ProcessEvent ( pFnNotifyJumpApex, &NotifyJumpApex_Parms, NULL );
};

// Function Engine.Controller.NotifyBump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 7013 ];

	AController_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyFallingHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

void AController::eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = (UFunction*) UObject::GObjObjects()->Data[ 7010 ];

	AController_eventNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;
	memcpy ( &NotifyFallingHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyFallingHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function Engine.Controller.NotifyHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool AController::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 7006 ];

	AController_eventNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool AController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 7002 ];

	AController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyHeadVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

bool AController::eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyHeadVolumeChange = NULL;

	if ( ! pFnNotifyHeadVolumeChange )
		pFnNotifyHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 6999 ];

	AController_eventNotifyHeadVolumeChange_Parms NotifyHeadVolumeChange_Parms;
	NotifyHeadVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyHeadVolumeChange, &NotifyHeadVolumeChange_Parms, NULL );

	return NotifyHeadVolumeChange_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyPhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AController::eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyPhysicsVolumeChange = NULL;

	if ( ! pFnNotifyPhysicsVolumeChange )
		pFnNotifyPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 6997 ];

	AController_eventNotifyPhysicsVolumeChange_Parms NotifyPhysicsVolumeChange_Parms;
	NotifyPhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyPhysicsVolumeChange, &NotifyPhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Controller.LandingShake
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = (UFunction*) UObject::GObjObjects()->Data[ 6995 ];

	AController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );

	return LandingShake_Parms.ReturnValue;
};

// Function Engine.Controller.IsAimingAt
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ATarget                        ( CPF_Parm )
// float                          Epsilon                        ( CPF_Parm )

bool AController::IsAimingAt ( class AActor* ATarget, float Epsilon )
{
	static UFunction* pFnIsAimingAt = NULL;

	if ( ! pFnIsAimingAt )
		pFnIsAimingAt = (UFunction*) UObject::GObjObjects()->Data[ 6989 ];

	AController_execIsAimingAt_Parms IsAimingAt_Parms;
	IsAimingAt_Parms.ATarget = ATarget;
	IsAimingAt_Parms.Epsilon = Epsilon;

	this->ProcessEvent ( pFnIsAimingAt, &IsAimingAt_Parms, NULL );

	return IsAimingAt_Parms.ReturnValue;
};

// Function Engine.Controller.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 6986 ];

	AController_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 6983 ];

	AController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.HandlePathObstruction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  BlockedBy                      ( CPF_Parm )

bool AController::eventHandlePathObstruction ( class AActor* BlockedBy )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = (UFunction*) UObject::GObjObjects()->Data[ 6980 ];

	AController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;
	HandlePathObstruction_Parms.BlockedBy = BlockedBy;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );

	return HandlePathObstruction_Parms.ReturnValue;
};

// Function Engine.Controller.UnderLift
// [0x00020000] 
// Parameters infos:
// class ALiftCenter*             Lift                           ( CPF_Parm )

void AController::UnderLift ( class ALiftCenter* Lift )
{
	static UFunction* pFnUnderLift = NULL;

	if ( ! pFnUnderLift )
		pFnUnderLift = (UFunction*) UObject::GObjObjects()->Data[ 6978 ];

	AController_execUnderLift_Parms UnderLift_Parms;
	UnderLift_Parms.Lift = Lift;

	this->ProcessEvent ( pFnUnderLift, &UnderLift_Parms, NULL );
};

// Function Engine.Controller.MoverFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventMoverFinished ( )
{
	static UFunction* pFnMoverFinished = NULL;

	if ( ! pFnMoverFinished )
		pFnMoverFinished = (UFunction*) UObject::GObjObjects()->Data[ 6976 ];

	AController_eventMoverFinished_Parms MoverFinished_Parms;

	this->ProcessEvent ( pFnMoverFinished, &MoverFinished_Parms, NULL );

	return MoverFinished_Parms.ReturnValue;
};

// Function Engine.Controller.WaitForMover
// [0x00020002] 
// Parameters infos:
// class AInterpActor*            M                              ( CPF_Parm )

void AController::WaitForMover ( class AInterpActor* M )
{
	static UFunction* pFnWaitForMover = NULL;

	if ( ! pFnWaitForMover )
		pFnWaitForMover = (UFunction*) UObject::GObjObjects()->Data[ 6974 ];

	AController_execWaitForMover_Parms WaitForMover_Parms;
	WaitForMover_Parms.M = M;

	this->ProcessEvent ( pFnWaitForMover, &WaitForMover_Parms, NULL );
};

// Function Engine.Controller.AllowDetourTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        N                              ( CPF_Parm )

bool AController::eventAllowDetourTo ( class ANavigationPoint* N )
{
	static UFunction* pFnAllowDetourTo = NULL;

	if ( ! pFnAllowDetourTo )
		pFnAllowDetourTo = (UFunction*) UObject::GObjObjects()->Data[ 6971 ];

	AController_eventAllowDetourTo_Parms AllowDetourTo_Parms;
	AllowDetourTo_Parms.N = N;

	this->ProcessEvent ( pFnAllowDetourTo, &AllowDetourTo_Parms, NULL );

	return AllowDetourTo_Parms.ReturnValue;
};

// Function Engine.Controller.MayFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventMayFall ( )
{
	static UFunction* pFnMayFall = NULL;

	if ( ! pFnMayFall )
		pFnMayFall = (UFunction*) UObject::GObjObjects()->Data[ 6970 ];

	AController_eventMayFall_Parms MayFall_Parms;

	this->ProcessEvent ( pFnMayFall, &MayFall_Parms, NULL );
};

// Function Engine.Controller.EndClimbLadder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::EndClimbLadder ( )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 6969 ];

	AController_execEndClimbLadder_Parms EndClimbLadder_Parms;

	pFnEndClimbLadder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );

	pFnEndClimbLadder->FunctionFlags |= 0x400;
};

// Function Engine.Controller.LongFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventLongFall ( )
{
	static UFunction* pFnLongFall = NULL;

	if ( ! pFnLongFall )
		pFnLongFall = (UFunction*) UObject::GObjObjects()->Data[ 6968 ];

	AController_eventLongFall_Parms LongFall_Parms;

	this->ProcessEvent ( pFnLongFall, &LongFall_Parms, NULL );
};

// Function Engine.Controller.WaitForLanding
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x020F]
// Parameters infos:
// float                          waitDuration                   ( CPF_OptionalParm | CPF_Parm )

void AController::WaitForLanding ( float waitDuration )
{
	static UFunction* pFnWaitForLanding = NULL;

	if ( ! pFnWaitForLanding )
		pFnWaitForLanding = (UFunction*) UObject::GObjObjects()->Data[ 6966 ];

	AController_execWaitForLanding_Parms WaitForLanding_Parms;
	WaitForLanding_Parms.waitDuration = waitDuration;

	unsigned short NativeIndex = pFnWaitForLanding->iNative;
	pFnWaitForLanding->iNative = 0;

	pFnWaitForLanding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForLanding, &WaitForLanding_Parms, NULL );

	pFnWaitForLanding->FunctionFlags |= 0x400;

	pFnWaitForLanding->iNative = NativeIndex;
};

// Function Engine.Controller.PickWallAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020E]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::PickWallAdjust ( struct FVector HitNormal )
{
	static UFunction* pFnPickWallAdjust = NULL;

	if ( ! pFnPickWallAdjust )
		pFnPickWallAdjust = (UFunction*) UObject::GObjObjects()->Data[ 6963 ];

	AController_execPickWallAdjust_Parms PickWallAdjust_Parms;
	memcpy ( &PickWallAdjust_Parms.HitNormal, &HitNormal, 0xC );

	unsigned short NativeIndex = pFnPickWallAdjust->iNative;
	pFnPickWallAdjust->iNative = 0;

	pFnPickWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickWallAdjust, &PickWallAdjust_Parms, NULL );

	pFnPickWallAdjust->FunctionFlags |= 0x400;

	pFnPickWallAdjust->iNative = NativeIndex;

	return PickWallAdjust_Parms.ReturnValue;
};

// Function Engine.Controller.MoveUnreachable
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 AttemptedDest                  ( CPF_Parm )
// class AActor*                  AttemptedTarget                ( CPF_Parm )

void AController::eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = (UFunction*) UObject::GObjObjects()->Data[ 6960 ];

	AController_eventMoveUnreachable_Parms MoveUnreachable_Parms;
	memcpy ( &MoveUnreachable_Parms.AttemptedDest, &AttemptedDest, 0xC );
	MoveUnreachable_Parms.AttemptedTarget = AttemptedTarget;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function Engine.Controller.ActorReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0208]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )

bool AController::ActorReachable ( class AActor* anActor )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = (UFunction*) UObject::GObjObjects()->Data[ 6957 ];

	AController_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.anActor = anActor;

	unsigned short NativeIndex = pFnActorReachable->iNative;
	pFnActorReachable->iNative = 0;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	pFnActorReachable->iNative = NativeIndex;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.Controller.PointReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0209]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )

bool AController::PointReachable ( struct FVector aPoint )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = (UFunction*) UObject::GObjObjects()->Data[ 6954 ];

	AController_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.aPoint, &aPoint, 0xC );

	unsigned short NativeIndex = pFnPointReachable->iNative;
	pFnPointReachable->iNative = 0;

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	pFnPointReachable->iNative = NativeIndex;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToIntercept
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  InRouteGoal                    ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToIntercept = NULL;

	if ( ! pFnFindPathToIntercept )
		pFnFindPathToIntercept = (UFunction*) UObject::GObjObjects()->Data[ 6947 ];

	AController_execFindPathToIntercept_Parms FindPathToIntercept_Parms;
	FindPathToIntercept_Parms.P = P;
	FindPathToIntercept_Parms.InRouteGoal = InRouteGoal;
	FindPathToIntercept_Parms.bWeightDetours = bWeightDetours;
	FindPathToIntercept_Parms.MaxPathLength = MaxPathLength;
	FindPathToIntercept_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathToIntercept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToIntercept, &FindPathToIntercept_Parms, NULL );

	pFnFindPathToIntercept->FunctionFlags |= 0x400;

	return FindPathToIntercept_Parms.ReturnValue;
};

// Function Engine.Controller.FindRandomDest
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020D]
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* AController::FindRandomDest ( )
{
	static UFunction* pFnFindRandomDest = NULL;

	if ( ! pFnFindRandomDest )
		pFnFindRandomDest = (UFunction*) UObject::GObjObjects()->Data[ 6945 ];

	AController_execFindRandomDest_Parms FindRandomDest_Parms;

	unsigned short NativeIndex = pFnFindRandomDest->iNative;
	pFnFindRandomDest->iNative = 0;

	pFnFindRandomDest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindRandomDest, &FindRandomDest_Parms, NULL );

	pFnFindRandomDest->FunctionFlags |= 0x400;

	pFnFindRandomDest->iNative = NativeIndex;

	return FindRandomDest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTowardNearest
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalClass                      ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTowardNearest = NULL;

	if ( ! pFnFindPathTowardNearest )
		pFnFindPathTowardNearest = (UFunction*) UObject::GObjObjects()->Data[ 6939 ];

	AController_execFindPathTowardNearest_Parms FindPathTowardNearest_Parms;
	FindPathTowardNearest_Parms.GoalClass = GoalClass;
	FindPathTowardNearest_Parms.bWeightDetours = bWeightDetours;
	FindPathTowardNearest_Parms.MaxPathLength = MaxPathLength;
	FindPathTowardNearest_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathTowardNearest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTowardNearest, &FindPathTowardNearest_Parms, NULL );

	pFnFindPathTowardNearest->FunctionFlags |= 0x400;

	return FindPathTowardNearest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToward
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0205]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToward = NULL;

	if ( ! pFnFindPathToward )
		pFnFindPathToward = (UFunction*) UObject::GObjObjects()->Data[ 6933 ];

	AController_execFindPathToward_Parms FindPathToward_Parms;
	FindPathToward_Parms.anActor = anActor;
	FindPathToward_Parms.bWeightDetours = bWeightDetours;
	FindPathToward_Parms.MaxPathLength = MaxPathLength;
	FindPathToward_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathToward->iNative;
	pFnFindPathToward->iNative = 0;

	pFnFindPathToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToward, &FindPathToward_Parms, NULL );

	pFnFindPathToward->FunctionFlags |= 0x400;

	pFnFindPathToward->iNative = NativeIndex;

	return FindPathToward_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0206]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTo = NULL;

	if ( ! pFnFindPathTo )
		pFnFindPathTo = (UFunction*) UObject::GObjObjects()->Data[ 6928 ];

	AController_execFindPathTo_Parms FindPathTo_Parms;
	memcpy ( &FindPathTo_Parms.aPoint, &aPoint, 0xC );
	FindPathTo_Parms.MaxPathLength = MaxPathLength;
	FindPathTo_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathTo->iNative;
	pFnFindPathTo->iNative = 0;

	pFnFindPathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTo, &FindPathTo_Parms, NULL );

	pFnFindPathTo->FunctionFlags |= 0x400;

	pFnFindPathTo->iNative = NativeIndex;

	return FindPathTo_Parms.ReturnValue;
};

// Function Engine.Controller.FinishRotation
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01FC]
// Parameters infos:

void AController::FinishRotation ( )
{
	static UFunction* pFnFinishRotation = NULL;

	if ( ! pFnFinishRotation )
		pFnFinishRotation = (UFunction*) UObject::GObjObjects()->Data[ 6927 ];

	AController_execFinishRotation_Parms FinishRotation_Parms;

	unsigned short NativeIndex = pFnFinishRotation->iNative;
	pFnFinishRotation->iNative = 0;

	pFnFinishRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishRotation, &FinishRotation_Parms, NULL );

	pFnFinishRotation->FunctionFlags |= 0x400;

	pFnFinishRotation->iNative = NativeIndex;
};

// Function Engine.Controller.SetupSpecialPathAbilities
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventSetupSpecialPathAbilities ( )
{
	static UFunction* pFnSetupSpecialPathAbilities = NULL;

	if ( ! pFnSetupSpecialPathAbilities )
		pFnSetupSpecialPathAbilities = (UFunction*) UObject::GObjObjects()->Data[ 6926 ];

	AController_eventSetupSpecialPathAbilities_Parms SetupSpecialPathAbilities_Parms;

	this->ProcessEvent ( pFnSetupSpecialPathAbilities, &SetupSpecialPathAbilities_Parms, NULL );
};

// Function Engine.Controller.MoveToward
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F6]
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseStrafing                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToward = NULL;

	if ( ! pFnMoveToward )
		pFnMoveToward = (UFunction*) UObject::GObjObjects()->Data[ 6920 ];

	AController_execMoveToward_Parms MoveToward_Parms;
	MoveToward_Parms.NewTarget = NewTarget;
	MoveToward_Parms.ViewFocus = ViewFocus;
	MoveToward_Parms.DestinationOffset = DestinationOffset;
	MoveToward_Parms.bUseStrafing = bUseStrafing;
	MoveToward_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveToward->iNative;
	pFnMoveToward->iNative = 0;

	pFnMoveToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToward, &MoveToward_Parms, NULL );

	pFnMoveToward->FunctionFlags |= 0x400;

	pFnMoveToward->iNative = NativeIndex;
};

// Function Engine.Controller.MoveTo
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F4]
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveTo = NULL;

	if ( ! pFnMoveTo )
		pFnMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 6916 ];

	AController_execMoveTo_Parms MoveTo_Parms;
	memcpy ( &MoveTo_Parms.NewDestination, &NewDestination, 0xC );
	MoveTo_Parms.ViewFocus = ViewFocus;
	MoveTo_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveTo->iNative;
	pFnMoveTo->iNative = 0;

	pFnMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveTo, &MoveTo_Parms, NULL );

	pFnMoveTo->FunctionFlags |= 0x400;

	pFnMoveTo->iNative = NativeIndex;
};

// Function Engine.Controller.EnemyNotVisible
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = (UFunction*) UObject::GObjObjects()->Data[ 6915 ];

	AController_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function Engine.Controller.SeeMonster
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeeMonster ( class APawn* Seen )
{
	static UFunction* pFnSeeMonster = NULL;

	if ( ! pFnSeeMonster )
		pFnSeeMonster = (UFunction*) UObject::GObjObjects()->Data[ 6913 ];

	AController_eventSeeMonster_Parms SeeMonster_Parms;
	SeeMonster_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeeMonster, &SeeMonster_Parms, NULL );
};

// Function Engine.Controller.SeePlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeePlayer ( class APawn* Seen )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 6911 ];

	AController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function Engine.Controller.HearNoise
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 6907 ];

	AController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function Engine.Controller.PickTarget
// [0x00420401] ( FUNC_Final | FUNC_Native ) iNative [0x0213]
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TargetClass                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )
// struct FVector                 projStart                      ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// float                          bestAim                        ( CPF_Parm | CPF_OutParm )
// float                          bestDist                       ( CPF_Parm | CPF_OutParm )

class APawn* AController::PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist )
{
	static UFunction* pFnPickTarget = NULL;

	if ( ! pFnPickTarget )
		pFnPickTarget = (UFunction*) UObject::GObjObjects()->Data[ 6899 ];

	AController_execPickTarget_Parms PickTarget_Parms;
	PickTarget_Parms.TargetClass = TargetClass;
	memcpy ( &PickTarget_Parms.FireDir, &FireDir, 0xC );
	memcpy ( &PickTarget_Parms.projStart, &projStart, 0xC );
	PickTarget_Parms.MaxRange = MaxRange;

	unsigned short NativeIndex = pFnPickTarget->iNative;
	pFnPickTarget->iNative = 0;

	pFnPickTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickTarget, &PickTarget_Parms, NULL );

	pFnPickTarget->FunctionFlags |= 0x400;

	pFnPickTarget->iNative = NativeIndex;

	if ( bestAim )
		*bestAim = PickTarget_Parms.bestAim;

	if ( bestDist )
		*bestDist = PickTarget_Parms.bestDist;

	return PickTarget_Parms.ReturnValue;
};

// Function Engine.Controller.CanSeeByPoints
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0219]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewLocation                   ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

bool AController::CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation )
{
	static UFunction* pFnCanSeeByPoints = NULL;

	if ( ! pFnCanSeeByPoints )
		pFnCanSeeByPoints = (UFunction*) UObject::GObjObjects()->Data[ 6894 ];

	AController_execCanSeeByPoints_Parms CanSeeByPoints_Parms;
	memcpy ( &CanSeeByPoints_Parms.ViewLocation, &ViewLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.TestLocation, &TestLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.ViewRotation, &ViewRotation, 0xC );

	unsigned short NativeIndex = pFnCanSeeByPoints->iNative;
	pFnCanSeeByPoints->iNative = 0;

	pFnCanSeeByPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeByPoints, &CanSeeByPoints_Parms, NULL );

	pFnCanSeeByPoints->FunctionFlags |= 0x400;

	pFnCanSeeByPoints->iNative = NativeIndex;

	return CanSeeByPoints_Parms.ReturnValue;
};

// Function Engine.Controller.CanSee
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0215]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool AController::CanSee ( class APawn* Other )
{
	static UFunction* pFnCanSee = NULL;

	if ( ! pFnCanSee )
		pFnCanSee = (UFunction*) UObject::GObjObjects()->Data[ 6891 ];

	AController_execCanSee_Parms CanSee_Parms;
	CanSee_Parms.Other = Other;

	unsigned short NativeIndex = pFnCanSee->iNative;
	pFnCanSee->iNative = 0;

	pFnCanSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSee, &CanSee_Parms, NULL );

	pFnCanSee->FunctionFlags |= 0x400;

	pFnCanSee->iNative = NativeIndex;

	return CanSee_Parms.ReturnValue;
};

// Function Engine.Controller.LineOfSightTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0202]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 chkLocation                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTryAlternateTargetLoc         ( CPF_OptionalParm | CPF_Parm )

bool AController::LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 6886 ];

	AController_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;
	memcpy ( &LineOfSightTo_Parms.chkLocation, &chkLocation, 0xC );
	LineOfSightTo_Parms.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	unsigned short NativeIndex = pFnLineOfSightTo->iNative;
	pFnLineOfSightTo->iNative = 0;

	pFnLineOfSightTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	pFnLineOfSightTo->FunctionFlags |= 0x400;

	pFnLineOfSightTo->iNative = NativeIndex;

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Controller.WarnProjExplode
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::WarnProjExplode ( class AProjectile* Proj )
{
	static UFunction* pFnWarnProjExplode = NULL;

	if ( ! pFnWarnProjExplode )
		pFnWarnProjExplode = (UFunction*) UObject::GObjObjects()->Data[ 6884 ];

	AController_execWarnProjExplode_Parms WarnProjExplode_Parms;
	WarnProjExplode_Parms.Proj = Proj;

	this->ProcessEvent ( pFnWarnProjExplode, &WarnProjExplode_Parms, NULL );
};

// Function Engine.Controller.NotifyProjLanded
// [0x00020002] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::NotifyProjLanded ( class AProjectile* Proj )
{
	static UFunction* pFnNotifyProjLanded = NULL;

	if ( ! pFnNotifyProjLanded )
		pFnNotifyProjLanded = (UFunction*) UObject::GObjObjects()->Data[ 6882 ];

	AController_execNotifyProjLanded_Parms NotifyProjLanded_Parms;
	NotifyProjLanded_Parms.Proj = Proj;

	this->ProcessEvent ( pFnNotifyProjLanded, &NotifyProjLanded_Parms, NULL );
};

// Function Engine.Controller.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 6878 ];

	AController_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.Controller.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void AController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 6875 ];

	AController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.Controller.SetCharacter
// [0x00020000] 
// Parameters infos:
// struct FString                 inCharacter                    ( CPF_Parm )

void AController::SetCharacter ( struct FString inCharacter )
{
	static UFunction* pFnSetCharacter = NULL;

	if ( ! pFnSetCharacter )
		pFnSetCharacter = (UFunction*) UObject::GObjObjects()->Data[ 6873 ];

	AController_execSetCharacter_Parms SetCharacter_Parms;
	memcpy ( &SetCharacter_Parms.inCharacter, &inCharacter, 0xC );

	this->ProcessEvent ( pFnSetCharacter, &SetCharacter_Parms, NULL );
};

// Function Engine.Controller.ServerGivePawn
// [0x00020000] 
// Parameters infos:

void AController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 6872 ];

	AController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.Controller.ServerRestartPlayer
// [0x002200C2] 
// Parameters infos:

void AController::ServerRestartPlayer ( )
{
	static UFunction* pFnServerRestartPlayer = NULL;

	if ( ! pFnServerRestartPlayer )
		pFnServerRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 6871 ];

	AController_execServerRestartPlayer_Parms ServerRestartPlayer_Parms;

	this->ProcessEvent ( pFnServerRestartPlayer, &ServerRestartPlayer_Parms, NULL );
};

// Function Engine.Controller.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AController::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 6869 ];

	AController_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Controller.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AController::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 6868 ];

	AController_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function Engine.Controller.NotifyTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 6862 ];

	AController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Controller.EnemyJustTeleported
// [0x00020002] 
// Parameters infos:

void AController::EnemyJustTeleported ( )
{
	static UFunction* pFnEnemyJustTeleported = NULL;

	if ( ! pFnEnemyJustTeleported )
		pFnEnemyJustTeleported = (UFunction*) UObject::GObjObjects()->Data[ 6861 ];

	AController_execEnemyJustTeleported_Parms EnemyJustTeleported_Parms;

	this->ProcessEvent ( pFnEnemyJustTeleported, &EnemyJustTeleported_Parms, NULL );
};

// Function Engine.Controller.BeyondFogDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FVector                 OtherPoint                     ( CPF_Parm )

bool AController::BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint )
{
	static UFunction* pFnBeyondFogDistance = NULL;

	if ( ! pFnBeyondFogDistance )
		pFnBeyondFogDistance = (UFunction*) UObject::GObjObjects()->Data[ 5993 ];

	AController_execBeyondFogDistance_Parms BeyondFogDistance_Parms;
	memcpy ( &BeyondFogDistance_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &BeyondFogDistance_Parms.OtherPoint, &OtherPoint, 0xC );

	pFnBeyondFogDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeyondFogDistance, &BeyondFogDistance_Parms, NULL );

	pFnBeyondFogDistance->FunctionFlags |= 0x400;

	return BeyondFogDistance_Parms.ReturnValue;
};

// Function Engine.Controller.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 6856 ];

	AController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Controller.CleanupPRI
// [0x00020002] 
// Parameters infos:

void AController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = (UFunction*) UObject::GObjObjects()->Data[ 6855 ];

	AController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.Controller.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 6854 ];

	AController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Controller.NotifyPostLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyPostLanded ( )
{
	static UFunction* pFnNotifyPostLanded = NULL;

	if ( ! pFnNotifyPostLanded )
		pFnNotifyPostLanded = (UFunction*) UObject::GObjObjects()->Data[ 6853 ];

	AController_eventNotifyPostLanded_Parms NotifyPostLanded_Parms;

	this->ProcessEvent ( pFnNotifyPostLanded, &NotifyPostLanded_Parms, NULL );
};

// Function Engine.Controller.GamePlayEndedState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::GamePlayEndedState ( )
{
	static UFunction* pFnGamePlayEndedState = NULL;

	if ( ! pFnGamePlayEndedState )
		pFnGamePlayEndedState = (UFunction*) UObject::GObjObjects()->Data[ 6851 ];

	AController_execGamePlayEndedState_Parms GamePlayEndedState_Parms;

	this->ProcessEvent ( pFnGamePlayEndedState, &GamePlayEndedState_Parms, NULL );

	return GamePlayEndedState_Parms.ReturnValue;
};

// Function Engine.Controller.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void AController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 6848 ];

	AController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.Controller.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 6847 ];

	AController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.Controller.UpdateSex
// [0x00020002] 
// Parameters infos:

void AController::UpdateSex ( )
{
	static UFunction* pFnUpdateSex = NULL;

	if ( ! pFnUpdateSex )
		pFnUpdateSex = (UFunction*) UObject::GObjObjects()->Data[ 6846 ];

	AController_execUpdateSex_Parms UpdateSex_Parms;

	this->ProcessEvent ( pFnUpdateSex, &UpdateSex_Parms, NULL );
};

// Function Engine.Controller.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 6843 ];

	AController_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.Controller.OnPossess
// [0x00020002] 
// Parameters infos:
// class USeqAct_Possess*         inAction                       ( CPF_Parm )

void AController::OnPossess ( class USeqAct_Possess* inAction )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 6839 ];

	AController_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function Engine.Controller.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 6837 ];

	AController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Controller.ClientSetRotation
// [0x010241C2] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// unsigned long                  bResetCamera                   ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 6834 ];

	AController_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );
	ClientSetRotation_Parms.bResetCamera = bResetCamera;

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Controller.ClientSetLocation
// [0x010201C2] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void AController::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 6831 ];

	AController_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Controller.Reset
// [0x00020002] 
// Parameters infos:

void AController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 6830 ];

	AController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Controller.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6829 ];

	AController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Controller.GetAdjustLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetAdjustLocation ( )
{
	static UFunction* pFnGetAdjustLocation = NULL;

	if ( ! pFnGetAdjustLocation )
		pFnGetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 6827 ];

	AController_execGetAdjustLocation_Parms GetAdjustLocation_Parms;

	pFnGetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustLocation, &GetAdjustLocation_Parms, NULL );

	pFnGetAdjustLocation->FunctionFlags |= 0x400;

	return GetAdjustLocation_Parms.ReturnValue;
};

// Function Engine.Controller.SetAdjustLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )
// unsigned long                  bAdjust                        ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetAdjustLocation = NULL;

	if ( ! pFnSetAdjustLocation )
		pFnSetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 6823 ];

	AController_execSetAdjustLocation_Parms SetAdjustLocation_Parms;
	memcpy ( &SetAdjustLocation_Parms.NewLoc, &NewLoc, 0xC );
	SetAdjustLocation_Parms.bAdjust = bAdjust;
	SetAdjustLocation_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAdjustLocation, &SetAdjustLocation_Parms, NULL );

	pFnSetAdjustLocation->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetDestinationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetDestinationPosition ( )
{
	static UFunction* pFnGetDestinationPosition = NULL;

	if ( ! pFnGetDestinationPosition )
		pFnGetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 6821 ];

	AController_execGetDestinationPosition_Parms GetDestinationPosition_Parms;

	pFnGetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestinationPosition, &GetDestinationPosition_Parms, NULL );

	pFnGetDestinationPosition->FunctionFlags |= 0x400;

	return GetDestinationPosition_Parms.ReturnValue;
};

// Function Engine.Controller.SetDestinationPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Dest                           ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetDestinationPosition = NULL;

	if ( ! pFnSetDestinationPosition )
		pFnSetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 6818 ];

	AController_execSetDestinationPosition_Parms SetDestinationPosition_Parms;
	memcpy ( &SetDestinationPosition_Parms.Dest, &Dest, 0xC );
	SetDestinationPosition_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDestinationPosition, &SetDestinationPosition_Parms, NULL );

	pFnSetDestinationPosition->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetFocalPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetFocalPoint ( )
{
	static UFunction* pFnGetFocalPoint = NULL;

	if ( ! pFnGetFocalPoint )
		pFnGetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 6816 ];

	AController_execGetFocalPoint_Parms GetFocalPoint_Parms;

	pFnGetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocalPoint, &GetFocalPoint_Parms, NULL );

	pFnGetFocalPoint->FunctionFlags |= 0x400;

	return GetFocalPoint_Parms.ReturnValue;
};

// Function Engine.Controller.SetFocalPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 FP                             ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetFocalPoint = NULL;

	if ( ! pFnSetFocalPoint )
		pFnSetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 6813 ];

	AController_execSetFocalPoint_Parms SetFocalPoint_Parms;
	memcpy ( &SetFocalPoint_Parms.FP, &FP, 0xC );
	SetFocalPoint_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocalPoint, &SetFocalPoint_Parms, NULL );

	pFnSetFocalPoint->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetBasedPosition
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBasedPosition          BP                             ( CPF_Parm )

struct FVector AController::GetBasedPosition ( struct FBasedPosition BP )
{
	static UFunction* pFnGetBasedPosition = NULL;

	if ( ! pFnGetBasedPosition )
		pFnGetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6810 ];

	AController_execGetBasedPosition_Parms GetBasedPosition_Parms;
	memcpy ( &GetBasedPosition_Parms.BP, &BP, 0x34 );

	pFnGetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBasedPosition, &GetBasedPosition_Parms, NULL );

	pFnGetBasedPosition->FunctionFlags |= 0x400;

	return GetBasedPosition_Parms.ReturnValue;
};

// Function Engine.Controller.SetBasedPosition
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// struct FBasedPosition          BP                             ( CPF_Parm | CPF_OutParm )

void AController::SetBasedPosition ( struct FVector pos, struct FBasedPosition* BP )
{
	static UFunction* pFnSetBasedPosition = NULL;

	if ( ! pFnSetBasedPosition )
		pFnSetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6807 ];

	AController_execSetBasedPosition_Parms SetBasedPosition_Parms;
	memcpy ( &SetBasedPosition_Parms.pos, &pos, 0xC );

	pFnSetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBasedPosition, &SetBasedPosition_Parms, NULL );

	pFnSetBasedPosition->FunctionFlags |= 0x400;

	if ( BP )
		memcpy ( BP, &SetBasedPosition_Parms.BP, 0x34 );
};

// Function Engine.Controller.RouteCache_RemoveIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            InIndex                        ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_RemoveIndex ( int InIndex, int Count )
{
	static UFunction* pFnRouteCache_RemoveIndex = NULL;

	if ( ! pFnRouteCache_RemoveIndex )
		pFnRouteCache_RemoveIndex = (UFunction*) UObject::GObjObjects()->Data[ 6804 ];

	AController_execRouteCache_RemoveIndex_Parms RouteCache_RemoveIndex_Parms;
	RouteCache_RemoveIndex_Parms.InIndex = InIndex;
	RouteCache_RemoveIndex_Parms.Count = Count;

	pFnRouteCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Parms, NULL );

	pFnRouteCache_RemoveIndex->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_RemoveItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_RemoveItem = NULL;

	if ( ! pFnRouteCache_RemoveItem )
		pFnRouteCache_RemoveItem = (UFunction*) UObject::GObjObjects()->Data[ 6802 ];

	AController_execRouteCache_RemoveItem_Parms RouteCache_RemoveItem_Parms;
	RouteCache_RemoveItem_Parms.Nav = Nav;

	pFnRouteCache_RemoveItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveItem, &RouteCache_RemoveItem_Parms, NULL );

	pFnRouteCache_RemoveItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_InsertItem
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// int                            Idx                            ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx )
{
	static UFunction* pFnRouteCache_InsertItem = NULL;

	if ( ! pFnRouteCache_InsertItem )
		pFnRouteCache_InsertItem = (UFunction*) UObject::GObjObjects()->Data[ 6799 ];

	AController_execRouteCache_InsertItem_Parms RouteCache_InsertItem_Parms;
	RouteCache_InsertItem_Parms.Nav = Nav;
	RouteCache_InsertItem_Parms.Idx = Idx;

	pFnRouteCache_InsertItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_InsertItem, &RouteCache_InsertItem_Parms, NULL );

	pFnRouteCache_InsertItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_AddItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_AddItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_AddItem = NULL;

	if ( ! pFnRouteCache_AddItem )
		pFnRouteCache_AddItem = (UFunction*) UObject::GObjObjects()->Data[ 6797 ];

	AController_execRouteCache_AddItem_Parms RouteCache_AddItem_Parms;
	RouteCache_AddItem_Parms.Nav = Nav;

	pFnRouteCache_AddItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_AddItem, &RouteCache_AddItem_Parms, NULL );

	pFnRouteCache_AddItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::RouteCache_Empty ( )
{
	static UFunction* pFnRouteCache_Empty = NULL;

	if ( ! pFnRouteCache_Empty )
		pFnRouteCache_Empty = (UFunction*) UObject::GObjObjects()->Data[ 6796 ];

	AController_execRouteCache_Empty_Parms RouteCache_Empty_Parms;

	pFnRouteCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_Empty, &RouteCache_Empty_Parms, NULL );

	pFnRouteCache_Empty->FunctionFlags |= 0x400;
};

// Function Engine.Controller.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 6794 ];

	AController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PostAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PostAcquireTravelTheWorldPoints )
		pFnSentinel_PostAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 8430 ];

	APlayerController_execSentinel_PostAcquireTravelTheWorldPoints_Parms Sentinel_PostAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PostAcquireTravelTheWorldPoints, &Sentinel_PostAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PreAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PreAcquireTravelTheWorldPoints )
		pFnSentinel_PreAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 8429 ];

	APlayerController_execSentinel_PreAcquireTravelTheWorldPoints_Parms Sentinel_PreAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PreAcquireTravelTheWorldPoints, &Sentinel_PreAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld ( )
{
	static UFunction* pFnSentinel_SetupForGamebasedTravelTheWorld = NULL;

	if ( ! pFnSentinel_SetupForGamebasedTravelTheWorld )
		pFnSentinel_SetupForGamebasedTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 8428 ];

	APlayerController_execSentinel_SetupForGamebasedTravelTheWorld_Parms Sentinel_SetupForGamebasedTravelTheWorld_Parms;

	this->ProcessEvent ( pFnSentinel_SetupForGamebasedTravelTheWorld, &Sentinel_SetupForGamebasedTravelTheWorld_Parms, NULL );
};

// Function Engine.PlayerController.GetAchievementProgression
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AchievementId                  ( CPF_Parm )
// float                          CurrentValue                   ( CPF_Parm | CPF_OutParm )
// float                          MaxValue                       ( CPF_Parm | CPF_OutParm )

bool APlayerController::eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue )
{
	static UFunction* pFnGetAchievementProgression = NULL;

	if ( ! pFnGetAchievementProgression )
		pFnGetAchievementProgression = (UFunction*) UObject::GObjObjects()->Data[ 8423 ];

	APlayerController_eventGetAchievementProgression_Parms GetAchievementProgression_Parms;
	GetAchievementProgression_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementProgression, &GetAchievementProgression_Parms, NULL );

	if ( CurrentValue )
		*CurrentValue = GetAchievementProgression_Parms.CurrentValue;

	if ( MaxValue )
		*MaxValue = GetAchievementProgression_Parms.MaxValue;

	return GetAchievementProgression_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetGameModeURLString
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsSessionHost                 ( CPF_Parm )

struct FString APlayerController::GetGameModeURLString ( unsigned long bIsSessionHost )
{
	static UFunction* pFnGetGameModeURLString = NULL;

	if ( ! pFnGetGameModeURLString )
		pFnGetGameModeURLString = (UFunction*) UObject::GObjObjects()->Data[ 8420 ];

	APlayerController_execGetGameModeURLString_Parms GetGameModeURLString_Parms;
	GetGameModeURLString_Parms.bIsSessionHost = bIsSessionHost;

	this->ProcessEvent ( pFnGetGameModeURLString, &GetGameModeURLString_Parms, NULL );

	return GetGameModeURLString_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyModeURLString
// [0x00026000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsPartyLeader                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturningFromMatch            ( CPF_OptionalParm | CPF_Parm )

struct FString APlayerController::GetPartyModeURLString ( unsigned long bIsPartyLeader, unsigned long bReturningFromMatch )
{
	static UFunction* pFnGetPartyModeURLString = NULL;

	if ( ! pFnGetPartyModeURLString )
		pFnGetPartyModeURLString = (UFunction*) UObject::GObjObjects()->Data[ 8416 ];

	APlayerController_execGetPartyModeURLString_Parms GetPartyModeURLString_Parms;
	GetPartyModeURLString_Parms.bIsPartyLeader = bIsPartyLeader;
	GetPartyModeURLString_Parms.bReturningFromMatch = bReturningFromMatch;

	this->ProcessEvent ( pFnGetPartyModeURLString, &GetPartyModeURLString_Parms, NULL );

	return GetPartyModeURLString_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyGameTypeName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerController::GetPartyGameTypeName ( )
{
	static UFunction* pFnGetPartyGameTypeName = NULL;

	if ( ! pFnGetPartyGameTypeName )
		pFnGetPartyGameTypeName = (UFunction*) UObject::GObjObjects()->Data[ 8414 ];

	APlayerController_execGetPartyGameTypeName_Parms GetPartyGameTypeName_Parms;

	this->ProcessEvent ( pFnGetPartyGameTypeName, &GetPartyGameTypeName_Parms, NULL );

	return GetPartyGameTypeName_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyMapName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerController::GetPartyMapName ( )
{
	static UFunction* pFnGetPartyMapName = NULL;

	if ( ! pFnGetPartyMapName )
		pFnGetPartyMapName = (UFunction*) UObject::GObjObjects()->Data[ 8412 ];

	APlayerController_execGetPartyMapName_Parms GetPartyMapName_Parms;

	this->ProcessEvent ( pFnGetPartyMapName, &GetPartyMapName_Parms, NULL );

	return GetPartyMapName_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsPartyLeader
// [0x00024100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PartyLeaderPRI                 ( CPF_OptionalParm | CPF_Parm )

bool APlayerController::IsPartyLeader ( class APlayerReplicationInfo* PartyLeaderPRI )
{
	static UFunction* pFnIsPartyLeader = NULL;

	if ( ! pFnIsPartyLeader )
		pFnIsPartyLeader = (UFunction*) UObject::GObjObjects()->Data[ 8409 ];

	APlayerController_execIsPartyLeader_Parms IsPartyLeader_Parms;
	IsPartyLeader_Parms.PartyLeaderPRI = PartyLeaderPRI;

	this->ProcessEvent ( pFnIsPartyLeader, &IsPartyLeader_Parms, NULL );

	return IsPartyLeader_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetSplitscreenPlayerByIndex
// [0x00024100] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex ( int PlayerIndex )
{
	static UFunction* pFnGetSplitscreenPlayerByIndex = NULL;

	if ( ! pFnGetSplitscreenPlayerByIndex )
		pFnGetSplitscreenPlayerByIndex = (UFunction*) UObject::GObjObjects()->Data[ 8406 ];

	APlayerController_execGetSplitscreenPlayerByIndex_Parms GetSplitscreenPlayerByIndex_Parms;
	GetSplitscreenPlayerByIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnGetSplitscreenPlayerByIndex, &GetSplitscreenPlayerByIndex_Parms, NULL );

	return GetSplitscreenPlayerByIndex_Parms.ReturnValue;
};

// Function Engine.PlayerController.HasSplitscreenPlayer
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool APlayerController::HasSplitscreenPlayer ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnHasSplitscreenPlayer = NULL;

	if ( ! pFnHasSplitscreenPlayer )
		pFnHasSplitscreenPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8403 ];

	APlayerController_execHasSplitscreenPlayer_Parms HasSplitscreenPlayer_Parms;
	HasSplitscreenPlayer_Parms.PRI = PRI;

	this->ProcessEvent ( pFnHasSplitscreenPlayer, &HasSplitscreenPlayer_Parms, NULL );

	return HasSplitscreenPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsSplitscreenPlayer
// [0x00424100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            out_SplitscreenPlayerIndex     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool APlayerController::IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex )
{
	static UFunction* pFnIsSplitscreenPlayer = NULL;

	if ( ! pFnIsSplitscreenPlayer )
		pFnIsSplitscreenPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8400 ];

	APlayerController_execIsSplitscreenPlayer_Parms IsSplitscreenPlayer_Parms;

	this->ProcessEvent ( pFnIsSplitscreenPlayer, &IsSplitscreenPlayer_Parms, NULL );

	if ( out_SplitscreenPlayerIndex )
		*out_SplitscreenPlayerIndex = IsSplitscreenPlayer_Parms.out_SplitscreenPlayerIndex;

	return IsSplitscreenPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.DelayedReturnToPartyLobby
// [0x00020100] 
// Parameters infos:

void APlayerController::DelayedReturnToPartyLobby ( )
{
	static UFunction* pFnDelayedReturnToPartyLobby = NULL;

	if ( ! pFnDelayedReturnToPartyLobby )
		pFnDelayedReturnToPartyLobby = (UFunction*) UObject::GObjObjects()->Data[ 8399 ];

	APlayerController_execDelayedReturnToPartyLobby_Parms DelayedReturnToPartyLobby_Parms;

	this->ProcessEvent ( pFnDelayedReturnToPartyLobby, &DelayedReturnToPartyLobby_Parms, NULL );
};

// Function Engine.PlayerController.ClientReturnToParty
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientReturnToParty ( )
{
	static UFunction* pFnClientReturnToParty = NULL;

	if ( ! pFnClientReturnToParty )
		pFnClientReturnToParty = (UFunction*) UObject::GObjObjects()->Data[ 8398 ];

	APlayerController_execClientReturnToParty_Parms ClientReturnToParty_Parms;

	this->ProcessEvent ( pFnClientReturnToParty, &ClientReturnToParty_Parms, NULL );
};

// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinTravelToSessionComplete = NULL;

	if ( ! pFnOnJoinTravelToSessionComplete )
		pFnOnJoinTravelToSessionComplete = (UFunction*) UObject::GObjObjects()->Data[ 8394 ];

	APlayerController_execOnJoinTravelToSessionComplete_Parms OnJoinTravelToSessionComplete_Parms;
	memcpy ( &OnJoinTravelToSessionComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinTravelToSessionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinTravelToSessionComplete, &OnJoinTravelToSessionComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientTravelToSession
// [0x018201C2] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void APlayerController::ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnClientTravelToSession = NULL;

	if ( ! pFnClientTravelToSession )
		pFnClientTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 8387 ];

	APlayerController_execClientTravelToSession_Parms ClientTravelToSession_Parms;
	memcpy ( &ClientTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	ClientTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &ClientTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x44 );

	this->ProcessEvent ( pFnClientTravelToSession, &ClientTravelToSession_Parms, NULL );
};

// Function Engine.PlayerController.ShowSurvey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm )
// struct FString                 Context                        ( CPF_Parm )

void APlayerController::ShowSurvey ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnShowSurvey = NULL;

	if ( ! pFnShowSurvey )
		pFnShowSurvey = (UFunction*) UObject::GObjObjects()->Data[ 8331 ];

	APlayerController_execShowSurvey_Parms ShowSurvey_Parms;
	memcpy ( &ShowSurvey_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ShowSurvey_Parms.Context, &Context, 0xC );

	pFnShowSurvey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowSurvey, &ShowSurvey_Parms, NULL );

	pFnShowSurvey->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientShowSurvey
// [0x010201C2] 
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm )
// struct FString                 Context                        ( CPF_Parm )

void APlayerController::ClientShowSurvey ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnClientShowSurvey = NULL;

	if ( ! pFnClientShowSurvey )
		pFnClientShowSurvey = (UFunction*) UObject::GObjObjects()->Data[ 8328 ];

	APlayerController_execClientShowSurvey_Parms ClientShowSurvey_Parms;
	memcpy ( &ClientShowSurvey_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ClientShowSurvey_Parms.Context, &Context, 0xC );

	this->ProcessEvent ( pFnClientShowSurvey, &ClientShowSurvey_Parms, NULL );
};

// Function Engine.PlayerController.PathClear
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PathClear ( )
{
	static UFunction* pFnPathClear = NULL;

	if ( ! pFnPathClear )
		pFnPathClear = (UFunction*) UObject::GObjObjects()->Data[ 8327 ];

	APlayerController_execPathClear_Parms PathClear_Parms;

	this->ProcessEvent ( pFnPathClear, &PathClear_Parms, NULL );
};

// Function Engine.PlayerController.PathChild
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathChild ( int Cnt )
{
	static UFunction* pFnPathChild = NULL;

	if ( ! pFnPathChild )
		pFnPathChild = (UFunction*) UObject::GObjObjects()->Data[ 8325 ];

	APlayerController_execPathChild_Parms PathChild_Parms;
	PathChild_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathChild, &PathChild_Parms, NULL );
};

// Function Engine.PlayerController.PathStep
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathStep ( int Cnt )
{
	static UFunction* pFnPathStep = NULL;

	if ( ! pFnPathStep )
		pFnPathStep = (UFunction*) UObject::GObjObjects()->Data[ 8323 ];

	APlayerController_execPathStep_Parms PathStep_Parms;
	PathStep_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathStep, &PathStep_Parms, NULL );
};

// Function Engine.PlayerController.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::eventSoakPause ( class APawn* P )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 8321 ];

	APlayerController_eventSoakPause_Parms SoakPause_Parms;
	SoakPause_Parms.P = P;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// [0x00020000] 
// Parameters infos:

void APlayerController::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 8320 ];

	APlayerController_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.PlayerController.CanViewUserCreatedContent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanViewUserCreatedContent ( )
{
	static UFunction* pFnCanViewUserCreatedContent = NULL;

	if ( ! pFnCanViewUserCreatedContent )
		pFnCanViewUserCreatedContent = (UFunction*) UObject::GObjObjects()->Data[ 8317 ];

	APlayerController_execCanViewUserCreatedContent_Parms CanViewUserCreatedContent_Parms;

	this->ProcessEvent ( pFnCanViewUserCreatedContent, &CanViewUserCreatedContent_Parms, NULL );

	return CanViewUserCreatedContent_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientEndOnlineGame
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientEndOnlineGame ( )
{
	static UFunction* pFnClientEndOnlineGame = NULL;

	if ( ! pFnClientEndOnlineGame )
		pFnClientEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 8316 ];

	APlayerController_execClientEndOnlineGame_Parms ClientEndOnlineGame_Parms;

	this->ProcessEvent ( pFnClientEndOnlineGame, &ClientEndOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartOnlineGame
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientStartOnlineGame ( )
{
	static UFunction* pFnClientStartOnlineGame = NULL;

	if ( ! pFnClientStartOnlineGame )
		pFnClientStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 8315 ];

	APlayerController_execClientStartOnlineGame_Parms ClientStartOnlineGame_Parms;

	this->ProcessEvent ( pFnClientStartOnlineGame, &ClientStartOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.ServerRegisterClientStatGuid
// [0x002200C0] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm )

void APlayerController::ServerRegisterClientStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnServerRegisterClientStatGuid = NULL;

	if ( ! pFnServerRegisterClientStatGuid )
		pFnServerRegisterClientStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 8313 ];

	APlayerController_execServerRegisterClientStatGuid_Parms ServerRegisterClientStatGuid_Parms;
	memcpy ( &ServerRegisterClientStatGuid_Parms.StatGuid, &StatGuid, 0xC );

	this->ProcessEvent ( pFnServerRegisterClientStatGuid, &ServerRegisterClientStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 8311 ];

	APlayerController_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterHostStatGuid
// [0x010201C0] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm )

void APlayerController::ClientRegisterHostStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnClientRegisterHostStatGuid = NULL;

	if ( ! pFnClientRegisterHostStatGuid )
		pFnClientRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 8309 ];

	APlayerController_execClientRegisterHostStatGuid_Parms ClientRegisterHostStatGuid_Parms;
	memcpy ( &ClientRegisterHostStatGuid_Parms.StatGuid, &StatGuid, 0xC );

	this->ProcessEvent ( pFnClientRegisterHostStatGuid, &ClientRegisterHostStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.EnableDebugCamera
// [0x00820002] 
// Parameters infos:

void APlayerController::EnableDebugCamera ( )
{
	static UFunction* pFnEnableDebugCamera = NULL;

	if ( ! pFnEnableDebugCamera )
		pFnEnableDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 8305 ];

	APlayerController_execEnableDebugCamera_Parms EnableDebugCamera_Parms;

	this->ProcessEvent ( pFnEnableDebugCamera, &EnableDebugCamera_Parms, NULL );
};

// Function Engine.PlayerController.RemoveDebugText
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AActor*                  SrcActor                       ( CPF_Parm )

void APlayerController::eventRemoveDebugText ( class AActor* SrcActor )
{
	static UFunction* pFnRemoveDebugText = NULL;

	if ( ! pFnRemoveDebugText )
		pFnRemoveDebugText = (UFunction*) UObject::GObjObjects()->Data[ 8302 ];

	APlayerController_eventRemoveDebugText_Parms RemoveDebugText_Parms;
	RemoveDebugText_Parms.SrcActor = SrcActor;

	this->ProcessEvent ( pFnRemoveDebugText, &RemoveDebugText_Parms, NULL );
};

// Function Engine.PlayerController.AddDebugText
// [0x010249C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 DebugText                      ( CPF_Parm )
// class AActor*                  SrcActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Offset                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 DesiredOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverwriteCheck            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck )
{
	static UFunction* pFnAddDebugText = NULL;

	if ( ! pFnAddDebugText )
		pFnAddDebugText = (UFunction*) UObject::GObjObjects()->Data[ 8293 ];

	APlayerController_eventAddDebugText_Parms AddDebugText_Parms;
	memcpy ( &AddDebugText_Parms.DebugText, &DebugText, 0xC );
	AddDebugText_Parms.SrcActor = SrcActor;
	AddDebugText_Parms.Duration = Duration;
	memcpy ( &AddDebugText_Parms.Offset, &Offset, 0xC );
	memcpy ( &AddDebugText_Parms.DesiredOffset, &DesiredOffset, 0xC );
	memcpy ( &AddDebugText_Parms.TextColor, &TextColor, 0x4 );
	AddDebugText_Parms.bSkipOverwriteCheck = bSkipOverwriteCheck;

	this->ProcessEvent ( pFnAddDebugText, &AddDebugText_Parms, NULL );
};

// Function Engine.PlayerController.DrawDebugTextList
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// float                          RenderDelta                    ( CPF_Parm )

void APlayerController::DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta )
{
	static UFunction* pFnDrawDebugTextList = NULL;

	if ( ! pFnDrawDebugTextList )
		pFnDrawDebugTextList = (UFunction*) UObject::GObjObjects()->Data[ 8285 ];

	APlayerController_execDrawDebugTextList_Parms DrawDebugTextList_Parms;
	DrawDebugTextList_Parms.Canvas = Canvas;
	DrawDebugTextList_Parms.RenderDelta = RenderDelta;

	this->ProcessEvent ( pFnDrawDebugTextList, &DrawDebugTextList_Parms, NULL );
};

// Function Engine.PlayerController.SendToConsole
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm )

void APlayerController::SendToConsole ( struct FString Command )
{
	static UFunction* pFnSendToConsole = NULL;

	if ( ! pFnSendToConsole )
		pFnSendToConsole = (UFunction*) UObject::GObjObjects()->Data[ 8283 ];

	APlayerController_execSendToConsole_Parms SendToConsole_Parms;
	memcpy ( &SendToConsole_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSendToConsole, &SendToConsole_Parms, NULL );
};

// Function Engine.PlayerController.ConsoleKey
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void APlayerController::ConsoleKey ( struct FName Key )
{
	static UFunction* pFnConsoleKey = NULL;

	if ( ! pFnConsoleKey )
		pFnConsoleKey = (UFunction*) UObject::GObjObjects()->Data[ 8281 ];

	APlayerController_execConsoleKey_Parms ConsoleKey_Parms;
	memcpy ( &ConsoleKey_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnConsoleKey, &ConsoleKey_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void APlayerController::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 8279 ];

	APlayerController_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartNetworkedVoice
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientStartNetworkedVoice ( )
{
	static UFunction* pFnClientStartNetworkedVoice = NULL;

	if ( ! pFnClientStartNetworkedVoice )
		pFnClientStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 8278 ];

	APlayerController_execClientStartNetworkedVoice_Parms ClientStartNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStartNetworkedVoice, &ClientStartNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopNetworkedVoice
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 8277 ];

	APlayerController_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHostUniqueId
// [0x010201C0] 
// Parameters infos:
// struct FUniqueNetId            InHostId                       ( CPF_Parm )

void APlayerController::ClientSetHostUniqueId ( struct FUniqueNetId InHostId )
{
	static UFunction* pFnClientSetHostUniqueId = NULL;

	if ( ! pFnClientSetHostUniqueId )
		pFnClientSetHostUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 8275 ];

	APlayerController_execClientSetHostUniqueId_Parms ClientSetHostUniqueId_Parms;
	memcpy ( &ClientSetHostUniqueId_Parms.InHostId, &InHostId, 0x8 );

	this->ProcessEvent ( pFnClientSetHostUniqueId, &ClientSetHostUniqueId_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteLeaderboardStats
// [0x010201C0] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )

void APlayerController::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 8273 ];

	APlayerController_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// [0x010201C0] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )

void APlayerController::ClientWriteOnlinePlayerScores ( int LeaderboardId )
{
	static UFunction* pFnClientWriteOnlinePlayerScores = NULL;

	if ( ! pFnClientWriteOnlinePlayerScores )
		pFnClientWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 8271 ];

	APlayerController_execClientWriteOnlinePlayerScores_Parms ClientWriteOnlinePlayerScores_Parms;
	ClientWriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnClientWriteOnlinePlayerScores, &ClientWriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.PlayerController.ClientArbitratedMatchEnded
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientArbitratedMatchEnded ( )
{
	static UFunction* pFnClientArbitratedMatchEnded = NULL;

	if ( ! pFnClientArbitratedMatchEnded )
		pFnClientArbitratedMatchEnded = (UFunction*) UObject::GObjObjects()->Data[ 8270 ];

	APlayerController_execClientArbitratedMatchEnded_Parms ClientArbitratedMatchEnded_Parms;

	this->ProcessEvent ( pFnClientArbitratedMatchEnded, &ClientArbitratedMatchEnded_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// [0x00020000] 
// Parameters infos:

void APlayerController::NotifyNotEnoughSpaceInInvite ( )
{
	static UFunction* pFnNotifyNotEnoughSpaceInInvite = NULL;

	if ( ! pFnNotifyNotEnoughSpaceInInvite )
		pFnNotifyNotEnoughSpaceInInvite = (UFunction*) UObject::GObjObjects()->Data[ 8269 ];

	APlayerController_execNotifyNotEnoughSpaceInInvite_Parms NotifyNotEnoughSpaceInInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotEnoughSpaceInInvite, &NotifyNotEnoughSpaceInInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// [0x00020000] 
// Parameters infos:

void APlayerController::NotifyNotAllPlayersCanJoinInvite ( )
{
	static UFunction* pFnNotifyNotAllPlayersCanJoinInvite = NULL;

	if ( ! pFnNotifyNotAllPlayersCanJoinInvite )
		pFnNotifyNotAllPlayersCanJoinInvite = (UFunction*) UObject::GObjObjects()->Data[ 8268 ];

	APlayerController_execNotifyNotAllPlayersCanJoinInvite_Parms NotifyNotAllPlayersCanJoinInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotAllPlayersCanJoinInvite, &NotifyNotAllPlayersCanJoinInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyInviteFailed
// [0x00020000] 
// Parameters infos:

void APlayerController::NotifyInviteFailed ( )
{
	static UFunction* pFnNotifyInviteFailed = NULL;

	if ( ! pFnNotifyInviteFailed )
		pFnNotifyInviteFailed = (UFunction*) UObject::GObjObjects()->Data[ 8267 ];

	APlayerController_execNotifyInviteFailed_Parms NotifyInviteFailed_Parms;

	this->ProcessEvent ( pFnNotifyInviteFailed, &NotifyInviteFailed_Parms, NULL );
};

// Function Engine.PlayerController.OnInviteJoinComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnInviteJoinComplete = NULL;

	if ( ! pFnOnInviteJoinComplete )
		pFnOnInviteJoinComplete = (UFunction*) UObject::GObjObjects()->Data[ 8264 ];

	APlayerController_execOnInviteJoinComplete_Parms OnInviteJoinComplete_Parms;
	memcpy ( &OnInviteJoinComplete_Parms.SessionName, &SessionName, 0x8 );
	OnInviteJoinComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnInviteJoinComplete, &OnInviteJoinComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroyForInviteComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyForInviteComplete = NULL;

	if ( ! pFnOnDestroyForInviteComplete )
		pFnOnDestroyForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 8261 ];

	APlayerController_execOnDestroyForInviteComplete_Parms OnDestroyForInviteComplete_Parms;
	memcpy ( &OnDestroyForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyForInviteComplete, &OnDestroyForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnEndForInviteComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndForInviteComplete = NULL;

	if ( ! pFnOnEndForInviteComplete )
		pFnOnEndForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 8258 ];

	APlayerController_execOnEndForInviteComplete_Parms OnEndForInviteComplete_Parms;
	memcpy ( &OnEndForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndForInviteComplete, &OnEndForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClearInviteDelegates
// [0x00020000] 
// Parameters infos:

void APlayerController::ClearInviteDelegates ( )
{
	static UFunction* pFnClearInviteDelegates = NULL;

	if ( ! pFnClearInviteDelegates )
		pFnClearInviteDelegates = (UFunction*) UObject::GObjObjects()->Data[ 8257 ];

	APlayerController_execClearInviteDelegates_Parms ClearInviteDelegates_Parms;

	this->ProcessEvent ( pFnClearInviteDelegates, &ClearInviteDelegates_Parms, NULL );
};

// Function Engine.PlayerController.CanAllPlayersPlayOnline
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanAllPlayersPlayOnline ( )
{
	static UFunction* pFnCanAllPlayersPlayOnline = NULL;

	if ( ! pFnCanAllPlayersPlayOnline )
		pFnCanAllPlayersPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 8255 ];

	APlayerController_execCanAllPlayersPlayOnline_Parms CanAllPlayersPlayOnline_Parms;

	this->ProcessEvent ( pFnCanAllPlayersPlayOnline, &CanAllPlayersPlayOnline_Parms, NULL );

	return CanAllPlayersPlayOnline_Parms.ReturnValue;
};

// Function Engine.PlayerController.InviteHasEnoughSpace
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSettings*     InviteSettings                 ( CPF_Parm )

bool APlayerController::InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings )
{
	static UFunction* pFnInviteHasEnoughSpace = NULL;

	if ( ! pFnInviteHasEnoughSpace )
		pFnInviteHasEnoughSpace = (UFunction*) UObject::GObjObjects()->Data[ 8252 ];

	APlayerController_execInviteHasEnoughSpace_Parms InviteHasEnoughSpace_Parms;
	InviteHasEnoughSpace_Parms.InviteSettings = InviteSettings;

	this->ProcessEvent ( pFnInviteHasEnoughSpace, &InviteHasEnoughSpace_Parms, NULL );

	return InviteHasEnoughSpace_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnGameInviteAccepted
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSettings*     GameInviteSettings             ( CPF_Parm )

void APlayerController::OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 8250 ];

	APlayerController_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	OnGameInviteAccepted_Parms.GameInviteSettings = GameInviteSettings;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );
};

// Function Engine.PlayerController.ServerRegisteredForArbitration
// [0x002200C0] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::ServerRegisteredForArbitration ( unsigned long bWasSuccessful )
{
	static UFunction* pFnServerRegisteredForArbitration = NULL;

	if ( ! pFnServerRegisteredForArbitration )
		pFnServerRegisteredForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 8248 ];

	APlayerController_execServerRegisteredForArbitration_Parms ServerRegisteredForArbitration_Parms;
	ServerRegisteredForArbitration_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnServerRegisteredForArbitration, &ServerRegisteredForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.OnArbitrationRegisterComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegisterComplete = NULL;

	if ( ! pFnOnArbitrationRegisterComplete )
		pFnOnArbitrationRegisterComplete = (UFunction*) UObject::GObjObjects()->Data[ 8245 ];

	APlayerController_execOnArbitrationRegisterComplete_Parms OnArbitrationRegisterComplete_Parms;
	memcpy ( &OnArbitrationRegisterComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegisterComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegisterComplete, &OnArbitrationRegisterComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterForArbitration
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientRegisterForArbitration ( )
{
	static UFunction* pFnClientRegisterForArbitration = NULL;

	if ( ! pFnClientRegisterForArbitration )
		pFnClientRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 8244 ];

	APlayerController_execClientRegisterForArbitration_Parms ClientRegisterForArbitration_Parms;

	this->ProcessEvent ( pFnClientRegisterForArbitration, &ClientRegisterForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.ClientWasKicked
// [0x010209C0] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = (UFunction*) UObject::GObjObjects()->Data[ 8243 ];

	APlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function Engine.PlayerController.NotifyConnectionError
// [0x00024002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm )

void APlayerController::NotifyConnectionError ( struct FString Message, struct FString Title )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = (UFunction*) UObject::GObjObjects()->Data[ 8240 ];

	APlayerController_execNotifyConnectionError_Parms NotifyConnectionError_Parms;
	memcpy ( &NotifyConnectionError_Parms.Message, &Message, 0xC );
	memcpy ( &NotifyConnectionError_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function Engine.PlayerController.IsShowingSubtitles
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsShowingSubtitles ( )
{
	static UFunction* pFnIsShowingSubtitles = NULL;

	if ( ! pFnIsShowingSubtitles )
		pFnIsShowingSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 8238 ];

	APlayerController_execIsShowingSubtitles_Parms IsShowingSubtitles_Parms;

	pFnIsShowingSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingSubtitles, &IsShowingSubtitles_Parms, NULL );

	pFnIsShowingSubtitles->FunctionFlags |= 0x400;

	return IsShowingSubtitles_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetShowSubtitles
// [0x00020700] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void APlayerController::SetShowSubtitles ( unsigned long bValue )
{
	static UFunction* pFnSetShowSubtitles = NULL;

	if ( ! pFnSetShowSubtitles )
		pFnSetShowSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 8236 ];

	APlayerController_execSetShowSubtitles_Parms SetShowSubtitles_Parms;
	SetShowSubtitles_Parms.bValue = bValue;

	pFnSetShowSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShowSubtitles, &SetShowSubtitles_Parms, NULL );

	pFnSetShowSubtitles->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.NotifyDirectorControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowControlling                ( CPF_Parm )

void APlayerController::eventNotifyDirectorControl ( unsigned long bNowControlling )
{
	static UFunction* pFnNotifyDirectorControl = NULL;

	if ( ! pFnNotifyDirectorControl )
		pFnNotifyDirectorControl = (UFunction*) UObject::GObjObjects()->Data[ 8234 ];

	APlayerController_eventNotifyDirectorControl_Parms NotifyDirectorControl_Parms;
	NotifyDirectorControl_Parms.bNowControlling = bNowControlling;

	this->ProcessEvent ( pFnNotifyDirectorControl, &NotifyDirectorControl_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientVoiceHandshakeComplete ( )
{
	static UFunction* pFnClientVoiceHandshakeComplete = NULL;

	if ( ! pFnClientVoiceHandshakeComplete )
		pFnClientVoiceHandshakeComplete = (UFunction*) UObject::GObjObjects()->Data[ 8233 ];

	APlayerController_execClientVoiceHandshakeComplete_Parms ClientVoiceHandshakeComplete_Parms;

	this->ProcessEvent ( pFnClientVoiceHandshakeComplete, &ClientVoiceHandshakeComplete_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerControllerFromNetId
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

class APlayerController* APlayerController::GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGetPlayerControllerFromNetId = NULL;

	if ( ! pFnGetPlayerControllerFromNetId )
		pFnGetPlayerControllerFromNetId = (UFunction*) UObject::GObjObjects()->Data[ 8230 ];

	APlayerController_execGetPlayerControllerFromNetId_Parms GetPlayerControllerFromNetId_Parms;
	memcpy ( &GetPlayerControllerFromNetId_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerFromNetId, &GetPlayerControllerFromNetId_Parms, NULL );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= 0x400;

	return GetPlayerControllerFromNetId_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetOnlineStatus
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 8229 ];

	APlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelFrom
// [0x00020002] 
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelFrom ( class APlayerController* OldPC )
{
	static UFunction* pFnSeamlessTravelFrom = NULL;

	if ( ! pFnSeamlessTravelFrom )
		pFnSeamlessTravelFrom = (UFunction*) UObject::GObjObjects()->Data[ 8227 ];

	APlayerController_execSeamlessTravelFrom_Parms SeamlessTravelFrom_Parms;
	SeamlessTravelFrom_Parms.OldPC = OldPC;

	this->ProcessEvent ( pFnSeamlessTravelFrom, &SeamlessTravelFrom_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelTo
// [0x00020000] 
// Parameters infos:
// class APlayerController*       NewPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelTo ( class APlayerController* NewPC )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 8225 ];

	APlayerController_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPC = NewPC;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerController.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm )

void APlayerController::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 8221 ];

	APlayerController_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.PlayerController.IsPlayerMuted
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Sender                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerController::IsPlayerMuted ( struct FUniqueNetId* Sender )
{
	static UFunction* pFnIsPlayerMuted = NULL;

	if ( ! pFnIsPlayerMuted )
		pFnIsPlayerMuted = (UFunction*) UObject::GObjObjects()->Data[ 8218 ];

	APlayerController_execIsPlayerMuted_Parms IsPlayerMuted_Parms;

	pFnIsPlayerMuted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerMuted, &IsPlayerMuted_Parms, NULL );

	pFnIsPlayerMuted->FunctionFlags |= 0x400;

	if ( Sender )
		memcpy ( Sender, &IsPlayerMuted_Parms.Sender, 0x8 );

	return IsPlayerMuted_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetUIController
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* APlayerController::GetUIController ( )
{
	static UFunction* pFnGetUIController = NULL;

	if ( ! pFnGetUIController )
		pFnGetUIController = (UFunction*) UObject::GObjObjects()->Data[ 8214 ];

	APlayerController_execGetUIController_Parms GetUIController_Parms;

	this->ProcessEvent ( pFnGetUIController, &GetUIController_Parms, NULL );

	return GetUIController_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientSetBlockOnAsyncLoading ( )
{
	static UFunction* pFnClientSetBlockOnAsyncLoading = NULL;

	if ( ! pFnClientSetBlockOnAsyncLoading )
		pFnClientSetBlockOnAsyncLoading = (UFunction*) UObject::GObjObjects()->Data[ 8213 ];

	APlayerController_eventClientSetBlockOnAsyncLoading_Parms ClientSetBlockOnAsyncLoading_Parms;

	this->ProcessEvent ( pFnClientSetBlockOnAsyncLoading, &ClientSetBlockOnAsyncLoading_Parms, NULL );
};

// Function Engine.PlayerController.ClientFlushLevelStreaming
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerController::eventClientFlushLevelStreaming ( )
{
	static UFunction* pFnClientFlushLevelStreaming = NULL;

	if ( ! pFnClientFlushLevelStreaming )
		pFnClientFlushLevelStreaming = (UFunction*) UObject::GObjObjects()->Data[ 8212 ];

	APlayerController_eventClientFlushLevelStreaming_Parms ClientFlushLevelStreaming_Parms;

	pFnClientFlushLevelStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientFlushLevelStreaming, &ClientFlushLevelStreaming_Parms, NULL );

	pFnClientFlushLevelStreaming->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientCommitMapChange
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bShouldSkipLevelStartupEvent   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipLevelBeginningEvent ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientCommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent )
{
	static UFunction* pFnClientCommitMapChange = NULL;

	if ( ! pFnClientCommitMapChange )
		pFnClientCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8209 ];

	APlayerController_eventClientCommitMapChange_Parms ClientCommitMapChange_Parms;
	ClientCommitMapChange_Parms.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	ClientCommitMapChange_Parms.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	this->ProcessEvent ( pFnClientCommitMapChange, &ClientCommitMapChange_Parms, NULL );
};

// Function Engine.PlayerController.DelayedPrepareMapChange
// [0x00020002] 
// Parameters infos:

void APlayerController::DelayedPrepareMapChange ( )
{
	static UFunction* pFnDelayedPrepareMapChange = NULL;

	if ( ! pFnDelayedPrepareMapChange )
		pFnDelayedPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8208 ];

	APlayerController_execDelayedPrepareMapChange_Parms DelayedPrepareMapChange_Parms;

	this->ProcessEvent ( pFnDelayedPrepareMapChange, &DelayedPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientPrepareMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// unsigned long                  bFirst                         ( CPF_Parm )
// unsigned long                  bLast                          ( CPF_Parm )

void APlayerController::eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast )
{
	static UFunction* pFnClientPrepareMapChange = NULL;

	if ( ! pFnClientPrepareMapChange )
		pFnClientPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8203 ];

	APlayerController_eventClientPrepareMapChange_Parms ClientPrepareMapChange_Parms;
	memcpy ( &ClientPrepareMapChange_Parms.LevelName, &LevelName, 0x8 );
	ClientPrepareMapChange_Parms.bFirst = bFirst;
	ClientPrepareMapChange_Parms.bLast = bLast;

	this->ProcessEvent ( pFnClientPrepareMapChange, &ClientPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdateLevelVisibility
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void APlayerController::eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible )
{
	static UFunction* pFnServerUpdateLevelVisibility = NULL;

	if ( ! pFnServerUpdateLevelVisibility )
		pFnServerUpdateLevelVisibility = (UFunction*) UObject::GObjObjects()->Data[ 8200 ];

	APlayerController_eventServerUpdateLevelVisibility_Parms ServerUpdateLevelVisibility_Parms;
	memcpy ( &ServerUpdateLevelVisibility_Parms.PackageName, &PackageName, 0x8 );
	ServerUpdateLevelVisibility_Parms.bIsVisible = bIsVisible;

	pFnServerUpdateLevelVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerUpdateLevelVisibility, &ServerUpdateLevelVisibility_Parms, NULL );

	pFnServerUpdateLevelVisibility->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// [0x010205C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnClientUpdateLevelStreamingStatus = NULL;

	if ( ! pFnClientUpdateLevelStreamingStatus )
		pFnClientUpdateLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 8195 ];

	APlayerController_execClientUpdateLevelStreamingStatus_Parms ClientUpdateLevelStreamingStatus_Parms;
	memcpy ( &ClientUpdateLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientUpdateLevelStreamingStatus, &ClientUpdateLevelStreamingStatus_Parms, NULL );

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LevelStreamingStatusChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevelStreaming*         LevelObject                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnLevelStreamingStatusChanged = NULL;

	if ( ! pFnLevelStreamingStatusChanged )
		pFnLevelStreamingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 8190 ];

	APlayerController_eventLevelStreamingStatusChanged_Parms LevelStreamingStatusChanged_Parms;
	LevelStreamingStatusChanged_Parms.LevelObject = LevelObject;
	LevelStreamingStatusChanged_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	LevelStreamingStatusChanged_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	LevelStreamingStatusChanged_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	this->ProcessEvent ( pFnLevelStreamingStatusChanged, &LevelStreamingStatusChanged_Parms, NULL );
};

// Function Engine.PlayerController.ClientForceGarbageCollection
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientForceGarbageCollection ( )
{
	static UFunction* pFnClientForceGarbageCollection = NULL;

	if ( ! pFnClientForceGarbageCollection )
		pFnClientForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 8189 ];

	APlayerController_eventClientForceGarbageCollection_Parms ClientForceGarbageCollection_Parms;

	this->ProcessEvent ( pFnClientForceGarbageCollection, &ClientForceGarbageCollection_Parms, NULL );
};

// Function Engine.PlayerController.OnConsoleCommand
// [0x00020002] 
// Parameters infos:
// class USeqAct_ConsoleCommand*  inAction                       ( CPF_Parm )

void APlayerController::OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 8186 ];

	APlayerController_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.PlayerController.ResetPlayerMovementInput
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetPlayerMovementInput ( )
{
	static UFunction* pFnResetPlayerMovementInput = NULL;

	if ( ! pFnResetPlayerMovementInput )
		pFnResetPlayerMovementInput = (UFunction*) UObject::GObjObjects()->Data[ 8185 ];

	APlayerController_execResetPlayerMovementInput_Parms ResetPlayerMovementInput_Parms;

	this->ProcessEvent ( pFnResetPlayerMovementInput, &ResetPlayerMovementInput_Parms, NULL );
};

// Function Engine.PlayerController.IsBlockZoom
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsBlockZoom ( )
{
	static UFunction* pFnIsBlockZoom = NULL;

	if ( ! pFnIsBlockZoom )
		pFnIsBlockZoom = (UFunction*) UObject::GObjObjects()->Data[ 8183 ];

	APlayerController_eventIsBlockZoom_Parms IsBlockZoom_Parms;

	this->ProcessEvent ( pFnIsBlockZoom, &IsBlockZoom_Parms, NULL );

	return IsBlockZoom_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetBlockZoom
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewBlock                      ( CPF_Parm )

void APlayerController::eventSetBlockZoom ( unsigned long bNewBlock )
{
	static UFunction* pFnSetBlockZoom = NULL;

	if ( ! pFnSetBlockZoom )
		pFnSetBlockZoom = (UFunction*) UObject::GObjObjects()->Data[ 8181 ];

	APlayerController_eventSetBlockZoom_Parms SetBlockZoom_Parms;
	SetBlockZoom_Parms.bNewBlock = bNewBlock;

	this->ProcessEvent ( pFnSetBlockZoom, &SetBlockZoom_Parms, NULL );
};

// Function Engine.PlayerController.BlockZoom
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewBlock                      ( CPF_Parm )

void APlayerController::BlockZoom ( unsigned long bNewBlock )
{
	static UFunction* pFnBlockZoom = NULL;

	if ( ! pFnBlockZoom )
		pFnBlockZoom = (UFunction*) UObject::GObjObjects()->Data[ 8179 ];

	APlayerController_execBlockZoom_Parms BlockZoom_Parms;
	BlockZoom_Parms.bNewBlock = bNewBlock;

	this->ProcessEvent ( pFnBlockZoom, &BlockZoom_Parms, NULL );
};

// Function Engine.PlayerController.IsLookInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsLookInputIgnored ( )
{
	static UFunction* pFnIsLookInputIgnored = NULL;

	if ( ! pFnIsLookInputIgnored )
		pFnIsLookInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 8177 ];

	APlayerController_eventIsLookInputIgnored_Parms IsLookInputIgnored_Parms;

	this->ProcessEvent ( pFnIsLookInputIgnored, &IsLookInputIgnored_Parms, NULL );

	return IsLookInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetIgnoreLookInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewLookInput                  ( CPF_Parm )

void APlayerController::eventSetIgnoreLookInput ( unsigned long bNewLookInput )
{
	static UFunction* pFnSetIgnoreLookInput = NULL;

	if ( ! pFnSetIgnoreLookInput )
		pFnSetIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 8175 ];

	APlayerController_eventSetIgnoreLookInput_Parms SetIgnoreLookInput_Parms;
	SetIgnoreLookInput_Parms.bNewLookInput = bNewLookInput;

	this->ProcessEvent ( pFnSetIgnoreLookInput, &SetIgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.IgnoreLookInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewLookInput                  ( CPF_Parm )

void APlayerController::IgnoreLookInput ( unsigned long bNewLookInput )
{
	static UFunction* pFnIgnoreLookInput = NULL;

	if ( ! pFnIgnoreLookInput )
		pFnIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 8173 ];

	APlayerController_execIgnoreLookInput_Parms IgnoreLookInput_Parms;
	IgnoreLookInput_Parms.bNewLookInput = bNewLookInput;

	this->ProcessEvent ( pFnIgnoreLookInput, &IgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.IsMoveInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsMoveInputIgnored ( )
{
	static UFunction* pFnIsMoveInputIgnored = NULL;

	if ( ! pFnIsMoveInputIgnored )
		pFnIsMoveInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 8171 ];

	APlayerController_eventIsMoveInputIgnored_Parms IsMoveInputIgnored_Parms;

	this->ProcessEvent ( pFnIsMoveInputIgnored, &IsMoveInputIgnored_Parms, NULL );

	return IsMoveInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetIgnoreMoveInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewMoveInput                  ( CPF_Parm )

void APlayerController::eventSetIgnoreMoveInput ( unsigned long bNewMoveInput )
{
	static UFunction* pFnSetIgnoreMoveInput = NULL;

	if ( ! pFnSetIgnoreMoveInput )
		pFnSetIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 8169 ];

	APlayerController_eventSetIgnoreMoveInput_Parms SetIgnoreMoveInput_Parms;
	SetIgnoreMoveInput_Parms.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent ( pFnSetIgnoreMoveInput, &SetIgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.IgnoreMoveInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewMoveInput                  ( CPF_Parm )

void APlayerController::IgnoreMoveInput ( unsigned long bNewMoveInput )
{
	static UFunction* pFnIgnoreMoveInput = NULL;

	if ( ! pFnIgnoreMoveInput )
		pFnIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 8167 ];

	APlayerController_execIgnoreMoveInput_Parms IgnoreMoveInput_Parms;
	IgnoreMoveInput_Parms.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent ( pFnIgnoreMoveInput, &IgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )

void APlayerController::ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 8162 ];

	APlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;
	ClientSetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void APlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 8153 ];

	APlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleCinematicMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleCinematicMode* Action                         ( CPF_Parm )

void APlayerController::OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action )
{
	static UFunction* pFnOnToggleCinematicMode = NULL;

	if ( ! pFnOnToggleCinematicMode )
		pFnOnToggleCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 8150 ];

	APlayerController_execOnToggleCinematicMode_Parms OnToggleCinematicMode_Parms;
	OnToggleCinematicMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleCinematicMode, &OnToggleCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.StopCinematicMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventStopCinematicMode ( )
{
	static UFunction* pFnStopCinematicMode = NULL;

	if ( ! pFnStopCinematicMode )
		pFnStopCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 8149 ];

	APlayerController_eventStopCinematicMode_Parms StopCinematicMode_Parms;

	this->ProcessEvent ( pFnStopCinematicMode, &StopCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.CameraMove
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// float                          Pct                            ( CPF_Parm )
// struct FRawDistributionVector  newRotAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRawDistributionVector  newLocAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRawDistributionFloat   newFovAdjust                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::eventCameraMove ( float Duration, float Pct, struct FRawDistributionVector* newRotAdjust, struct FRawDistributionVector* newLocAdjust, struct FRawDistributionFloat* newFovAdjust )
{
	static UFunction* pFnCameraMove = NULL;

	if ( ! pFnCameraMove )
		pFnCameraMove = (UFunction*) UObject::GObjObjects()->Data[ 8143 ];

	APlayerController_eventCameraMove_Parms CameraMove_Parms;
	CameraMove_Parms.Duration = Duration;
	CameraMove_Parms.Pct = Pct;

	this->ProcessEvent ( pFnCameraMove, &CameraMove_Parms, NULL );

	if ( newRotAdjust )
		memcpy ( newRotAdjust, &CameraMove_Parms.newRotAdjust, 0x1C );

	if ( newLocAdjust )
		memcpy ( newLocAdjust, &CameraMove_Parms.newLocAdjust, 0x1C );

	if ( newFovAdjust )
		memcpy ( newFovAdjust, &CameraMove_Parms.newFovAdjust, 0x1C );
};

// Function Engine.PlayerController.CameraShake
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )
// unsigned long                  bRotRandom                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLocRandom                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFOVRandom                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventCameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency, unsigned long bRotRandom, unsigned long bLocRandom, unsigned long bFOVRandom )
{
	static UFunction* pFnCameraShake = NULL;

	if ( ! pFnCameraShake )
		pFnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 8132 ];

	APlayerController_eventCameraShake_Parms CameraShake_Parms;
	CameraShake_Parms.Duration = Duration;
	memcpy ( &CameraShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &CameraShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	CameraShake_Parms.newFOVAmplitude = newFOVAmplitude;
	CameraShake_Parms.newFOVFrequency = newFOVFrequency;
	CameraShake_Parms.bRotRandom = bRotRandom;
	CameraShake_Parms.bLocRandom = bLocRandom;
	CameraShake_Parms.bFOVRandom = bFOVRandom;

	this->ProcessEvent ( pFnCameraShake, &CameraShake_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// [0x010241C3] ( FUNC_Final )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientStopForceFeedbackWaveform = NULL;

	if ( ! pFnClientStopForceFeedbackWaveform )
		pFnClientStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 8130 ];

	APlayerController_execClientStopForceFeedbackWaveform_Parms ClientStopForceFeedbackWaveform_Parms;
	ClientStopForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientStopForceFeedbackWaveform, &ClientStopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_Parm )

void APlayerController::ClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientPlayForceFeedbackWaveform = NULL;

	if ( ! pFnClientPlayForceFeedbackWaveform )
		pFnClientPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 8128 ];

	APlayerController_execClientPlayForceFeedbackWaveform_Parms ClientPlayForceFeedbackWaveform_Parms;
	ClientPlayForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientPlayForceFeedbackWaveform, &ClientPlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.OnForceFeedback
// [0x00020002] 
// Parameters infos:
// class USeqAct_ForceFeedback*   Action                         ( CPF_Parm )

void APlayerController::OnForceFeedback ( class USeqAct_ForceFeedback* Action )
{
	static UFunction* pFnOnForceFeedback = NULL;

	if ( ! pFnOnForceFeedback )
		pFnOnForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 8126 ];

	APlayerController_execOnForceFeedback_Parms OnForceFeedback_Parms;
	OnForceFeedback_Parms.Action = Action;

	this->ProcessEvent ( pFnOnForceFeedback, &OnForceFeedback_Parms, NULL );
};

// Function Engine.PlayerController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APlayerController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 8120 ];

	APlayerController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.PlayerController.ShowGameState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowGameState ( )
{
	static UFunction* pFnShowGameState = NULL;

	if ( ! pFnShowGameState )
		pFnShowGameState = (UFunction*) UObject::GObjObjects()->Data[ 8119 ];

	APlayerController_execShowGameState_Parms ShowGameState_Parms;

	this->ProcessEvent ( pFnShowGameState, &ShowGameState_Parms, NULL );
};

// Function Engine.PlayerController.ShowPlayerState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowPlayerState ( )
{
	static UFunction* pFnShowPlayerState = NULL;

	if ( ! pFnShowPlayerState )
		pFnShowPlayerState = (UFunction*) UObject::GObjObjects()->Data[ 8118 ];

	APlayerController_execShowPlayerState_Parms ShowPlayerState_Parms;

	this->ProcessEvent ( pFnShowPlayerState, &ShowPlayerState_Parms, NULL );
};

// Function Engine.PlayerController.ListCE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListCE ( )
{
	static UFunction* pFnListCE = NULL;

	if ( ! pFnListCE )
		pFnListCE = (UFunction*) UObject::GObjObjects()->Data[ 8117 ];

	APlayerController_execListCE_Parms ListCE_Parms;

	this->ProcessEvent ( pFnListCE, &ListCE_Parms, NULL );
};

// Function Engine.PlayerController.ListConsoleEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListConsoleEvents ( )
{
	static UFunction* pFnListConsoleEvents = NULL;

	if ( ! pFnListConsoleEvents )
		pFnListConsoleEvents = (UFunction*) UObject::GObjObjects()->Data[ 8111 ];

	APlayerController_execListConsoleEvents_Parms ListConsoleEvents_Parms;

	this->ProcessEvent ( pFnListConsoleEvents, &ListConsoleEvents_Parms, NULL );
};

// Function Engine.PlayerController.CE
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CE ( struct FName EventName )
{
	static UFunction* pFnCE = NULL;

	if ( ! pFnCE )
		pFnCE = (UFunction*) UObject::GObjObjects()->Data[ 8109 ];

	APlayerController_execCE_Parms CE_Parms;
	memcpy ( &CE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCE, &CE_Parms, NULL );
};

// Function Engine.PlayerController.CauseEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CauseEvent ( struct FName EventName )
{
	static UFunction* pFnCauseEvent = NULL;

	if ( ! pFnCauseEvent )
		pFnCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 8107 ];

	APlayerController_execCauseEvent_Parms CauseEvent_Parms;
	memcpy ( &CauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseEvent, &CauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.ServerCauseEvent
// [0x00220042] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void APlayerController::ServerCauseEvent ( struct FName EventName )
{
	static UFunction* pFnServerCauseEvent = NULL;

	if ( ! pFnServerCauseEvent )
		pFnServerCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 8099 ];

	APlayerController_execServerCauseEvent_Parms ServerCauseEvent_Parms;
	memcpy ( &ServerCauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnServerCauseEvent, &ServerCauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.OnFlyThroughHasEnded
// [0x00020102] 
// Parameters infos:
// class USeqAct_FlyThroughHasEnded* inAction                       ( CPF_Parm )

void APlayerController::OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction )
{
	static UFunction* pFnOnFlyThroughHasEnded = NULL;

	if ( ! pFnOnFlyThroughHasEnded )
		pFnOnFlyThroughHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 8096 ];

	APlayerController_execOnFlyThroughHasEnded_Parms OnFlyThroughHasEnded_Parms;
	OnFlyThroughHasEnded_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnFlyThroughHasEnded, &OnFlyThroughHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APlayerController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 8092 ];

	APlayerController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.PlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 8090 ];

	APlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8088 ];

	APlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerSetSpectatorLocation
// [0x00220042] 
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )

void APlayerController::ServerSetSpectatorLocation ( struct FVector NewLoc )
{
	static UFunction* pFnServerSetSpectatorLocation = NULL;

	if ( ! pFnServerSetSpectatorLocation )
		pFnServerSetSpectatorLocation = (UFunction*) UObject::GObjObjects()->Data[ 7962 ];

	APlayerController_execServerSetSpectatorLocation_Parms ServerSetSpectatorLocation_Parms;
	memcpy ( &ServerSetSpectatorLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnServerSetSpectatorLocation, &ServerSetSpectatorLocation_Parms, NULL );
};

// Function Engine.PlayerController.IsSpectating
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 7960 ];

	APlayerController_execIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void APlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 7861 ];

	APlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function Engine.PlayerController.ClearDoubleClick
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearDoubleClick ( )
{
	static UFunction* pFnClearDoubleClick = NULL;

	if ( ! pFnClearDoubleClick )
		pFnClearDoubleClick = (UFunction*) UObject::GObjObjects()->Data[ 7860 ];

	APlayerController_execClearDoubleClick_Parms ClearDoubleClick_Parms;

	this->ProcessEvent ( pFnClearDoubleClick, &ClearDoubleClick_Parms, NULL );
};

// Function Engine.PlayerController.LimitViewRotation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                ViewRotation                   ( CPF_Parm )
// float                          ViewPitchMin                   ( CPF_Parm )
// float                          ViewPitchMax                   ( CPF_Parm )

struct FRotator APlayerController::eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax )
{
	static UFunction* pFnLimitViewRotation = NULL;

	if ( ! pFnLimitViewRotation )
		pFnLimitViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 7855 ];

	APlayerController_eventLimitViewRotation_Parms LimitViewRotation_Parms;
	memcpy ( &LimitViewRotation_Parms.ViewRotation, &ViewRotation, 0xC );
	LimitViewRotation_Parms.ViewPitchMin = ViewPitchMin;
	LimitViewRotation_Parms.ViewPitchMax = ViewPitchMax;

	this->ProcessEvent ( pFnLimitViewRotation, &LimitViewRotation_Parms, NULL );

	return LimitViewRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void APlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 7851 ];

	APlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function Engine.PlayerController.UpdateRotation
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::UpdateRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = (UFunction*) UObject::GObjObjects()->Data[ 7846 ];

	APlayerController_execUpdateRotation_Parms UpdateRotation_Parms;
	UpdateRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function Engine.PlayerController.ViewShake
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = (UFunction*) UObject::GObjObjects()->Data[ 7844 ];

	APlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APlayerController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 7840 ];

	APlayerController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.PlayerController.SpawnPlayerCamera
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSpawnPlayerCamera ( )
{
	static UFunction* pFnSpawnPlayerCamera = NULL;

	if ( ! pFnSpawnPlayerCamera )
		pFnSpawnPlayerCamera = (UFunction*) UObject::GObjObjects()->Data[ 7839 ];

	APlayerController_eventSpawnPlayerCamera_Parms SpawnPlayerCamera_Parms;

	this->ProcessEvent ( pFnSpawnPlayerCamera, &SpawnPlayerCamera_Parms, NULL );
};

// Function Engine.PlayerController.ServerVerifyViewTarget
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerVerifyViewTarget ( )
{
	static UFunction* pFnServerVerifyViewTarget = NULL;

	if ( ! pFnServerVerifyViewTarget )
		pFnServerVerifyViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 7837 ];

	APlayerController_execServerVerifyViewTarget_Parms ServerVerifyViewTarget_Parms;

	this->ProcessEvent ( pFnServerVerifyViewTarget, &ServerVerifyViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.GetViewTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APlayerController::GetViewTarget ( )
{
	static UFunction* pFnGetViewTarget = NULL;

	if ( ! pFnGetViewTarget )
		pFnGetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 7835 ];

	APlayerController_execGetViewTarget_Parms GetViewTarget_Parms;

	pFnGetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewTarget, &GetViewTarget_Parms, NULL );

	pFnGetViewTarget->FunctionFlags |= 0x400;

	return GetViewTarget_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetViewTarget
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 7832 ];

	APlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;
	ClientSetViewTarget_Parms.A = A;
	memcpy ( &ClientSetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 7685 ];

	APlayerController_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 7683 ];

	APlayerController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFOVAngle
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::eventGetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 7681 ];

	APlayerController_eventGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.PlayerController.AdjustFOV
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::AdjustFOV ( float DeltaTime )
{
	static UFunction* pFnAdjustFOV = NULL;

	if ( ! pFnAdjustFOV )
		pFnAdjustFOV = (UFunction*) UObject::GObjObjects()->Data[ 7679 ];

	APlayerController_execAdjustFOV_Parms AdjustFOV_Parms;
	AdjustFOV_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnAdjustFOV, &AdjustFOV_Parms, NULL );
};

// Function Engine.PlayerController.NotifyLanded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool APlayerController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 7675 ];

	APlayerController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.PlayerController.CameraLookAtFinished
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CameraLookAt*    Action                         ( CPF_Parm )

void APlayerController::eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action )
{
	static UFunction* pFnCameraLookAtFinished = NULL;

	if ( ! pFnCameraLookAtFinished )
		pFnCameraLookAtFinished = (UFunction*) UObject::GObjObjects()->Data[ 7673 ];

	APlayerController_eventCameraLookAtFinished_Parms CameraLookAtFinished_Parms;
	CameraLookAtFinished_Parms.Action = Action;

	this->ProcessEvent ( pFnCameraLookAtFinished, &CameraLookAtFinished_Parms, NULL );
};

// Function Engine.PlayerController.AimingHelp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

bool APlayerController::AimingHelp ( unsigned long bInstantHit )
{
	static UFunction* pFnAimingHelp = NULL;

	if ( ! pFnAimingHelp )
		pFnAimingHelp = (UFunction*) UObject::GObjObjects()->Data[ 7670 ];

	APlayerController_execAimingHelp_Parms AimingHelp_Parms;
	AimingHelp_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimingHelp, &AimingHelp_Parms, NULL );

	return AimingHelp_Parms.ReturnValue;
};

// Function Engine.PlayerController.PlayerMove
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::PlayerMove ( float DeltaTime )
{
	static UFunction* pFnPlayerMove = NULL;

	if ( ! pFnPlayerMove )
		pFnPlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 7668 ];

	APlayerController_execPlayerMove_Parms PlayerMove_Parms;
	PlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMove, &PlayerMove_Parms, NULL );
};

// Function Engine.PlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 7666 ];

	APlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function Engine.PlayerController.ClientGameEnded
// [0x010201C0] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void APlayerController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 7663 ];

	APlayerController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Engine.PlayerController.GameHasEnded
// [0x00024000] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 7660 ];

	APlayerController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::ClientRestart ( class APawn* NewPawn )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 7658 ];

	APlayerController_execClientRestart_Parms ClientRestart_Parms;
	ClientRestart_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.PlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void APlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 7656 ];

	APlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::HasClientLoadedCurrentWorld ( )
{
	static UFunction* pFnHasClientLoadedCurrentWorld = NULL;

	if ( ! pFnHasClientLoadedCurrentWorld )
		pFnHasClientLoadedCurrentWorld = (UFunction*) UObject::GObjObjects()->Data[ 7654 ];

	APlayerController_execHasClientLoadedCurrentWorld_Parms HasClientLoadedCurrentWorld_Parms;

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasClientLoadedCurrentWorld, &HasClientLoadedCurrentWorld_Parms, NULL );

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= 0x400;

	return HasClientLoadedCurrentWorld_Parms.ReturnValue;
};

// Function Engine.PlayerController.NotifyLoadedWorld
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )
// unsigned long                  bFinalDest                     ( CPF_Parm )

void APlayerController::eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest )
{
	static UFunction* pFnNotifyLoadedWorld = NULL;

	if ( ! pFnNotifyLoadedWorld )
		pFnNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 7649 ];

	APlayerController_eventNotifyLoadedWorld_Parms NotifyLoadedWorld_Parms;
	memcpy ( &NotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );
	NotifyLoadedWorld_Parms.bFinalDest = bFinalDest;

	this->ProcessEvent ( pFnNotifyLoadedWorld, &NotifyLoadedWorld_Parms, NULL );
};

// Function Engine.PlayerController.ServerNotifyLoadedWorld
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )

void APlayerController::eventServerNotifyLoadedWorld ( struct FName WorldPackageName )
{
	static UFunction* pFnServerNotifyLoadedWorld = NULL;

	if ( ! pFnServerNotifyLoadedWorld )
		pFnServerNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 7647 ];

	APlayerController_eventServerNotifyLoadedWorld_Parms ServerNotifyLoadedWorld_Parms;
	memcpy ( &ServerNotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );

	pFnServerNotifyLoadedWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerNotifyLoadedWorld, &ServerNotifyLoadedWorld_Parms, NULL );

	pFnServerNotifyLoadedWorld->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 7645 ];

	APlayerController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetProgressMessage
// [0x010241C2] 
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnClientSetProgressMessage = NULL;

	if ( ! pFnClientSetProgressMessage )
		pFnClientSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 7641 ];

	APlayerController_execClientSetProgressMessage_Parms ClientSetProgressMessage_Parms;
	ClientSetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &ClientSetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &ClientSetProgressMessage_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnClientSetProgressMessage, &ClientSetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.SetProgressMessage
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnSetProgressMessage = NULL;

	if ( ! pFnSetProgressMessage )
		pFnSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 7637 ];

	APlayerController_execSetProgressMessage_Parms SetProgressMessage_Parms;
	SetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &SetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &SetProgressMessage_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnSetProgressMessage, &SetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientClearProgressMessages
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientClearProgressMessages ( )
{
	static UFunction* pFnClientClearProgressMessages = NULL;

	if ( ! pFnClientClearProgressMessages )
		pFnClientClearProgressMessages = (UFunction*) UObject::GObjObjects()->Data[ 7635 ];

	APlayerController_execClientClearProgressMessages_Parms ClientClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClientClearProgressMessages, &ClientClearProgressMessages_Parms, NULL );
};

// Function Engine.PlayerController.ClearProgressMessages
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ClearProgressMessages ( )
{
	static UFunction* pFnClearProgressMessages = NULL;

	if ( ! pFnClearProgressMessages )
		pFnClearProgressMessages = (UFunction*) UObject::GObjObjects()->Data[ 7634 ];

	APlayerController_execClearProgressMessages_Parms ClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClearProgressMessages, &ClearProgressMessages_Parms, NULL );
};

// Function Engine.PlayerController.SwitchLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )

void APlayerController::SwitchLevel ( struct FString URL )
{
	static UFunction* pFnSwitchLevel = NULL;

	if ( ! pFnSwitchLevel )
		pFnSwitchLevel = (UFunction*) UObject::GObjObjects()->Data[ 7632 ];

	APlayerController_execSwitchLevel_Parms SwitchLevel_Parms;
	memcpy ( &SwitchLevel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitchLevel, &SwitchLevel_Parms, NULL );
};

// Function Engine.PlayerController.SetName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )

void APlayerController::SetName ( struct FString S )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 7628 ];

	APlayerController_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function Engine.PlayerController.ServerSuicide
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerSuicide ( )
{
	static UFunction* pFnServerSuicide = NULL;

	if ( ! pFnServerSuicide )
		pFnServerSuicide = (UFunction*) UObject::GObjObjects()->Data[ 7627 ];

	APlayerController_execServerSuicide_Parms ServerSuicide_Parms;

	this->ProcessEvent ( pFnServerSuicide, &ServerSuicide_Parms, NULL );
};

// Function Engine.PlayerController.Suicide
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 7626 ];

	APlayerController_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.PlayerController.TriggerInteracted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::TriggerInteracted ( )
{
	static UFunction* pFnTriggerInteracted = NULL;

	if ( ! pFnTriggerInteracted )
		pFnTriggerInteracted = (UFunction*) UObject::GObjObjects()->Data[ 7624 ];

	APlayerController_execTriggerInteracted_Parms TriggerInteracted_Parms;

	this->ProcessEvent ( pFnTriggerInteracted, &TriggerInteracted_Parms, NULL );

	return TriggerInteracted_Parms.ReturnValue;
};

// Function Engine.PlayerController.PerformedUseAction
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::PerformedUseAction ( )
{
	static UFunction* pFnPerformedUseAction = NULL;

	if ( ! pFnPerformedUseAction )
		pFnPerformedUseAction = (UFunction*) UObject::GObjObjects()->Data[ 7622 ];

	APlayerController_execPerformedUseAction_Parms PerformedUseAction_Parms;

	this->ProcessEvent ( pFnPerformedUseAction, &PerformedUseAction_Parms, NULL );

	return PerformedUseAction_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerUse
// [0x00220042] 
// Parameters infos:

void APlayerController::ServerUse ( )
{
	static UFunction* pFnServerUse = NULL;

	if ( ! pFnServerUse )
		pFnServerUse = (UFunction*) UObject::GObjObjects()->Data[ 7621 ];

	APlayerController_execServerUse_Parms ServerUse_Parms;

	this->ProcessEvent ( pFnServerUse, &ServerUse_Parms, NULL );
};

// Function Engine.PlayerController.Use
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 7620 ];

	APlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function Engine.PlayerController.GetTriggerUseList
// [0x00420000] 
// Parameters infos:
// float                          interactDistanceToCheck        ( CPF_Parm )
// float                          crosshairDist                  ( CPF_Parm )
// float                          minDot                         ( CPF_Parm )
// unsigned long                  bUsuableOnly                   ( CPF_Parm )
// TArray< class ATrigger* >      out_useList                    ( CPF_Parm | CPF_OutParm )

void APlayerController::GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList )
{
	static UFunction* pFnGetTriggerUseList = NULL;

	if ( ! pFnGetTriggerUseList )
		pFnGetTriggerUseList = (UFunction*) UObject::GObjObjects()->Data[ 7613 ];

	APlayerController_execGetTriggerUseList_Parms GetTriggerUseList_Parms;
	GetTriggerUseList_Parms.interactDistanceToCheck = interactDistanceToCheck;
	GetTriggerUseList_Parms.crosshairDist = crosshairDist;
	GetTriggerUseList_Parms.minDot = minDot;
	GetTriggerUseList_Parms.bUsuableOnly = bUsuableOnly;

	this->ProcessEvent ( pFnGetTriggerUseList, &GetTriggerUseList_Parms, NULL );

	if ( out_useList )
		memcpy ( out_useList, &GetTriggerUseList_Parms.out_useList, 0xC );
};

// Function Engine.PlayerController.StopFire
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 7611 ];

	APlayerController_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.PlayerController.StartFire
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 7609 ];

	APlayerController_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.PlayerController.UTrace
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::UTrace ( )
{
	static UFunction* pFnUTrace = NULL;

	if ( ! pFnUTrace )
		pFnUTrace = (UFunction*) UObject::GObjObjects()->Data[ 7608 ];

	APlayerController_execUTrace_Parms UTrace_Parms;

	this->ProcessEvent ( pFnUTrace, &UTrace_Parms, NULL );
};

// Function Engine.PlayerController.ServerUTrace
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerUTrace ( )
{
	static UFunction* pFnServerUTrace = NULL;

	if ( ! pFnServerUTrace )
		pFnServerUTrace = (UFunction*) UObject::GObjObjects()->Data[ 7607 ];

	APlayerController_execServerUTrace_Parms ServerUTrace_Parms;

	this->ProcessEvent ( pFnServerUTrace, &ServerUTrace_Parms, NULL );
};

// Function Engine.PlayerController.ConditionalPause
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )

void APlayerController::eventConditionalPause ( unsigned long bDesiredPauseState )
{
	static UFunction* pFnConditionalPause = NULL;

	if ( ! pFnConditionalPause )
		pFnConditionalPause = (UFunction*) UObject::GObjObjects()->Data[ 7605 ];

	APlayerController_eventConditionalPause_Parms ConditionalPause_Parms;
	ConditionalPause_Parms.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent ( pFnConditionalPause, &ConditionalPause_Parms, NULL );
};

// Function Engine.PlayerController.ShowMenu
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 7604 ];

	APlayerController_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function Engine.PlayerController.IsPaused
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPaused ( )
{
	static UFunction* pFnIsPaused = NULL;

	if ( ! pFnIsPaused )
		pFnIsPaused = (UFunction*) UObject::GObjObjects()->Data[ 7602 ];

	APlayerController_execIsPaused_Parms IsPaused_Parms;

	this->ProcessEvent ( pFnIsPaused, &IsPaused_Parms, NULL );

	return IsPaused_Parms.ReturnValue;
};

// Function Engine.PlayerController.DebugPause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 7601 ];

	APlayerController_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.PlayerController.SetPause
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm )

bool APlayerController::SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 7597 ];

	APlayerController_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.bPause = bPause;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0xC );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpause
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 7595 ];

	APlayerController_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.PlayerController.LocalTravel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )

void APlayerController::LocalTravel ( struct FString URL )
{
	static UFunction* pFnLocalTravel = NULL;

	if ( ! pFnLocalTravel )
		pFnLocalTravel = (UFunction*) UObject::GObjObjects()->Data[ 7593 ];

	APlayerController_execLocalTravel_Parms LocalTravel_Parms;
	memcpy ( &LocalTravel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnLocalTravel, &LocalTravel_Parms, NULL );
};

// Function Engine.PlayerController.RestartLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = (UFunction*) UObject::GObjObjects()->Data[ 7592 ];

	APlayerController_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Engine.PlayerController.ServerRestartGame
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerRestartGame ( )
{
	static UFunction* pFnServerRestartGame = NULL;

	if ( ! pFnServerRestartGame )
		pFnServerRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 7591 ];

	APlayerController_execServerRestartGame_Parms ServerRestartGame_Parms;

	this->ProcessEvent ( pFnServerRestartGame, &ServerRestartGame_Parms, NULL );
};

// Function Engine.PlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void APlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = (UFunction*) UObject::GObjObjects()->Data[ 7590 ];

	APlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function Engine.PlayerController.CompressAccel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            C                              ( CPF_Parm )

int APlayerController::CompressAccel ( int C )
{
	static UFunction* pFnCompressAccel = NULL;

	if ( ! pFnCompressAccel )
		pFnCompressAccel = (UFunction*) UObject::GObjObjects()->Data[ 7587 ];

	APlayerController_execCompressAccel_Parms CompressAccel_Parms;
	CompressAccel_Parms.C = C;

	this->ProcessEvent ( pFnCompressAccel, &CompressAccel_Parms, NULL );

	return CompressAccel_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFreeMove
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USavedMove*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USavedMove* APlayerController::GetFreeMove ( )
{
	static UFunction* pFnGetFreeMove = NULL;

	if ( ! pFnGetFreeMove )
		pFnGetFreeMove = (UFunction*) UObject::GObjObjects()->Data[ 7582 ];

	APlayerController_execGetFreeMove_Parms GetFreeMove_Parms;

	this->ProcessEvent ( pFnGetFreeMove, &GetFreeMove_Parms, NULL );

	return GetFreeMove_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientUpdatePosition
// [0x00020002] 
// Parameters infos:

void APlayerController::ClientUpdatePosition ( )
{
	static UFunction* pFnClientUpdatePosition = NULL;

	if ( ! pFnClientUpdatePosition )
		pFnClientUpdatePosition = (UFunction*) UObject::GObjObjects()->Data[ 7576 ];

	APlayerController_execClientUpdatePosition_Parms ClientUpdatePosition_Parms;

	this->ProcessEvent ( pFnClientUpdatePosition, &ClientUpdatePosition_Parms, NULL );
};

// Function Engine.PlayerController.ClearAckedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearAckedMoves ( )
{
	static UFunction* pFnClearAckedMoves = NULL;

	if ( ! pFnClearAckedMoves )
		pFnClearAckedMoves = (UFunction*) UObject::GObjObjects()->Data[ 7574 ];

	APlayerController_execClearAckedMoves_Parms ClearAckedMoves_Parms;

	this->ProcessEvent ( pFnClearAckedMoves, &ClearAckedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdatePing
// [0x00220042] 
// Parameters infos:
// int                            NewPing                        ( CPF_Parm )

void APlayerController::ServerUpdatePing ( int NewPing )
{
	static UFunction* pFnServerUpdatePing = NULL;

	if ( ! pFnServerUpdatePing )
		pFnServerUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 7572 ];

	APlayerController_execServerUpdatePing_Parms ServerUpdatePing_Parms;
	ServerUpdatePing_Parms.NewPing = NewPing;

	this->ProcessEvent ( pFnServerUpdatePing, &ServerUpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.UpdateStateFromAdjustment
// [0x00020002] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void APlayerController::UpdateStateFromAdjustment ( struct FName NewState )
{
	static UFunction* pFnUpdateStateFromAdjustment = NULL;

	if ( ! pFnUpdateStateFromAdjustment )
		pFnUpdateStateFromAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 7570 ];

	APlayerController_execUpdateStateFromAdjustment_Parms UpdateStateFromAdjustment_Parms;
	memcpy ( &UpdateStateFromAdjustment_Parms.NewState, &NewState, 0x8 );

	this->ProcessEvent ( pFnUpdateStateFromAdjustment, &UpdateStateFromAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.LongClientAdjustPosition
// [0x01020140] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void APlayerController::LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPosition = NULL;

	if ( ! pFnLongClientAdjustPosition )
		pFnLongClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 7556 ];

	APlayerController_execLongClientAdjustPosition_Parms LongClientAdjustPosition_Parms;
	LongClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPosition_Parms.newPhysics = newPhysics;
	LongClientAdjustPosition_Parms.NewLocX = NewLocX;
	LongClientAdjustPosition_Parms.NewLocY = NewLocY;
	LongClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPosition_Parms.NewVelX = NewVelX;
	LongClientAdjustPosition_Parms.NewVelY = NewVelY;
	LongClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPosition_Parms.NewBase = NewBase;
	LongClientAdjustPosition_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPosition_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPosition_Parms.NewFloorZ = NewFloorZ;

	this->ProcessEvent ( pFnLongClientAdjustPosition, &LongClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.UpdatePing
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 7554 ];

	APlayerController_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustPosition
// [0x01020140] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase )
{
	static UFunction* pFnClientAdjustPosition = NULL;

	if ( ! pFnClientAdjustPosition )
		pFnClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 7543 ];

	APlayerController_execClientAdjustPosition_Parms ClientAdjustPosition_Parms;
	ClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ClientAdjustPosition_Parms.newPhysics = newPhysics;
	ClientAdjustPosition_Parms.NewLocX = NewLocX;
	ClientAdjustPosition_Parms.NewLocY = NewLocY;
	ClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ClientAdjustPosition_Parms.NewVelX = NewVelX;
	ClientAdjustPosition_Parms.NewVelY = NewVelY;
	ClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	ClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnClientAdjustPosition, &ClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.ClientAckGoodMove
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::ClientAckGoodMove ( float TimeStamp )
{
	static UFunction* pFnClientAckGoodMove = NULL;

	if ( ! pFnClientAckGoodMove )
		pFnClientAckGoodMove = (UFunction*) UObject::GObjObjects()->Data[ 7541 ];

	APlayerController_execClientAckGoodMove_Parms ClientAckGoodMove_Parms;
	ClientAckGoodMove_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnClientAckGoodMove, &ClientAckGoodMove_Parms, NULL );
};

// Function Engine.PlayerController.ClientCapBandwidth
// [0x010201C2] 
// Parameters infos:
// int                            Cap                            ( CPF_Parm )

void APlayerController::ClientCapBandwidth ( int Cap )
{
	static UFunction* pFnClientCapBandwidth = NULL;

	if ( ! pFnClientCapBandwidth )
		pFnClientCapBandwidth = (UFunction*) UObject::GObjObjects()->Data[ 7539 ];

	APlayerController_execClientCapBandwidth_Parms ClientCapBandwidth_Parms;
	ClientCapBandwidth_Parms.Cap = Cap;

	this->ProcessEvent ( pFnClientCapBandwidth, &ClientCapBandwidth_Parms, NULL );
};

// Function Engine.PlayerController.ShortClientAdjustPosition
// [0x01020140] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnShortClientAdjustPosition = NULL;

	if ( ! pFnShortClientAdjustPosition )
		pFnShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 7531 ];

	APlayerController_execShortClientAdjustPosition_Parms ShortClientAdjustPosition_Parms;
	ShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ShortClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ShortClientAdjustPosition_Parms.newPhysics = newPhysics;
	ShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	ShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	ShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnShortClientAdjustPosition, &ShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.VeryShortClientAdjustPosition
// [0x01020140] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnVeryShortClientAdjustPosition = NULL;

	if ( ! pFnVeryShortClientAdjustPosition )
		pFnVeryShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 7525 ];

	APlayerController_execVeryShortClientAdjustPosition_Parms VeryShortClientAdjustPosition_Parms;
	VeryShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	VeryShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	VeryShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	VeryShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	VeryShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnVeryShortClientAdjustPosition, &VeryShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.MoveAutonomous
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned char                  CompressedFlags                ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnMoveAutonomous = NULL;

	if ( ! pFnMoveAutonomous )
		pFnMoveAutonomous = (UFunction*) UObject::GObjObjects()->Data[ 7519 ];

	APlayerController_execMoveAutonomous_Parms MoveAutonomous_Parms;
	MoveAutonomous_Parms.DeltaTime = DeltaTime;
	MoveAutonomous_Parms.CompressedFlags = CompressedFlags;
	memcpy ( &MoveAutonomous_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &MoveAutonomous_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnMoveAutonomous, &MoveAutonomous_Parms, NULL );
};

// Function Engine.PlayerController.ProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 7514 ];

	APlayerController_execProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	ProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function Engine.PlayerController.ProcessDrive
// [0x00020002] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// unsigned long                  InJump                         ( CPF_Parm )

void APlayerController::ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump )
{
	static UFunction* pFnProcessDrive = NULL;

	if ( ! pFnProcessDrive )
		pFnProcessDrive = (UFunction*) UObject::GObjObjects()->Data[ 7509 ];

	APlayerController_execProcessDrive_Parms ProcessDrive_Parms;
	ProcessDrive_Parms.InForward = InForward;
	ProcessDrive_Parms.InStrafe = InStrafe;
	ProcessDrive_Parms.InUp = InUp;
	ProcessDrive_Parms.InJump = InJump;

	this->ProcessEvent ( pFnProcessDrive, &ProcessDrive_Parms, NULL );
};

// Function Engine.PlayerController.SendClientAdjustment
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSendClientAdjustment ( )
{
	static UFunction* pFnSendClientAdjustment = NULL;

	if ( ! pFnSendClientAdjustment )
		pFnSendClientAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 7508 ];

	APlayerController_eventSendClientAdjustment_Parms SendClientAdjustment_Parms;

	this->ProcessEvent ( pFnSendClientAdjustment, &SendClientAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.ForceDeathUpdate
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceDeathUpdate ( )
{
	static UFunction* pFnForceDeathUpdate = NULL;

	if ( ! pFnForceDeathUpdate )
		pFnForceDeathUpdate = (UFunction*) UObject::GObjObjects()->Data[ 7507 ];

	APlayerController_execForceDeathUpdate_Parms ForceDeathUpdate_Parms;

	this->ProcessEvent ( pFnForceDeathUpdate, &ForceDeathUpdate_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceMessage
// [0x00020000] 
// Parameters infos:
// class APlayerReplicationInfo*  Sender                         ( CPF_Parm )
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// unsigned char                  messageID                      ( CPF_Parm )

void APlayerController::ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageID )
{
	static UFunction* pFnClientVoiceMessage = NULL;

	if ( ! pFnClientVoiceMessage )
		pFnClientVoiceMessage = (UFunction*) UObject::GObjObjects()->Data[ 7502 ];

	APlayerController_execClientVoiceMessage_Parms ClientVoiceMessage_Parms;
	ClientVoiceMessage_Parms.Sender = Sender;
	ClientVoiceMessage_Parms.Recipient = Recipient;
	memcpy ( &ClientVoiceMessage_Parms.MessageType, &MessageType, 0x8 );
	ClientVoiceMessage_Parms.messageID = messageID;

	this->ProcessEvent ( pFnClientVoiceMessage, &ClientVoiceMessage_Parms, NULL );
};

// Function Engine.PlayerController.UsingFirstPersonCamera
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::UsingFirstPersonCamera ( )
{
	static UFunction* pFnUsingFirstPersonCamera = NULL;

	if ( ! pFnUsingFirstPersonCamera )
		pFnUsingFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 7500 ];

	APlayerController_execUsingFirstPersonCamera_Parms UsingFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUsingFirstPersonCamera, &UsingFirstPersonCamera_Parms, NULL );

	return UsingFirstPersonCamera_Parms.ReturnValue;
};

// Function Engine.PlayerController.ResetCameraMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventResetCameraMode ( )
{
	static UFunction* pFnResetCameraMode = NULL;

	if ( ! pFnResetCameraMode )
		pFnResetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 7499 ];

	APlayerController_eventResetCameraMode_Parms ResetCameraMode_Parms;

	this->ProcessEvent ( pFnResetCameraMode, &ResetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCameraMode
// [0x00020002] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::SetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 7497 ];

	APlayerController_execSetCameraMode_Parms SetCameraMode_Parms;
	memcpy ( &SetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCameraMode
// [0x010201C2] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::ClientSetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 7495 ];

	APlayerController_execClientSetCameraMode_Parms ClientSetCameraMode_Parms;
	memcpy ( &ClientSetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 PendingURL                     ( CPF_Parm )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void APlayerController::eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 7489 ];

	APlayerController_eventPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0xC );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function Engine.PlayerController.ServerMutate
// [0x002200C2] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm )

void APlayerController::ServerMutate ( struct FString MutateString )
{
	static UFunction* pFnServerMutate = NULL;

	if ( ! pFnServerMutate )
		pFnServerMutate = (UFunction*) UObject::GObjObjects()->Data[ 7487 ];

	APlayerController_execServerMutate_Parms ServerMutate_Parms;
	memcpy ( &ServerMutate_Parms.MutateString, &MutateString, 0xC );

	this->ProcessEvent ( pFnServerMutate, &ServerMutate_Parms, NULL );
};

// Function Engine.PlayerController.Mutate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm )

void APlayerController::Mutate ( struct FString MutateString )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 7485 ];

	APlayerController_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.PlayerController.FOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void APlayerController::FOV ( float F )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = (UFunction*) UObject::GObjObjects()->Data[ 7483 ];

	APlayerController_execFOV_Parms FOV_Parms;
	FOV_Parms.F = F;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function Engine.PlayerController.ResetFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetFOV ( )
{
	static UFunction* pFnResetFOV = NULL;

	if ( ! pFnResetFOV )
		pFnResetFOV = (UFunction*) UObject::GObjObjects()->Data[ 7482 ];

	APlayerController_execResetFOV_Parms ResetFOV_Parms;

	this->ProcessEvent ( pFnResetFOV, &ResetFOV_Parms, NULL );
};

// Function Engine.PlayerController.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void APlayerController::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 7480 ];

	APlayerController_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.PlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = (UFunction*) UObject::GObjObjects()->Data[ 7479 ];

	APlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function Engine.PlayerController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 7476 ];

	APlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerController.ClearOnlineDelegates
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 7475 ];

	APlayerController_eventClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.RegisterOnlineDelegates
// [0x00020000] 
// Parameters infos:

void APlayerController::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 7474 ];

	APlayerController_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.PlayBeepSound
// [0x00020000] 
// Parameters infos:

void APlayerController::PlayBeepSound ( )
{
	static UFunction* pFnPlayBeepSound = NULL;

	if ( ! pFnPlayBeepSound )
		pFnPlayBeepSound = (UFunction*) UObject::GObjObjects()->Data[ 7473 ];

	APlayerController_execPlayBeepSound_Parms PlayBeepSound_Parms;

	this->ProcessEvent ( pFnPlayBeepSound, &PlayBeepSound_Parms, NULL );
};

// Function Engine.PlayerController.TeamMessage
// [0x010249C0] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 7468 ];

	APlayerController_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0xC );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function Engine.PlayerController.SpeakTTS
// [0x00024102] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnSpeakTTS = NULL;

	if ( ! pFnSpeakTTS )
		pFnSpeakTTS = (UFunction*) UObject::GObjObjects()->Data[ 7463 ];

	APlayerController_execSpeakTTS_Parms SpeakTTS_Parms;
	memcpy ( &SpeakTTS_Parms.S, &S, 0xC );
	SpeakTTS_Parms.PRI = PRI;

	this->ProcessEvent ( pFnSpeakTTS, &SpeakTTS_Parms, NULL );
};

// Function Engine.PlayerController.TeamTalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::TeamTalk ( )
{
	static UFunction* pFnTeamTalk = NULL;

	if ( ! pFnTeamTalk )
		pFnTeamTalk = (UFunction*) UObject::GObjObjects()->Data[ 7460 ];

	APlayerController_execTeamTalk_Parms TeamTalk_Parms;

	this->ProcessEvent ( pFnTeamTalk, &TeamTalk_Parms, NULL );
};

// Function Engine.PlayerController.Talk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Talk ( )
{
	static UFunction* pFnTalk = NULL;

	if ( ! pFnTalk )
		pFnTalk = (UFunction*) UObject::GObjObjects()->Data[ 7457 ];

	APlayerController_execTalk_Parms Talk_Parms;

	this->ProcessEvent ( pFnTalk, &Talk_Parms, NULL );
};

// Function Engine.PlayerController.CreateTTSSoundCue
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StrToSpeak                     ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

class USoundCue* APlayerController::CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCreateTTSSoundCue = NULL;

	if ( ! pFnCreateTTSSoundCue )
		pFnCreateTTSSoundCue = (UFunction*) UObject::GObjObjects()->Data[ 7453 ];

	APlayerController_execCreateTTSSoundCue_Parms CreateTTSSoundCue_Parms;
	memcpy ( &CreateTTSSoundCue_Parms.StrToSpeak, &StrToSpeak, 0xC );
	CreateTTSSoundCue_Parms.PRI = PRI;

	pFnCreateTTSSoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTTSSoundCue, &CreateTTSSoundCue_Parms, NULL );

	pFnCreateTTSSoundCue->FunctionFlags |= 0x400;

	return CreateTTSSoundCue_Parms.ReturnValue;
};

// Function Engine.PlayerController.AllowTTSMessageFrom
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool APlayerController::AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAllowTTSMessageFrom = NULL;

	if ( ! pFnAllowTTSMessageFrom )
		pFnAllowTTSMessageFrom = (UFunction*) UObject::GObjObjects()->Data[ 7450 ];

	APlayerController_execAllowTTSMessageFrom_Parms AllowTTSMessageFrom_Parms;
	AllowTTSMessageFrom_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAllowTTSMessageFrom, &AllowTTSMessageFrom_Parms, NULL );

	return AllowTTSMessageFrom_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanCommunicate
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 7448 ];

	APlayerController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientMessage
// [0x010249C0] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 7444 ];

	APlayerController_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );
	ClientMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// [0x010201C2] 
// Parameters infos:
// class AActor*                  SourceActor                    ( CPF_Parm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm )
// struct FString                 SeqName                        ( CPF_Parm )

void APlayerController::ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName )
{
	static UFunction* pFnClientPlayActorFaceFXAnim = NULL;

	if ( ! pFnClientPlayActorFaceFXAnim )
		pFnClientPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7439 ];

	APlayerController_execClientPlayActorFaceFXAnim_Parms ClientPlayActorFaceFXAnim_Parms;
	ClientPlayActorFaceFXAnim_Parms.SourceActor = SourceActor;
	ClientPlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );

	this->ProcessEvent ( pFnClientPlayActorFaceFXAnim, &ClientPlayActorFaceFXAnim_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientStopSound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )

void APlayerController::eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime )
{
	static UFunction* pFnKismet_ClientStopSound = NULL;

	if ( ! pFnKismet_ClientStopSound )
		pFnKismet_ClientStopSound = (UFunction*) UObject::GObjObjects()->Data[ 7433 ];

	APlayerController_eventKismet_ClientStopSound_Parms Kismet_ClientStopSound_Parms;
	Kismet_ClientStopSound_Parms.ASound = ASound;
	Kismet_ClientStopSound_Parms.SourceActor = SourceActor;
	Kismet_ClientStopSound_Parms.FadeOutTime = FadeOutTime;

	this->ProcessEvent ( pFnKismet_ClientStopSound, &Kismet_ClientStopSound_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientPlaySound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          VolumeMultiplier               ( CPF_Parm )
// float                          PitchMultiplier                ( CPF_Parm )
// float                          FadeInTime                     ( CPF_Parm )
// unsigned long                  bSuppressSubtitles             ( CPF_Parm )
// unsigned long                  bSuppressSpatialization        ( CPF_Parm )

void APlayerController::eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization )
{
	static UFunction* pFnKismet_ClientPlaySound = NULL;

	if ( ! pFnKismet_ClientPlaySound )
		pFnKismet_ClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 7424 ];

	APlayerController_eventKismet_ClientPlaySound_Parms Kismet_ClientPlaySound_Parms;
	Kismet_ClientPlaySound_Parms.ASound = ASound;
	Kismet_ClientPlaySound_Parms.SourceActor = SourceActor;
	Kismet_ClientPlaySound_Parms.VolumeMultiplier = VolumeMultiplier;
	Kismet_ClientPlaySound_Parms.PitchMultiplier = PitchMultiplier;
	Kismet_ClientPlaySound_Parms.FadeInTime = FadeInTime;
	Kismet_ClientPlaySound_Parms.bSuppressSubtitles = bSuppressSubtitles;
	Kismet_ClientPlaySound_Parms.bSuppressSpatialization = bSuppressSpatialization;

	this->ProcessEvent ( pFnKismet_ClientPlaySound, &Kismet_ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ClientHearSound
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnClientHearSound = NULL;

	if ( ! pFnClientHearSound )
		pFnClientHearSound = (UFunction*) UObject::GObjObjects()->Data[ 7417 ];

	APlayerController_eventClientHearSound_Parms ClientHearSound_Parms;
	ClientHearSound_Parms.ASound = ASound;
	ClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &ClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	ClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	ClientHearSound_Parms.bIsOccluded = bIsOccluded;

	this->ProcessEvent ( pFnClientHearSound, &ClientHearSound_Parms, NULL );
};

// Function Engine.PlayerController.GetPooledAudioComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* APlayerController::GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation )
{
	static UFunction* pFnGetPooledAudioComponent = NULL;

	if ( ! pFnGetPooledAudioComponent )
		pFnGetPooledAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 7410 ];

	APlayerController_execGetPooledAudioComponent_Parms GetPooledAudioComponent_Parms;
	GetPooledAudioComponent_Parms.ASound = ASound;
	GetPooledAudioComponent_Parms.SourceActor = SourceActor;
	GetPooledAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	GetPooledAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &GetPooledAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );

	pFnGetPooledAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledAudioComponent, &GetPooledAudioComponent_Parms, NULL );

	pFnGetPooledAudioComponent->FunctionFlags |= 0x400;

	return GetPooledAudioComponent_Parms.ReturnValue;
};

// Function Engine.PlayerController.HearSoundFinished
// [0x00020102] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm )

void APlayerController::HearSoundFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnHearSoundFinished = NULL;

	if ( ! pFnHearSoundFinished )
		pFnHearSoundFinished = (UFunction*) UObject::GObjObjects()->Data[ 7408 ];

	APlayerController_execHearSoundFinished_Parms HearSoundFinished_Parms;
	HearSoundFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnHearSoundFinished, &HearSoundFinished_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlaySound
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )

void APlayerController::eventClientPlaySound ( class USoundCue* ASound )
{
	static UFunction* pFnClientPlaySound = NULL;

	if ( ! pFnClientPlaySound )
		pFnClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 7406 ];

	APlayerController_eventClientPlaySound_Parms ClientPlaySound_Parms;
	ClientPlaySound_Parms.ASound = ASound;

	this->ProcessEvent ( pFnClientPlaySound, &ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ReceiveLocalizedMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 7400 ];

	APlayerController_eventReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.PlayerController.CleanupPRI
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = (UFunction*) UObject::GObjObjects()->Data[ 7399 ];

	APlayerController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )
// class UClass*                  newScoringType                 ( CPF_Parm )

void APlayerController::ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = (UFunction*) UObject::GObjObjects()->Data[ 7396 ];

	APlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;
	ClientSetHUD_Parms.newScoringType = newScoringType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function Engine.PlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 7394 ];

	APlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.PlayerController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 7393 ];

	APlayerController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.PlayerController.ServerAcknowledgePossession
// [0x002200C2] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::ServerAcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnServerAcknowledgePossession = NULL;

	if ( ! pFnServerAcknowledgePossession )
		pFnServerAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 7391 ];

	APlayerController_execServerAcknowledgePossession_Parms ServerAcknowledgePossession_Parms;
	ServerAcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnServerAcknowledgePossession, &ServerAcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.AcknowledgePossession
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 7389 ];

	APlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 7383 ];

	APlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.PlayerController.GivePawn
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::GivePawn ( class APawn* NewPawn )
{
	static UFunction* pFnGivePawn = NULL;

	if ( ! pFnGivePawn )
		pFnGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 7381 ];

	APlayerController_execGivePawn_Parms GivePawn_Parms;
	GivePawn_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnGivePawn, &GivePawn_Parms, NULL );
};

// Function Engine.PlayerController.AskForPawn
// [0x002200C2] 
// Parameters infos:

void APlayerController::AskForPawn ( )
{
	static UFunction* pFnAskForPawn = NULL;

	if ( ! pFnAskForPawn )
		pFnAskForPawn = (UFunction*) UObject::GObjObjects()->Data[ 7380 ];

	APlayerController_execAskForPawn_Parms AskForPawn_Parms;

	this->ProcessEvent ( pFnAskForPawn, &AskForPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClientGotoState
// [0x010241C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// struct FName                   NewLabel                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientGotoState ( struct FName NewState, struct FName NewLabel )
{
	static UFunction* pFnClientGotoState = NULL;

	if ( ! pFnClientGotoState )
		pFnClientGotoState = (UFunction*) UObject::GObjObjects()->Data[ 7377 ];

	APlayerController_execClientGotoState_Parms ClientGotoState_Parms;
	memcpy ( &ClientGotoState_Parms.NewState, &NewState, 0x8 );
	memcpy ( &ClientGotoState_Parms.NewLabel, &NewLabel, 0x8 );

	this->ProcessEvent ( pFnClientGotoState, &ClientGotoState_Parms, NULL );
};

// Function Engine.PlayerController.IsMouseAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsMouseAvailable ( )
{
	static UFunction* pFnIsMouseAvailable = NULL;

	if ( ! pFnIsMouseAvailable )
		pFnIsMouseAvailable = (UFunction*) UObject::GObjObjects()->Data[ 7375 ];

	APlayerController_execIsMouseAvailable_Parms IsMouseAvailable_Parms;

	pFnIsMouseAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseAvailable, &IsMouseAvailable_Parms, NULL );

	pFnIsMouseAvailable->FunctionFlags |= 0x400;

	return IsMouseAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsKeyboardAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsKeyboardAvailable ( )
{
	static UFunction* pFnIsKeyboardAvailable = NULL;

	if ( ! pFnIsKeyboardAvailable )
		pFnIsKeyboardAvailable = (UFunction*) UObject::GObjObjects()->Data[ 7373 ];

	APlayerController_execIsKeyboardAvailable_Parms IsKeyboardAvailable_Parms;

	pFnIsKeyboardAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyboardAvailable, &IsKeyboardAvailable_Parms, NULL );

	pFnIsKeyboardAvailable->FunctionFlags |= 0x400;

	return IsKeyboardAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetUseTiltForwardAndBack
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetUseTiltForwardAndBack ( unsigned long bActive )
{
	static UFunction* pFnSetUseTiltForwardAndBack = NULL;

	if ( ! pFnSetUseTiltForwardAndBack )
		pFnSetUseTiltForwardAndBack = (UFunction*) UObject::GObjObjects()->Data[ 7371 ];

	APlayerController_execSetUseTiltForwardAndBack_Parms SetUseTiltForwardAndBack_Parms;
	SetUseTiltForwardAndBack_Parms.bActive = bActive;

	pFnSetUseTiltForwardAndBack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseTiltForwardAndBack, &SetUseTiltForwardAndBack_Parms, NULL );

	pFnSetUseTiltForwardAndBack->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetOnlyUseControllerTiltInput ( unsigned long bActive )
{
	static UFunction* pFnSetOnlyUseControllerTiltInput = NULL;

	if ( ! pFnSetOnlyUseControllerTiltInput )
		pFnSetOnlyUseControllerTiltInput = (UFunction*) UObject::GObjObjects()->Data[ 7369 ];

	APlayerController_execSetOnlyUseControllerTiltInput_Parms SetOnlyUseControllerTiltInput_Parms;
	SetOnlyUseControllerTiltInput_Parms.bActive = bActive;

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyUseControllerTiltInput, &SetOnlyUseControllerTiltInput_Parms, NULL );

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltActive ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltActive = NULL;

	if ( ! pFnSetControllerTiltActive )
		pFnSetControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 7367 ];

	APlayerController_execSetControllerTiltActive_Parms SetControllerTiltActive_Parms;
	SetControllerTiltActive_Parms.bActive = bActive;

	pFnSetControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltActive, &SetControllerTiltActive_Parms, NULL );

	pFnSetControllerTiltActive->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltDesiredIfAvailable ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltDesiredIfAvailable = NULL;

	if ( ! pFnSetControllerTiltDesiredIfAvailable )
		pFnSetControllerTiltDesiredIfAvailable = (UFunction*) UObject::GObjObjects()->Data[ 7365 ];

	APlayerController_execSetControllerTiltDesiredIfAvailable_Parms SetControllerTiltDesiredIfAvailable_Parms;
	SetControllerTiltDesiredIfAvailable_Parms.bActive = bActive;

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltDesiredIfAvailable, &SetControllerTiltDesiredIfAvailable_Parms, NULL );

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsControllerTiltActive ( )
{
	static UFunction* pFnIsControllerTiltActive = NULL;

	if ( ! pFnIsControllerTiltActive )
		pFnIsControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 7363 ];

	APlayerController_execIsControllerTiltActive_Parms IsControllerTiltActive_Parms;

	pFnIsControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsControllerTiltActive, &IsControllerTiltActive_Parms, NULL );

	pFnIsControllerTiltActive->FunctionFlags |= 0x400;

	return IsControllerTiltActive_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::GetRumbleScale ( )
{
	static UFunction* pFnGetRumbleScale = NULL;

	if ( ! pFnGetRumbleScale )
		pFnGetRumbleScale = (UFunction*) UObject::GObjObjects()->Data[ 7360 ];

	APlayerController_execGetRumbleScale_Parms GetRumbleScale_Parms;

	this->ProcessEvent ( pFnGetRumbleScale, &GetRumbleScale_Parms, NULL );

	return GetRumbleScale_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ScaleBy                        ( CPF_Parm )

void APlayerController::SetRumbleScale ( float ScaleBy )
{
	static UFunction* pFnSetRumbleScale = NULL;

	if ( ! pFnSetRumbleScale )
		pFnSetRumbleScale = (UFunction*) UObject::GObjObjects()->Data[ 7358 ];

	APlayerController_execSetRumbleScale_Parms SetRumbleScale_Parms;
	SetRumbleScale_Parms.ScaleBy = ScaleBy;

	this->ProcessEvent ( pFnSetRumbleScale, &SetRumbleScale_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// [0x00020100] 
// Parameters infos:

void APlayerController::UnregisterStandardPlayerDataStores ( )
{
	static UFunction* pFnUnregisterStandardPlayerDataStores = NULL;

	if ( ! pFnUnregisterStandardPlayerDataStores )
		pFnUnregisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7357 ];

	APlayerController_execUnregisterStandardPlayerDataStores_Parms UnregisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterStandardPlayerDataStores, &UnregisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterPlayerDataStores
// [0x00020100] 
// Parameters infos:

void APlayerController::UnregisterPlayerDataStores ( )
{
	static UFunction* pFnUnregisterPlayerDataStores = NULL;

	if ( ! pFnUnregisterPlayerDataStores )
		pFnUnregisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7356 ];

	APlayerController_execUnregisterPlayerDataStores_Parms UnregisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// [0x00080100] 
// Parameters infos:

void APlayerController::RegisterStandardPlayerDataStores ( )
{
	static UFunction* pFnRegisterStandardPlayerDataStores = NULL;

	if ( ! pFnRegisterStandardPlayerDataStores )
		pFnRegisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7355 ];

	APlayerController_execRegisterStandardPlayerDataStores_Parms RegisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterStandardPlayerDataStores, &RegisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// [0x00080100] 
// Parameters infos:

void APlayerController::RegisterCustomPlayerDataStores ( )
{
	static UFunction* pFnRegisterCustomPlayerDataStores = NULL;

	if ( ! pFnRegisterCustomPlayerDataStores )
		pFnRegisterCustomPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7354 ];

	APlayerController_execRegisterCustomPlayerDataStores_Parms RegisterCustomPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterPlayerDataStores
// [0x00020101] ( FUNC_Final )
// Parameters infos:

void APlayerController::RegisterPlayerDataStores ( )
{
	static UFunction* pFnRegisterPlayerDataStores = NULL;

	if ( ! pFnRegisterPlayerDataStores )
		pFnRegisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7353 ];

	APlayerController_execRegisterPlayerDataStores_Parms RegisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterPlayerDataStores, &RegisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.ClientInitializeDataStores
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientInitializeDataStores ( )
{
	static UFunction* pFnClientInitializeDataStores = NULL;

	if ( ! pFnClientInitializeDataStores )
		pFnClientInitializeDataStores = (UFunction*) UObject::GObjObjects()->Data[ 7352 ];

	APlayerController_execClientInitializeDataStores_Parms ClientInitializeDataStores_Parms;

	this->ProcessEvent ( pFnClientInitializeDataStores, &ClientInitializeDataStores_Parms, NULL );
};

// Function Engine.PlayerController.InitPartyLeaderId
// [0x00020100] 
// Parameters infos:

void APlayerController::InitPartyLeaderId ( )
{
	static UFunction* pFnInitPartyLeaderId = NULL;

	if ( ! pFnInitPartyLeaderId )
		pFnInitPartyLeaderId = (UFunction*) UObject::GObjObjects()->Data[ 7351 ];

	APlayerController_execInitPartyLeaderId_Parms InitPartyLeaderId_Parms;

	this->ProcessEvent ( pFnInitPartyLeaderId, &InitPartyLeaderId_Parms, NULL );
};

// Function Engine.PlayerController.ServerSetUniquePlayerId
// [0x002200C0] 
// Parameters infos:
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

void APlayerController::ServerSetUniquePlayerId ( struct FUniqueNetId UniqueId, unsigned long bWasInvited )
{
	static UFunction* pFnServerSetUniquePlayerId = NULL;

	if ( ! pFnServerSetUniquePlayerId )
		pFnServerSetUniquePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 7348 ];

	APlayerController_execServerSetUniquePlayerId_Parms ServerSetUniquePlayerId_Parms;
	memcpy ( &ServerSetUniquePlayerId_Parms.UniqueId, &UniqueId, 0x8 );
	ServerSetUniquePlayerId_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnServerSetUniquePlayerId, &ServerSetUniquePlayerId_Parms, NULL );
};

// Function Engine.PlayerController.InitUniquePlayerId
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitUniquePlayerId ( )
{
	static UFunction* pFnInitUniquePlayerId = NULL;

	if ( ! pFnInitUniquePlayerId )
		pFnInitUniquePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 7344 ];

	APlayerController_eventInitUniquePlayerId_Parms InitUniquePlayerId_Parms;

	this->ProcessEvent ( pFnInitUniquePlayerId, &InitUniquePlayerId_Parms, NULL );
};

// Function Engine.PlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 7342 ];

	APlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 7336 ];

	APlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function Engine.PlayerController.GetOnlineSubsystem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* APlayerController::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 7334 ];

	APlayerController_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.PlayerController.PostControllerIdChange
// [0x00020000] 
// Parameters infos:

void APlayerController::PostControllerIdChange ( )
{
	static UFunction* pFnPostControllerIdChange = NULL;

	if ( ! pFnPostControllerIdChange )
		pFnPostControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 7333 ];

	APlayerController_execPostControllerIdChange_Parms PostControllerIdChange_Parms;

	this->ProcessEvent ( pFnPostControllerIdChange, &PostControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.PreControllerIdChange
// [0x00020000] 
// Parameters infos:

void APlayerController::PreControllerIdChange ( )
{
	static UFunction* pFnPreControllerIdChange = NULL;

	if ( ! pFnPreControllerIdChange )
		pFnPreControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 7332 ];

	APlayerController_execPreControllerIdChange_Parms PreControllerIdChange_Parms;

	this->ProcessEvent ( pFnPreControllerIdChange, &PreControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.CleanOutSavedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanOutSavedMoves ( )
{
	static UFunction* pFnCleanOutSavedMoves = NULL;

	if ( ! pFnCleanOutSavedMoves )
		pFnCleanOutSavedMoves = (UFunction*) UObject::GObjObjects()->Data[ 7331 ];

	APlayerController_execCleanOutSavedMoves_Parms CleanOutSavedMoves_Parms;

	this->ProcessEvent ( pFnCleanOutSavedMoves, &CleanOutSavedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ClientReset
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = (UFunction*) UObject::GObjObjects()->Data[ 7330 ];

	APlayerController_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function Engine.PlayerController.Reset
// [0x00020002] 
// Parameters infos:

void APlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 7328 ];

	APlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerController.SpawnDefaultHUD
// [0x00020000] 
// Parameters infos:

void APlayerController::SpawnDefaultHUD ( )
{
	static UFunction* pFnSpawnDefaultHUD = NULL;

	if ( ! pFnSpawnDefaultHUD )
		pFnSpawnDefaultHUD = (UFunction*) UObject::GObjObjects()->Data[ 7327 ];

	APlayerController_execSpawnDefaultHUD_Parms SpawnDefaultHUD_Parms;

	this->ProcessEvent ( pFnSpawnDefaultHUD, &SpawnDefaultHUD_Parms, NULL );
};

// Function Engine.PlayerController.EnableCheats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::EnableCheats ( )
{
	static UFunction* pFnEnableCheats = NULL;

	if ( ! pFnEnableCheats )
		pFnEnableCheats = (UFunction*) UObject::GObjObjects()->Data[ 7326 ];

	APlayerController_execEnableCheats_Parms EnableCheats_Parms;

	this->ProcessEvent ( pFnEnableCheats, &EnableCheats_Parms, NULL );
};

// Function Engine.PlayerController.AddCheats
// [0x00020002] 
// Parameters infos:

void APlayerController::AddCheats ( )
{
	static UFunction* pFnAddCheats = NULL;

	if ( ! pFnAddCheats )
		pFnAddCheats = (UFunction*) UObject::GObjObjects()->Data[ 7325 ];

	APlayerController_execAddCheats_Parms AddCheats_Parms;

	this->ProcessEvent ( pFnAddCheats, &AddCheats_Parms, NULL );
};

// Function Engine.PlayerController.ResetTimeMargin
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetTimeMargin ( )
{
	static UFunction* pFnResetTimeMargin = NULL;

	if ( ! pFnResetTimeMargin )
		pFnResetTimeMargin = (UFunction*) UObject::GObjObjects()->Data[ 7324 ];

	APlayerController_execResetTimeMargin_Parms ResetTimeMargin_Parms;

	this->ProcessEvent ( pFnResetTimeMargin, &ResetTimeMargin_Parms, NULL );
};

// Function Engine.PlayerController.PreRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void APlayerController::eventPreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = (UFunction*) UObject::GObjObjects()->Data[ 7322 ];

	APlayerController_eventPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function Engine.PlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 7321 ];

	APlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function Engine.PlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 7320 ];

	APlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerController.SpawnCoverReplicator
// [0x00020000] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* APlayerController::SpawnCoverReplicator ( )
{
	static UFunction* pFnSpawnCoverReplicator = NULL;

	if ( ! pFnSpawnCoverReplicator )
		pFnSpawnCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 7318 ];

	APlayerController_execSpawnCoverReplicator_Parms SpawnCoverReplicator_Parms;

	this->ProcessEvent ( pFnSpawnCoverReplicator, &SpawnCoverReplicator_Parms, NULL );

	return SpawnCoverReplicator_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpauseControllerConnected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseControllerConnected ( )
{
	static UFunction* pFnCanUnpauseControllerConnected = NULL;

	if ( ! pFnCanUnpauseControllerConnected )
		pFnCanUnpauseControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 7316 ];

	APlayerController_execCanUnpauseControllerConnected_Parms CanUnpauseControllerConnected_Parms;

	this->ProcessEvent ( pFnCanUnpauseControllerConnected, &CanUnpauseControllerConnected_Parms, NULL );

	return CanUnpauseControllerConnected_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void APlayerController::OnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 7312 ];

	APlayerController_execOnControllerChanged_Parms OnControllerChanged_Parms;
	OnControllerChanged_Parms.ControllerId = ControllerId;
	OnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function Engine.PlayerController.CanUnpauseExternalUI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseExternalUI ( )
{
	static UFunction* pFnCanUnpauseExternalUI = NULL;

	if ( ! pFnCanUnpauseExternalUI )
		pFnCanUnpauseExternalUI = (UFunction*) UObject::GObjObjects()->Data[ 7310 ];

	APlayerController_execCanUnpauseExternalUI_Parms CanUnpauseExternalUI_Parms;

	this->ProcessEvent ( pFnCanUnpauseExternalUI, &CanUnpauseExternalUI_Parms, NULL );

	return CanUnpauseExternalUI_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnExternalUIChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void APlayerController::OnExternalUIChanged ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChanged = NULL;

	if ( ! pFnOnExternalUIChanged )
		pFnOnExternalUIChanged = (UFunction*) UObject::GObjObjects()->Data[ 7308 ];

	APlayerController_execOnExternalUIChanged_Parms OnExternalUIChanged_Parms;
	OnExternalUIChanged_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChanged, &OnExternalUIChanged_Parms, NULL );
};

// Function Engine.PlayerController.ForceClearUnpauseDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceClearUnpauseDelegates ( )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 7307 ];

	APlayerController_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );
};

// Function Engine.PlayerController.FellOutOfWorld
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APlayerController::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 7305 ];

	APlayerController_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.PlayerController.CleanUpAudioComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::CleanUpAudioComponents ( )
{
	static UFunction* pFnCleanUpAudioComponents = NULL;

	if ( ! pFnCleanUpAudioComponents )
		pFnCleanUpAudioComponents = (UFunction*) UObject::GObjObjects()->Data[ 7304 ];

	APlayerController_execCleanUpAudioComponents_Parms CleanUpAudioComponents_Parms;

	pFnCleanUpAudioComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpAudioComponents, &CleanUpAudioComponents_Parms, NULL );

	pFnCleanUpAudioComponents->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.FindStairRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020C]
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

int APlayerController::FindStairRotation ( float DeltaTime )
{
	static UFunction* pFnFindStairRotation = NULL;

	if ( ! pFnFindStairRotation )
		pFnFindStairRotation = (UFunction*) UObject::GObjObjects()->Data[ 7301 ];

	APlayerController_execFindStairRotation_Parms FindStairRotation_Parms;
	FindStairRotation_Parms.DeltaTime = DeltaTime;

	unsigned short NativeIndex = pFnFindStairRotation->iNative;
	pFnFindStairRotation->iNative = 0;

	pFnFindStairRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStairRotation, &FindStairRotation_Parms, NULL );

	pFnFindStairRotation->FunctionFlags |= 0x400;

	pFnFindStairRotation->iNative = NativeIndex;

	return FindStairRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckSpeedHack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool APlayerController::CheckSpeedHack ( float DeltaTime )
{
	static UFunction* pFnCheckSpeedHack = NULL;

	if ( ! pFnCheckSpeedHack )
		pFnCheckSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 7298 ];

	APlayerController_execCheckSpeedHack_Parms CheckSpeedHack_Parms;
	CheckSpeedHack_Parms.DeltaTime = DeltaTime;

	pFnCheckSpeedHack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSpeedHack, &CheckSpeedHack_Parms, NULL );

	pFnCheckSpeedHack->FunctionFlags |= 0x400;

	return CheckSpeedHack_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerProcessConvolve
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm )
// int                            H                              ( CPF_Parm )

void APlayerController::eventServerProcessConvolve ( struct FString C, int H )
{
	static UFunction* pFnServerProcessConvolve = NULL;

	if ( ! pFnServerProcessConvolve )
		pFnServerProcessConvolve = (UFunction*) UObject::GObjObjects()->Data[ 7295 ];

	APlayerController_eventServerProcessConvolve_Parms ServerProcessConvolve_Parms;
	memcpy ( &ServerProcessConvolve_Parms.C, &C, 0xC );
	ServerProcessConvolve_Parms.H = H;

	pFnServerProcessConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerProcessConvolve, &ServerProcessConvolve_Parms, NULL );

	pFnServerProcessConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientConvolve
// [0x01040DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm )
// int                            H                              ( CPF_Parm )

void APlayerController::eventClientConvolve ( struct FString C, int H )
{
	static UFunction* pFnClientConvolve = NULL;

	if ( ! pFnClientConvolve )
		pFnClientConvolve = (UFunction*) UObject::GObjObjects()->Data[ 7292 ];

	APlayerController_eventClientConvolve_Parms ClientConvolve_Parms;
	memcpy ( &ClientConvolve_Parms.C, &C, 0xC );
	ClientConvolve_Parms.H = H;

	pFnClientConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientConvolve, &ClientConvolve_Parms, NULL );

	pFnClientConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAudioGroupVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          Volume                         ( CPF_Parm )

void APlayerController::SetAudioGroupVolume ( struct FName GroupName, float Volume )
{
	static UFunction* pFnSetAudioGroupVolume = NULL;

	if ( ! pFnSetAudioGroupVolume )
		pFnSetAudioGroupVolume = (UFunction*) UObject::GObjObjects()->Data[ 7289 ];

	APlayerController_execSetAudioGroupVolume_Parms SetAudioGroupVolume_Parms;
	memcpy ( &SetAudioGroupVolume_Parms.GroupName, &GroupName, 0x8 );
	SetAudioGroupVolume_Parms.Volume = Volume;

	pFnSetAudioGroupVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAudioGroupVolume, &SetAudioGroupVolume_Parms, NULL );

	pFnSetAudioGroupVolume->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAllowMatureLanguage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAllowMatureLanguge            ( CPF_Parm )

void APlayerController::SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge )
{
	static UFunction* pFnSetAllowMatureLanguage = NULL;

	if ( ! pFnSetAllowMatureLanguage )
		pFnSetAllowMatureLanguage = (UFunction*) UObject::GObjObjects()->Data[ 7287 ];

	APlayerController_execSetAllowMatureLanguage_Parms SetAllowMatureLanguage_Parms;
	SetAllowMatureLanguage_Parms.bAllowMatureLanguge = bAllowMatureLanguge;

	pFnSetAllowMatureLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowMatureLanguage, &SetAllowMatureLanguage_Parms, NULL );

	pFnSetAllowMatureLanguage->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.PasteFromClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerController::PasteFromClipboard ( )
{
	static UFunction* pFnPasteFromClipboard = NULL;

	if ( ! pFnPasteFromClipboard )
		pFnPasteFromClipboard = (UFunction*) UObject::GObjObjects()->Data[ 7285 ];

	APlayerController_execPasteFromClipboard_Parms PasteFromClipboard_Parms;

	pFnPasteFromClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPasteFromClipboard, &PasteFromClipboard_Parms, NULL );

	pFnPasteFromClipboard->FunctionFlags |= 0x400;

	return PasteFromClipboard_Parms.ReturnValue;
};

// Function Engine.PlayerController.CopyToClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm )

void APlayerController::CopyToClipboard ( struct FString Text )
{
	static UFunction* pFnCopyToClipboard = NULL;

	if ( ! pFnCopyToClipboard )
		pFnCopyToClipboard = (UFunction*) UObject::GObjObjects()->Data[ 7283 ];

	APlayerController_execCopyToClipboard_Parms CopyToClipboard_Parms;
	memcpy ( &CopyToClipboard_Parms.Text, &Text, 0xC );

	pFnCopyToClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyToClipboard, &CopyToClipboard_Parms, NULL );

	pFnCopyToClipboard->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetDefaultURL
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Option                         ( CPF_Parm )

struct FString APlayerController::GetDefaultURL ( struct FString Option )
{
	static UFunction* pFnGetDefaultURL = NULL;

	if ( ! pFnGetDefaultURL )
		pFnGetDefaultURL = (UFunction*) UObject::GObjObjects()->Data[ 7280 ];

	APlayerController_execGetDefaultURL_Parms GetDefaultURL_Parms;
	memcpy ( &GetDefaultURL_Parms.Option, &Option, 0xC );

	pFnGetDefaultURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultURL, &GetDefaultURL_Parms, NULL );

	pFnGetDefaultURL->FunctionFlags |= 0x400;

	return GetDefaultURL_Parms.ReturnValue;
};

// Function Engine.PlayerController.UpdateURL
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0222]
// Parameters infos:
// struct FString                 NewOption                      ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Parm )
// unsigned long                  bSave1Default                  ( CPF_Parm )

void APlayerController::UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default )
{
	static UFunction* pFnUpdateURL = NULL;

	if ( ! pFnUpdateURL )
		pFnUpdateURL = (UFunction*) UObject::GObjObjects()->Data[ 7276 ];

	APlayerController_execUpdateURL_Parms UpdateURL_Parms;
	memcpy ( &UpdateURL_Parms.NewOption, &NewOption, 0xC );
	memcpy ( &UpdateURL_Parms.NewValue, &NewValue, 0xC );
	UpdateURL_Parms.bSave1Default = bSave1Default;

	unsigned short NativeIndex = pFnUpdateURL->iNative;
	pFnUpdateURL->iNative = 0;

	pFnUpdateURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateURL, &UpdateURL_Parms, NULL );

	pFnUpdateURL->FunctionFlags |= 0x400;

	pFnUpdateURL->iNative = NativeIndex;
};

// Function Engine.PlayerController.ClientTravel
// [0x01024DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid )
{
	static UFunction* pFnClientTravel = NULL;

	if ( ! pFnClientTravel )
		pFnClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 7271 ];

	APlayerController_eventClientTravel_Parms ClientTravel_Parms;
	memcpy ( &ClientTravel_Parms.URL, &URL, 0xC );
	ClientTravel_Parms.TravelType = TravelType;
	ClientTravel_Parms.bSeamless = bSeamless;
	memcpy ( &ClientTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnClientTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientTravel, &ClientTravel_Parms, NULL );

	pFnClientTravel->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Command                        ( CPF_Parm )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString APlayerController::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 6001 ];

	APlayerController_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetServerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerController::GetServerNetworkAddress ( )
{
	static UFunction* pFnGetServerNetworkAddress = NULL;

	if ( ! pFnGetServerNetworkAddress )
		pFnGetServerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 7267 ];

	APlayerController_execGetServerNetworkAddress_Parms GetServerNetworkAddress_Parms;

	pFnGetServerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetServerNetworkAddress, &GetServerNetworkAddress_Parms, NULL );

	pFnGetServerNetworkAddress->FunctionFlags |= 0x400;

	return GetServerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPlayerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerController::GetPlayerNetworkAddress ( )
{
	static UFunction* pFnGetPlayerNetworkAddress = NULL;

	if ( ! pFnGetPlayerNetworkAddress )
		pFnGetPlayerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 6649 ];

	APlayerController_execGetPlayerNetworkAddress_Parms GetPlayerNetworkAddress_Parms;

	pFnGetPlayerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerNetworkAddress, &GetPlayerNetworkAddress_Parms, NULL );

	pFnGetPlayerNetworkAddress->FunctionFlags |= 0x400;

	return GetPlayerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetNetSpeed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewSpeed                       ( CPF_Parm )

void APlayerController::SetNetSpeed ( int NewSpeed )
{
	static UFunction* pFnSetNetSpeed = NULL;

	if ( ! pFnSetNetSpeed )
		pFnSetNetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 7264 ];

	APlayerController_execSetNetSpeed_Parms SetNetSpeed_Parms;
	SetNetSpeed_Parms.NewSpeed = NewSpeed;

	pFnSetNetSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetSpeed, &SetNetSpeed_Parms, NULL );

	pFnSetNetSpeed->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientDrawCoordinateSystem
// [0x010241C2] 
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnClientDrawCoordinateSystem = NULL;

	if ( ! pFnClientDrawCoordinateSystem )
		pFnClientDrawCoordinateSystem = (UFunction*) UObject::GObjObjects()->Data[ 7259 ];

	APlayerController_execClientDrawCoordinateSystem_Parms ClientDrawCoordinateSystem_Parms;
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	ClientDrawCoordinateSystem_Parms.Scale = Scale;
	ClientDrawCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	this->ProcessEvent ( pFnClientDrawCoordinateSystem, &ClientDrawCoordinateSystem_Parms, NULL );
};

// Function Engine.CheatManager.TestLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::TestLevel ( )
{
	static UFunction* pFnTestLevel = NULL;

	if ( ! pFnTestLevel )
		pFnTestLevel = (UFunction*) UObject::GObjObjects()->Data[ 12231 ];

	UCheatManager_execTestLevel_Parms TestLevel_Parms;

	this->ProcessEvent ( pFnTestLevel, &TestLevel_Parms, NULL );
};

// Function Engine.CheatManager.ToggleDebugCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ToggleDebugCamera ( )
{
	static UFunction* pFnToggleDebugCamera = NULL;

	if ( ! pFnToggleDebugCamera )
		pFnToggleDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 12228 ];

	UCheatManager_execToggleDebugCamera_Parms ToggleDebugCamera_Parms;

	this->ProcessEvent ( pFnToggleDebugCamera, &ToggleDebugCamera_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelOut ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelOut = NULL;

	if ( ! pFnStreamLevelOut )
		pFnStreamLevelOut = (UFunction*) UObject::GObjObjects()->Data[ 12226 ];

	UCheatManager_execStreamLevelOut_Parms StreamLevelOut_Parms;
	memcpy ( &StreamLevelOut_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelOut, &StreamLevelOut_Parms, NULL );
};

// Function Engine.CheatManager.OnlyLoadLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::OnlyLoadLevel ( struct FName PackageName )
{
	static UFunction* pFnOnlyLoadLevel = NULL;

	if ( ! pFnOnlyLoadLevel )
		pFnOnlyLoadLevel = (UFunction*) UObject::GObjObjects()->Data[ 12224 ];

	UCheatManager_execOnlyLoadLevel_Parms OnlyLoadLevel_Parms;
	memcpy ( &OnlyLoadLevel_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnOnlyLoadLevel, &OnlyLoadLevel_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelIn ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelIn = NULL;

	if ( ! pFnStreamLevelIn )
		pFnStreamLevelIn = (UFunction*) UObject::GObjObjects()->Data[ 12222 ];

	UCheatManager_execStreamLevelIn_Parms StreamLevelIn_Parms;
	memcpy ( &StreamLevelIn_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelIn, &StreamLevelIn_Parms, NULL );
};

// Function Engine.CheatManager.SetLevelStreamingStatus
// [0x00020002] 
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bShouldBeLoaded                ( CPF_Parm )
// unsigned long                  bShouldBeVisible               ( CPF_Parm )

void UCheatManager::SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible )
{
	static UFunction* pFnSetLevelStreamingStatus = NULL;

	if ( ! pFnSetLevelStreamingStatus )
		pFnSetLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 12216 ];

	UCheatManager_execSetLevelStreamingStatus_Parms SetLevelStreamingStatus_Parms;
	memcpy ( &SetLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	SetLevelStreamingStatus_Parms.bShouldBeLoaded = bShouldBeLoaded;
	SetLevelStreamingStatus_Parms.bShouldBeVisible = bShouldBeVisible;

	this->ProcessEvent ( pFnSetLevelStreamingStatus, &SetLevelStreamingStatus_Parms, NULL );
};

// Function Engine.CheatManager.AllWeapons
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllWeapons ( )
{
	static UFunction* pFnAllWeapons = NULL;

	if ( ! pFnAllWeapons )
		pFnAllWeapons = (UFunction*) UObject::GObjObjects()->Data[ 12215 ];

	UCheatManager_execAllWeapons_Parms AllWeapons_Parms;

	this->ProcessEvent ( pFnAllWeapons, &AllWeapons_Parms, NULL );
};

// Function Engine.CheatManager.Loaded
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Loaded ( )
{
	static UFunction* pFnLoaded = NULL;

	if ( ! pFnLoaded )
		pFnLoaded = (UFunction*) UObject::GObjObjects()->Data[ 12214 ];

	UCheatManager_execLoaded_Parms Loaded_Parms;

	this->ProcessEvent ( pFnLoaded, &Loaded_Parms, NULL );
};

// Function Engine.CheatManager.ViewClass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::ViewClass ( class UClass* aClass )
{
	static UFunction* pFnViewClass = NULL;

	if ( ! pFnViewClass )
		pFnViewClass = (UFunction*) UObject::GObjObjects()->Data[ 12209 ];

	UCheatManager_execViewClass_Parms ViewClass_Parms;
	ViewClass_Parms.aClass = aClass;

	this->ProcessEvent ( pFnViewClass, &ViewClass_Parms, NULL );
};

// Function Engine.CheatManager.ViewBot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewBot ( )
{
	static UFunction* pFnViewBot = NULL;

	if ( ! pFnViewBot )
		pFnViewBot = (UFunction*) UObject::GObjObjects()->Data[ 12205 ];

	UCheatManager_execViewBot_Parms ViewBot_Parms;

	this->ProcessEvent ( pFnViewBot, &ViewBot_Parms, NULL );
};

// Function Engine.CheatManager.ViewFlag
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewFlag ( )
{
	static UFunction* pFnViewFlag = NULL;

	if ( ! pFnViewFlag )
		pFnViewFlag = (UFunction*) UObject::GObjObjects()->Data[ 12203 ];

	UCheatManager_execViewFlag_Parms ViewFlag_Parms;

	this->ProcessEvent ( pFnViewFlag, &ViewFlag_Parms, NULL );
};

// Function Engine.CheatManager.ViewActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ActorName                      ( CPF_Parm )

void UCheatManager::ViewActor ( struct FName ActorName )
{
	static UFunction* pFnViewActor = NULL;

	if ( ! pFnViewActor )
		pFnViewActor = (UFunction*) UObject::GObjObjects()->Data[ 12200 ];

	UCheatManager_execViewActor_Parms ViewActor_Parms;
	memcpy ( &ViewActor_Parms.ActorName, &ActorName, 0x8 );

	this->ProcessEvent ( pFnViewActor, &ViewActor_Parms, NULL );
};

// Function Engine.CheatManager.ViewPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void UCheatManager::ViewPlayer ( struct FString S )
{
	static UFunction* pFnViewPlayer = NULL;

	if ( ! pFnViewPlayer )
		pFnViewPlayer = (UFunction*) UObject::GObjObjects()->Data[ 12197 ];

	UCheatManager_execViewPlayer_Parms ViewPlayer_Parms;
	memcpy ( &ViewPlayer_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnViewPlayer, &ViewPlayer_Parms, NULL );
};

// Function Engine.CheatManager.ViewSelf
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bQuiet                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::ViewSelf ( unsigned long bQuiet )
{
	static UFunction* pFnViewSelf = NULL;

	if ( ! pFnViewSelf )
		pFnViewSelf = (UFunction*) UObject::GObjObjects()->Data[ 12195 ];

	UCheatManager_execViewSelf_Parms ViewSelf_Parms;
	ViewSelf_Parms.bQuiet = bQuiet;

	this->ProcessEvent ( pFnViewSelf, &ViewSelf_Parms, NULL );
};

// Function Engine.CheatManager.RememberSpot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::RememberSpot ( )
{
	static UFunction* pFnRememberSpot = NULL;

	if ( ! pFnRememberSpot )
		pFnRememberSpot = (UFunction*) UObject::GObjObjects()->Data[ 12194 ];

	UCheatManager_execRememberSpot_Parms RememberSpot_Parms;

	this->ProcessEvent ( pFnRememberSpot, &RememberSpot_Parms, NULL );
};

// Function Engine.CheatManager.DestroyFractures
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::DestroyFractures ( float Radius )
{
	static UFunction* pFnDestroyFractures = NULL;

	if ( ! pFnDestroyFractures )
		pFnDestroyFractures = (UFunction*) UObject::GObjObjects()->Data[ 12191 ];

	UCheatManager_execDestroyFractures_Parms DestroyFractures_Parms;
	DestroyFractures_Parms.Radius = Radius;

	this->ProcessEvent ( pFnDestroyFractures, &DestroyFractures_Parms, NULL );
};

// Function Engine.CheatManager.PlayersOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::PlayersOnly ( )
{
	static UFunction* pFnPlayersOnly = NULL;

	if ( ! pFnPlayersOnly )
		pFnPlayersOnly = (UFunction*) UObject::GObjObjects()->Data[ 12190 ];

	UCheatManager_execPlayersOnly_Parms PlayersOnly_Parms;

	this->ProcessEvent ( pFnPlayersOnly, &PlayersOnly_Parms, NULL );
};

// Function Engine.CheatManager.GiveWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassStr                 ( CPF_Parm )

class AWeapon* UCheatManager::GiveWeapon ( struct FString WeaponClassStr )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 12185 ];

	UCheatManager_execGiveWeapon_Parms GiveWeapon_Parms;
	memcpy ( &GiveWeapon_Parms.WeaponClassStr, &WeaponClassStr, 0xC );

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );

	return GiveWeapon_Parms.ReturnValue;
};

// Function Engine.CheatManager.Summon
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm )

void UCheatManager::Summon ( struct FString ClassName )
{
	static UFunction* pFnSummon = NULL;

	if ( ! pFnSummon )
		pFnSummon = (UFunction*) UObject::GObjObjects()->Data[ 12181 ];

	UCheatManager_execSummon_Parms Summon_Parms;
	memcpy ( &Summon_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnSummon, &Summon_Parms, NULL );
};

// Function Engine.CheatManager.Avatar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ClassName                      ( CPF_Parm )

void UCheatManager::Avatar ( struct FName ClassName )
{
	static UFunction* pFnAvatar = NULL;

	if ( ! pFnAvatar )
		pFnAvatar = (UFunction*) UObject::GObjObjects()->Data[ 12174 ];

	UCheatManager_execAvatar_Parms Avatar_Parms;
	memcpy ( &Avatar_Parms.ClassName, &ClassName, 0x8 );

	this->ProcessEvent ( pFnAvatar, &Avatar_Parms, NULL );
};

// Function Engine.CheatManager.KillPawns
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillPawns ( )
{
	static UFunction* pFnKillPawns = NULL;

	if ( ! pFnKillPawns )
		pFnKillPawns = (UFunction*) UObject::GObjObjects()->Data[ 12173 ];

	UCheatManager_execKillPawns_Parms KillPawns_Parms;

	this->ProcessEvent ( pFnKillPawns, &KillPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAllPawns
// [0x00020002] 
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAllPawns ( class UClass* aClass )
{
	static UFunction* pFnKillAllPawns = NULL;

	if ( ! pFnKillAllPawns )
		pFnKillAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 12170 ];

	UCheatManager_execKillAllPawns_Parms KillAllPawns_Parms;
	KillAllPawns_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAllPawns, &KillAllPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAll ( class UClass* aClass )
{
	static UFunction* pFnKillAll = NULL;

	if ( ! pFnKillAll )
		pFnKillAll = (UFunction*) UObject::GObjObjects()->Data[ 12167 ];

	UCheatManager_execKillAll_Parms KillAll_Parms;
	KillAll_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAll, &KillAll_Parms, NULL );
};

// Function Engine.CheatManager.SetSpeed
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetSpeed ( float F )
{
	static UFunction* pFnSetSpeed = NULL;

	if ( ! pFnSetSpeed )
		pFnSetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 12165 ];

	UCheatManager_execSetSpeed_Parms SetSpeed_Parms;
	SetSpeed_Parms.F = F;

	this->ProcessEvent ( pFnSetSpeed, &SetSpeed_Parms, NULL );
};

// Function Engine.CheatManager.SetGravity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetGravity ( float F )
{
	static UFunction* pFnSetGravity = NULL;

	if ( ! pFnSetGravity )
		pFnSetGravity = (UFunction*) UObject::GObjObjects()->Data[ 12163 ];

	UCheatManager_execSetGravity_Parms SetGravity_Parms;
	SetGravity_Parms.F = F;

	this->ProcessEvent ( pFnSetGravity, &SetGravity_Parms, NULL );
};

// Function Engine.CheatManager.SetJumpZ
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetJumpZ ( float F )
{
	static UFunction* pFnSetJumpZ = NULL;

	if ( ! pFnSetJumpZ )
		pFnSetJumpZ = (UFunction*) UObject::GObjObjects()->Data[ 12161 ];

	UCheatManager_execSetJumpZ_Parms SetJumpZ_Parms;
	SetJumpZ_Parms.F = F;

	this->ProcessEvent ( pFnSetJumpZ, &SetJumpZ_Parms, NULL );
};

// Function Engine.CheatManager.SloMo
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UCheatManager::SloMo ( float T )
{
	static UFunction* pFnSloMo = NULL;

	if ( ! pFnSloMo )
		pFnSloMo = (UFunction*) UObject::GObjObjects()->Data[ 12159 ];

	UCheatManager_execSloMo_Parms SloMo_Parms;
	SloMo_Parms.T = T;

	this->ProcessEvent ( pFnSloMo, &SloMo_Parms, NULL );
};

// Function Engine.CheatManager.AffectedByHitEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 12158 ];

	UCheatManager_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );
};

// Function Engine.CheatManager.God
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::God ( )
{
	static UFunction* pFnGod = NULL;

	if ( ! pFnGod )
		pFnGod = (UFunction*) UObject::GObjObjects()->Data[ 12157 ];

	UCheatManager_execGod_Parms God_Parms;

	this->ProcessEvent ( pFnGod, &God_Parms, NULL );
};

// Function Engine.CheatManager.AllAmmo
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllAmmo ( )
{
	static UFunction* pFnAllAmmo = NULL;

	if ( ! pFnAllAmmo )
		pFnAllAmmo = (UFunction*) UObject::GObjObjects()->Data[ 12156 ];

	UCheatManager_execAllAmmo_Parms AllAmmo_Parms;

	this->ProcessEvent ( pFnAllAmmo, &AllAmmo_Parms, NULL );
};

// Function Engine.CheatManager.Ghost
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Ghost ( )
{
	static UFunction* pFnGhost = NULL;

	if ( ! pFnGhost )
		pFnGhost = (UFunction*) UObject::GObjObjects()->Data[ 12155 ];

	UCheatManager_execGhost_Parms Ghost_Parms;

	this->ProcessEvent ( pFnGhost, &Ghost_Parms, NULL );
};

// Function Engine.CheatManager.Walk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Walk ( )
{
	static UFunction* pFnWalk = NULL;

	if ( ! pFnWalk )
		pFnWalk = (UFunction*) UObject::GObjObjects()->Data[ 12154 ];

	UCheatManager_execWalk_Parms Walk_Parms;

	this->ProcessEvent ( pFnWalk, &Walk_Parms, NULL );
};

// Function Engine.CheatManager.Fly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Fly ( )
{
	static UFunction* pFnFly = NULL;

	if ( ! pFnFly )
		pFnFly = (UFunction*) UObject::GObjObjects()->Data[ 12153 ];

	UCheatManager_execFly_Parms Fly_Parms;

	this->ProcessEvent ( pFnFly, &Fly_Parms, NULL );
};

// Function Engine.CheatManager.Amphibious
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Amphibious ( )
{
	static UFunction* pFnAmphibious = NULL;

	if ( ! pFnAmphibious )
		pFnAmphibious = (UFunction*) UObject::GObjObjects()->Data[ 12152 ];

	UCheatManager_execAmphibious_Parms Amphibious_Parms;

	this->ProcessEvent ( pFnAmphibious, &Amphibious_Parms, NULL );
};

// Function Engine.CheatManager.EndPath
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::EndPath ( )
{
	static UFunction* pFnEndPath = NULL;

	if ( ! pFnEndPath )
		pFnEndPath = (UFunction*) UObject::GObjObjects()->Data[ 12151 ];

	UCheatManager_execEndPath_Parms EndPath_Parms;

	this->ProcessEvent ( pFnEndPath, &EndPath_Parms, NULL );
};

// Function Engine.CheatManager.ChangeSize
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::ChangeSize ( float F )
{
	static UFunction* pFnChangeSize = NULL;

	if ( ! pFnChangeSize )
		pFnChangeSize = (UFunction*) UObject::GObjObjects()->Data[ 12149 ];

	UCheatManager_execChangeSize_Parms ChangeSize_Parms;
	ChangeSize_Parms.F = F;

	this->ProcessEvent ( pFnChangeSize, &ChangeSize_Parms, NULL );
};

// Function Engine.CheatManager.GetFRotatorFromString
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InStr                          ( CPF_Parm )

struct FRotator UCheatManager::GetFRotatorFromString ( struct FString InStr )
{
	static UFunction* pFnGetFRotatorFromString = NULL;

	if ( ! pFnGetFRotatorFromString )
		pFnGetFRotatorFromString = (UFunction*) UObject::GObjObjects()->Data[ 12146 ];

	UCheatManager_execGetFRotatorFromString_Parms GetFRotatorFromString_Parms;
	memcpy ( &GetFRotatorFromString_Parms.InStr, &InStr, 0xC );

	pFnGetFRotatorFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFRotatorFromString, &GetFRotatorFromString_Parms, NULL );

	pFnGetFRotatorFromString->FunctionFlags |= 0x400;

	return GetFRotatorFromString_Parms.ReturnValue;
};

// Function Engine.CheatManager.GetFVectorFromString
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InStr                          ( CPF_Parm )

struct FVector UCheatManager::GetFVectorFromString ( struct FString InStr )
{
	static UFunction* pFnGetFVectorFromString = NULL;

	if ( ! pFnGetFVectorFromString )
		pFnGetFVectorFromString = (UFunction*) UObject::GObjObjects()->Data[ 12143 ];

	UCheatManager_execGetFVectorFromString_Parms GetFVectorFromString_Parms;
	memcpy ( &GetFVectorFromString_Parms.InStr, &InStr, 0xC );

	pFnGetFVectorFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFVectorFromString, &GetFVectorFromString_Parms, NULL );

	pFnGetFVectorFromString->FunctionFlags |= 0x400;

	return GetFVectorFromString_Parms.ReturnValue;
};

// Function Engine.CheatManager.BugIt
// [0x00824202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::BugIt ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugIt = NULL;

	if ( ! pFnBugIt )
		pFnBugIt = (UFunction*) UObject::GObjObjects()->Data[ 12139 ];

	UCheatManager_execBugIt_Parms BugIt_Parms;
	memcpy ( &BugIt_Parms.ScreenShotDescription, &ScreenShotDescription, 0xC );

	this->ProcessEvent ( pFnBugIt, &BugIt_Parms, NULL );
};

// Function Engine.CheatManager.BugItWorker
// [0x00020002] 
// Parameters infos:
// struct FVector                 TheLocation                    ( CPF_Parm )
// struct FRotator                TheRotation                    ( CPF_Parm )

void UCheatManager::BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation )
{
	static UFunction* pFnBugItWorker = NULL;

	if ( ! pFnBugItWorker )
		pFnBugItWorker = (UFunction*) UObject::GObjObjects()->Data[ 12136 ];

	UCheatManager_execBugItWorker_Parms BugItWorker_Parms;
	memcpy ( &BugItWorker_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItWorker_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItWorker, &BugItWorker_Parms, NULL );
};

// Function Engine.CheatManager.BugItGoString
// [0x00020002] 
// Parameters infos:
// struct FString                 TheLocation                    ( CPF_Parm )
// struct FString                 TheRotation                    ( CPF_Parm )

void UCheatManager::BugItGoString ( struct FString TheLocation, struct FString TheRotation )
{
	static UFunction* pFnBugItGoString = NULL;

	if ( ! pFnBugItGoString )
		pFnBugItGoString = (UFunction*) UObject::GObjObjects()->Data[ 12133 ];

	UCheatManager_execBugItGoString_Parms BugItGoString_Parms;
	memcpy ( &BugItGoString_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItGoString_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItGoString, &BugItGoString_Parms, NULL );
};

// Function Engine.CheatManager.BugItGo
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm | CPF_CoerceParm )
// float                          Y                              ( CPF_Parm | CPF_CoerceParm )
// float                          Z                              ( CPF_Parm | CPF_CoerceParm )
// int                            Pitch                          ( CPF_Parm | CPF_CoerceParm )
// int                            Yaw                            ( CPF_Parm | CPF_CoerceParm )
// int                            Roll                           ( CPF_Parm | CPF_CoerceParm )

void UCheatManager::BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll )
{
	static UFunction* pFnBugItGo = NULL;

	if ( ! pFnBugItGo )
		pFnBugItGo = (UFunction*) UObject::GObjObjects()->Data[ 12124 ];

	UCheatManager_execBugItGo_Parms BugItGo_Parms;
	BugItGo_Parms.X = X;
	BugItGo_Parms.Y = Y;
	BugItGo_Parms.Z = Z;
	BugItGo_Parms.Pitch = Pitch;
	BugItGo_Parms.Yaw = Yaw;
	BugItGo_Parms.Roll = Roll;

	this->ProcessEvent ( pFnBugItGo, &BugItGo_Parms, NULL );
};

// Function Engine.CheatManager.Teleport
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 12118 ];

	UCheatManager_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function Engine.CheatManager.KillViewedActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillViewedActor ( )
{
	static UFunction* pFnKillViewedActor = NULL;

	if ( ! pFnKillViewedActor )
		pFnKillViewedActor = (UFunction*) UObject::GObjObjects()->Data[ 12117 ];

	UCheatManager_execKillViewedActor_Parms KillViewedActor_Parms;

	this->ProcessEvent ( pFnKillViewedActor, &KillViewedActor_Parms, NULL );
};

// Function Engine.CheatManager.WriteToLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Param                          ( CPF_Parm )

void UCheatManager::WriteToLog ( struct FString Param )
{
	static UFunction* pFnWriteToLog = NULL;

	if ( ! pFnWriteToLog )
		pFnWriteToLog = (UFunction*) UObject::GObjObjects()->Data[ 12115 ];

	UCheatManager_execWriteToLog_Parms WriteToLog_Parms;
	memcpy ( &WriteToLog_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnWriteToLog, &WriteToLog_Parms, NULL );
};

// Function Engine.CheatManager.FreezeFrame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          delay                          ( CPF_Parm )

void UCheatManager::FreezeFrame ( float delay )
{
	static UFunction* pFnFreezeFrame = NULL;

	if ( ! pFnFreezeFrame )
		pFnFreezeFrame = (UFunction*) UObject::GObjObjects()->Data[ 12113 ];

	UCheatManager_execFreezeFrame_Parms FreezeFrame_Parms;
	FreezeFrame_Parms.delay = delay;

	this->ProcessEvent ( pFnFreezeFrame, &FreezeFrame_Parms, NULL );
};

// Function Engine.CheatManager.ListDynamicActors
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ListDynamicActors ( )
{
	static UFunction* pFnListDynamicActors = NULL;

	if ( ! pFnListDynamicActors )
		pFnListDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 12112 ];

	UCheatManager_execListDynamicActors_Parms ListDynamicActors_Parms;

	this->ProcessEvent ( pFnListDynamicActors, &ListDynamicActors_Parms, NULL );
};

// Function Engine.Player.SwitchController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void UPlayer::SwitchController ( class APlayerController* PC )
{
	static UFunction* pFnSwitchController = NULL;

	if ( ! pFnSwitchController )
		pFnSwitchController = (UFunction*) UObject::GObjObjects()->Data[ 22145 ];

	UPlayer_execSwitchController_Parms SwitchController_Parms;
	SwitchController_Parms.PC = PC;

	pFnSwitchController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchController, &SwitchController_Parms, NULL );

	pFnSwitchController->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACoverGroup::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 14857 ];

	ACoverGroup_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverGroup.ToggleGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::ToggleGroup ( )
{
	static UFunction* pFnToggleGroup = NULL;

	if ( ! pFnToggleGroup )
		pFnToggleGroup = (UFunction*) UObject::GObjObjects()->Data[ 14856 ];

	ACoverGroup_execToggleGroup_Parms ToggleGroup_Parms;

	pFnToggleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleGroup, &ToggleGroup_Parms, NULL );

	pFnToggleGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.DisableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::DisableGroup ( )
{
	static UFunction* pFnDisableGroup = NULL;

	if ( ! pFnDisableGroup )
		pFnDisableGroup = (UFunction*) UObject::GObjObjects()->Data[ 14855 ];

	ACoverGroup_execDisableGroup_Parms DisableGroup_Parms;

	pFnDisableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableGroup, &DisableGroup_Parms, NULL );

	pFnDisableGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.EnableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::EnableGroup ( )
{
	static UFunction* pFnEnableGroup = NULL;

	if ( ! pFnEnableGroup )
		pFnEnableGroup = (UFunction*) UObject::GObjObjects()->Data[ 14854 ];

	ACoverGroup_execEnableGroup_Parms EnableGroup_Parms;

	pFnEnableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableGroup, &EnableGroup_Parms, NULL );

	pFnEnableGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverLink.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString ACoverLink::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 15150 ];

	ACoverLink_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetLocationDescription
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char ACoverLink::GetLocationDescription ( int SlotIdx )
{
	static UFunction* pFnGetLocationDescription = NULL;

	if ( ! pFnGetLocationDescription )
		pFnGetLocationDescription = (UFunction*) UObject::GObjObjects()->Data[ 15147 ];

	ACoverLink_execGetLocationDescription_Parms GetLocationDescription_Parms;
	GetLocationDescription_Parms.SlotIdx = SlotIdx;

	pFnGetLocationDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationDescription, &GetLocationDescription_Parms, NULL );

	pFnGetLocationDescription->FunctionFlags |= 0x400;

	return GetLocationDescription_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetDebugString
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

struct FString ACoverLink::eventGetDebugString ( int SlotIdx )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 15144 ];

	ACoverLink_eventGetDebugString_Parms GetDebugString_Parms;
	GetDebugString_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.CoverLink.AddCoverSlot
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SlotLocation                   ( CPF_Parm )
// struct FRotator                SlotRotation                   ( CPF_Parm )
// int                            SlotIdx                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSlotUpdate               ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate )
{
	static UFunction* pFnAddCoverSlot = NULL;

	if ( ! pFnAddCoverSlot )
		pFnAddCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 15138 ];

	ACoverLink_execAddCoverSlot_Parms AddCoverSlot_Parms;
	memcpy ( &AddCoverSlot_Parms.SlotLocation, &SlotLocation, 0xC );
	memcpy ( &AddCoverSlot_Parms.SlotRotation, &SlotRotation, 0xC );
	AddCoverSlot_Parms.SlotIdx = SlotIdx;
	AddCoverSlot_Parms.bForceSlotUpdate = bForceSlotUpdate;

	pFnAddCoverSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddCoverSlot, &AddCoverSlot_Parms, NULL );

	pFnAddCoverSlot->FunctionFlags |= 0x400;

	return AddCoverSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSwatTurnTarget
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// struct FCoverReference         out_Info                       ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverReference* out_Info )
{
	static UFunction* pFnGetSwatTurnTarget = NULL;

	if ( ! pFnGetSwatTurnTarget )
		pFnGetSwatTurnTarget = (UFunction*) UObject::GObjObjects()->Data[ 15131 ];

	ACoverLink_execGetSwatTurnTarget_Parms GetSwatTurnTarget_Parms;
	GetSwatTurnTarget_Parms.SlotIdx = SlotIdx;
	GetSwatTurnTarget_Parms.Direction = Direction;

	this->ProcessEvent ( pFnGetSwatTurnTarget, &GetSwatTurnTarget_Parms, NULL );

	if ( out_Info )
		memcpy ( out_Info, &GetSwatTurnTarget_Parms.out_Info, 0x1C );

	return GetSwatTurnTarget_Parms.ReturnValue;
};

// Function Engine.CoverLink.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ACoverLink::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 15129 ];

	ACoverLink_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.CoverLink.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ACoverLink::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 15123 ];

	ACoverLink_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverLink.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACoverLink::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15121 ];

	ACoverLink_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoAdjustSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bOnlyCheckLeans                ( CPF_Parm )

bool ACoverLink::AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans )
{
	static UFunction* pFnAutoAdjustSlot = NULL;

	if ( ! pFnAutoAdjustSlot )
		pFnAutoAdjustSlot = (UFunction*) UObject::GObjObjects()->Data[ 15117 ];

	ACoverLink_execAutoAdjustSlot_Parms AutoAdjustSlot_Parms;
	AutoAdjustSlot_Parms.SlotIdx = SlotIdx;
	AutoAdjustSlot_Parms.bOnlyCheckLeans = bOnlyCheckLeans;

	pFnAutoAdjustSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoAdjustSlot, &AutoAdjustSlot_Parms, NULL );

	pFnAutoAdjustSlot->FunctionFlags |= 0x400;

	return AutoAdjustSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.OnModifyCover
// [0x00020002] 
// Parameters infos:
// class USeqAct_ModifyCover*     Action                         ( CPF_Parm )

void ACoverLink::OnModifyCover ( class USeqAct_ModifyCover* Action )
{
	static UFunction* pFnOnModifyCover = NULL;

	if ( ! pFnOnModifyCover )
		pFnOnModifyCover = (UFunction*) UObject::GObjObjects()->Data[ 15110 ];

	ACoverLink_execOnModifyCover_Parms OnModifyCover_Parms;
	OnModifyCover_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyCover, &OnModifyCover_Parms, NULL );
};

// Function Engine.CoverLink.SetSlotEnabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverLink::eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15107 ];

	ACoverLink_eventSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.SlotIdx = SlotIdx;
	SetSlotEnabled_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );
};

// Function Engine.CoverLink.SetDisabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewDisabled                   ( CPF_Parm )

void ACoverLink::eventSetDisabled ( unsigned long bNewDisabled )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = (UFunction*) UObject::GObjObjects()->Data[ 15104 ];

	ACoverLink_eventSetDisabled_Parms SetDisabled_Parms;
	SetDisabled_Parms.bNewDisabled = bNewDisabled;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Engine.CoverLink.GetSlotActions
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// TArray< unsigned char >        Actions                        ( CPF_Parm | CPF_OutParm )

void ACoverLink::GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions )
{
	static UFunction* pFnGetSlotActions = NULL;

	if ( ! pFnGetSlotActions )
		pFnGetSlotActions = (UFunction*) UObject::GObjObjects()->Data[ 15100 ];

	ACoverLink_execGetSlotActions_Parms GetSlotActions_Parms;
	GetSlotActions_Parms.SlotIdx = SlotIdx;

	pFnGetSlotActions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotActions, &GetSlotActions_Parms, NULL );

	pFnGetSlotActions->FunctionFlags |= 0x400;

	if ( Actions )
		memcpy ( Actions, &GetSlotActions_Parms.Actions, 0xC );
};

// Function Engine.CoverLink.HasFireLinkTo
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned long                  bAllowFallbackLinks            ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks )
{
	static UFunction* pFnHasFireLinkTo = NULL;

	if ( ! pFnHasFireLinkTo )
		pFnHasFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 15095 ];

	ACoverLink_execHasFireLinkTo_Parms HasFireLinkTo_Parms;
	HasFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &HasFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	HasFireLinkTo_Parms.bAllowFallbackLinks = bAllowFallbackLinks;

	pFnHasFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFireLinkTo, &HasFireLinkTo_Parms, NULL );

	pFnHasFireLinkTo->FunctionFlags |= 0x400;

	return HasFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetFireLinkTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned char                  ChkAction                      ( CPF_Parm )
// unsigned char                  ChkType                        ( CPF_Parm )
// int                            out_FireLinkIdx                ( CPF_Parm | CPF_OutParm )
// TArray< int >                  out_Items                      ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items )
{
	static UFunction* pFnGetFireLinkTo = NULL;

	if ( ! pFnGetFireLinkTo )
		pFnGetFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 15086 ];

	ACoverLink_execGetFireLinkTo_Parms GetFireLinkTo_Parms;
	GetFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &GetFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	GetFireLinkTo_Parms.ChkAction = ChkAction;
	GetFireLinkTo_Parms.ChkType = ChkType;

	pFnGetFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireLinkTo, &GetFireLinkTo_Parms, NULL );

	pFnGetFireLinkTo->FunctionFlags |= 0x400;

	if ( out_FireLinkIdx )
		*out_FireLinkIdx = GetFireLinkTo_Parms.out_FireLinkIdx;

	if ( out_Items )
		memcpy ( out_Items, &GetFireLinkTo_Parms.out_Items, 0xC );

	return GetFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowLeftTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowLeftTransition ( int SlotIdx )
{
	static UFunction* pFnAllowLeftTransition = NULL;

	if ( ! pFnAllowLeftTransition )
		pFnAllowLeftTransition = (UFunction*) UObject::GObjObjects()->Data[ 15082 ];

	ACoverLink_execAllowLeftTransition_Parms AllowLeftTransition_Parms;
	AllowLeftTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowLeftTransition, &AllowLeftTransition_Parms, NULL );

	return AllowLeftTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowRightTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowRightTransition ( int SlotIdx )
{
	static UFunction* pFnAllowRightTransition = NULL;

	if ( ! pFnAllowRightTransition )
		pFnAllowRightTransition = (UFunction*) UObject::GObjObjects()->Data[ 15078 ];

	ACoverLink_execAllowRightTransition_Parms AllowRightTransition_Parms;
	AllowRightTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowRightTransition, &AllowRightTransition_Parms, NULL );

	return AllowRightTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsRightEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsRightEdgeSlot = NULL;

	if ( ! pFnIsRightEdgeSlot )
		pFnIsRightEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 15074 ];

	ACoverLink_execIsRightEdgeSlot_Parms IsRightEdgeSlot_Parms;
	IsRightEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsRightEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsRightEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRightEdgeSlot, &IsRightEdgeSlot_Parms, NULL );

	pFnIsRightEdgeSlot->FunctionFlags |= 0x400;

	return IsRightEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsLeftEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsLeftEdgeSlot = NULL;

	if ( ! pFnIsLeftEdgeSlot )
		pFnIsLeftEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 15070 ];

	ACoverLink_execIsLeftEdgeSlot_Parms IsLeftEdgeSlot_Parms;
	IsLeftEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsLeftEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsLeftEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLeftEdgeSlot, &IsLeftEdgeSlot_Parms, NULL );

	pFnIsLeftEdgeSlot->FunctionFlags |= 0x400;

	return IsLeftEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsEdgeSlot
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsEdgeSlot = NULL;

	if ( ! pFnIsEdgeSlot )
		pFnIsEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 15066 ];

	ACoverLink_execIsEdgeSlot_Parms IsEdgeSlot_Parms;
	IsEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEdgeSlot, &IsEdgeSlot_Parms, NULL );

	pFnIsEdgeSlot->FunctionFlags |= 0x400;

	return IsEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.FindSlots
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CheckLocation                  ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// int                            LeftSlotIdx                    ( CPF_Parm | CPF_OutParm )
// int                            RightSlotIdx                   ( CPF_Parm | CPF_OutParm )

bool ACoverLink::FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx )
{
	static UFunction* pFnFindSlots = NULL;

	if ( ! pFnFindSlots )
		pFnFindSlots = (UFunction*) UObject::GObjObjects()->Data[ 15060 ];

	ACoverLink_execFindSlots_Parms FindSlots_Parms;
	memcpy ( &FindSlots_Parms.CheckLocation, &CheckLocation, 0xC );
	FindSlots_Parms.MaxDistance = MaxDistance;

	pFnFindSlots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSlots, &FindSlots_Parms, NULL );

	pFnFindSlots->FunctionFlags |= 0x400;

	if ( LeftSlotIdx )
		*LeftSlotIdx = FindSlots_Parms.LeftSlotIdx;

	if ( RightSlotIdx )
		*RightSlotIdx = FindSlots_Parms.RightSlotIdx;

	return FindSlots_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsStationarySlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::IsStationarySlot ( int SlotIdx )
{
	static UFunction* pFnIsStationarySlot = NULL;

	if ( ! pFnIsStationarySlot )
		pFnIsStationarySlot = (UFunction*) UObject::GObjObjects()->Data[ 15057 ];

	ACoverLink_execIsStationarySlot_Parms IsStationarySlot_Parms;
	IsStationarySlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnIsStationarySlot, &IsStationarySlot_Parms, NULL );

	return IsStationarySlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsValidClaim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = (UFunction*) UObject::GObjObjects()->Data[ 15051 ];

	ACoverLink_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.SlotIdx = SlotIdx;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnClaim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

bool ACoverLink::eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaim = NULL;

	if ( ! pFnUnClaim )
		pFnUnClaim = (UFunction*) UObject::GObjObjects()->Data[ 15043 ];

	ACoverLink_eventUnClaim_Parms UnClaim_Parms;
	UnClaim_Parms.OldClaim = OldClaim;
	UnClaim_Parms.SlotIdx = SlotIdx;
	UnClaim_Parms.bUnclaimAll = bUnclaimAll;

	this->ProcessEvent ( pFnUnClaim, &UnClaim_Parms, NULL );

	return UnClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.Claim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::eventClaim ( class APawn* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = (UFunction*) UObject::GObjObjects()->Data[ 15034 ];

	ACoverLink_eventClaim_Parms Claim_Parms;
	Claim_Parms.NewClaim = NewClaim;
	Claim_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	return Claim_Parms.ReturnValue;
};

// Function Engine.CoverLink.SetInvalidUntil
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// float                          TimeToBecomeValid              ( CPF_Parm )

void ACoverLink::eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid )
{
	static UFunction* pFnSetInvalidUntil = NULL;

	if ( ! pFnSetInvalidUntil )
		pFnSetInvalidUntil = (UFunction*) UObject::GObjObjects()->Data[ 15031 ];

	ACoverLink_eventSetInvalidUntil_Parms SetInvalidUntil_Parms;
	SetInvalidUntil_Parms.SlotIdx = SlotIdx;
	SetInvalidUntil_Parms.TimeToBecomeValid = TimeToBecomeValid;

	this->ProcessEvent ( pFnSetInvalidUntil, &SetInvalidUntil_Parms, NULL );
};

// Function Engine.CoverLink.IsExposedTo
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkSlot                        ( CPF_Parm )
// float                          out_ExposedScale               ( CPF_Parm | CPF_OutParm )

bool ACoverLink::IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale )
{
	static UFunction* pFnIsExposedTo = NULL;

	if ( ! pFnIsExposedTo )
		pFnIsExposedTo = (UFunction*) UObject::GObjObjects()->Data[ 15026 ];

	ACoverLink_execIsExposedTo_Parms IsExposedTo_Parms;
	IsExposedTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &IsExposedTo_Parms.ChkSlot, &ChkSlot, 0x8 );

	pFnIsExposedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExposedTo, &IsExposedTo_Parms, NULL );

	pFnIsExposedTo->FunctionFlags |= 0x400;

	if ( out_ExposedScale )
		*out_ExposedScale = IsExposedTo_Parms.out_ExposedScale;

	return IsExposedTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotMarker
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ACoverSlotMarker*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

class ACoverSlotMarker* ACoverLink::GetSlotMarker ( int SlotIdx )
{
	static UFunction* pFnGetSlotMarker = NULL;

	if ( ! pFnGetSlotMarker )
		pFnGetSlotMarker = (UFunction*) UObject::GObjObjects()->Data[ 15023 ];

	ACoverLink_execGetSlotMarker_Parms GetSlotMarker_Parms;
	GetSlotMarker_Parms.SlotIdx = SlotIdx;

	pFnGetSlotMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotMarker, &GetSlotMarker_Parms, NULL );

	pFnGetSlotMarker->FunctionFlags |= 0x400;

	return GetSlotMarker_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotViewPoint
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned char                  Type                           ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Action                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action )
{
	static UFunction* pFnGetSlotViewPoint = NULL;

	if ( ! pFnGetSlotViewPoint )
		pFnGetSlotViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 15018 ];

	ACoverLink_execGetSlotViewPoint_Parms GetSlotViewPoint_Parms;
	GetSlotViewPoint_Parms.SlotIdx = SlotIdx;
	GetSlotViewPoint_Parms.Type = Type;
	GetSlotViewPoint_Parms.Action = Action;

	pFnGetSlotViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotViewPoint, &GetSlotViewPoint_Parms, NULL );

	pFnGetSlotViewPoint->FunctionFlags |= 0x400;

	return GetSlotViewPoint_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotRotation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FRotator ACoverLink::GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 15014 ];

	ACoverLink_execGetSlotRotation_Parms GetSlotRotation_Parms;
	GetSlotRotation_Parms.SlotIdx = SlotIdx;
	GetSlotRotation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotLocation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 15010 ];

	ACoverLink_execGetSlotLocation_Parms GetSlotLocation_Parms;
	GetSlotLocation_Parms.SlotIdx = SlotIdx;
	GetSlotLocation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString ACoverSlotMarker::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 15311 ];

	ACoverSlotMarker_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.IsValidClaim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverSlotMarker::IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = (UFunction*) UObject::GObjObjects()->Data[ 15306 ];

	ACoverSlotMarker_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.SetSlotEnabled
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverSlotMarker::SetSlotEnabled ( unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15304 ];

	ACoverSlotMarker_execSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.bEnable = bEnable;

	pFnSetSlotEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );

	pFnSetSlotEnabled->FunctionFlags |= 0x400;
};

// Function Engine.CoverSlotMarker.GetSlotRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ACoverSlotMarker::GetSlotRotation ( )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 15302 ];

	ACoverSlotMarker_execGetSlotRotation_Parms GetSlotRotation_Parms;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetSlotLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ACoverSlotMarker::GetSlotLocation ( )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 15300 ];

	ACoverSlotMarker_execGetSlotLocation_Parms GetSlotLocation_Parms;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ACoverSlotMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 15299 ];

	ACoverSlotMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.CrowdReplicationActor.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACrowdReplicationActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 15376 ];

	ACrowdReplicationActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.CrowdReplicationActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ACrowdReplicationActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 15374 ];

	ACrowdReplicationActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.GameViewportClient.RemoveLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            ExistingPlayer                 ( CPF_Parm )

void UGameViewportClient::RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer )
{
	static UFunction* pFnRemoveLocalPlayer = NULL;

	if ( ! pFnRemoveLocalPlayer )
		pFnRemoveLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 17592 ];

	UGameViewportClient_execRemoveLocalPlayer_Parms RemoveLocalPlayer_Parms;
	RemoveLocalPlayer_Parms.ExistingPlayer = ExistingPlayer;

	this->ProcessEvent ( pFnRemoveLocalPlayer, &RemoveLocalPlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.AddLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            NewPlayer                      ( CPF_Parm )

void UGameViewportClient::AddLocalPlayer ( class ULocalPlayer* NewPlayer )
{
	static UFunction* pFnAddLocalPlayer = NULL;

	if ( ! pFnAddLocalPlayer )
		pFnAddLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 17589 ];

	UGameViewportClient_execAddLocalPlayer_Parms AddLocalPlayer_Parms;
	AddLocalPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnAddLocalPlayer, &AddLocalPlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerRemoved
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameViewportClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 17585 ];

	UGameViewportClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerAdded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameViewportClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 17581 ];

	UGameViewportClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransitionMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )

void UGameViewportClient::DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message )
{
	static UFunction* pFnDrawTransitionMessage = NULL;

	if ( ! pFnDrawTransitionMessage )
		pFnDrawTransitionMessage = (UFunction*) UObject::GObjObjects()->Data[ 17576 ];

	UGameViewportClient_execDrawTransitionMessage_Parms DrawTransitionMessage_Parms;
	DrawTransitionMessage_Parms.Canvas = Canvas;
	memcpy ( &DrawTransitionMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnDrawTransitionMessage, &DrawTransitionMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransition
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTransition ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTransition = NULL;

	if ( ! pFnDrawTransition )
		pFnDrawTransition = (UFunction*) UObject::GObjObjects()->Data[ 17574 ];

	UGameViewportClient_execDrawTransition_Parms DrawTransition_Parms;
	DrawTransition_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTransition, &DrawTransition_Parms, NULL );
};

// Function Engine.GameViewportClient.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 17572 ];

	UGameViewportClient_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTitleSafeArea
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTitleSafeArea ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTitleSafeArea = NULL;

	if ( ! pFnDrawTitleSafeArea )
		pFnDrawTitleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 17570 ];

	UGameViewportClient_execDrawTitleSafeArea_Parms DrawTitleSafeArea_Parms;
	DrawTitleSafeArea_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTitleSafeArea, &DrawTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGameViewportClient::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 17568 ];

	UGameViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.GameViewportClient.CalculatePixelCenter
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )
// float                          out_CenterX                    ( CPF_Parm | CPF_OutParm )
// float                          out_CenterY                    ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY )
{
	static UFunction* pFnCalculatePixelCenter = NULL;

	if ( ! pFnCalculatePixelCenter )
		pFnCalculatePixelCenter = (UFunction*) UObject::GObjObjects()->Data[ 17559 ];

	UGameViewportClient_execCalculatePixelCenter_Parms CalculatePixelCenter_Parms;
	CalculatePixelCenter_Parms.LPlayer = LPlayer;
	CalculatePixelCenter_Parms.Canvas = Canvas;
	CalculatePixelCenter_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculatePixelCenter, &CalculatePixelCenter_Parms, NULL );

	if ( out_CenterX )
		*out_CenterX = CalculatePixelCenter_Parms.out_CenterX;

	if ( out_CenterY )
		*out_CenterY = CalculatePixelCenter_Parms.out_CenterY;
};

// Function Engine.GameViewportClient.CalculateDeadZone
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// unsigned char                  SZType                         ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )

float UGameViewportClient::CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent )
{
	static UFunction* pFnCalculateDeadZone = NULL;

	if ( ! pFnCalculateDeadZone )
		pFnCalculateDeadZone = (UFunction*) UObject::GObjObjects()->Data[ 17549 ];

	UGameViewportClient_execCalculateDeadZone_Parms CalculateDeadZone_Parms;
	CalculateDeadZone_Parms.LPlayer = LPlayer;
	CalculateDeadZone_Parms.SZType = SZType;
	CalculateDeadZone_Parms.Canvas = Canvas;
	CalculateDeadZone_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateDeadZone, &CalculateDeadZone_Parms, NULL );

	return CalculateDeadZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateSafeZoneValues
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_Parm )
// float                          out_Horizontal                 ( CPF_Parm | CPF_OutParm )
// float                          out_Vertical                   ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical )
{
	static UFunction* pFnCalculateSafeZoneValues = NULL;

	if ( ! pFnCalculateSafeZoneValues )
		pFnCalculateSafeZoneValues = (UFunction*) UObject::GObjObjects()->Data[ 17539 ];

	UGameViewportClient_execCalculateSafeZoneValues_Parms CalculateSafeZoneValues_Parms;
	CalculateSafeZoneValues_Parms.Canvas = Canvas;
	CalculateSafeZoneValues_Parms.LocalPlayerIndex = LocalPlayerIndex;
	CalculateSafeZoneValues_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateSafeZoneValues, &CalculateSafeZoneValues_Parms, NULL );

	if ( out_Horizontal )
		*out_Horizontal = CalculateSafeZoneValues_Parms.out_Horizontal;

	if ( out_Vertical )
		*out_Vertical = CalculateSafeZoneValues_Parms.out_Vertical;
};

// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// float                          out_Width                      ( CPF_Parm | CPF_OutParm )
// float                          out_Height                     ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height )
{
	static UFunction* pFnGetPixelSizeOfScreen = NULL;

	if ( ! pFnGetPixelSizeOfScreen )
		pFnGetPixelSizeOfScreen = (UFunction*) UObject::GObjObjects()->Data[ 17534 ];

	UGameViewportClient_execGetPixelSizeOfScreen_Parms GetPixelSizeOfScreen_Parms;
	GetPixelSizeOfScreen_Parms.Canvas = Canvas;
	GetPixelSizeOfScreen_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnGetPixelSizeOfScreen, &GetPixelSizeOfScreen_Parms, NULL );

	if ( out_Width )
		*out_Width = GetPixelSizeOfScreen_Parms.out_Width;

	if ( out_Height )
		*out_Height = GetPixelSizeOfScreen_Parms.out_Height;
};

// Function Engine.GameViewportClient.HasRightSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasRightSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasRightSafeZone = NULL;

	if ( ! pFnHasRightSafeZone )
		pFnHasRightSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 17531 ];

	UGameViewportClient_execHasRightSafeZone_Parms HasRightSafeZone_Parms;
	HasRightSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasRightSafeZone, &HasRightSafeZone_Parms, NULL );

	return HasRightSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasLeftSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasLeftSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasLeftSafeZone = NULL;

	if ( ! pFnHasLeftSafeZone )
		pFnHasLeftSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 17528 ];

	UGameViewportClient_execHasLeftSafeZone_Parms HasLeftSafeZone_Parms;
	HasLeftSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasLeftSafeZone, &HasLeftSafeZone_Parms, NULL );

	return HasLeftSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasBottomSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasBottomSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasBottomSafeZone = NULL;

	if ( ! pFnHasBottomSafeZone )
		pFnHasBottomSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 17525 ];

	UGameViewportClient_execHasBottomSafeZone_Parms HasBottomSafeZone_Parms;
	HasBottomSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasBottomSafeZone, &HasBottomSafeZone_Parms, NULL );

	return HasBottomSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasTopSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasTopSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasTopSafeZone = NULL;

	if ( ! pFnHasTopSafeZone )
		pFnHasTopSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 17522 ];

	UGameViewportClient_execHasTopSafeZone_Parms HasTopSafeZone_Parms;
	HasTopSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasTopSafeZone, &HasTopSafeZone_Parms, NULL );

	return HasTopSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer )
{
	static UFunction* pFnConvertLocalPlayerToGamePlayerIndex = NULL;

	if ( ! pFnConvertLocalPlayerToGamePlayerIndex )
		pFnConvertLocalPlayerToGamePlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 17519 ];

	UGameViewportClient_execConvertLocalPlayerToGamePlayerIndex_Parms ConvertLocalPlayerToGamePlayerIndex_Parms;
	ConvertLocalPlayerToGamePlayerIndex_Parms.LPlayer = LPlayer;

	this->ProcessEvent ( pFnConvertLocalPlayerToGamePlayerIndex, &ConvertLocalPlayerToGamePlayerIndex_Parms, NULL );

	return ConvertLocalPlayerToGamePlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetSubtitleRegion
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FVector2D               MinPos                         ( CPF_Parm | CPF_OutParm )
// struct FVector2D               MaxPos                         ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos )
{
	static UFunction* pFnGetSubtitleRegion = NULL;

	if ( ! pFnGetSubtitleRegion )
		pFnGetSubtitleRegion = (UFunction*) UObject::GObjObjects()->Data[ 17516 ];

	UGameViewportClient_eventGetSubtitleRegion_Parms GetSubtitleRegion_Parms;

	this->ProcessEvent ( pFnGetSubtitleRegion, &GetSubtitleRegion_Parms, NULL );

	if ( MinPos )
		memcpy ( MinPos, &GetSubtitleRegion_Parms.MinPos, 0x8 );

	if ( MaxPos )
		memcpy ( MaxPos, &GetSubtitleRegion_Parms.MaxPos, 0x8 );
};

// Function Engine.GameViewportClient.LayoutPlayers
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventLayoutPlayers ( )
{
	static UFunction* pFnLayoutPlayers = NULL;

	if ( ! pFnLayoutPlayers )
		pFnLayoutPlayers = (UFunction*) UObject::GObjObjects()->Data[ 17513 ];

	UGameViewportClient_eventLayoutPlayers_Parms LayoutPlayers_Parms;

	this->ProcessEvent ( pFnLayoutPlayers, &LayoutPlayers_Parms, NULL );
};

// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// [0x00020002] 
// Parameters infos:

void UGameViewportClient::UpdateActiveSplitscreenType ( )
{
	static UFunction* pFnUpdateActiveSplitscreenType = NULL;

	if ( ! pFnUpdateActiveSplitscreenType )
		pFnUpdateActiveSplitscreenType = (UFunction*) UObject::GObjObjects()->Data[ 17512 ];

	UGameViewportClient_execUpdateActiveSplitscreenType_Parms UpdateActiveSplitscreenType_Parms;

	this->ProcessEvent ( pFnUpdateActiveSplitscreenType, &UpdateActiveSplitscreenType_Parms, NULL );
};

// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameViewportClient::GetSplitscreenConfiguration ( )
{
	static UFunction* pFnGetSplitscreenConfiguration = NULL;

	if ( ! pFnGetSplitscreenConfiguration )
		pFnGetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 17510 ];

	UGameViewportClient_execGetSplitscreenConfiguration_Parms GetSplitscreenConfiguration_Parms;

	this->ProcessEvent ( pFnGetSplitscreenConfiguration, &GetSplitscreenConfiguration_Parms, NULL );

	return GetSplitscreenConfiguration_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  SplitType                      ( CPF_Parm )

void UGameViewportClient::SetSplitscreenConfiguration ( unsigned char SplitType )
{
	static UFunction* pFnSetSplitscreenConfiguration = NULL;

	if ( ! pFnSetSplitscreenConfiguration )
		pFnSetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 17508 ];

	UGameViewportClient_execSetSplitscreenConfiguration_Parms SetSplitscreenConfiguration_Parms;
	SetSplitscreenConfiguration_Parms.SplitType = SplitType;

	this->ProcessEvent ( pFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Parms, NULL );
};

// Function Engine.GameViewportClient.GameSessionEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventGameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17506 ];

	UGameViewportClient_eventGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.GameViewportClient.InsertInteraction
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UInteraction*            NewInteraction                 ( CPF_Parm )
// int                            InIndex                        ( CPF_OptionalParm | CPF_Parm )

int UGameViewportClient::eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex )
{
	static UFunction* pFnInsertInteraction = NULL;

	if ( ! pFnInsertInteraction )
		pFnInsertInteraction = (UFunction*) UObject::GObjObjects()->Data[ 17501 ];

	UGameViewportClient_eventInsertInteraction_Parms InsertInteraction_Parms;
	InsertInteraction_Parms.NewInteraction = NewInteraction;
	InsertInteraction_Parms.InIndex = InIndex;

	this->ProcessEvent ( pFnInsertInteraction, &InsertInteraction_Parms, NULL );

	return InsertInteraction_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreateInitialPlayer
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

bool UGameViewportClient::CreateInitialPlayer ( struct FString* OutError )
{
	static UFunction* pFnCreateInitialPlayer = NULL;

	if ( ! pFnCreateInitialPlayer )
		pFnCreateInitialPlayer = (UFunction*) UObject::GObjObjects()->Data[ 17495 ];

	UGameViewportClient_execCreateInitialPlayer_Parms CreateInitialPlayer_Parms;

	this->ProcessEvent ( pFnCreateInitialPlayer, &CreateInitialPlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreateInitialPlayer_Parms.OutError, 0xC );

	return CreateInitialPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

bool UGameViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 17491 ];

	UGameViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetConsoleTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UGameViewportClient::SetConsoleTarget ( int PlayerIndex )
{
	static UFunction* pFnSetConsoleTarget = NULL;

	if ( ! pFnSetConsoleTarget )
		pFnSetConsoleTarget = (UFunction*) UObject::GObjObjects()->Data[ 17489 ];

	UGameViewportClient_execSetConsoleTarget_Parms SetConsoleTarget_Parms;
	SetConsoleTarget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSetConsoleTarget, &SetConsoleTarget_Parms, NULL );
};

// Function Engine.GameViewportClient.ShowTitleSafeArea
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::ShowTitleSafeArea ( )
{
	static UFunction* pFnShowTitleSafeArea = NULL;

	if ( ! pFnShowTitleSafeArea )
		pFnShowTitleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 17488 ];

	UGameViewportClient_execShowTitleSafeArea_Parms ShowTitleSafeArea_Parms;

	this->ProcessEvent ( pFnShowTitleSafeArea, &ShowTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.SetSplit
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Mode                           ( CPF_Parm )

void UGameViewportClient::SetSplit ( int Mode )
{
	static UFunction* pFnSetSplit = NULL;

	if ( ! pFnSetSplit )
		pFnSetSplit = (UFunction*) UObject::GObjObjects()->Data[ 17486 ];

	UGameViewportClient_execSetSplit_Parms SetSplit_Parms;
	SetSplit_Parms.Mode = Mode;

	this->ProcessEvent ( pFnSetSplit, &SetSplit_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugRemovePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugRemovePlayer ( int ControllerId )
{
	static UFunction* pFnDebugRemovePlayer = NULL;

	if ( ! pFnDebugRemovePlayer )
		pFnDebugRemovePlayer = (UFunction*) UObject::GObjObjects()->Data[ 17483 ];

	UGameViewportClient_execDebugRemovePlayer_Parms DebugRemovePlayer_Parms;
	DebugRemovePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugRemovePlayer, &DebugRemovePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.SSSwapControllers
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::SSSwapControllers ( )
{
	static UFunction* pFnSSSwapControllers = NULL;

	if ( ! pFnSSSwapControllers )
		pFnSSSwapControllers = (UFunction*) UObject::GObjObjects()->Data[ 17480 ];

	UGameViewportClient_execSSSwapControllers_Parms SSSwapControllers_Parms;

	this->ProcessEvent ( pFnSSSwapControllers, &SSSwapControllers_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugCreatePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugCreatePlayer ( int ControllerId )
{
	static UFunction* pFnDebugCreatePlayer = NULL;

	if ( ! pFnDebugCreatePlayer )
		pFnDebugCreatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 17477 ];

	UGameViewportClient_execDebugCreatePlayer_Parms DebugCreatePlayer_Parms;
	DebugCreatePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugCreatePlayer, &DebugCreatePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.FindPlayerByControllerId
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class ULocalPlayer* UGameViewportClient::eventFindPlayerByControllerId ( int ControllerId )
{
	static UFunction* pFnFindPlayerByControllerId = NULL;

	if ( ! pFnFindPlayerByControllerId )
		pFnFindPlayerByControllerId = (UFunction*) UObject::GObjObjects()->Data[ 17473 ];

	UGameViewportClient_eventFindPlayerByControllerId_Parms FindPlayerByControllerId_Parms;
	FindPlayerByControllerId_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnFindPlayerByControllerId, &FindPlayerByControllerId_Parms, NULL );

	return FindPlayerByControllerId_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RemovePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExPlayer                       ( CPF_Parm )

bool UGameViewportClient::eventRemovePlayer ( class ULocalPlayer* ExPlayer )
{
	static UFunction* pFnRemovePlayer = NULL;

	if ( ! pFnRemovePlayer )
		pFnRemovePlayer = (UFunction*) UObject::GObjObjects()->Data[ 17470 ];

	UGameViewportClient_eventRemovePlayer_Parms RemovePlayer_Parms;
	RemovePlayer_Parms.ExPlayer = ExPlayer;

	this->ProcessEvent ( pFnRemovePlayer, &RemovePlayer_Parms, NULL );

	return RemovePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreatePlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bSpawnActor                    ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

class ULocalPlayer* UGameViewportClient::eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError )
{
	static UFunction* pFnCreatePlayer = NULL;

	if ( ! pFnCreatePlayer )
		pFnCreatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 17464 ];

	UGameViewportClient_eventCreatePlayer_Parms CreatePlayer_Parms;
	CreatePlayer_Parms.ControllerId = ControllerId;
	CreatePlayer_Parms.bSpawnActor = bSpawnActor;

	this->ProcessEvent ( pFnCreatePlayer, &CreatePlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreatePlayer_Parms.OutError, 0xC );

	return CreatePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.IsFullScreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::IsFullScreenViewport ( )
{
	static UFunction* pFnIsFullScreenViewport = NULL;

	if ( ! pFnIsFullScreenViewport )
		pFnIsFullScreenViewport = (UFunction*) UObject::GObjObjects()->Data[ 17462 ];

	UGameViewportClient_execIsFullScreenViewport_Parms IsFullScreenViewport_Parms;

	pFnIsFullScreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreenViewport, &IsFullScreenViewport_Parms, NULL );

	pFnIsFullScreenViewport->FunctionFlags |= 0x400;

	return IsFullScreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = (UFunction*) UObject::GObjObjects()->Data[ 17460 ];

	UGameViewportClient_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );
};

// Function Engine.GameViewportClient.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Command                        ( CPF_Parm )

struct FString UGameViewportClient::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 13826 ];

	UGameViewportClient_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm )

bool UGameViewportClient::HandleInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnHandleInputChar = NULL;

	if ( ! pFnHandleInputChar )
		pFnHandleInputChar = (UFunction*) UObject::GObjObjects()->Data[ 17455 ];

	UGameViewportClient_execHandleInputChar_Parms HandleInputChar_Parms;
	HandleInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnHandleInputChar, &HandleInputChar_Parms, NULL );

	return HandleInputChar_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_Parm )

bool UGameViewportClient::HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputAxis = NULL;

	if ( ! pFnHandleInputAxis )
		pFnHandleInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 17448 ];

	UGameViewportClient_execHandleInputAxis_Parms HandleInputAxis_Parms;
	HandleInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputAxis_Parms.Key, &Key, 0x8 );
	HandleInputAxis_Parms.Delta = Delta;
	HandleInputAxis_Parms.DeltaTime = DeltaTime;
	HandleInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputAxis, &HandleInputAxis_Parms, NULL );

	return HandleInputAxis_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UGameViewportClient::HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputKey = NULL;

	if ( ! pFnHandleInputKey )
		pFnHandleInputKey = (UFunction*) UObject::GObjObjects()->Data[ 17441 ];

	UGameViewportClient_execHandleInputKey_Parms HandleInputKey_Parms;
	HandleInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputKey_Parms.Key, &Key, 0x8 );
	HandleInputKey_Parms.EventType = EventType;
	HandleInputKey_Parms.AmountDepressed = AmountDepressed;
	HandleInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputKey, &HandleInputKey_Parms, NULL );

	return HandleInputKey_Parms.ReturnValue;
};

// Function Engine.CustomViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

bool UCustomViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 17605 ];

	UCustomViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Engine.CylinderComponent.SetCylinderSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UCylinderComponent::SetCylinderSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCylinderSize = NULL;

	if ( ! pFnSetCylinderSize )
		pFnSetCylinderSize = (UFunction*) UObject::GObjObjects()->Data[ 7110 ];

	UCylinderComponent_execSetCylinderSize_Parms SetCylinderSize_Parms;
	SetCylinderSize_Parms.NewRadius = NewRadius;
	SetCylinderSize_Parms.NewHeight = NewHeight;

	pFnSetCylinderSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCylinderSize, &SetCylinderSize_Parms, NULL );

	pFnSetCylinderSize->FunctionFlags |= 0x400;
};

// Function Engine.DamageType.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UDamageType::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = (UFunction*) UObject::GObjObjects()->Data[ 17640 ];

	UDamageType_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function Engine.DamageType.SuicideMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::SuicideMessage ( class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnSuicideMessage = NULL;

	if ( ! pFnSuicideMessage )
		pFnSuicideMessage = (UFunction*) UObject::GObjObjects()->Data[ 17637 ];

	UDamageType_execSuicideMessage_Parms SuicideMessage_Parms;
	SuicideMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnSuicideMessage, &SuicideMessage_Parms, NULL );

	return SuicideMessage_Parms.ReturnValue;
};

// Function Engine.DamageType.DeathMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Killer                         ( CPF_Parm )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnDeathMessage = NULL;

	if ( ! pFnDeathMessage )
		pFnDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 17633 ];

	UDamageType_execDeathMessage_Parms DeathMessage_Parms;
	DeathMessage_Parms.Killer = Killer;
	DeathMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnDeathMessage, &DeathMessage_Parms, NULL );

	return DeathMessage_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.OnSetDamageInstigator
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetDamageInstigator* Action                         ( CPF_Parm )

void APhysicsVolume::OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action )
{
	static UFunction* pFnOnSetDamageInstigator = NULL;

	if ( ! pFnOnSetDamageInstigator )
		pFnOnSetDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 18291 ];

	APhysicsVolume_execOnSetDamageInstigator_Parms OnSetDamageInstigator_Parms;
	OnSetDamageInstigator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDamageInstigator, &OnSetDamageInstigator_Parms, NULL );
};

// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void APhysicsVolume::NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC )
{
	static UFunction* pFnNotifyPawnBecameViewTarget = NULL;

	if ( ! pFnNotifyPawnBecameViewTarget )
		pFnNotifyPawnBecameViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 18288 ];

	APhysicsVolume_execNotifyPawnBecameViewTarget_Parms NotifyPawnBecameViewTarget_Parms;
	NotifyPawnBecameViewTarget_Parms.P = P;
	NotifyPawnBecameViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnNotifyPawnBecameViewTarget, &NotifyPawnBecameViewTarget_Parms, NULL );
};

// Function Engine.PhysicsVolume.ModifyPlayer
// [0x00020000] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void APhysicsVolume::ModifyPlayer ( class APawn* PlayerPawn )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 18286 ];

	APhysicsVolume_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.PhysicsVolume.CausePainTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::CausePainTo ( class AActor* Other )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = (UFunction*) UObject::GObjObjects()->Data[ 18284 ];

	APhysicsVolume_execCausePainTo_Parms CausePainTo_Parms;
	CausePainTo_Parms.Other = Other;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function Engine.PhysicsVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void APhysicsVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 18279 ];

	APhysicsVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.PhysicsVolume.TimerPop
// [0x00020002] 
// Parameters infos:
// class AVolumeTimer*            T                              ( CPF_Parm )

void APhysicsVolume::TimerPop ( class AVolumeTimer* T )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = (UFunction*) UObject::GObjObjects()->Data[ 18276 ];

	APhysicsVolume_execTimerPop_Parms TimerPop_Parms;
	TimerPop_Parms.T = T;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function Engine.PhysicsVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void APhysicsVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18274 ];

	APhysicsVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnLeavingVolume ( class APawn* Other )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18272 ];

	APhysicsVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnEnteredVolume ( class APawn* Other )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18270 ];

	APhysicsVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorLeavingVolume ( class AActor* Other )
{
	static UFunction* pFnActorLeavingVolume = NULL;

	if ( ! pFnActorLeavingVolume )
		pFnActorLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18268 ];

	APhysicsVolume_eventActorLeavingVolume_Parms ActorLeavingVolume_Parms;
	ActorLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorLeavingVolume, &ActorLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorEnteredVolume ( class AActor* Other )
{
	static UFunction* pFnActorEnteredVolume = NULL;

	if ( ! pFnActorEnteredVolume )
		pFnActorEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18266 ];

	APhysicsVolume_eventActorEnteredVolume_Parms ActorEnteredVolume_Parms;
	ActorEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorEnteredVolume, &ActorEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PhysicsChangedFor
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 18264 ];

	APhysicsVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.PhysicsVolume.Reset
// [0x00020002] 
// Parameters infos:

void APhysicsVolume::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18263 ];

	APhysicsVolume_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18262 ];

	APhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicsVolume.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APhysicsVolume::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 18260 ];

	APhysicsVolume_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.DefaultPhysicsVolume.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADefaultPhysicsVolume::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18298 ];

	ADefaultPhysicsVolume_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Light.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALight::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18321 ];

	ALight_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Light.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ALight::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18319 ];

	ALight_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.LightComponent.UpdateColorAndBrightness
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateColorAndBrightness ( )
{
	static UFunction* pFnUpdateColorAndBrightness = NULL;

	if ( ! pFnUpdateColorAndBrightness )
		pFnUpdateColorAndBrightness = (UFunction*) UObject::GObjObjects()->Data[ 16633 ];

	ULightComponent_execUpdateColorAndBrightness_Parms UpdateColorAndBrightness_Parms;

	pFnUpdateColorAndBrightness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateColorAndBrightness, &UpdateColorAndBrightness_Parms, NULL );

	pFnUpdateColorAndBrightness->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 16631 ];

	ULightComponent_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.LightComponent.GetOrigin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetOrigin ( )
{
	static UFunction* pFnGetOrigin = NULL;

	if ( ! pFnGetOrigin )
		pFnGetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 16629 ];

	ULightComponent_execGetOrigin_Parms GetOrigin_Parms;

	pFnGetOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrigin, &GetOrigin_Parms, NULL );

	pFnGetOrigin->FunctionFlags |= 0x400;

	return GetOrigin_Parms.ReturnValue;
};

// Function Engine.LightComponent.SetLightProperties
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewBrightness                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  NewLightColor                  ( CPF_OptionalParm | CPF_Parm )
// class ULightFunction*          NewLightFunction               ( CPF_OptionalParm | CPF_Parm )

void ULightComponent::SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction )
{
	static UFunction* pFnSetLightProperties = NULL;

	if ( ! pFnSetLightProperties )
		pFnSetLightProperties = (UFunction*) UObject::GObjObjects()->Data[ 16625 ];

	ULightComponent_execSetLightProperties_Parms SetLightProperties_Parms;
	SetLightProperties_Parms.NewBrightness = NewBrightness;
	memcpy ( &SetLightProperties_Parms.NewLightColor, &NewLightColor, 0x4 );
	SetLightProperties_Parms.NewLightFunction = NewLightFunction;

	pFnSetLightProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightProperties, &SetLightProperties_Parms, NULL );

	pFnSetLightProperties->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void ULightComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 16623 ];

	ULightComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 16638 ];

	UDirectionalLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 16637 ];

	UDirectionalLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.DoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 18392 ];

	ADoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.DoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 18389 ];

	ADoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ADoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 18385 ];

	ADoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.DoorMarker.MoverClosed
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverClosed ( )
{
	static UFunction* pFnMoverClosed = NULL;

	if ( ! pFnMoverClosed )
		pFnMoverClosed = (UFunction*) UObject::GObjObjects()->Data[ 18384 ];

	ADoorMarker_execMoverClosed_Parms MoverClosed_Parms;

	this->ProcessEvent ( pFnMoverClosed, &MoverClosed_Parms, NULL );
};

// Function Engine.DoorMarker.MoverOpened
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverOpened ( )
{
	static UFunction* pFnMoverOpened = NULL;

	if ( ! pFnMoverOpened )
		pFnMoverOpened = (UFunction*) UObject::GObjObjects()->Data[ 18383 ];

	ADoorMarker_execMoverOpened_Parms MoverOpened_Parms;

	this->ProcessEvent ( pFnMoverOpened, &MoverOpened_Parms, NULL );
};

// Function Engine.DoorMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADoorMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18382 ];

	ADoorMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DroppedPickup.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void ADroppedPickup::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 18452 ];

	ADroppedPickup_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.DroppedPickup.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 18450 ];

	ADroppedPickup_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.DroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 18448 ];

	ADroppedPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.DroppedPickup.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ADroppedPickup::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 18445 ];

	ADroppedPickup_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.DroppedPickup.DetourWeight
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ADroppedPickup::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 18441 ];

	ADroppedPickup_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.DroppedPickup.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADroppedPickup::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 18439 ];

	ADroppedPickup_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupParticles
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystemComponent* PickupParticles                ( CPF_Parm )

void ADroppedPickup::eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles )
{
	static UFunction* pFnSetPickupParticles = NULL;

	if ( ! pFnSetPickupParticles )
		pFnSetPickupParticles = (UFunction*) UObject::GObjObjects()->Data[ 18436 ];

	ADroppedPickup_eventSetPickupParticles_Parms SetPickupParticles_Parms;
	SetPickupParticles_Parms.PickupParticles = PickupParticles;

	this->ProcessEvent ( pFnSetPickupParticles, &SetPickupParticles_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     PickupMesh                     ( CPF_Parm )

void ADroppedPickup::eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 18433 ];

	ADroppedPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.PickupMesh = PickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.DroppedPickup.Reset
// [0x00020002] 
// Parameters infos:

void ADroppedPickup::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18432 ];

	ADroppedPickup_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.DroppedPickup.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADroppedPickup::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18430 ];

	ADroppedPickup_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DroppedPickup.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADroppedPickup::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18429 ];

	ADroppedPickup_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.DroppedPickup.RemoveFromNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::RemoveFromNavigation ( )
{
	static UFunction* pFnRemoveFromNavigation = NULL;

	if ( ! pFnRemoveFromNavigation )
		pFnRemoveFromNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18428 ];

	ADroppedPickup_execRemoveFromNavigation_Parms RemoveFromNavigation_Parms;

	pFnRemoveFromNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFromNavigation, &RemoveFromNavigation_Parms, NULL );

	pFnRemoveFromNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DroppedPickup.AddToNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::AddToNavigation ( )
{
	static UFunction* pFnAddToNavigation = NULL;

	if ( ! pFnAddToNavigation )
		pFnAddToNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18427 ];

	ADroppedPickup_execAddToNavigation_Parms AddToNavigation_Parms;

	pFnAddToNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToNavigation, &AddToNavigation_Parms, NULL );

	pFnAddToNavigation->FunctionFlags |= 0x400;
};

// Function Engine.LightEnvironmentComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewEnabled                    ( CPF_Parm )

void ULightEnvironmentComponent::SetEnabled ( unsigned long bNewEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 8707 ];

	ULightEnvironmentComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bNewEnabled = bNewEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic ( )
{
	static UFunction* pFnSetLightEnvironmentToNotBeDynamic = NULL;

	if ( ! pFnSetLightEnvironmentToNotBeDynamic )
		pFnSetLightEnvironmentToNotBeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 18520 ];

	ADynamicSMActor_execSetLightEnvironmentToNotBeDynamic_Parms SetLightEnvironmentToNotBeDynamic_Parms;

	this->ProcessEvent ( pFnSetLightEnvironmentToNotBeDynamic, &SetLightEnvironmentToNotBeDynamic_Parms, NULL );
};

// Function Engine.DynamicSMActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 18514 ];

	ADynamicSMActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.DynamicSMActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 18511 ];

	ADynamicSMActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.DynamicSMActor.CanBasePawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ADynamicSMActor::CanBasePawn ( class APawn* P )
{
	static UFunction* pFnCanBasePawn = NULL;

	if ( ! pFnCanBasePawn )
		pFnCanBasePawn = (UFunction*) UObject::GObjObjects()->Data[ 18508 ];

	ADynamicSMActor_execCanBasePawn_Parms CanBasePawn_Parms;
	CanBasePawn_Parms.P = P;

	this->ProcessEvent ( pFnCanBasePawn, &CanBasePawn_Parms, NULL );

	return CanBasePawn_Parms.ReturnValue;
};

// Function Engine.DynamicSMActor.SetStaticMesh
// [0x00024002] 
// Parameters infos:
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// struct FVector                 NewTranslation                 ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 NewScale3D                     ( CPF_OptionalParm | CPF_Parm )

void ADynamicSMActor::SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 18503 ];

	ADynamicSMActor_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	memcpy ( &SetStaticMesh_Parms.NewTranslation, &NewTranslation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewRotation, &NewRotation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewScale3D, &NewScale3D, 0xC );

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18501 ];

	ADynamicSMActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetStaticMesh
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetStaticMesh*   Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetStaticMesh ( class USeqAct_SetStaticMesh* Action )
{
	static UFunction* pFnOnSetStaticMesh = NULL;

	if ( ! pFnOnSetStaticMesh )
		pFnOnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 18499 ];

	ADynamicSMActor_execOnSetStaticMesh_Parms OnSetStaticMesh_Parms;
	OnSetStaticMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetStaticMesh, &OnSetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADynamicSMActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18497 ];

	ADynamicSMActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DynamicSMActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicSMActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18496 ];

	ADynamicSMActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnSpawnEmitterCustomLifetime = NULL;

	if ( ! pFnSpawnEmitterCustomLifetime )
		pFnSpawnEmitterCustomLifetime = (UFunction*) UObject::GObjObjects()->Data[ 18952 ];

	AEmitterPool_execSpawnEmitterCustomLifetime_Parms SpawnEmitterCustomLifetime_Parms;
	SpawnEmitterCustomLifetime_Parms.EmitterTemplate = EmitterTemplate;

	this->ProcessEvent ( pFnSpawnEmitterCustomLifetime, &SpawnEmitterCustomLifetime_Parms, NULL );

	return SpawnEmitterCustomLifetime_Parms.ReturnValue;
};

// Function Engine.EmitterPool.EOnParticleSystemFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystemComponent* PSC                            ( CPF_Parm )

bool AEmitterPool::eventEOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnEOnParticleSystemFinished = NULL;

	if ( ! pFnEOnParticleSystemFinished )
		pFnEOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 18949 ];

	AEmitterPool_eventEOnParticleSystemFinished_Parms EOnParticleSystemFinished_Parms;
	EOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnEOnParticleSystemFinished, &EOnParticleSystemFinished_Parms, NULL );

	return EOnParticleSystemFinished_Parms.ReturnValue;
};

// Function Engine.EmitterPool.ESpawnEmitter
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )

bool AEmitterPool::eventESpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor )
{
	static UFunction* pFnESpawnEmitter = NULL;

	if ( ! pFnESpawnEmitter )
		pFnESpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 18943 ];

	AEmitterPool_eventESpawnEmitter_Parms ESpawnEmitter_Parms;
	ESpawnEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &ESpawnEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &ESpawnEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	ESpawnEmitter_Parms.AttachToActor = AttachToActor;

	this->ProcessEvent ( pFnESpawnEmitter, &ESpawnEmitter_Parms, NULL );

	return ESpawnEmitter_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitter
// [0x00024002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor )
{
	static UFunction* pFnSpawnEmitter = NULL;

	if ( ! pFnSpawnEmitter )
		pFnSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 18935 ];

	AEmitterPool_execSpawnEmitter_Parms SpawnEmitter_Parms;
	SpawnEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnEmitter_Parms.AttachToActor = AttachToActor;

	this->ProcessEvent ( pFnSpawnEmitter, &SpawnEmitter_Parms, NULL );

	return SpawnEmitter_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetPooledComponent
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::GetPooledComponent ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnGetPooledComponent = NULL;

	if ( ! pFnGetPooledComponent )
		pFnGetPooledComponent = (UFunction*) UObject::GObjObjects()->Data[ 18932 ];

	AEmitterPool_execGetPooledComponent_Parms GetPooledComponent_Parms;
	GetPooledComponent_Parms.EmitterTemplate = EmitterTemplate;

	pFnGetPooledComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledComponent, &GetPooledComponent_Parms, NULL );

	pFnGetPooledComponent->FunctionFlags |= 0x400;

	return GetPooledComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetFreeMatInstConsts
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeMatInstConsts = NULL;

	if ( ! pFnGetFreeMatInstConsts )
		pFnGetFreeMatInstConsts = (UFunction*) UObject::GObjObjects()->Data[ 18929 ];

	AEmitterPool_execGetFreeMatInstConsts_Parms GetFreeMatInstConsts_Parms;
	GetFreeMatInstConsts_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeMatInstConsts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeMatInstConsts, &GetFreeMatInstConsts_Parms, NULL );

	pFnGetFreeMatInstConsts->FunctionFlags |= 0x400;

	return GetFreeMatInstConsts_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstant
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* MIC                            ( CPF_Parm )

void AEmitterPool::FreeMaterialInstanceConstant ( class UMaterialInstanceConstant* MIC )
{
	static UFunction* pFnFreeMaterialInstanceConstant = NULL;

	if ( ! pFnFreeMaterialInstanceConstant )
		pFnFreeMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 18927 ];

	AEmitterPool_execFreeMaterialInstanceConstant_Parms FreeMaterialInstanceConstant_Parms;
	FreeMaterialInstanceConstant_Parms.MIC = MIC;

	pFnFreeMaterialInstanceConstant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeMaterialInstanceConstant, &FreeMaterialInstanceConstant_Parms, NULL );

	pFnFreeMaterialInstanceConstant->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    SMC                            ( CPF_Parm )

void AEmitterPool::FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC )
{
	static UFunction* pFnFreeMaterialInstanceConstants = NULL;

	if ( ! pFnFreeMaterialInstanceConstants )
		pFnFreeMaterialInstanceConstants = (UFunction*) UObject::GObjObjects()->Data[ 18925 ];

	AEmitterPool_execFreeMaterialInstanceConstants_Parms FreeMaterialInstanceConstants_Parms;
	FreeMaterialInstanceConstants_Parms.SMC = SMC;

	pFnFreeMaterialInstanceConstants->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeMaterialInstanceConstants, &FreeMaterialInstanceConstants_Parms, NULL );

	pFnFreeMaterialInstanceConstants->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreePawnActor
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Loc                            ( CPF_Parm )
// struct FRotator                Rot                            ( CPF_Parm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class AActor* AEmitterPool::GetFreePawnActor ( struct FVector Loc, struct FRotator Rot, unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreePawnActor = NULL;

	if ( ! pFnGetFreePawnActor )
		pFnGetFreePawnActor = (UFunction*) UObject::GObjObjects()->Data[ 18920 ];

	AEmitterPool_execGetFreePawnActor_Parms GetFreePawnActor_Parms;
	memcpy ( &GetFreePawnActor_Parms.Loc, &Loc, 0xC );
	memcpy ( &GetFreePawnActor_Parms.Rot, &Rot, 0xC );
	GetFreePawnActor_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreePawnActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreePawnActor, &GetFreePawnActor_Parms, NULL );

	pFnGetFreePawnActor->FunctionFlags |= 0x400;

	return GetFreePawnActor_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreePawnActor
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  PawnPtr                        ( CPF_Parm )

void AEmitterPool::FreePawnActor ( class AActor* PawnPtr )
{
	static UFunction* pFnFreePawnActor = NULL;

	if ( ! pFnFreePawnActor )
		pFnFreePawnActor = (UFunction*) UObject::GObjObjects()->Data[ 18918 ];

	AEmitterPool_execFreePawnActor_Parms FreePawnActor_Parms;
	FreePawnActor_Parms.PawnPtr = PawnPtr;

	pFnFreePawnActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreePawnActor, &FreePawnActor_Parms, NULL );

	pFnFreePawnActor->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.FreeSKCMaterialInstanceConstants
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SMC                            ( CPF_Parm )

void AEmitterPool::FreeSKCMaterialInstanceConstants ( class USkeletalMeshComponent* SMC )
{
	static UFunction* pFnFreeSKCMaterialInstanceConstants = NULL;

	if ( ! pFnFreeSKCMaterialInstanceConstants )
		pFnFreeSKCMaterialInstanceConstants = (UFunction*) UObject::GObjObjects()->Data[ 18916 ];

	AEmitterPool_execFreeSKCMaterialInstanceConstants_Parms FreeSKCMaterialInstanceConstants_Parms;
	FreeSKCMaterialInstanceConstants_Parms.SMC = SMC;

	pFnFreeSKCMaterialInstanceConstants->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeSKCMaterialInstanceConstants, &FreeSKCMaterialInstanceConstants_Parms, NULL );

	pFnFreeSKCMaterialInstanceConstants->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreeSkeletalMeshComponent
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class USkeletalMeshComponent* AEmitterPool::GetFreeSkeletalMeshComponent ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeSkeletalMeshComponent = NULL;

	if ( ! pFnGetFreeSkeletalMeshComponent )
		pFnGetFreeSkeletalMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 18913 ];

	AEmitterPool_execGetFreeSkeletalMeshComponent_Parms GetFreeSkeletalMeshComponent_Parms;
	GetFreeSkeletalMeshComponent_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeSkeletalMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeSkeletalMeshComponent, &GetFreeSkeletalMeshComponent_Parms, NULL );

	pFnGetFreeSkeletalMeshComponent->FunctionFlags |= 0x400;

	return GetFreeSkeletalMeshComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeSkeletalMeshComponents
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SKC                            ( CPF_Parm )

void AEmitterPool::FreeSkeletalMeshComponents ( class USkeletalMeshComponent* SKC )
{
	static UFunction* pFnFreeSkeletalMeshComponents = NULL;

	if ( ! pFnFreeSkeletalMeshComponents )
		pFnFreeSkeletalMeshComponents = (UFunction*) UObject::GObjObjects()->Data[ 18911 ];

	AEmitterPool_execFreeSkeletalMeshComponents_Parms FreeSkeletalMeshComponents_Parms;
	FreeSkeletalMeshComponents_Parms.SKC = SKC;

	pFnFreeSkeletalMeshComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeSkeletalMeshComponents, &FreeSkeletalMeshComponents_Parms, NULL );

	pFnFreeSkeletalMeshComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeStaticMeshComponent = NULL;

	if ( ! pFnGetFreeStaticMeshComponent )
		pFnGetFreeStaticMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 18908 ];

	AEmitterPool_execGetFreeStaticMeshComponent_Parms GetFreeStaticMeshComponent_Parms;
	GetFreeStaticMeshComponent_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeStaticMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeStaticMeshComponent, &GetFreeStaticMeshComponent_Parms, NULL );

	pFnGetFreeStaticMeshComponent->FunctionFlags |= 0x400;

	return GetFreeStaticMeshComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeStaticMeshComponents
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm )

void AEmitterPool::FreeStaticMeshComponents ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnFreeStaticMeshComponents = NULL;

	if ( ! pFnFreeStaticMeshComponents )
		pFnFreeStaticMeshComponents = (UFunction*) UObject::GObjObjects()->Data[ 18906 ];

	AEmitterPool_execFreeStaticMeshComponents_Parms FreeStaticMeshComponents_Parms;
	FreeStaticMeshComponents_Parms.PSC = PSC;

	pFnFreeStaticMeshComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeStaticMeshComponents, &FreeStaticMeshComponents_Parms, NULL );

	pFnFreeStaticMeshComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ReturnToPool
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm )

void AEmitterPool::ReturnToPool ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnReturnToPool = NULL;

	if ( ! pFnReturnToPool )
		pFnReturnToPool = (UFunction*) UObject::GObjObjects()->Data[ 18904 ];

	AEmitterPool_execReturnToPool_Parms ReturnToPool_Parms;
	ReturnToPool_Parms.PSC = PSC;

	pFnReturnToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnToPool, &ReturnToPool_Parms, NULL );

	pFnReturnToPool->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm )

void AEmitterPool::OnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 18901 ];

	AEmitterPool_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnUnmountFaceFXAnimSet = NULL;

	if ( ! pFnUnmountFaceFXAnimSet )
		pFnUnmountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19287 ];

	UFaceFXAsset_execUnmountFaceFXAnimSet_Parms UnmountFaceFXAnimSet_Parms;
	UnmountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnUnmountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnmountFaceFXAnimSet, &UnmountFaceFXAnimSet_Parms, NULL );

	pFnUnmountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnMountFaceFXAnimSet = NULL;

	if ( ! pFnMountFaceFXAnimSet )
		pFnMountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19285 ];

	UFaceFXAsset_execMountFaceFXAnimSet_Parms MountFaceFXAnimSet_Parms;
	MountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnMountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMountFaceFXAnimSet, &MountFaceFXAnimSet_Parms, NULL );

	pFnMountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFileWriter::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 19372 ];

	AFileWriter_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FileWriter.Logf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 logString                      ( CPF_Parm | CPF_CoerceParm )

void AFileWriter::Logf ( struct FString logString )
{
	static UFunction* pFnLogf = NULL;

	if ( ! pFnLogf )
		pFnLogf = (UFunction*) UObject::GObjObjects()->Data[ 19370 ];

	AFileWriter_execLogf_Parms Logf_Parms;
	memcpy ( &Logf_Parms.logString, &logString, 0xC );

	pFnLogf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogf, &Logf_Parms, NULL );

	pFnLogf->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.CloseFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AFileWriter::CloseFile ( )
{
	static UFunction* pFnCloseFile = NULL;

	if ( ! pFnCloseFile )
		pFnCloseFile = (UFunction*) UObject::GObjObjects()->Data[ 19369 ];

	AFileWriter_execCloseFile_Parms CloseFile_Parms;

	pFnCloseFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseFile, &CloseFile_Parms, NULL );

	pFnCloseFile->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.OpenFile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Parm | CPF_CoerceParm )
// unsigned char                  InFileType                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InExtension                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeTimeStamp              ( CPF_OptionalParm | CPF_Parm )

bool AFileWriter::OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp )
{
	static UFunction* pFnOpenFile = NULL;

	if ( ! pFnOpenFile )
		pFnOpenFile = (UFunction*) UObject::GObjObjects()->Data[ 19362 ];

	AFileWriter_execOpenFile_Parms OpenFile_Parms;
	memcpy ( &OpenFile_Parms.InFilename, &InFilename, 0xC );
	OpenFile_Parms.InFileType = InFileType;
	memcpy ( &OpenFile_Parms.InExtension, &InExtension, 0xC );
	OpenFile_Parms.bUnique = bUnique;
	OpenFile_Parms.bIncludeTimeStamp = bIncludeTimeStamp;

	pFnOpenFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenFile, &OpenFile_Parms, NULL );

	pFnOpenFile->FunctionFlags |= 0x400;

	return OpenFile_Parms.ReturnValue;
};

// Function Engine.FileLog.CloseLog
// [0x00020002] 
// Parameters infos:

void AFileLog::CloseLog ( )
{
	static UFunction* pFnCloseLog = NULL;

	if ( ! pFnCloseLog )
		pFnCloseLog = (UFunction*) UObject::GObjObjects()->Data[ 19377 ];

	AFileLog_execCloseLog_Parms CloseLog_Parms;

	this->ProcessEvent ( pFnCloseLog, &CloseLog_Parms, NULL );
};

// Function Engine.FileLog.OpenLog
// [0x00024002] 
// Parameters infos:
// struct FString                 LogFilename                    ( CPF_Parm | CPF_CoerceParm )
// struct FString                 extension                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )

void AFileLog::OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique )
{
	static UFunction* pFnOpenLog = NULL;

	if ( ! pFnOpenLog )
		pFnOpenLog = (UFunction*) UObject::GObjObjects()->Data[ 19373 ];

	AFileLog_execOpenLog_Parms OpenLog_Parms;
	memcpy ( &OpenLog_Parms.LogFilename, &LogFilename, 0xC );
	memcpy ( &OpenLog_Parms.extension, &extension, 0xC );
	OpenLog_Parms.bUnique = bUnique;

	this->ProcessEvent ( pFnOpenLog, &OpenLog_Parms, NULL );
};

// Function Engine.Font.GetMaxCharHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UFont::GetMaxCharHeight ( )
{
	static UFunction* pFnGetMaxCharHeight = NULL;

	if ( ! pFnGetMaxCharHeight )
		pFnGetMaxCharHeight = (UFunction*) UObject::GObjObjects()->Data[ 11904 ];

	UFont_execGetMaxCharHeight_Parms GetMaxCharHeight_Parms;

	pFnGetMaxCharHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxCharHeight, &GetMaxCharHeight_Parms, NULL );

	pFnGetMaxCharHeight->FunctionFlags |= 0x400;

	return GetMaxCharHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetAuthoredViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ViewportHeight                 ( CPF_Parm )

float UFont::GetAuthoredViewportHeight ( float ViewportHeight )
{
	static UFunction* pFnGetAuthoredViewportHeight = NULL;

	if ( ! pFnGetAuthoredViewportHeight )
		pFnGetAuthoredViewportHeight = (UFunction*) UObject::GObjObjects()->Data[ 11901 ];

	UFont_execGetAuthoredViewportHeight_Parms GetAuthoredViewportHeight_Parms;
	GetAuthoredViewportHeight_Parms.ViewportHeight = ViewportHeight;

	pFnGetAuthoredViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAuthoredViewportHeight, &GetAuthoredViewportHeight_Parms, NULL );

	pFnGetAuthoredViewportHeight->FunctionFlags |= 0x400;

	return GetAuthoredViewportHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetScalingFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

float UFont::GetScalingFactor ( float HeightTest )
{
	static UFunction* pFnGetScalingFactor = NULL;

	if ( ! pFnGetScalingFactor )
		pFnGetScalingFactor = (UFunction*) UObject::GObjObjects()->Data[ 11898 ];

	UFont_execGetScalingFactor_Parms GetScalingFactor_Parms;
	GetScalingFactor_Parms.HeightTest = HeightTest;

	pFnGetScalingFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalingFactor, &GetScalingFactor_Parms, NULL );

	pFnGetScalingFactor->FunctionFlags |= 0x400;

	return GetScalingFactor_Parms.ReturnValue;
};

// Function Engine.Font.GetResolutionPageIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UFont::GetResolutionPageIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionPageIndex = NULL;

	if ( ! pFnGetResolutionPageIndex )
		pFnGetResolutionPageIndex = (UFunction*) UObject::GObjObjects()->Data[ 11895 ];

	UFont_execGetResolutionPageIndex_Parms GetResolutionPageIndex_Parms;
	GetResolutionPageIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionPageIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionPageIndex, &GetResolutionPageIndex_Parms, NULL );

	pFnGetResolutionPageIndex->FunctionFlags |= 0x400;

	return GetResolutionPageIndex_Parms.ReturnValue;
};

// Function Engine.ForceFeedbackManager.PauseForceFeedback
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::eventPauseForceFeedback ( unsigned long bPause )
{
	static UFunction* pFnPauseForceFeedback = NULL;

	if ( ! pFnPauseForceFeedback )
		pFnPauseForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 19631 ];

	UForceFeedbackManager_eventPauseForceFeedback_Parms PauseForceFeedback_Parms;
	PauseForceFeedback_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseForceFeedback, &PauseForceFeedback_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.StopForceFeedback
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::eventStopForceFeedback ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnStopForceFeedback = NULL;

	if ( ! pFnStopForceFeedback )
		pFnStopForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 19629 ];

	UForceFeedbackManager_eventStopForceFeedback_Parms StopForceFeedback_Parms;
	StopForceFeedback_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnStopForceFeedback, &StopForceFeedback_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PlayForceFeedback
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_Parm )

void UForceFeedbackManager::eventPlayForceFeedback ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnPlayForceFeedback = NULL;

	if ( ! pFnPlayForceFeedback )
		pFnPlayForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 19627 ];

	UForceFeedbackManager_eventPlayForceFeedback_Parms PlayForceFeedback_Parms;
	PlayForceFeedback_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnPlayForceFeedback, &PlayForceFeedback_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PauseWaveform
// [0x00024102] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::PauseWaveform ( unsigned long bPause )
{
	static UFunction* pFnPauseWaveform = NULL;

	if ( ! pFnPauseWaveform )
		pFnPauseWaveform = (UFunction*) UObject::GObjObjects()->Data[ 19625 ];

	UForceFeedbackManager_execPauseWaveform_Parms PauseWaveform_Parms;
	PauseWaveform_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseWaveform, &PauseWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// [0x00024102] 
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::StopForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnStopForceFeedbackWaveform = NULL;

	if ( ! pFnStopForceFeedbackWaveform )
		pFnStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 19623 ];

	UForceFeedbackManager_execStopForceFeedbackWaveform_Parms StopForceFeedbackWaveform_Parms;
	StopForceFeedbackWaveform_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnStopForceFeedbackWaveform, &StopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// [0x00020102] 
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_Parm )

void UForceFeedbackManager::PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnPlayForceFeedbackWaveform = NULL;

	if ( ! pFnPlayForceFeedbackWaveform )
		pFnPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 19621 ];

	UForceFeedbackManager_execPlayForceFeedbackWaveform_Parms PlayForceFeedbackWaveform_Parms;
	PlayForceFeedbackWaveform_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnPlayForceFeedbackWaveform, &PlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.Surface.GetSurfaceHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceHeight ( )
{
	static UFunction* pFnGetSurfaceHeight = NULL;

	if ( ! pFnGetSurfaceHeight )
		pFnGetSurfaceHeight = (UFunction*) UObject::GObjObjects()->Data[ 6322 ];

	USurface_execGetSurfaceHeight_Parms GetSurfaceHeight_Parms;

	pFnGetSurfaceHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceHeight, &GetSurfaceHeight_Parms, NULL );

	pFnGetSurfaceHeight->FunctionFlags |= 0x400;

	return GetSurfaceHeight_Parms.ReturnValue;
};

// Function Engine.Surface.GetSurfaceWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceWidth ( )
{
	static UFunction* pFnGetSurfaceWidth = NULL;

	if ( ! pFnGetSurfaceWidth )
		pFnGetSurfaceWidth = (UFunction*) UObject::GObjObjects()->Data[ 6320 ];

	USurface_execGetSurfaceWidth_Parms GetSurfaceWidth_Parms;

	pFnGetSurfaceWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceWidth, &GetSurfaceWidth_Parms, NULL );

	pFnGetSurfaceWidth->FunctionFlags |= 0x400;

	return GetSurfaceWidth_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetGroupName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetGroupName ( struct FName ParameterName, struct FName* GroupName )
{
	static UFunction* pFnGetGroupName = NULL;

	if ( ! pFnGetGroupName )
		pFnGetGroupName = (UFunction*) UObject::GObjObjects()->Data[ 16722 ];

	UMaterialInterface_execGetGroupName_Parms GetGroupName_Parms;
	memcpy ( &GetGroupName_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupName, &GetGroupName_Parms, NULL );

	pFnGetGroupName->FunctionFlags |= 0x400;

	if ( GroupName )
		memcpy ( GroupName, &GetGroupName_Parms.GroupName, 0x8 );

	return GetGroupName_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue )
{
	static UFunction* pFnGetVectorCurveParameterValue = NULL;

	if ( ! pFnGetVectorCurveParameterValue )
		pFnGetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16718 ];

	UMaterialInterface_execGetVectorCurveParameterValue_Parms GetVectorCurveParameterValue_Parms;
	memcpy ( &GetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorCurveParameterValue, &GetVectorCurveParameterValue_Parms, NULL );

	pFnGetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorCurveParameterValue_Parms.OutValue, 0x10 );

	return GetVectorCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetVectorParameterValue = NULL;

	if ( ! pFnGetVectorParameterValue )
		pFnGetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16714 ];

	UMaterialInterface_execGetVectorParameterValue_Parms GetVectorParameterValue_Parms;
	memcpy ( &GetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameterValue, &GetVectorParameterValue_Parms, NULL );

	pFnGetVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorParameterValue_Parms.OutValue, 0x10 );

	return GetVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetTextureParameterValue = NULL;

	if ( ! pFnGetTextureParameterValue )
		pFnGetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16710 ];

	UMaterialInterface_execGetTextureParameterValue_Parms GetTextureParameterValue_Parms;
	memcpy ( &GetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureParameterValue, &GetTextureParameterValue_Parms, NULL );

	pFnGetTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetTextureParameterValue_Parms.OutValue;

	return GetTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue )
{
	static UFunction* pFnGetScalarCurveParameterValue = NULL;

	if ( ! pFnGetScalarCurveParameterValue )
		pFnGetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16706 ];

	UMaterialInterface_execGetScalarCurveParameterValue_Parms GetScalarCurveParameterValue_Parms;
	memcpy ( &GetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarCurveParameterValue, &GetScalarCurveParameterValue_Parms, NULL );

	pFnGetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetScalarCurveParameterValue_Parms.OutValue, 0x10 );

	return GetScalarCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetScalarParameterValue = NULL;

	if ( ! pFnGetScalarParameterValue )
		pFnGetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16702 ];

	UMaterialInterface_execGetScalarParameterValue_Parms GetScalarParameterValue_Parms;
	memcpy ( &GetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarParameterValue, &GetScalarParameterValue_Parms, NULL );

	pFnGetScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetScalarParameterValue_Parms.OutValue;

	return GetScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetFontParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   OutFontValue                   ( CPF_Parm | CPF_OutParm )
// int                            OutFontPage                    ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage )
{
	static UFunction* pFnGetFontParameterValue = NULL;

	if ( ! pFnGetFontParameterValue )
		pFnGetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 16697 ];

	UMaterialInterface_execGetFontParameterValue_Parms GetFontParameterValue_Parms;
	memcpy ( &GetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFontParameterValue, &GetFontParameterValue_Parms, NULL );

	pFnGetFontParameterValue->FunctionFlags |= 0x400;

	if ( OutFontValue )
		*OutFontValue = GetFontParameterValue_Parms.OutFontValue;

	if ( OutFontPage )
		*OutFontPage = GetFontParameterValue_Parms.OutFontPage;

	return GetFontParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetPhysicalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial ( )
{
	static UFunction* pFnGetPhysicalMaterial = NULL;

	if ( ! pFnGetPhysicalMaterial )
		pFnGetPhysicalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 16695 ];

	UMaterialInterface_execGetPhysicalMaterial_Parms GetPhysicalMaterial_Parms;

	pFnGetPhysicalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalMaterial, &GetPhysicalMaterial_Parms, NULL );

	pFnGetPhysicalMaterial->FunctionFlags |= 0x400;

	return GetPhysicalMaterial_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterial*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterial* UMaterialInterface::GetMaterial ( )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 16693 ];

	UMaterialInterface_execGetMaterial_Parms GetMaterial_Parms;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )
// float                          InDistance                     ( CPF_Parm )

bool UParticleSystem::SetLODDistance ( int LODLevelIndex, float InDistance )
{
	static UFunction* pFnSetLODDistance = NULL;

	if ( ! pFnSetLODDistance )
		pFnSetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 25486 ];

	UParticleSystem_execSetLODDistance_Parms SetLODDistance_Parms;
	SetLODDistance_Parms.LODLevelIndex = LODLevelIndex;
	SetLODDistance_Parms.InDistance = InDistance;

	pFnSetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODDistance, &SetLODDistance_Parms, NULL );

	pFnSetLODDistance->FunctionFlags |= 0x400;

	return SetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InMethod                       ( CPF_Parm )

void UParticleSystem::SetCurrentLODMethod ( unsigned char InMethod )
{
	static UFunction* pFnSetCurrentLODMethod = NULL;

	if ( ! pFnSetCurrentLODMethod )
		pFnSetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 25484 ];

	UParticleSystem_execSetCurrentLODMethod_Parms SetCurrentLODMethod_Parms;
	SetCurrentLODMethod_Parms.InMethod = InMethod;

	pFnSetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentLODMethod, &SetCurrentLODMethod_Parms, NULL );

	pFnSetCurrentLODMethod->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystem.GetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )

float UParticleSystem::GetLODDistance ( int LODLevelIndex )
{
	static UFunction* pFnGetLODDistance = NULL;

	if ( ! pFnGetLODDistance )
		pFnGetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 25481 ];

	UParticleSystem_execGetLODDistance_Parms GetLODDistance_Parms;
	GetLODDistance_Parms.LODLevelIndex = LODLevelIndex;

	pFnGetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODDistance, &GetLODDistance_Parms, NULL );

	pFnGetLODDistance->FunctionFlags |= 0x400;

	return GetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetLODLevelCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystem::GetLODLevelCount ( )
{
	static UFunction* pFnGetLODLevelCount = NULL;

	if ( ! pFnGetLODLevelCount )
		pFnGetLODLevelCount = (UFunction*) UObject::GObjObjects()->Data[ 25479 ];

	UParticleSystem_execGetLODLevelCount_Parms GetLODLevelCount_Parms;

	pFnGetLODLevelCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevelCount, &GetLODLevelCount_Parms, NULL );

	pFnGetLODLevelCount->FunctionFlags |= 0x400;

	return GetLODLevelCount_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UParticleSystem::GetCurrentLODMethod ( )
{
	static UFunction* pFnGetCurrentLODMethod = NULL;

	if ( ! pFnGetCurrentLODMethod )
		pFnGetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 25477 ];

	UParticleSystem_execGetCurrentLODMethod_Parms GetCurrentLODMethod_Parms;

	pFnGetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLODMethod, &GetCurrentLODMethod_Parms, NULL );

	pFnGetCurrentLODMethod->FunctionFlags |= 0x400;

	return GetCurrentLODMethod_Parms.ReturnValue;
};

// Function Engine.GameInfo.DoTimeBasedSentinelStatGathering
// [0x00820002] 
// Parameters infos:

void AGameInfo::DoTimeBasedSentinelStatGathering ( )
{
	static UFunction* pFnDoTimeBasedSentinelStatGathering = NULL;

	if ( ! pFnDoTimeBasedSentinelStatGathering )
		pFnDoTimeBasedSentinelStatGathering = (UFunction*) UObject::GObjObjects()->Data[ 20723 ];

	AGameInfo_execDoTimeBasedSentinelStatGathering_Parms DoTimeBasedSentinelStatGathering_Parms;

	this->ProcessEvent ( pFnDoTimeBasedSentinelStatGathering, &DoTimeBasedSentinelStatGathering_Parms, NULL );
};

// Function Engine.GameInfo.DoSentinel_PerfAtSpecificLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AGameInfo::DoSentinel_PerfAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnDoSentinel_PerfAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_PerfAtSpecificLocation )
		pFnDoSentinel_PerfAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 20720 ];

	AGameInfo_execDoSentinel_PerfAtSpecificLocation_Parms DoSentinel_PerfAtSpecificLocation_Parms;
	memcpy ( &DoSentinel_PerfAtSpecificLocation_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &DoSentinel_PerfAtSpecificLocation_Parms.InRotation, &InRotation, 0xC );

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_PerfAtSpecificLocation, &DoSentinel_PerfAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.DoSentinel_MemoryAtSpecificLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AGameInfo::DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnDoSentinel_MemoryAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_MemoryAtSpecificLocation )
		pFnDoSentinel_MemoryAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 20717 ];

	AGameInfo_execDoSentinel_MemoryAtSpecificLocation_Parms DoSentinel_MemoryAtSpecificLocation_Parms;
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InRotation, &InRotation, 0xC );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_MemoryAtSpecificLocation, &DoSentinel_MemoryAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.GetTravelLocations
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )
// TArray< struct FVector >       TravelPoints                   ( CPF_Parm | CPF_OutParm )

void AGameInfo::GetTravelLocations ( struct FName LevelName, class APlayerController* PC, TArray< struct FVector >* TravelPoints )
{
	static UFunction* pFnGetTravelLocations = NULL;

	if ( ! pFnGetTravelLocations )
		pFnGetTravelLocations = (UFunction*) UObject::GObjObjects()->Data[ 20712 ];

	AGameInfo_execGetTravelLocations_Parms GetTravelLocations_Parms;
	memcpy ( &GetTravelLocations_Parms.LevelName, &LevelName, 0x8 );
	GetTravelLocations_Parms.PC = PC;

	pFnGetTravelLocations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTravelLocations, &GetTravelLocations_Parms, NULL );

	pFnGetTravelLocations->FunctionFlags |= 0x400;

	if ( TravelPoints )
		memcpy ( TravelPoints, &GetTravelLocations_Parms.TravelPoints, 0xC );
};

// Function Engine.GameInfo.DoTravelTheWorld
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::DoTravelTheWorld ( )
{
	static UFunction* pFnDoTravelTheWorld = NULL;

	if ( ! pFnDoTravelTheWorld )
		pFnDoTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 20694 ];

	AGameInfo_execDoTravelTheWorld_Parms DoTravelTheWorld_Parms;

	this->ProcessEvent ( pFnDoTravelTheWorld, &DoTravelTheWorld_Parms, NULL );
};

// Function Engine.GameInfo.EndSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  RunResult                      ( CPF_Parm )

void AGameInfo::EndSentinelRun ( unsigned char RunResult )
{
	static UFunction* pFnEndSentinelRun = NULL;

	if ( ! pFnEndSentinelRun )
		pFnEndSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 20692 ];

	AGameInfo_execEndSentinelRun_Parms EndSentinelRun_Parms;
	EndSentinelRun_Parms.RunResult = RunResult;

	pFnEndSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSentinelRun, &EndSentinelRun_Parms, NULL );

	pFnEndSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.AddSentinelPerTimePeriodStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AGameInfo::AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnAddSentinelPerTimePeriodStats = NULL;

	if ( ! pFnAddSentinelPerTimePeriodStats )
		pFnAddSentinelPerTimePeriodStats = (UFunction*) UObject::GObjObjects()->Data[ 20689 ];

	AGameInfo_execAddSentinelPerTimePeriodStats_Parms AddSentinelPerTimePeriodStats_Parms;
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InRotation, &InRotation, 0xC );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSentinelPerTimePeriodStats, &AddSentinelPerTimePeriodStats_Parms, NULL );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.BeginSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 TaskDescription                ( CPF_Const | CPF_Parm )
// struct FString                 TaskParameter                  ( CPF_Const | CPF_Parm )
// struct FString                 TagDesc                        ( CPF_Const | CPF_Parm )

void AGameInfo::BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc )
{
	static UFunction* pFnBeginSentinelRun = NULL;

	if ( ! pFnBeginSentinelRun )
		pFnBeginSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 20685 ];

	AGameInfo_execBeginSentinelRun_Parms BeginSentinelRun_Parms;
	memcpy ( &BeginSentinelRun_Parms.TaskDescription, &TaskDescription, 0xC );
	memcpy ( &BeginSentinelRun_Parms.TaskParameter, &TaskParameter, 0xC );
	memcpy ( &BeginSentinelRun_Parms.TagDesc, &TagDesc, 0xC );

	pFnBeginSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginSentinelRun, &BeginSentinelRun_Parms, NULL );

	pFnBeginSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.TellClientsToTravelToSession
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void AGameInfo::TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnTellClientsToTravelToSession = NULL;

	if ( ! pFnTellClientsToTravelToSession )
		pFnTellClientsToTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 20680 ];

	AGameInfo_execTellClientsToTravelToSession_Parms TellClientsToTravelToSession_Parms;
	memcpy ( &TellClientsToTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	TellClientsToTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &TellClientsToTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x44 );

	this->ProcessEvent ( pFnTellClientsToTravelToSession, &TellClientsToTravelToSession_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  PartyLeader                    ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::TellClientsToReturnToPartyHost ( class APlayerReplicationInfo* PartyLeader )
{
	static UFunction* pFnTellClientsToReturnToPartyHost = NULL;

	if ( ! pFnTellClientsToReturnToPartyHost )
		pFnTellClientsToReturnToPartyHost = (UFunction*) UObject::GObjObjects()->Data[ 20677 ];

	AGameInfo_execTellClientsToReturnToPartyHost_Parms TellClientsToReturnToPartyHost_Parms;
	TellClientsToReturnToPartyHost_Parms.PartyLeader = PartyLeader;

	this->ProcessEvent ( pFnTellClientsToReturnToPartyHost, &TellClientsToReturnToPartyHost_Parms, NULL );
};

// Function Engine.GameInfo.ShowSurveyForAllClients
// [0x00020002] 
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm )
// struct FString                 Context                        ( CPF_Parm )

void AGameInfo::ShowSurveyForAllClients ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnShowSurveyForAllClients = NULL;

	if ( ! pFnShowSurveyForAllClients )
		pFnShowSurveyForAllClients = (UFunction*) UObject::GObjObjects()->Data[ 20673 ];

	AGameInfo_execShowSurveyForAllClients_Parms ShowSurveyForAllClients_Parms;
	memcpy ( &ShowSurveyForAllClients_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ShowSurveyForAllClients_Parms.Context, &Context, 0xC );

	this->ProcessEvent ( pFnShowSurveyForAllClients, &ShowSurveyForAllClients_Parms, NULL );
};

// Function Engine.GameInfo.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void AGameInfo::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 20672 ];

	AGameInfo_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.GameInfo.IncrementAutomatedTestingMapIndex
// [0x00020002] 
// Parameters infos:

void AGameInfo::IncrementAutomatedTestingMapIndex ( )
{
	static UFunction* pFnIncrementAutomatedTestingMapIndex = NULL;

	if ( ! pFnIncrementAutomatedTestingMapIndex )
		pFnIncrementAutomatedTestingMapIndex = (UFunction*) UObject::GObjObjects()->Data[ 20671 ];

	AGameInfo_execIncrementAutomatedTestingMapIndex_Parms IncrementAutomatedTestingMapIndex_Parms;

	this->ProcessEvent ( pFnIncrementAutomatedTestingMapIndex, &IncrementAutomatedTestingMapIndex_Parms, NULL );
};

// Function Engine.GameInfo.CloseAutomatedMapTestTimer
// [0x00020002] 
// Parameters infos:

void AGameInfo::CloseAutomatedMapTestTimer ( )
{
	static UFunction* pFnCloseAutomatedMapTestTimer = NULL;

	if ( ! pFnCloseAutomatedMapTestTimer )
		pFnCloseAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 20670 ];

	AGameInfo_execCloseAutomatedMapTestTimer_Parms CloseAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnCloseAutomatedMapTestTimer, &CloseAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.GameInfo.StartAutomatedMapTestTimerWorker
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartAutomatedMapTestTimerWorker ( )
{
	static UFunction* pFnStartAutomatedMapTestTimerWorker = NULL;

	if ( ! pFnStartAutomatedMapTestTimerWorker )
		pFnStartAutomatedMapTestTimerWorker = (UFunction*) UObject::GObjObjects()->Data[ 20668 ];

	AGameInfo_execStartAutomatedMapTestTimerWorker_Parms StartAutomatedMapTestTimerWorker_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimerWorker, &StartAutomatedMapTestTimerWorker_Parms, NULL );
};

// Function Engine.GameInfo.StartAutomatedMapTestTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventStartAutomatedMapTestTimer ( )
{
	static UFunction* pFnStartAutomatedMapTestTimer = NULL;

	if ( ! pFnStartAutomatedMapTestTimer )
		pFnStartAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 20667 ];

	AGameInfo_eventStartAutomatedMapTestTimer_Parms StartAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimer, &StartAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.GameInfo.OnServerCreateComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnServerCreateComplete = NULL;

	if ( ! pFnOnServerCreateComplete )
		pFnOnServerCreateComplete = (UFunction*) UObject::GObjObjects()->Data[ 20663 ];

	AGameInfo_execOnServerCreateComplete_Parms OnServerCreateComplete_Parms;
	memcpy ( &OnServerCreateComplete_Parms.SessionName, &SessionName, 0x8 );
	OnServerCreateComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnServerCreateComplete, &OnServerCreateComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServer
// [0x00020002] 
// Parameters infos:

void AGameInfo::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = (UFunction*) UObject::GObjObjects()->Data[ 20661 ];

	AGameInfo_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginChange
// [0x00020002] 
// Parameters infos:

void AGameInfo::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 20660 ];

	AGameInfo_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginFailed
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void AGameInfo::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 20657 ];

	AGameInfo_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.GameInfo.ClearAutoLoginDelegates
// [0x00020002] 
// Parameters infos:

void AGameInfo::ClearAutoLoginDelegates ( )
{
	static UFunction* pFnClearAutoLoginDelegates = NULL;

	if ( ! pFnClearAutoLoginDelegates )
		pFnClearAutoLoginDelegates = (UFunction*) UObject::GObjObjects()->Data[ 20656 ];

	AGameInfo_execClearAutoLoginDelegates_Parms ClearAutoLoginDelegates_Parms;

	this->ProcessEvent ( pFnClearAutoLoginDelegates, &ClearAutoLoginDelegates_Parms, NULL );
};

// Function Engine.GameInfo.ProcessServerLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ProcessServerLogin ( )
{
	static UFunction* pFnProcessServerLogin = NULL;

	if ( ! pFnProcessServerLogin )
		pFnProcessServerLogin = (UFunction*) UObject::GObjObjects()->Data[ 20654 ];

	AGameInfo_execProcessServerLogin_Parms ProcessServerLogin_Parms;

	this->ProcessEvent ( pFnProcessServerLogin, &ProcessServerLogin_Parms, NULL );

	return ProcessServerLogin_Parms.ReturnValue;
};

// Function Engine.GameInfo.MatineeCancelled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventMatineeCancelled ( )
{
	static UFunction* pFnMatineeCancelled = NULL;

	if ( ! pFnMatineeCancelled )
		pFnMatineeCancelled = (UFunction*) UObject::GObjObjects()->Data[ 20653 ];

	AGameInfo_eventMatineeCancelled_Parms MatineeCancelled_Parms;

	this->ProcessEvent ( pFnMatineeCancelled, &MatineeCancelled_Parms, NULL );
};

// Function Engine.GameInfo.RecalculateSkillRating
// [0x00820002] 
// Parameters infos:

void AGameInfo::RecalculateSkillRating ( )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 20648 ];

	AGameInfo_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameplayMuteList
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UpdateGameplayMuteList ( class APlayerController* PC )
{
	static UFunction* pFnUpdateGameplayMuteList = NULL;

	if ( ! pFnUpdateGameplayMuteList )
		pFnUpdateGameplayMuteList = (UFunction*) UObject::GObjObjects()->Data[ 20646 ];

	AGameInfo_execUpdateGameplayMuteList_Parms UpdateGameplayMuteList_Parms;
	UpdateGameplayMuteList_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateGameplayMuteList, &UpdateGameplayMuteList_Parms, NULL );
};

// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// [0x00020002] 
// Parameters infos:

void AGameInfo::NotifyArbitratedMatchEnd ( )
{
	static UFunction* pFnNotifyArbitratedMatchEnd = NULL;

	if ( ! pFnNotifyArbitratedMatchEnd )
		pFnNotifyArbitratedMatchEnd = (UFunction*) UObject::GObjObjects()->Data[ 20644 ];

	AGameInfo_execNotifyArbitratedMatchEnd_Parms NotifyArbitratedMatchEnd_Parms;

	this->ProcessEvent ( pFnNotifyArbitratedMatchEnd, &NotifyArbitratedMatchEnd_Parms, NULL );
};

// Function Engine.GameInfo.MatchIsInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::MatchIsInProgress ( )
{
	static UFunction* pFnMatchIsInProgress = NULL;

	if ( ! pFnMatchIsInProgress )
		pFnMatchIsInProgress = (UFunction*) UObject::GObjObjects()->Data[ 20621 ];

	AGameInfo_execMatchIsInProgress_Parms MatchIsInProgress_Parms;

	this->ProcessEvent ( pFnMatchIsInProgress, &MatchIsInProgress_Parms, NULL );

	return MatchIsInProgress_Parms.ReturnValue;
};

// Function Engine.GameInfo.ArbitrationRegistrationComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnArbitrationRegistrationComplete = NULL;

	if ( ! pFnArbitrationRegistrationComplete )
		pFnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 20618 ];

	AGameInfo_execArbitrationRegistrationComplete_Parms ArbitrationRegistrationComplete_Parms;
	memcpy ( &ArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	ArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnArbitrationRegistrationComplete, &ArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServerForArbitration
// [0x00020000] 
// Parameters infos:

void AGameInfo::RegisterServerForArbitration ( )
{
	static UFunction* pFnRegisterServerForArbitration = NULL;

	if ( ! pFnRegisterServerForArbitration )
		pFnRegisterServerForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 20617 ];

	AGameInfo_execRegisterServerForArbitration_Parms RegisterServerForArbitration_Parms;

	this->ProcessEvent ( pFnRegisterServerForArbitration, &RegisterServerForArbitration_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitratedMatch
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitratedMatch ( )
{
	static UFunction* pFnStartArbitratedMatch = NULL;

	if ( ! pFnStartArbitratedMatch )
		pFnStartArbitratedMatch = (UFunction*) UObject::GObjObjects()->Data[ 20616 ];

	AGameInfo_execStartArbitratedMatch_Parms StartArbitratedMatch_Parms;

	this->ProcessEvent ( pFnStartArbitratedMatch, &StartArbitratedMatch_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitrationRegistration
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitrationRegistration ( )
{
	static UFunction* pFnStartArbitrationRegistration = NULL;

	if ( ! pFnStartArbitrationRegistration )
		pFnStartArbitrationRegistration = (UFunction*) UObject::GObjObjects()->Data[ 20615 ];

	AGameInfo_execStartArbitrationRegistration_Parms StartArbitrationRegistration_Parms;

	this->ProcessEvent ( pFnStartArbitrationRegistration, &StartArbitrationRegistration_Parms, NULL );
};

// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful )
{
	static UFunction* pFnProcessClientRegistrationCompletion = NULL;

	if ( ! pFnProcessClientRegistrationCompletion )
		pFnProcessClientRegistrationCompletion = (UFunction*) UObject::GObjObjects()->Data[ 20612 ];

	AGameInfo_execProcessClientRegistrationCompletion_Parms ProcessClientRegistrationCompletion_Parms;
	ProcessClientRegistrationCompletion_Parms.PC = PC;
	ProcessClientRegistrationCompletion_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnProcessClientRegistrationCompletion, &ProcessClientRegistrationCompletion_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameSettingsCounts
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateGameSettingsCounts ( )
{
	static UFunction* pFnUpdateGameSettingsCounts = NULL;

	if ( ! pFnUpdateGameSettingsCounts )
		pFnUpdateGameSettingsCounts = (UFunction*) UObject::GObjObjects()->Data[ 20610 ];

	AGameInfo_execUpdateGameSettingsCounts_Parms UpdateGameSettingsCounts_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsCounts, &UpdateGameSettingsCounts_Parms, NULL );
};

// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventHandleSeamlessTravelPlayer ( class AController** C )
{
	static UFunction* pFnHandleSeamlessTravelPlayer = NULL;

	if ( ! pFnHandleSeamlessTravelPlayer )
		pFnHandleSeamlessTravelPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20603 ];

	AGameInfo_eventHandleSeamlessTravelPlayer_Parms HandleSeamlessTravelPlayer_Parms;

	this->ProcessEvent ( pFnHandleSeamlessTravelPlayer, &HandleSeamlessTravelPlayer_Parms, NULL );

	if ( C )
		*C = HandleSeamlessTravelPlayer_Parms.C;
};

// Function Engine.GameInfo.UpdateGameSettings
// [0x00020000] 
// Parameters infos:

void AGameInfo::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 20602 ];

	AGameInfo_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function Engine.GameInfo.PostSeamlessTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostSeamlessTravel ( )
{
	static UFunction* pFnPostSeamlessTravel = NULL;

	if ( ! pFnPostSeamlessTravel )
		pFnPostSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 20600 ];

	AGameInfo_eventPostSeamlessTravel_Parms PostSeamlessTravel_Parms;

	this->ProcessEvent ( pFnPostSeamlessTravel, &PostSeamlessTravel_Parms, NULL );
};

// Function Engine.GameInfo.SwapPlayerControllers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )
// class APlayerController*       NewPC                          ( CPF_Parm )

void AGameInfo::SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC )
{
	static UFunction* pFnSwapPlayerControllers = NULL;

	if ( ! pFnSwapPlayerControllers )
		pFnSwapPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 20597 ];

	AGameInfo_execSwapPlayerControllers_Parms SwapPlayerControllers_Parms;
	SwapPlayerControllers_Parms.OldPC = OldPC;
	SwapPlayerControllers_Parms.NewPC = NewPC;

	pFnSwapPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapPlayerControllers, &SwapPlayerControllers_Parms, NULL );

	pFnSwapPlayerControllers->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 20592 ];

	AGameInfo_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.GameInfo.OverridePRI
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class APlayerReplicationInfo*  OldPRI                         ( CPF_Parm )

void AGameInfo::OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI )
{
	static UFunction* pFnOverridePRI = NULL;

	if ( ! pFnOverridePRI )
		pFnOverridePRI = (UFunction*) UObject::GObjObjects()->Data[ 20589 ];

	AGameInfo_execOverridePRI_Parms OverridePRI_Parms;
	OverridePRI_Parms.PC = PC;
	OverridePRI_Parms.OldPRI = OldPRI;

	this->ProcessEvent ( pFnOverridePRI, &OverridePRI_Parms, NULL );
};

// Function Engine.GameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool AGameInfo::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 20581 ];

	AGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function Engine.GameInfo.AddInactivePRI
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 20575 ];

	AGameInfo_execAddInactivePRI_Parms AddInactivePRI_Parms;
	AddInactivePRI_Parms.PRI = PRI;
	AddInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function Engine.GameInfo.PostCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostCommitMapChange ( )
{
	static UFunction* pFnPostCommitMapChange = NULL;

	if ( ! pFnPostCommitMapChange )
		pFnPostCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 20574 ];

	AGameInfo_eventPostCommitMapChange_Parms PostCommitMapChange_Parms;

	this->ProcessEvent ( pFnPostCommitMapChange, &PostCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.PreCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 PreviousMapName                ( CPF_Parm )
// struct FString                 NextMapName                    ( CPF_Parm )

void AGameInfo::eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName )
{
	static UFunction* pFnPreCommitMapChange = NULL;

	if ( ! pFnPreCommitMapChange )
		pFnPreCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 20571 ];

	AGameInfo_eventPreCommitMapChange_Parms PreCommitMapChange_Parms;
	memcpy ( &PreCommitMapChange_Parms.PreviousMapName, &PreviousMapName, 0xC );
	memcpy ( &PreCommitMapChange_Parms.NextMapName, &NextMapName, 0xC );

	this->ProcessEvent ( pFnPreCommitMapChange, &PreCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.AllowPausing
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_OptionalParm | CPF_Parm )

bool AGameInfo::AllowPausing ( class APlayerController* PC )
{
	static UFunction* pFnAllowPausing = NULL;

	if ( ! pFnAllowPausing )
		pFnAllowPausing = (UFunction*) UObject::GObjObjects()->Data[ 20568 ];

	AGameInfo_execAllowPausing_Parms AllowPausing_Parms;
	AllowPausing_Parms.PC = PC;

	this->ProcessEvent ( pFnAllowPausing, &AllowPausing_Parms, NULL );

	return AllowPausing_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AGameInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = (UFunction*) UObject::GObjObjects()->Data[ 20565 ];

	AGameInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowMutator
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClassName               ( CPF_Parm )

bool AGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pFnAllowMutator = NULL;

	if ( ! pFnAllowMutator )
		pFnAllowMutator = (UFunction*) UObject::GObjObjects()->Data[ 20562 ];

	AGameInfo_execAllowMutator_Parms AllowMutator_Parms;
	memcpy ( &AllowMutator_Parms.MutatorClassName, &MutatorClassName, 0xC );

	this->ProcessEvent ( pFnAllowMutator, &AllowMutator_Parms, NULL );

	return AllowMutator_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestart
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestart ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestart = NULL;

	if ( ! pFnPlayerCanRestart )
		pFnPlayerCanRestart = (UFunction*) UObject::GObjObjects()->Data[ 20559 ];

	AGameInfo_execPlayerCanRestart_Parms PlayerCanRestart_Parms;
	PlayerCanRestart_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestart, &PlayerCanRestart_Parms, NULL );

	return PlayerCanRestart_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestartGame ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestartGame = NULL;

	if ( ! pFnPlayerCanRestartGame )
		pFnPlayerCanRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 20556 ];

	AGameInfo_execPlayerCanRestartGame_Parms PlayerCanRestartGame_Parms;
	PlayerCanRestartGame_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestartGame, &PlayerCanRestartGame_Parms, NULL );

	return PlayerCanRestartGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.KillBots
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::KillBots ( )
{
	static UFunction* pFnKillBots = NULL;

	if ( ! pFnKillBots )
		pFnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 20555 ];

	AGameInfo_execKillBots_Parms KillBots_Parms;

	this->ProcessEvent ( pFnKillBots, &KillBots_Parms, NULL );
};

// Function Engine.GameInfo.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20552 ];

	AGameInfo_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.GameInfo.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AGameInfo::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20548 ];

	AGameInfo_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.GameInfo.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20545 ];

	AGameInfo_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.GameInfo.ParseMessageString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Who                            ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )

struct FString AGameInfo::ParseMessageString ( class AController* Who, struct FString Message )
{
	static UFunction* pFnParseMessageString = NULL;

	if ( ! pFnParseMessageString )
		pFnParseMessageString = (UFunction*) UObject::GObjObjects()->Data[ 20541 ];

	AGameInfo_execParseMessageString_Parms ParseMessageString_Parms;
	ParseMessageString_Parms.Who = Who;
	memcpy ( &ParseMessageString_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnParseMessageString, &ParseMessageString_Parms, NULL );

	return ParseMessageString_Parms.ReturnValue;
};

// Function Engine.GameInfo.ModifyScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ModifyScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnModifyScoreKill = NULL;

	if ( ! pFnModifyScoreKill )
		pFnModifyScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 20538 ];

	AGameInfo_execModifyScoreKill_Parms ModifyScoreKill_Parms;
	ModifyScoreKill_Parms.Killer = Killer;
	ModifyScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyScoreKill, &ModifyScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 20535 ];

	AGameInfo_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 20532 ];

	AGameInfo_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function Engine.GameInfo.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 20529 ];

	AGameInfo_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameInfo.AddObjectiveScore
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnAddObjectiveScore = NULL;

	if ( ! pFnAddObjectiveScore )
		pFnAddObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 20526 ];

	AGameInfo_execAddObjectiveScore_Parms AddObjectiveScore_Parms;
	AddObjectiveScore_Parms.Scorer = Scorer;
	AddObjectiveScore_Parms.Score = Score;

	this->ProcessEvent ( pFnAddObjectiveScore, &AddObjectiveScore_Parms, NULL );
};

// Function Engine.GameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AGameInfo::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20521 ];

	AGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChoosePlayerStart
// [0x00024002] 
// Parameters infos:
// class APlayerStart*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )

class APlayerStart* AGameInfo::ChoosePlayerStart ( class AController* Player, unsigned char InTeam )
{
	static UFunction* pFnChoosePlayerStart = NULL;

	if ( ! pFnChoosePlayerStart )
		pFnChoosePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20512 ];

	AGameInfo_execChoosePlayerStart_Parms ChoosePlayerStart_Parms;
	ChoosePlayerStart_Parms.Player = Player;
	ChoosePlayerStart_Parms.InTeam = InTeam;

	this->ProcessEvent ( pFnChoosePlayerStart, &ChoosePlayerStart_Parms, NULL );

	return ChoosePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* AGameInfo::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20504 ];

	AGameInfo_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

bool AGameInfo::ShouldSpawnAtStartSpot ( class AController* Player )
{
	static UFunction* pFnShouldSpawnAtStartSpot = NULL;

	if ( ! pFnShouldSpawnAtStartSpot )
		pFnShouldSpawnAtStartSpot = (UFunction*) UObject::GObjObjects()->Data[ 20501 ];

	AGameInfo_execShouldSpawnAtStartSpot_Parms ShouldSpawnAtStartSpot_Parms;
	ShouldSpawnAtStartSpot_Parms.Player = Player;

	this->ProcessEvent ( pFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Parms, NULL );

	return ShouldSpawnAtStartSpot_Parms.ReturnValue;
};

// Function Engine.GameInfo.EndLogging
// [0x00020000] 
// Parameters infos:
// struct FString                 Reason                         ( CPF_Parm )

void AGameInfo::EndLogging ( struct FString Reason )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 20499 ];

	AGameInfo_execEndLogging_Parms EndLogging_Parms;
	memcpy ( &EndLogging_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );
};

// Function Engine.GameInfo.EndOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::EndOnlineGame ( )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 20497 ];

	AGameInfo_execEndOnlineGame_Parms EndOnlineGame_Parms;

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.PerformEndGameHandling
// [0x00020002] 
// Parameters infos:

void AGameInfo::PerformEndGameHandling ( )
{
	static UFunction* pFnPerformEndGameHandling = NULL;

	if ( ! pFnPerformEndGameHandling )
		pFnPerformEndGameHandling = (UFunction*) UObject::GObjObjects()->Data[ 20496 ];

	AGameInfo_execPerformEndGameHandling_Parms PerformEndGameHandling_Parms;

	this->ProcessEvent ( pFnPerformEndGameHandling, &PerformEndGameHandling_Parms, NULL );
};

// Function Engine.GameInfo.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm )

void AGameInfo::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20493 ];

	AGameInfo_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlinePlayerScores
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlinePlayerScores ( )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 20491 ];

	AGameInfo_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlineStats
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlineStats ( )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 20488 ];

	AGameInfo_execWriteOnlineStats_Parms WriteOnlineStats_Parms;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );
};

// Function Engine.GameInfo.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm )

bool AGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20483 ];

	AGameInfo_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckModifiedEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm )

bool AGameInfo::CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckModifiedEndGame = NULL;

	if ( ! pFnCheckModifiedEndGame )
		pFnCheckModifiedEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20479 ];

	AGameInfo_execCheckModifiedEndGame_Parms CheckModifiedEndGame_Parms;
	CheckModifiedEndGame_Parms.Winner = Winner;
	memcpy ( &CheckModifiedEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckModifiedEndGame, &CheckModifiedEndGame_Parms, NULL );

	return CheckModifiedEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeam = NULL;

	if ( ! pFnBroadcastLocalizedTeam )
		pFnBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 20471 ];

	AGameInfo_eventBroadcastLocalizedTeam_Parms BroadcastLocalizedTeam_Parms;
	BroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeam_Parms.Sender = Sender;
	BroadcastLocalizedTeam_Parms.Message = Message;
	BroadcastLocalizedTeam_Parms.Switch = Switch;
	BroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeam, &BroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 20464 ];

	AGameInfo_eventBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 20460 ];

	AGameInfo_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.GameInfo.Broadcast
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 20456 ];

	AGameInfo_eventBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.GameInfo.RestartGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 20450 ];

	AGameInfo_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function Engine.GameInfo.GetTravelType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::GetTravelType ( )
{
	static UFunction* pFnGetTravelType = NULL;

	if ( ! pFnGetTravelType )
		pFnGetTravelType = (UFunction*) UObject::GObjObjects()->Data[ 20448 ];

	AGameInfo_execGetTravelType_Parms GetTravelType_Parms;

	this->ProcessEvent ( pFnGetTravelType, &GetTravelType_Parms, NULL );

	return GetTravelType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextAutomatedTestingMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AGameInfo::GetNextAutomatedTestingMap ( )
{
	static UFunction* pFnGetNextAutomatedTestingMap = NULL;

	if ( ! pFnGetNextAutomatedTestingMap )
		pFnGetNextAutomatedTestingMap = (UFunction*) UObject::GObjObjects()->Data[ 20443 ];

	AGameInfo_execGetNextAutomatedTestingMap_Parms GetNextAutomatedTestingMap_Parms;

	this->ProcessEvent ( pFnGetNextAutomatedTestingMap, &GetNextAutomatedTestingMap_Parms, NULL );

	return GetNextAutomatedTestingMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextMap
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AGameInfo::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = (UFunction*) UObject::GObjObjects()->Data[ 20441 ];

	AGameInfo_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );

	return GetNextMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.SendPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       aPlayer                        ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm )

void AGameInfo::SendPlayer ( class APlayerController* aPlayer, struct FString URL )
{
	static UFunction* pFnSendPlayer = NULL;

	if ( ! pFnSendPlayer )
		pFnSendPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20438 ];

	AGameInfo_execSendPlayer_Parms SendPlayer_Parms;
	SendPlayer_Parms.aPlayer = aPlayer;
	memcpy ( &SendPlayer_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSendPlayer, &SendPlayer_Parms, NULL );
};

// Function Engine.GameInfo.PickTeam
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Current                        ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

unsigned char AGameInfo::PickTeam ( unsigned char Current, class AController* C )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = (UFunction*) UObject::GObjObjects()->Data[ 20434 ];

	AGameInfo_execPickTeam_Parms PickTeam_Parms;
	PickTeam_Parms.Current = Current;
	PickTeam_Parms.C = C;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );

	return PickTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            N                              ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AGameInfo::ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 20429 ];

	AGameInfo_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.N = N;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeName
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  bNameChange                    ( CPF_Parm )

void AGameInfo::ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange )
{
	static UFunction* pFnChangeName = NULL;

	if ( ! pFnChangeName )
		pFnChangeName = (UFunction*) UObject::GObjObjects()->Data[ 20425 ];

	AGameInfo_execChangeName_Parms ChangeName_Parms;
	ChangeName_Parms.Other = Other;
	memcpy ( &ChangeName_Parms.S, &S, 0xC );
	ChangeName_Parms.bNameChange = bNameChange;

	this->ProcessEvent ( pFnChangeName, &ChangeName_Parms, NULL );
};

// Function Engine.GameInfo.DiscardInventory
// [0x00024002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::DiscardInventory ( class APawn* Other, class AController* Killer )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 20422 ];

	AGameInfo_execDiscardInventory_Parms DiscardInventory_Parms;
	DiscardInventory_Parms.Other = Other;
	DiscardInventory_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.GameInfo.PickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AGameInfo::PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnPickupQuery = NULL;

	if ( ! pFnPickupQuery )
		pFnPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 20416 ];

	AGameInfo_execPickupQuery_Parms PickupQuery_Parms;
	PickupQuery_Parms.Other = Other;
	PickupQuery_Parms.ItemClass = ItemClass;
	PickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnPickupQuery, &PickupQuery_Parms, NULL );

	return PickupQuery_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APickupFactory*          Other                          ( CPF_Parm )

bool AGameInfo::ShouldRespawn ( class APickupFactory* Other )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = (UFunction*) UObject::GObjObjects()->Data[ 20413 ];

	AGameInfo_execShouldRespawn_Parms ShouldRespawn_Parms;
	ShouldRespawn_Parms.Other = Other;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AGameInfo::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 20410 ];

	AGameInfo_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.GameInfo.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 20402 ];

	AGameInfo_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameInfo.CanSpectate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool AGameInfo::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = (UFunction*) UObject::GObjObjects()->Data[ 20398 ];

	AGameInfo_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function Engine.GameInfo.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AGameInfo::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 20396 ];

	AGameInfo_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.GameInfo.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AGameInfo::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 20394 ];

	AGameInfo_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.GameInfo.ParseKillMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 KillerName                     ( CPF_Parm )
// struct FString                 VictimName                     ( CPF_Parm )
// struct FString                 DeathMessage                   ( CPF_Parm )

struct FString AGameInfo::ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage )
{
	static UFunction* pFnParseKillMessage = NULL;

	if ( ! pFnParseKillMessage )
		pFnParseKillMessage = (UFunction*) UObject::GObjObjects()->Data[ 20389 ];

	AGameInfo_execParseKillMessage_Parms ParseKillMessage_Parms;
	memcpy ( &ParseKillMessage_Parms.KillerName, &KillerName, 0xC );
	memcpy ( &ParseKillMessage_Parms.VictimName, &VictimName, 0xC );
	memcpy ( &ParseKillMessage_Parms.DeathMessage, &DeathMessage, 0xC );

	this->ProcessEvent ( pFnParseKillMessage, &ParseKillMessage_Parms, NULL );

	return ParseKillMessage_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastDeathMessage
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType )
{
	static UFunction* pFnBroadcastDeathMessage = NULL;

	if ( ! pFnBroadcastDeathMessage )
		pFnBroadcastDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 20385 ];

	AGameInfo_execBroadcastDeathMessage_Parms BroadcastDeathMessage_Parms;
	BroadcastDeathMessage_Parms.Killer = Killer;
	BroadcastDeathMessage_Parms.Other = Other;
	BroadcastDeathMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBroadcastDeathMessage, &BroadcastDeathMessage_Parms, NULL );
};

// Function Engine.GameInfo.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameInfo::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 20379 ];

	AGameInfo_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameInfo.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 20374 ];

	AGameInfo_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function Engine.GameInfo.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AGameInfo::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 20369 ];

	AGameInfo_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.GameInfo.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = (UFunction*) UObject::GObjObjects()->Data[ 20367 ];

	AGameInfo_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function Engine.GameInfo.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm )
// class APlayerController*       Sender                         ( CPF_Parm )

void AGameInfo::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 20364 ];

	AGameInfo_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.GameInfo.AddDefaultInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::eventAddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 20362 ];

	AGameInfo_eventAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.GameInfo.AcceptInventory
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::eventAcceptInventory ( class APawn* PlayerPawn )
{
	static UFunction* pFnAcceptInventory = NULL;

	if ( ! pFnAcceptInventory )
		pFnAcceptInventory = (UFunction*) UObject::GObjObjects()->Data[ 20360 ];

	AGameInfo_eventAcceptInventory_Parms AcceptInventory_Parms;
	AcceptInventory_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnAcceptInventory, &AcceptInventory_Parms, NULL );
};

// Function Engine.GameInfo.UnregisterPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UnregisterPlayer ( class APlayerController* PC )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20358 ];

	AGameInfo_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	UnregisterPlayer_Parms.PC = PC;

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );
};

// Function Engine.GameInfo.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 20354 ];

	AGameInfo_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Engine.GameInfo.PreExit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = (UFunction*) UObject::GObjObjects()->Data[ 20353 ];

	AGameInfo_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function Engine.GameInfo.CalculatedNetSpeed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::CalculatedNetSpeed ( )
{
	static UFunction* pFnCalculatedNetSpeed = NULL;

	if ( ! pFnCalculatedNetSpeed )
		pFnCalculatedNetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 20351 ];

	AGameInfo_execCalculatedNetSpeed_Parms CalculatedNetSpeed_Parms;

	this->ProcessEvent ( pFnCalculatedNetSpeed, &CalculatedNetSpeed_Parms, NULL );

	return CalculatedNetSpeed_Parms.ReturnValue;
};

// Function Engine.GameInfo.UpdateNetSpeeds
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateNetSpeeds ( )
{
	static UFunction* pFnUpdateNetSpeeds = NULL;

	if ( ! pFnUpdateNetSpeeds )
		pFnUpdateNetSpeeds = (UFunction*) UObject::GObjObjects()->Data[ 20347 ];

	AGameInfo_execUpdateNetSpeeds_Parms UpdateNetSpeeds_Parms;

	this->ProcessEvent ( pFnUpdateNetSpeeds, &UpdateNetSpeeds_Parms, NULL );
};

// Function Engine.GameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 20342 ];

	AGameInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Engine.GameInfo.ReplicateStreamingStatus
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ReplicateStreamingStatus ( class APlayerController* PC )
{
	static UFunction* pFnReplicateStreamingStatus = NULL;

	if ( ! pFnReplicateStreamingStatus )
		pFnReplicateStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 20338 ];

	AGameInfo_execReplicateStreamingStatus_Parms ReplicateStreamingStatus_Parms;
	ReplicateStreamingStatus_Parms.PC = PC;

	this->ProcessEvent ( pFnReplicateStreamingStatus, &ReplicateStreamingStatus_Parms, NULL );
};

// Function Engine.GameInfo.GetDefaultPlayerClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

class UClass* AGameInfo::GetDefaultPlayerClass ( class AController* C )
{
	static UFunction* pFnGetDefaultPlayerClass = NULL;

	if ( ! pFnGetDefaultPlayerClass )
		pFnGetDefaultPlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 20335 ];

	AGameInfo_execGetDefaultPlayerClass_Parms GetDefaultPlayerClass_Parms;
	GetDefaultPlayerClass_Parms.C = C;

	this->ProcessEvent ( pFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Parms, NULL );

	return GetDefaultPlayerClass_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* AGameInfo::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 20328 ];

	AGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function Engine.GameInfo.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AGameInfo::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20320 ];

	AGameInfo_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.GameInfo.StartBots
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartBots ( )
{
	static UFunction* pFnStartBots = NULL;

	if ( ! pFnStartBots )
		pFnStartBots = (UFunction*) UObject::GObjObjects()->Data[ 20318 ];

	AGameInfo_execStartBots_Parms StartBots_Parms;

	this->ProcessEvent ( pFnStartBots, &StartBots_Parms, NULL );
};

// Function Engine.GameInfo.StartHumans
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartHumans ( )
{
	static UFunction* pFnStartHumans = NULL;

	if ( ! pFnStartHumans )
		pFnStartHumans = (UFunction*) UObject::GObjObjects()->Data[ 20316 ];

	AGameInfo_execStartHumans_Parms StartHumans_Parms;

	this->ProcessEvent ( pFnStartHumans, &StartHumans_Parms, NULL );
};

// Function Engine.GameInfo.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 20311 ];

	AGameInfo_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.GameInfo.StartOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 20309 ];

	AGameInfo_execStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 20307 ];

	AGameInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameInfo.Login
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm )

class APlayerController* AGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 20292 ];

	AGameInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Engine.GameInfo.AtCapacity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bSpectator                     ( CPF_Parm )

bool AGameInfo::AtCapacity ( unsigned long bSpectator )
{
	static UFunction* pFnAtCapacity = NULL;

	if ( ! pFnAtCapacity )
		pFnAtCapacity = (UFunction*) UObject::GObjObjects()->Data[ 20289 ];

	AGameInfo_execAtCapacity_Parms AtCapacity_Parms;
	AtCapacity_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnAtCapacity, &AtCapacity_Parms, NULL );

	return AtCapacity_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 Address                        ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 20283 ];

	AGameInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 20281 ];

	AGameInfo_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessClientTravel
// [0x00420002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FGuid                   NextMapGuid                    ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm )

class APlayerController* AGameInfo::ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL )
{
	static UFunction* pFnProcessClientTravel = NULL;

	if ( ! pFnProcessClientTravel )
		pFnProcessClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 20273 ];

	AGameInfo_execProcessClientTravel_Parms ProcessClientTravel_Parms;
	memcpy ( &ProcessClientTravel_Parms.NextMapGuid, &NextMapGuid, 0x10 );
	ProcessClientTravel_Parms.bSeamless = bSeamless;
	ProcessClientTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessClientTravel, &ProcessClientTravel_Parms, NULL );

	if ( URL )
		memcpy ( URL, &ProcessClientTravel_Parms.URL, 0xC );

	return ProcessClientTravel_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessServerTravel
// [0x00824002] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::ProcessServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnProcessServerTravel = NULL;

	if ( ! pFnProcessServerTravel )
		pFnProcessServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 20265 ];

	AGameInfo_execProcessServerTravel_Parms ProcessServerTravel_Parms;
	memcpy ( &ProcessServerTravel_Parms.URL, &URL, 0xC );
	ProcessServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessServerTravel, &ProcessServerTravel_Parms, NULL );
};

// Function Engine.GameInfo.GetBeaconText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AGameInfo::eventGetBeaconText ( )
{
	static UFunction* pFnGetBeaconText = NULL;

	if ( ! pFnGetBeaconText )
		pFnGetBeaconText = (UFunction*) UObject::GObjObjects()->Data[ 20263 ];

	AGameInfo_eventGetBeaconText_Parms GetBeaconText_Parms;

	this->ProcessEvent ( pFnGetBeaconText, &GetBeaconText_Parms, NULL );

	return GetBeaconText_Parms.ReturnValue;
};

// Function Engine.GameInfo.RemoveMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                MutatorToRemove                ( CPF_Parm )

void AGameInfo::RemoveMutator ( class AMutator* MutatorToRemove )
{
	static UFunction* pFnRemoveMutator = NULL;

	if ( ! pFnRemoveMutator )
		pFnRemoveMutator = (UFunction*) UObject::GObjObjects()->Data[ 20260 ];

	AGameInfo_execRemoveMutator_Parms RemoveMutator_Parms;
	RemoveMutator_Parms.MutatorToRemove = MutatorToRemove;

	this->ProcessEvent ( pFnRemoveMutator, &RemoveMutator_Parms, NULL );
};

// Function Engine.GameInfo.AddGameRules
// [0x00020002] 
// Parameters infos:
// class UClass*                  GRClass                        ( CPF_Parm )

void AGameInfo::AddGameRules ( class UClass* GRClass )
{
	static UFunction* pFnAddGameRules = NULL;

	if ( ! pFnAddGameRules )
		pFnAddGameRules = (UFunction*) UObject::GObjObjects()->Data[ 20258 ];

	AGameInfo_execAddGameRules_Parms AddGameRules_Parms;
	AddGameRules_Parms.GRClass = GRClass;

	this->ProcessEvent ( pFnAddGameRules, &AddGameRules_Parms, NULL );
};

// Function Engine.GameInfo.AddMutator
// [0x00024002] 
// Parameters infos:
// struct FString                 mutname                        ( CPF_Parm )
// unsigned long                  bUserAdded                     ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::AddMutator ( struct FString mutname, unsigned long bUserAdded )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 20252 ];

	AGameInfo_execAddMutator_Parms AddMutator_Parms;
	memcpy ( &AddMutator_Parms.mutname, &mutname, 0xC );
	AddMutator_Parms.bUserAdded = bUserAdded;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.GameInfo.ParseAutomatedTestingOptions
// [0x00020002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm )

void AGameInfo::ParseAutomatedTestingOptions ( struct FString Options )
{
	static UFunction* pFnParseAutomatedTestingOptions = NULL;

	if ( ! pFnParseAutomatedTestingOptions )
		pFnParseAutomatedTestingOptions = (UFunction*) UObject::GObjObjects()->Data[ 20249 ];

	AGameInfo_execParseAutomatedTestingOptions_Parms ParseAutomatedTestingOptions_Parms;
	memcpy ( &ParseAutomatedTestingOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnParseAutomatedTestingOptions, &ParseAutomatedTestingOptions_Parms, NULL );
};

// Function Engine.GameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 20241 ];

	AGameInfo_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 Portal                         ( CPF_Parm )

class UClass* AGameInfo::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 20236 ];

	AGameInfo_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0xC );
	memcpy ( &SetGameType_Parms.Options, &Options, 0xC );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetDefaultGameClassPath
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 Portal                         ( CPF_Parm )

struct FString AGameInfo::eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnGetDefaultGameClassPath = NULL;

	if ( ! pFnGetDefaultGameClassPath )
		pFnGetDefaultGameClassPath = (UFunction*) UObject::GObjObjects()->Data[ 20231 ];

	AGameInfo_eventGetDefaultGameClassPath_Parms GetDefaultGameClassPath_Parms;
	memcpy ( &GetDefaultGameClassPath_Parms.MapName, &MapName, 0xC );
	memcpy ( &GetDefaultGameClassPath_Parms.Options, &Options, 0xC );
	memcpy ( &GetDefaultGameClassPath_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnGetDefaultGameClassPath, &GetDefaultGameClassPath_Parms, NULL );

	return GetDefaultGameClassPath_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetIntOption
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 ParseString                    ( CPF_Parm )
// int                            CurrentValue                   ( CPF_Parm )

int AGameInfo::GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue )
{
	static UFunction* pFnGetIntOption = NULL;

	if ( ! pFnGetIntOption )
		pFnGetIntOption = (UFunction*) UObject::GObjObjects()->Data[ 20225 ];

	AGameInfo_execGetIntOption_Parms GetIntOption_Parms;
	memcpy ( &GetIntOption_Parms.Options, &Options, 0xC );
	memcpy ( &GetIntOption_Parms.ParseString, &ParseString, 0xC );
	GetIntOption_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnGetIntOption, &GetIntOption_Parms, NULL );

	return GetIntOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.HasOption
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 InKey                          ( CPF_Parm )

bool AGameInfo::HasOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnHasOption = NULL;

	if ( ! pFnHasOption )
		pFnHasOption = (UFunction*) UObject::GObjObjects()->Data[ 20218 ];

	AGameInfo_execHasOption_Parms HasOption_Parms;
	memcpy ( &HasOption_Parms.Options, &Options, 0xC );
	memcpy ( &HasOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnHasOption, &HasOption_Parms, NULL );

	return HasOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.ParseOption
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 InKey                          ( CPF_Parm )

struct FString AGameInfo::ParseOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnParseOption = NULL;

	if ( ! pFnParseOption )
		pFnParseOption = (UFunction*) UObject::GObjObjects()->Data[ 20211 ];

	AGameInfo_execParseOption_Parms ParseOption_Parms;
	memcpy ( &ParseOption_Parms.Options, &Options, 0xC );
	memcpy ( &ParseOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnParseOption, &ParseOption_Parms, NULL );

	return ParseOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetKeyValue
// [0x00422002] 
// Parameters infos:
// struct FString                 Pair                           ( CPF_Parm )
// struct FString                 Key                            ( CPF_Parm | CPF_OutParm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm )

void AGameInfo::GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value )
{
	static UFunction* pFnGetKeyValue = NULL;

	if ( ! pFnGetKeyValue )
		pFnGetKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 20207 ];

	AGameInfo_execGetKeyValue_Parms GetKeyValue_Parms;
	memcpy ( &GetKeyValue_Parms.Pair, &Pair, 0xC );

	this->ProcessEvent ( pFnGetKeyValue, &GetKeyValue_Parms, NULL );

	if ( Key )
		memcpy ( Key, &GetKeyValue_Parms.Key, 0xC );

	if ( Value )
		memcpy ( Value, &GetKeyValue_Parms.Value, 0xC );
};

// Function Engine.GameInfo.GrabOption
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm )
// struct FString                 Result                         ( CPF_Parm | CPF_OutParm )

bool AGameInfo::GrabOption ( struct FString* Options, struct FString* Result )
{
	static UFunction* pFnGrabOption = NULL;

	if ( ! pFnGrabOption )
		pFnGrabOption = (UFunction*) UObject::GObjObjects()->Data[ 20203 ];

	AGameInfo_execGrabOption_Parms GrabOption_Parms;

	this->ProcessEvent ( pFnGrabOption, &GrabOption_Parms, NULL );

	if ( Options )
		memcpy ( Options, &GrabOption_Parms.Options, 0xC );

	if ( Result )
		memcpy ( Result, &GrabOption_Parms.Result, 0xC );

	return GrabOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.SetGameSpeed
// [0x00020002] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void AGameInfo::SetGameSpeed ( float T )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 20201 ];

	AGameInfo_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.T = T;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function Engine.GameInfo.DebugPause
// [0x00020002] 
// Parameters infos:

void AGameInfo::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 20198 ];

	AGameInfo_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.GameInfo.ForceClearUnpauseDelegates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ForceClearUnpauseDelegates ( class APlayerController* PC )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 8554 ];

	AGameInfo_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;
	ForceClearUnpauseDelegates_Parms.PC = PC;

	pFnForceClearUnpauseDelegates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );

	pFnForceClearUnpauseDelegates->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.ClearPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventClearPause ( )
{
	static UFunction* pFnClearPause = NULL;

	if ( ! pFnClearPause )
		pFnClearPause = (UFunction*) UObject::GObjObjects()->Data[ 20194 ];

	AGameInfo_eventClearPause_Parms ClearPause_Parms;

	this->ProcessEvent ( pFnClearPause, &ClearPause_Parms, NULL );
};

// Function Engine.GameInfo.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm )

bool AGameInfo::SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 20189 ];

	AGameInfo_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.PC = PC;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0xC );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.GameInfo.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 20187 ];

	AGameInfo_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetServerPort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetServerPort ( )
{
	static UFunction* pFnGetServerPort = NULL;

	if ( ! pFnGetServerPort )
		pFnGetServerPort = (UFunction*) UObject::GObjObjects()->Data[ 20183 ];

	AGameInfo_execGetServerPort_Parms GetServerPort_Parms;

	this->ProcessEvent ( pFnGetServerPort, &GetServerPort_Parms, NULL );

	return GetServerPort_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNumPlayers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = (UFunction*) UObject::GObjObjects()->Data[ 20181 ];

	AGameInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNetworkNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AGameInfo::GetNetworkNumber ( )
{
	static UFunction* pFnGetNetworkNumber = NULL;

	if ( ! pFnGetNetworkNumber )
		pFnGetNetworkNumber = (UFunction*) UObject::GObjObjects()->Data[ 20179 ];

	AGameInfo_execGetNetworkNumber_Parms GetNetworkNumber_Parms;

	pFnGetNetworkNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNetworkNumber, &GetNetworkNumber_Parms, NULL );

	pFnGetNetworkNumber->FunctionFlags |= 0x400;

	return GetNetworkNumber_Parms.ReturnValue;
};

// Function Engine.GameInfo.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void AGameInfo::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 20178 ];

	AGameInfo_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function Engine.GameInfo.KickIdler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::eventKickIdler ( class APlayerController* PC )
{
	static UFunction* pFnKickIdler = NULL;

	if ( ! pFnKickIdler )
		pFnKickIdler = (UFunction*) UObject::GObjObjects()->Data[ 20176 ];

	AGameInfo_eventKickIdler_Parms KickIdler_Parms;
	KickIdler_Parms.PC = PC;

	this->ProcessEvent ( pFnKickIdler, &KickIdler_Parms, NULL );
};

// Function Engine.GameInfo.GameEnding
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventGameEnding ( )
{
	static UFunction* pFnGameEnding = NULL;

	if ( ! pFnGameEnding )
		pFnGameEnding = (UFunction*) UObject::GObjObjects()->Data[ 20175 ];

	AGameInfo_eventGameEnding_Parms GameEnding_Parms;

	this->ProcessEvent ( pFnGameEnding, &GameEnding_Parms, NULL );
};

// Function Engine.GameInfo.NotifyNavigationChanged
// [0x00020000] 
// Parameters infos:
// class ANavigationPoint*        N                              ( CPF_Parm )

void AGameInfo::NotifyNavigationChanged ( class ANavigationPoint* N )
{
	static UFunction* pFnNotifyNavigationChanged = NULL;

	if ( ! pFnNotifyNavigationChanged )
		pFnNotifyNavigationChanged = (UFunction*) UObject::GObjObjects()->Data[ 20173 ];

	AGameInfo_execNotifyNavigationChanged_Parms NotifyNavigationChanged_Parms;
	NotifyNavigationChanged_Parms.N = N;

	this->ProcessEvent ( pFnNotifyNavigationChanged, &NotifyNavigationChanged_Parms, NULL );
};

// Function Engine.GameInfo.DoNavFearCostFallOff
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AGameInfo::DoNavFearCostFallOff ( )
{
	static UFunction* pFnDoNavFearCostFallOff = NULL;

	if ( ! pFnDoNavFearCostFallOff )
		pFnDoNavFearCostFallOff = (UFunction*) UObject::GObjObjects()->Data[ 20172 ];

	AGameInfo_execDoNavFearCostFallOff_Parms DoNavFearCostFallOff_Parms;

	pFnDoNavFearCostFallOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoNavFearCostFallOff, &DoNavFearCostFallOff_Parms, NULL );

	pFnDoNavFearCostFallOff->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 20171 ];

	AGameInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameInfo.ResetLevel
// [0x00020002] 
// Parameters infos:

void AGameInfo::ResetLevel ( )
{
	static UFunction* pFnResetLevel = NULL;

	if ( ! pFnResetLevel )
		pFnResetLevel = (UFunction*) UObject::GObjObjects()->Data[ 20164 ];

	AGameInfo_execResetLevel_Parms ResetLevel_Parms;

	this->ProcessEvent ( pFnResetLevel, &ResetLevel_Parms, NULL );
};

// Function Engine.GameInfo.ShouldReset
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToReset                   ( CPF_Parm )

bool AGameInfo::ShouldReset ( class AActor* ActorToReset )
{
	static UFunction* pFnShouldReset = NULL;

	if ( ! pFnShouldReset )
		pFnShouldReset = (UFunction*) UObject::GObjObjects()->Data[ 20161 ];

	AGameInfo_execShouldReset_Parms ShouldReset_Parms;
	ShouldReset_Parms.ActorToReset = ActorToReset;

	this->ProcessEvent ( pFnShouldReset, &ShouldReset_Parms, NULL );

	return ShouldReset_Parms.ReturnValue;
};

// Function Engine.GameInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 20160 ];

	AGameInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20159 ];

	AGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* AGameInfo::GetCoverReplicator ( )
{
	static UFunction* pFnGetCoverReplicator = NULL;

	if ( ! pFnGetCoverReplicator )
		pFnGetCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 20157 ];

	AGameInfo_execGetCoverReplicator_Parms GetCoverReplicator_Parms;

	this->ProcessEvent ( pFnGetCoverReplicator, &GetCoverReplicator_Parms, NULL );

	return GetCoverReplicator_Parms.ReturnValue;
};

// Function Engine.GameInfo.UseLowGore
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWorldInfo*              WI                             ( CPF_Parm )

bool AGameInfo::UseLowGore ( class AWorldInfo* WI )
{
	static UFunction* pFnUseLowGore = NULL;

	if ( ! pFnUseLowGore )
		pFnUseLowGore = (UFunction*) UObject::GObjObjects()->Data[ 20154 ];

	AGameInfo_execUseLowGore_Parms UseLowGore_Parms;
	UseLowGore_Parms.WI = WI;

	this->ProcessEvent ( pFnUseLowGore, &UseLowGore_Parms, NULL );

	return UseLowGore_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerByID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerID                       ( CPF_Parm )

struct FString AGameInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = (UFunction*) UObject::GObjObjects()->Data[ 20150 ];

	AGameInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20149 ];

	AGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ShouldShowGore
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::ShouldShowGore ( )
{
	static UFunction* pFnShouldShowGore = NULL;

	if ( ! pFnShouldShowGore )
		pFnShouldShowGore = (UFunction*) UObject::GObjObjects()->Data[ 20877 ];

	AGameReplicationInfo_execShouldShowGore_Parms ShouldShowGore_Parms;

	this->ProcessEvent ( pFnShouldShowGore, &ShouldShowGore_Parms, NULL );

	return ShouldShowGore_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsCoopMultiplayerGame ( )
{
	static UFunction* pFnIsCoopMultiplayerGame = NULL;

	if ( ! pFnIsCoopMultiplayerGame )
		pFnIsCoopMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 20875 ];

	AGameReplicationInfo_execIsCoopMultiplayerGame_Parms IsCoopMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsCoopMultiplayerGame, &IsCoopMultiplayerGame_Parms, NULL );

	return IsCoopMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 20873 ];

	AGameReplicationInfo_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );

	return IsMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.EndGame
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::EndGame ( )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20872 ];

	AGameReplicationInfo_execEndGame_Parms EndGame_Parms;

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameReplicationInfo.StartMatch
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 20871 ];

	AGameReplicationInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.CleanupGameDataStore
// [0x00020100] 
// Parameters infos:

void AGameReplicationInfo::CleanupGameDataStore ( )
{
	static UFunction* pFnCleanupGameDataStore = NULL;

	if ( ! pFnCleanupGameDataStore )
		pFnCleanupGameDataStore = (UFunction*) UObject::GObjObjects()->Data[ 20870 ];

	AGameReplicationInfo_execCleanupGameDataStore_Parms CleanupGameDataStore_Parms;

	this->ProcessEvent ( pFnCleanupGameDataStore, &CleanupGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InitializeGameDataStore
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::InitializeGameDataStore ( )
{
	static UFunction* pFnInitializeGameDataStore = NULL;

	if ( ! pFnInitializeGameDataStore )
		pFnInitializeGameDataStore = (UFunction*) UObject::GObjObjects()->Data[ 20868 ];

	AGameReplicationInfo_execInitializeGameDataStore_Parms InitializeGameDataStore_Parms;

	this->ProcessEvent ( pFnInitializeGameDataStore, &InitializeGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedDataBinding
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 20866 ];

	AGameReplicationInfo_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 20864 ];

	AGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.GameReplicationInfo.SortPRIArray
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::SortPRIArray ( )
{
	static UFunction* pFnSortPRIArray = NULL;

	if ( ! pFnSortPRIArray )
		pFnSortPRIArray = (UFunction*) UObject::GObjObjects()->Data[ 20859 ];

	AGameReplicationInfo_execSortPRIArray_Parms SortPRIArray_Parms;

	this->ProcessEvent ( pFnSortPRIArray, &SortPRIArray_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InOrder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  P1                             ( CPF_Parm )
// class APlayerReplicationInfo*  P2                             ( CPF_Parm )

bool AGameReplicationInfo::InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 )
{
	static UFunction* pFnInOrder = NULL;

	if ( ! pFnInOrder )
		pFnInOrder = (UFunction*) UObject::GObjObjects()->Data[ 20853 ];

	AGameReplicationInfo_execInOrder_Parms InOrder_Parms;
	InOrder_Parms.P1 = P1;
	InOrder_Parms.P2 = P2;

	this->ProcessEvent ( pFnInOrder, &InOrder_Parms, NULL );

	return InOrder_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.GetPRIArray
// [0x00420102] 
// Parameters infos:
// TArray< class APlayerReplicationInfo* > pris                           ( CPF_Parm | CPF_OutParm )

void AGameReplicationInfo::GetPRIArray ( TArray< class APlayerReplicationInfo* >* pris )
{
	static UFunction* pFnGetPRIArray = NULL;

	if ( ! pFnGetPRIArray )
		pFnGetPRIArray = (UFunction*) UObject::GObjObjects()->Data[ 20848 ];

	AGameReplicationInfo_execGetPRIArray_Parms GetPRIArray_Parms;

	this->ProcessEvent ( pFnGetPRIArray, &GetPRIArray_Parms, NULL );

	if ( pris )
		memcpy ( pris, &GetPRIArray_Parms.pris, 0xC );
};

// Function Engine.GameReplicationInfo.SetTeam
// [0x00020102] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ATeamInfo*               TI                             ( CPF_Parm )

void AGameReplicationInfo::SetTeam ( int Index, class ATeamInfo* TI )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 20845 ];

	AGameReplicationInfo_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.Index = Index;
	SetTeam_Parms.TI = TI;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.GameReplicationInfo.RemovePRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = (UFunction*) UObject::GObjObjects()->Data[ 20842 ];

	AGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;
	RemovePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.AddPRI
// [0x00020100] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = (UFunction*) UObject::GObjObjects()->Data[ 20840 ];

	AGameReplicationInfo_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.FindPlayerByID
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerID                       ( CPF_Parm )

class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = (UFunction*) UObject::GObjObjects()->Data[ 20836 ];

	AGameReplicationInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.OnSameTeam
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool AGameReplicationInfo::OnSameTeam ( class AActor* A, class AActor* B )
{
	static UFunction* pFnOnSameTeam = NULL;

	if ( ! pFnOnSameTeam )
		pFnOnSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 20832 ];

	AGameReplicationInfo_execOnSameTeam_Parms OnSameTeam_Parms;
	OnSameTeam_Parms.A = A;
	OnSameTeam_Parms.B = B;

	pFnOnSameTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSameTeam, &OnSameTeam_Parms, NULL );

	pFnOnSameTeam->FunctionFlags |= 0x400;

	return OnSameTeam_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 20831 ];

	AGameReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 20830 ];

	AGameReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 20829 ];

	AGameReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20828 ];

	AGameReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HeightFog.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AHeightFog::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 21302 ];

	AHeightFog_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.HeightFog.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AHeightFog::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 21300 ];

	AHeightFog_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.HeightFog.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHeightFog::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21299 ];

	AHeightFog_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HeightFogComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UHeightFogComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 21295 ];

	UHeightFogComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.HUD.OnLostFocusPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  Enable                         ( CPF_Parm )

void AHUD::eventOnLostFocusPause ( unsigned long Enable )
{
	static UFunction* pFnOnLostFocusPause = NULL;

	if ( ! pFnOnLostFocusPause )
		pFnOnLostFocusPause = (UFunction*) UObject::GObjObjects()->Data[ 17908 ];

	AHUD_eventOnLostFocusPause_Parms OnLostFocusPause_Parms;
	OnLostFocusPause_Parms.Enable = Enable;

	this->ProcessEvent ( pFnOnLostFocusPause, &OnLostFocusPause_Parms, NULL );
};

// Function Engine.HUD.PlayerOwnerDied
// [0x00020000] 
// Parameters infos:

void AHUD::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 17907 ];

	AHUD_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function Engine.HUD.GetRYGColorRamp
// [0x00822002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Pct                            ( CPF_Parm )

struct FColor AHUD::GetRYGColorRamp ( float Pct )
{
	static UFunction* pFnGetRYGColorRamp = NULL;

	if ( ! pFnGetRYGColorRamp )
		pFnGetRYGColorRamp = (UFunction*) UObject::GObjObjects()->Data[ 17903 ];

	AHUD_execGetRYGColorRamp_Parms GetRYGColorRamp_Parms;
	GetRYGColorRamp_Parms.Pct = Pct;

	this->ProcessEvent ( pFnGetRYGColorRamp, &GetRYGColorRamp_Parms, NULL );

	return GetRYGColorRamp_Parms.ReturnValue;
};

// Function Engine.HUD.GetFontSizeIndex
// [0x00022002] 
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FontSize                       ( CPF_Parm )

class UFont* AHUD::GetFontSizeIndex ( int FontSize )
{
	static UFunction* pFnGetFontSizeIndex = NULL;

	if ( ! pFnGetFontSizeIndex )
		pFnGetFontSizeIndex = (UFunction*) UObject::GObjObjects()->Data[ 17900 ];

	AHUD_execGetFontSizeIndex_Parms GetFontSizeIndex_Parms;
	GetFontSizeIndex_Parms.FontSize = FontSize;

	this->ProcessEvent ( pFnGetFontSizeIndex, &GetFontSizeIndex_Parms, NULL );

	return GetFontSizeIndex_Parms.ReturnValue;
};

// Function Engine.HUD.DisplayLocalMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = (UFunction*) UObject::GObjObjects()->Data[ 17890 ];

	AHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function Engine.HUD.DrawMessageText
// [0x00020002] 
// Parameters infos:
// struct FHudLocalizedMessage    LocalMessage                   ( CPF_Parm )
// float                          ScreenX                        ( CPF_Parm )
// float                          ScreenY                        ( CPF_Parm )

void AHUD::DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY )
{
	static UFunction* pFnDrawMessageText = NULL;

	if ( ! pFnDrawMessageText )
		pFnDrawMessageText = (UFunction*) UObject::GObjObjects()->Data[ 17886 ];

	AHUD_execDrawMessageText_Parms DrawMessageText_Parms;
	memcpy ( &DrawMessageText_Parms.LocalMessage, &LocalMessage, 0x40 );
	DrawMessageText_Parms.ScreenX = ScreenX;
	DrawMessageText_Parms.ScreenY = ScreenY;

	this->ProcessEvent ( pFnDrawMessageText, &DrawMessageText_Parms, NULL );
};

// Function Engine.HUD.DrawMessage
// [0x00420002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          DX                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void AHUD::DrawMessage ( int I, float PosY, float* DX, float* DY )
{
	static UFunction* pFnDrawMessage = NULL;

	if ( ! pFnDrawMessage )
		pFnDrawMessage = (UFunction*) UObject::GObjObjects()->Data[ 17878 ];

	AHUD_execDrawMessage_Parms DrawMessage_Parms;
	DrawMessage_Parms.I = I;
	DrawMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawMessage, &DrawMessage_Parms, NULL );

	if ( DX )
		*DX = DrawMessage_Parms.DX;

	if ( DY )
		*DY = DrawMessage_Parms.DY;
};

// Function Engine.HUD.GetScreenCoords
// [0x00420002] 
// Parameters infos:
// float                          PosY                           ( CPF_Parm )
// float                          ScreenX                        ( CPF_Parm | CPF_OutParm )
// float                          ScreenY                        ( CPF_Parm | CPF_OutParm )
// struct FHudLocalizedMessage    InMessage                      ( CPF_Parm | CPF_OutParm )

void AHUD::GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage )
{
	static UFunction* pFnGetScreenCoords = NULL;

	if ( ! pFnGetScreenCoords )
		pFnGetScreenCoords = (UFunction*) UObject::GObjObjects()->Data[ 17873 ];

	AHUD_execGetScreenCoords_Parms GetScreenCoords_Parms;
	GetScreenCoords_Parms.PosY = PosY;

	this->ProcessEvent ( pFnGetScreenCoords, &GetScreenCoords_Parms, NULL );

	if ( ScreenX )
		*ScreenX = GetScreenCoords_Parms.ScreenX;

	if ( ScreenY )
		*ScreenY = GetScreenCoords_Parms.ScreenY;

	if ( InMessage )
		memcpy ( InMessage, &GetScreenCoords_Parms.InMessage, 0x40 );
};

// Function Engine.HUD.AddLocalizedMessage
// [0x00024002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// int                            MessageCount                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject )
{
	static UFunction* pFnAddLocalizedMessage = NULL;

	if ( ! pFnAddLocalizedMessage )
		pFnAddLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 17862 ];

	AHUD_execAddLocalizedMessage_Parms AddLocalizedMessage_Parms;
	AddLocalizedMessage_Parms.Index = Index;
	AddLocalizedMessage_Parms.InMessageClass = InMessageClass;
	memcpy ( &AddLocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	AddLocalizedMessage_Parms.Switch = Switch;
	AddLocalizedMessage_Parms.Position = Position;
	AddLocalizedMessage_Parms.Lifetime = Lifetime;
	AddLocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &AddLocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	AddLocalizedMessage_Parms.MessageCount = MessageCount;
	AddLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddLocalizedMessage, &AddLocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.LocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 17849 ];

	AHUD_execLocalizedMessage_Parms LocalizedMessage_Parms;
	LocalizedMessage_Parms.InMessageClass = InMessageClass;
	LocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	memcpy ( &LocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	LocalizedMessage_Parms.Switch = Switch;
	LocalizedMessage_Parms.Position = Position;
	LocalizedMessage_Parms.Lifetime = Lifetime;
	LocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &LocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	LocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.AddConsoleMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 17842 ];

	AHUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0xC );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function Engine.HUD.DisplayConsoleMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayConsoleMessages ( )
{
	static UFunction* pFnDisplayConsoleMessages = NULL;

	if ( ! pFnDisplayConsoleMessages )
		pFnDisplayConsoleMessages = (UFunction*) UObject::GObjObjects()->Data[ 17836 ];

	AHUD_execDisplayConsoleMessages_Parms DisplayConsoleMessages_Parms;

	this->ProcessEvent ( pFnDisplayConsoleMessages, &DisplayConsoleMessages_Parms, NULL );
};

// Function Engine.HUD.Message
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   MsgType                        ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime )
{
	static UFunction* pFnMessage = NULL;

	if ( ! pFnMessage )
		pFnMessage = (UFunction*) UObject::GObjObjects()->Data[ 17831 ];

	AHUD_execMessage_Parms Message_Parms;
	Message_Parms.PRI = PRI;
	memcpy ( &Message_Parms.msg, &msg, 0xC );
	memcpy ( &Message_Parms.MsgType, &MsgType, 0x8 );
	Message_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnMessage, &Message_Parms, NULL );
};

// Function Engine.HUD.ClearMessage
// [0x00420002] 
// Parameters infos:
// struct FHudLocalizedMessage    M                              ( CPF_Parm | CPF_OutParm )

void AHUD::ClearMessage ( struct FHudLocalizedMessage* M )
{
	static UFunction* pFnClearMessage = NULL;

	if ( ! pFnClearMessage )
		pFnClearMessage = (UFunction*) UObject::GObjObjects()->Data[ 17829 ];

	AHUD_execClearMessage_Parms ClearMessage_Parms;

	this->ProcessEvent ( pFnClearMessage, &ClearMessage_Parms, NULL );

	if ( M )
		memcpy ( M, &ClearMessage_Parms.M, 0x40 );
};

// Function Engine.HUD.DisplayBadConnectionAlert
// [0x00020000] 
// Parameters infos:

void AHUD::DisplayBadConnectionAlert ( )
{
	static UFunction* pFnDisplayBadConnectionAlert = NULL;

	if ( ! pFnDisplayBadConnectionAlert )
		pFnDisplayBadConnectionAlert = (UFunction*) UObject::GObjObjects()->Data[ 17828 ];

	AHUD_execDisplayBadConnectionAlert_Parms DisplayBadConnectionAlert_Parms;

	this->ProcessEvent ( pFnDisplayBadConnectionAlert, &DisplayBadConnectionAlert_Parms, NULL );
};

// Function Engine.HUD.DisplayProgressMessage
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayProgressMessage ( )
{
	static UFunction* pFnDisplayProgressMessage = NULL;

	if ( ! pFnDisplayProgressMessage )
		pFnDisplayProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 17819 ];

	AHUD_execDisplayProgressMessage_Parms DisplayProgressMessage_Parms;

	this->ProcessEvent ( pFnDisplayProgressMessage, &DisplayProgressMessage_Parms, NULL );
};

// Function Engine.HUD.DrawEngineHUD
// [0x00020000] 
// Parameters infos:

void AHUD::DrawEngineHUD ( )
{
	static UFunction* pFnDrawEngineHUD = NULL;

	if ( ! pFnDrawEngineHUD )
		pFnDrawEngineHUD = (UFunction*) UObject::GObjObjects()->Data[ 17818 ];

	AHUD_execDrawEngineHUD_Parms DrawEngineHUD_Parms;

	this->ProcessEvent ( pFnDrawEngineHUD, &DrawEngineHUD_Parms, NULL );
};

// Function Engine.HUD.DrawDemoHUD
// [0x00020000] 
// Parameters infos:

void AHUD::DrawDemoHUD ( )
{
	static UFunction* pFnDrawDemoHUD = NULL;

	if ( ! pFnDrawDemoHUD )
		pFnDrawDemoHUD = (UFunction*) UObject::GObjObjects()->Data[ 17817 ];

	AHUD_execDrawDemoHUD_Parms DrawDemoHUD_Parms;

	this->ProcessEvent ( pFnDrawDemoHUD, &DrawDemoHUD_Parms, NULL );
};

// Function Engine.HUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void AHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 17816 ];

	AHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.HUD.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 17812 ];

	AHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.HUD.PreCalcValues
// [0x00020002] 
// Parameters infos:

void AHUD::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = (UFunction*) UObject::GObjObjects()->Data[ 17811 ];

	AHUD_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function Engine.HUD.DrawRoute
// [0x00820002] 
// Parameters infos:
// class APawn*                   Target                         ( CPF_Parm )

void AHUD::DrawRoute ( class APawn* Target )
{
	static UFunction* pFnDrawRoute = NULL;

	if ( ! pFnDrawRoute )
		pFnDrawRoute = (UFunction*) UObject::GObjObjects()->Data[ 17802 ];

	AHUD_execDrawRoute_Parms DrawRoute_Parms;
	DrawRoute_Parms.Target = Target;

	this->ProcessEvent ( pFnDrawRoute, &DrawRoute_Parms, NULL );
};

// Function Engine.HUD.FXStop
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void AHUD::FXStop ( class UClass* aClass )
{
	static UFunction* pFnFXStop = NULL;

	if ( ! pFnFXStop )
		pFnFXStop = (UFunction*) UObject::GObjObjects()->Data[ 17796 ];

	AHUD_execFXStop_Parms FXStop_Parms;
	FXStop_Parms.aClass = aClass;

	this->ProcessEvent ( pFnFXStop, &FXStop_Parms, NULL );
};

// Function Engine.HUD.FXPlay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )
// struct FString                 FXAnimPath                     ( CPF_Parm )

void AHUD::FXPlay ( class UClass* aClass, struct FString FXAnimPath )
{
	static UFunction* pFnFXPlay = NULL;

	if ( ! pFnFXPlay )
		pFnFXPlay = (UFunction*) UObject::GObjObjects()->Data[ 17786 ];

	AHUD_execFXPlay_Parms FXPlay_Parms;
	FXPlay_Parms.aClass = aClass;
	memcpy ( &FXPlay_Parms.FXAnimPath, &FXAnimPath, 0xC );

	this->ProcessEvent ( pFnFXPlay, &FXPlay_Parms, NULL );
};

// Function Engine.HUD.ShouldDisplayDebug
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DebugType                      ( CPF_Parm )

bool AHUD::ShouldDisplayDebug ( struct FName DebugType )
{
	static UFunction* pFnShouldDisplayDebug = NULL;

	if ( ! pFnShouldDisplayDebug )
		pFnShouldDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 17782 ];

	AHUD_execShouldDisplayDebug_Parms ShouldDisplayDebug_Parms;
	memcpy ( &ShouldDisplayDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShouldDisplayDebug, &ShouldDisplayDebug_Parms, NULL );

	return ShouldDisplayDebug_Parms.ReturnValue;
};

// Function Engine.HUD.ShowDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   DebugType                      ( CPF_OptionalParm | CPF_Parm )

void AHUD::ShowDebug ( struct FName DebugType )
{
	static UFunction* pFnShowDebug = NULL;

	if ( ! pFnShowDebug )
		pFnShowDebug = (UFunction*) UObject::GObjObjects()->Data[ 17778 ];

	AHUD_execShowDebug_Parms ShowDebug_Parms;
	memcpy ( &ShowDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShowDebug, &ShowDebug_Parms, NULL );
};

// Function Engine.HUD.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AHUD::SetShowScores ( unsigned long bNewValue )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = (UFunction*) UObject::GObjObjects()->Data[ 17776 ];

	AHUD_execSetShowScores_Parms SetShowScores_Parms;
	SetShowScores_Parms.bNewValue = bNewValue;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowScores ( )
{
	static UFunction* pFnShowScores = NULL;

	if ( ! pFnShowScores )
		pFnShowScores = (UFunction*) UObject::GObjObjects()->Data[ 17775 ];

	AHUD_execShowScores_Parms ShowScores_Parms;

	this->ProcessEvent ( pFnShowScores, &ShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowHUD ( )
{
	static UFunction* pFnShowHUD = NULL;

	if ( ! pFnShowHUD )
		pFnShowHUD = (UFunction*) UObject::GObjObjects()->Data[ 17774 ];

	AHUD_execShowHUD_Parms ShowHUD_Parms;

	this->ProcessEvent ( pFnShowHUD, &ShowHUD_Parms, NULL );
};

// Function Engine.HUD.ToggleHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleHUD ( )
{
	static UFunction* pFnToggleHUD = NULL;

	if ( ! pFnToggleHUD )
		pFnToggleHUD = (UFunction*) UObject::GObjObjects()->Data[ 17773 ];

	AHUD_execToggleHUD_Parms ToggleHUD_Parms;

	this->ProcessEvent ( pFnToggleHUD, &ToggleHUD_Parms, NULL );
};

// Function Engine.HUD.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 17772 ];

	AHUD_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.HUD.SpawnScoreBoard
// [0x00020002] 
// Parameters infos:
// class UClass*                  ScoringType                    ( CPF_Parm )

void AHUD::SpawnScoreBoard ( class UClass* ScoringType )
{
	static UFunction* pFnSpawnScoreBoard = NULL;

	if ( ! pFnSpawnScoreBoard )
		pFnSpawnScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 17770 ];

	AHUD_execSpawnScoreBoard_Parms SpawnScoreBoard_Parms;
	SpawnScoreBoard_Parms.ScoringType = ScoringType;

	this->ProcessEvent ( pFnSpawnScoreBoard, &SpawnScoreBoard_Parms, NULL );
};

// Function Engine.HUD.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 17769 ];

	AHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HUD.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            X1                             ( CPF_Parm )
// int                            Y1                             ( CPF_Parm )
// int                            X2                             ( CPF_Parm )
// int                            Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 17763 ];

	AHUD_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.HUD.Draw3DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor )
{
	static UFunction* pFnDraw3DLine = NULL;

	if ( ! pFnDraw3DLine )
		pFnDraw3DLine = (UFunction*) UObject::GObjObjects()->Data[ 17759 ];

	AHUD_execDraw3DLine_Parms Draw3DLine_Parms;
	memcpy ( &Draw3DLine_Parms.Start, &Start, 0xC );
	memcpy ( &Draw3DLine_Parms.End, &End, 0xC );
	memcpy ( &Draw3DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw3DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw3DLine, &Draw3DLine_Parms, NULL );

	pFnDraw3DLine->FunctionFlags |= 0x400;
};

// Function Engine.IniLocPatcher.ClearReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm )

void UIniLocPatcher::ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadFileDelegate = NULL;

	if ( ! pFnClearReadFileDelegate )
		pFnClearReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 21341 ];

	UIniLocPatcher_execClearReadFileDelegate_Parms ClearReadFileDelegate_Parms;
	memcpy ( &ClearReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadFileDelegate, &ClearReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm )

void UIniLocPatcher::AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadFileDelegate = NULL;

	if ( ! pFnAddReadFileDelegate )
		pFnAddReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 21339 ];

	UIniLocPatcher_execAddReadFileDelegate_Parms AddReadFileDelegate_Parms;
	memcpy ( &AddReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadFileDelegate, &AddReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddFileToDownload
// [0x00020002] 
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm )

void UIniLocPatcher::AddFileToDownload ( struct FString Filename )
{
	static UFunction* pFnAddFileToDownload = NULL;

	if ( ! pFnAddFileToDownload )
		pFnAddFileToDownload = (UFunction*) UObject::GObjObjects()->Data[ 21336 ];

	UIniLocPatcher_execAddFileToDownload_Parms AddFileToDownload_Parms;
	memcpy ( &AddFileToDownload_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnAddFileToDownload, &AddFileToDownload_Parms, NULL );
};

// Function Engine.IniLocPatcher.ProcessIniLocFile
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm )
// TArray< unsigned char >        FileData                       ( CPF_Parm | CPF_OutParm )

void UIniLocPatcher::ProcessIniLocFile ( struct FString Filename, TArray< unsigned char >* FileData )
{
	static UFunction* pFnProcessIniLocFile = NULL;

	if ( ! pFnProcessIniLocFile )
		pFnProcessIniLocFile = (UFunction*) UObject::GObjObjects()->Data[ 21332 ];

	UIniLocPatcher_execProcessIniLocFile_Parms ProcessIniLocFile_Parms;
	memcpy ( &ProcessIniLocFile_Parms.Filename, &Filename, 0xC );

	pFnProcessIniLocFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessIniLocFile, &ProcessIniLocFile_Parms, NULL );

	pFnProcessIniLocFile->FunctionFlags |= 0x400;

	if ( FileData )
		memcpy ( FileData, &ProcessIniLocFile_Parms.FileData, 0xC );
};

// Function Engine.IniLocPatcher.OnReadFileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm )

void UIniLocPatcher::OnReadFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadFileComplete = NULL;

	if ( ! pFnOnReadFileComplete )
		pFnOnReadFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 21326 ];

	UIniLocPatcher_execOnReadFileComplete_Parms OnReadFileComplete_Parms;
	OnReadFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadFileComplete, &OnReadFileComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.DownloadFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::DownloadFiles ( )
{
	static UFunction* pFnDownloadFiles = NULL;

	if ( ! pFnDownloadFiles )
		pFnDownloadFiles = (UFunction*) UObject::GObjObjects()->Data[ 21324 ];

	UIniLocPatcher_execDownloadFiles_Parms DownloadFiles_Parms;

	this->ProcessEvent ( pFnDownloadFiles, &DownloadFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.Init
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 21321 ];

	UIniLocPatcher_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm )

void UIniLocPatcher::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 21318 ];

	UIniLocPatcher_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.InternetInfo.GetBeaconText
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconText ( int I )
{
	static UFunction* pFnGetBeaconText = NULL;

	if ( ! pFnGetBeaconText )
		pFnGetBeaconText = (UFunction*) UObject::GObjObjects()->Data[ 21346 ];

	AInternetInfo_execGetBeaconText_Parms GetBeaconText_Parms;
	GetBeaconText_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconText, &GetBeaconText_Parms, NULL );

	return GetBeaconText_Parms.ReturnValue;
};

// Function Engine.InternetInfo.GetBeaconAddress
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconAddress ( int I )
{
	static UFunction* pFnGetBeaconAddress = NULL;

	if ( ! pFnGetBeaconAddress )
		pFnGetBeaconAddress = (UFunction*) UObject::GObjObjects()->Data[ 21343 ];

	AInternetInfo_execGetBeaconAddress_Parms GetBeaconAddress_Parms;
	GetBeaconAddress_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconAddress, &GetBeaconAddress_Parms, NULL );

	return GetBeaconAddress_Parms.ReturnValue;
};

// Function Engine.InterpActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AInterpActor::ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 21413 ];

	AInterpActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AInterpActor::CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 21411 ];

	AInterpActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.InterpolationChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 21409 ];

	AInterpActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 21404 ];

	AInterpActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 21402 ];

	AInterpActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.InterpActor.PlayMovingSound
// [0x00020102] 
// Parameters infos:
// unsigned long                  bClosing                       ( CPF_Parm )

void AInterpActor::PlayMovingSound ( unsigned long bClosing )
{
	static UFunction* pFnPlayMovingSound = NULL;

	if ( ! pFnPlayMovingSound )
		pFnPlayMovingSound = (UFunction*) UObject::GObjObjects()->Data[ 21398 ];

	AInterpActor_execPlayMovingSound_Parms PlayMovingSound_Parms;
	PlayMovingSound_Parms.bClosing = bClosing;

	this->ProcessEvent ( pFnPlayMovingSound, &PlayMovingSound_Parms, NULL );
};

// Function Engine.InterpActor.FinishedOpen
// [0x00020002] 
// Parameters infos:

void AInterpActor::FinishedOpen ( )
{
	static UFunction* pFnFinishedOpen = NULL;

	if ( ! pFnFinishedOpen )
		pFnFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 21395 ];

	AInterpActor_execFinishedOpen_Parms FinishedOpen_Parms;

	this->ProcessEvent ( pFnFinishedOpen, &FinishedOpen_Parms, NULL );
};

// Function Engine.InterpActor.Restart
// [0x00020002] 
// Parameters infos:

void AInterpActor::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 21393 ];

	AInterpActor_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.InterpActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 21389 ];

	AInterpActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.InterpActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 21385 ];

	AInterpActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.InterpActor.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 21381 ];

	AInterpActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.InterpActor.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AInterpActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 21371 ];

	AInterpActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AInterpActor::SetShadowParentOnAllAttachedComponents ( )
{
	static UFunction* pFnSetShadowParentOnAllAttachedComponents = NULL;

	if ( ! pFnSetShadowParentOnAllAttachedComponents )
		pFnSetShadowParentOnAllAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 21370 ];

	AInterpActor_execSetShadowParentOnAllAttachedComponents_Parms SetShadowParentOnAllAttachedComponents_Parms;

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParentOnAllAttachedComponents, &SetShadowParentOnAllAttachedComponents_Parms, NULL );

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= 0x400;
};

// Function Engine.InterpActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AInterpActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21369 ];

	AInterpActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Inventory.OwnerEvent
// [0x00020000] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventory::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = (UFunction*) UObject::GObjObjects()->Data[ 21707 ];

	AInventory_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.Inventory.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AInventory::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 21702 ];

	AInventory_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Inventory.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AInventory::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 21698 ];

	AInventory_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Inventory.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventory::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 21694 ];

	AInventory_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Inventory.ItemRemovedFromInvManager
// [0x00020000] 
// Parameters infos:

void AInventory::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 21693 ];

	AInventory_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Inventory.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AInventory::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 21690 ];

	AInventory_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Inventory.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventory::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 21687 ];

	AInventory_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Inventory.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 21685 ];

	AInventory_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function Engine.Inventory.GiveTo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::GiveTo ( class APawn* Other )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 18476 ];

	AInventory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.Other = Other;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.Inventory.DetourWeight
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float AInventory::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 21680 ];

	AInventory_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.Inventory.BotDesireability
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

float AInventory::BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C )
{
	static UFunction* pFnBotDesireability = NULL;

	if ( ! pFnBotDesireability )
		pFnBotDesireability = (UFunction*) UObject::GObjObjects()->Data[ 21673 ];

	AInventory_execBotDesireability_Parms BotDesireability_Parms;
	BotDesireability_Parms.PickupHolder = PickupHolder;
	BotDesireability_Parms.P = P;
	BotDesireability_Parms.C = C;

	this->ProcessEvent ( pFnBotDesireability, &BotDesireability_Parms, NULL );

	return BotDesireability_Parms.ReturnValue;
};

// Function Engine.Inventory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 21672 ];

	AInventory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Inventory.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AInventory::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 21670 ];

	AInventory_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Inventory.ActiveRenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::ActiveRenderOverlays ( class AHUD* H )
{
	static UFunction* pFnActiveRenderOverlays = NULL;

	if ( ! pFnActiveRenderOverlays )
		pFnActiveRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 21668 ];

	AInventory_execActiveRenderOverlays_Parms ActiveRenderOverlays_Parms;
	ActiveRenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnActiveRenderOverlays, &ActiveRenderOverlays_Parms, NULL );
};

// Function Engine.Inventory.RenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::RenderOverlays ( class AHUD* H )
{
	static UFunction* pFnRenderOverlays = NULL;

	if ( ! pFnRenderOverlays )
		pFnRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 21666 ];

	AInventory_execRenderOverlays_Parms RenderOverlays_Parms;
	RenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnRenderOverlays, &RenderOverlays_Parms, NULL );
};

// Function Engine.InventoryManager.ClientSyncWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void AInventoryManager::ClientSyncWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnClientSyncWeapon = NULL;

	if ( ! pFnClientSyncWeapon )
		pFnClientSyncWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21801 ];

	AInventoryManager_execClientSyncWeapon_Parms ClientSyncWeapon_Parms;
	ClientSyncWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnClientSyncWeapon, &ClientSyncWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 21796 ];

	AInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.InventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21794 ];

	AInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.CancelWeaponChange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInventoryManager::CancelWeaponChange ( )
{
	static UFunction* pFnCancelWeaponChange = NULL;

	if ( ! pFnCancelWeaponChange )
		pFnCancelWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 21792 ];

	AInventoryManager_execCancelWeaponChange_Parms CancelWeaponChange_Parms;

	this->ProcessEvent ( pFnCancelWeaponChange, &CancelWeaponChange_Parms, NULL );

	return CancelWeaponChange_Parms.ReturnValue;
};

// Function Engine.InventoryManager.ServerSetCurrentWeapon
// [0x002200C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21789 ];

	AInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetPendingWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetPendingWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetPendingWeapon = NULL;

	if ( ! pFnSetPendingWeapon )
		pFnSetPendingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21787 ];

	AInventoryManager_execSetPendingWeapon_Parms SetPendingWeapon_Parms;
	SetPendingWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetPendingWeapon, &SetPendingWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetCurrentWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21784 ];

	AInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.GetBestWeapon
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

class AWeapon* AInventoryManager::GetBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnGetBestWeapon = NULL;

	if ( ! pFnGetBestWeapon )
		pFnGetBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21777 ];

	AInventoryManager_execGetBestWeapon_Parms GetBestWeapon_Parms;
	GetBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnGetBestWeapon, &GetBestWeapon_Parms, NULL );

	return GetBestWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.GetWeaponRatingFor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )

float AInventoryManager::GetWeaponRatingFor ( class AWeapon* W )
{
	static UFunction* pFnGetWeaponRatingFor = NULL;

	if ( ! pFnGetWeaponRatingFor )
		pFnGetWeaponRatingFor = (UFunction*) UObject::GObjObjects()->Data[ 21773 ];

	AInventoryManager_execGetWeaponRatingFor_Parms GetWeaponRatingFor_Parms;
	GetWeaponRatingFor_Parms.W = W;

	this->ProcessEvent ( pFnGetWeaponRatingFor, &GetWeaponRatingFor_Parms, NULL );

	return GetWeaponRatingFor_Parms.ReturnValue;
};

// Function Engine.InventoryManager.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 ThisWeapon                     ( CPF_Parm )

bool AInventoryManager::IsActiveWeapon ( class AWeapon* ThisWeapon )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 21770 ];

	AInventoryManager_execIsActiveWeapon_Parms IsActiveWeapon_Parms;
	IsActiveWeapon_Parms.ThisWeapon = ThisWeapon;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.StopFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 21768 ];

	AInventoryManager_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.InventoryManager.StartFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 21766 ];

	AInventoryManager_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.InventoryManager.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventoryManager::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 21763 ];

	AInventoryManager_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.InventoryManager.OwnerEvent
// [0x00020102] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventoryManager::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = (UFunction*) UObject::GObjObjects()->Data[ 21760 ];

	AInventoryManager_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.InventoryManager.ModifyDamage
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

int AInventoryManager::ModifyDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 21753 ];

	AInventoryManager_execModifyDamage_Parms ModifyDamage_Parms;
	ModifyDamage_Parms.Damage = Damage;
	ModifyDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ModifyDamage_Parms.Momentum, &Momentum, 0xC );
	ModifyDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	return ModifyDamage_Parms.ReturnValue;
};

// Function Engine.InventoryManager.DiscardInventory
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 21749 ];

	AInventoryManager_eventDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.InventoryManager.RemoveFromInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              ItemToRemove                   ( CPF_Parm )

void AInventoryManager::RemoveFromInventory ( class AInventory* ItemToRemove )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 21745 ];

	AInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.ItemToRemove = ItemToRemove;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function Engine.InventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool AInventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 21739 ];

	AInventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.CreateInventory
// [0x00024102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInventoryItemClass          ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 21734 ];

	AInventoryManager_execCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInventoryItemClass = NewInventoryItemClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.FindInventoryType
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 21729 ];

	AInventoryManager_eventFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.InventoryManager.HandlePickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventoryManager::HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnHandlePickupQuery = NULL;

	if ( ! pFnHandlePickupQuery )
		pFnHandlePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 21724 ];

	AInventoryManager_execHandlePickupQuery_Parms HandlePickupQuery_Parms;
	HandlePickupQuery_Parms.ItemClass = ItemClass;
	HandlePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnHandlePickupQuery, &HandlePickupQuery_Parms, NULL );

	return HandlePickupQuery_Parms.ReturnValue;
};

// Function Engine.InventoryManager.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 21723 ];

	AInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.SetupFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AInventoryManager::SetupFor ( class APawn* P )
{
	static UFunction* pFnSetupFor = NULL;

	if ( ! pFnSetupFor )
		pFnSetupFor = (UFunction*) UObject::GObjObjects()->Data[ 21721 ];

	AInventoryManager_execSetupFor_Parms SetupFor_Parms;
	SetupFor_Parms.P = P;

	this->ProcessEvent ( pFnSetupFor, &SetupFor_Parms, NULL );
};

// Function Engine.InventoryManager.DumpWeaponStats
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void AInventoryManager::DumpWeaponStats ( )
{
	static UFunction* pFnDumpWeaponStats = NULL;

	if ( ! pFnDumpWeaponStats )
		pFnDumpWeaponStats = (UFunction*) UObject::GObjObjects()->Data[ 21719 ];

	AInventoryManager_execDumpWeaponStats_Parms DumpWeaponStats_Parms;

	this->ProcessEvent ( pFnDumpWeaponStats, &DumpWeaponStats_Parms, NULL );
};

// Function Engine.InventoryManager.InventoryActors
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm | CPF_OutParm )

void AInventoryManager::InventoryActors ( class UClass* BaseClass, class AInventory** Inv )
{
	static UFunction* pFnInventoryActors = NULL;

	if ( ! pFnInventoryActors )
		pFnInventoryActors = (UFunction*) UObject::GObjObjects()->Data[ 21716 ];

	AInventoryManager_execInventoryActors_Parms InventoryActors_Parms;
	InventoryActors_Parms.BaseClass = BaseClass;

	pFnInventoryActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInventoryActors, &InventoryActors_Parms, NULL );

	pFnInventoryActors->FunctionFlags |= 0x400;

	if ( Inv )
		*Inv = InventoryActors_Parms.Inv;
};

// Function Engine.InventoryManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21715 ];

	AInventoryManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LadderVolume.PhysicsChangedFor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ALadderVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 21948 ];

	ALadderVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.LadderVolume.PawnLeavingVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnLeavingVolume ( class APawn* P )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 21945 ];

	ALadderVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.LadderVolume.PawnEnteredVolume
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnEnteredVolume ( class APawn* P )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 21942 ];

	ALadderVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.LadderVolume.InUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Ignored                        ( CPF_Parm )

bool ALadderVolume::InUse ( class APawn* Ignored )
{
	static UFunction* pFnInUse = NULL;

	if ( ! pFnInUse )
		pFnInUse = (UFunction*) UObject::GObjObjects()->Data[ 21938 ];

	ALadderVolume_execInUse_Parms InUse_Parms;
	InUse_Parms.Ignored = Ignored;

	this->ProcessEvent ( pFnInUse, &InUse_Parms, NULL );

	return InUse_Parms.ReturnValue;
};

// Function Engine.LadderVolume.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ALadderVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21934 ];

	ALadderVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LevelStreamingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALevelStreamingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 22089 ];

	ALevelStreamingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.LiftCenter.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 22105 ];

	ALiftCenter_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 22102 ];

	ALiftCenter_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ALiftCenter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 22099 ];

	ALiftCenter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.LiftCenter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ALiftCenter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22098 ];

	ALiftCenter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LiftExit.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 22119 ];

	ALiftExit_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftExit.WaitForLift
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ALiftExit::WaitForLift ( class APawn* Other )
{
	static UFunction* pFnWaitForLift = NULL;

	if ( ! pFnWaitForLift )
		pFnWaitForLift = (UFunction*) UObject::GObjObjects()->Data[ 22117 ];

	ALiftExit_execWaitForLift_Parms WaitForLift_Parms;
	WaitForLift_Parms.Other = Other;

	this->ProcessEvent ( pFnWaitForLift, &WaitForLift_Parms, NULL );
};

// Function Engine.LiftExit.CanBeReachedFromLiftBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::CanBeReachedFromLiftBy ( class APawn* Other )
{
	static UFunction* pFnCanBeReachedFromLiftBy = NULL;

	if ( ! pFnCanBeReachedFromLiftBy )
		pFnCanBeReachedFromLiftBy = (UFunction*) UObject::GObjObjects()->Data[ 22114 ];

	ALiftExit_execCanBeReachedFromLiftBy_Parms CanBeReachedFromLiftBy_Parms;
	CanBeReachedFromLiftBy_Parms.Other = Other;

	this->ProcessEvent ( pFnCanBeReachedFromLiftBy, &CanBeReachedFromLiftBy_Parms, NULL );

	return CanBeReachedFromLiftBy_Parms.ReturnValue;
};

// Function Engine.Texture2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* UTexture2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 6389 ];

	UTexture2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ULocalPlayer::TouchPlayerPostProcessChain ( )
{
	static UFunction* pFnTouchPlayerPostProcessChain = NULL;

	if ( ! pFnTouchPlayerPostProcessChain )
		pFnTouchPlayerPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 22255 ];

	ULocalPlayer_execTouchPlayerPostProcessChain_Parms TouchPlayerPostProcessChain_Parms;

	pFnTouchPlayerPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchPlayerPostProcessChain, &TouchPlayerPostProcessChain_Parms, NULL );

	pFnTouchPlayerPostProcessChain->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

class UPostProcessChain* ULocalPlayer::GetPostProcessChain ( int InIndex )
{
	static UFunction* pFnGetPostProcessChain = NULL;

	if ( ! pFnGetPostProcessChain )
		pFnGetPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 22252 ];

	ULocalPlayer_execGetPostProcessChain_Parms GetPostProcessChain_Parms;
	GetPostProcessChain_Parms.InIndex = InIndex;

	pFnGetPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostProcessChain, &GetPostProcessChain_Parms, NULL );

	pFnGetPostProcessChain->FunctionFlags |= 0x400;

	return GetPostProcessChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULocalPlayer::RemoveAllPostProcessingChains ( )
{
	static UFunction* pFnRemoveAllPostProcessingChains = NULL;

	if ( ! pFnRemoveAllPostProcessingChains )
		pFnRemoveAllPostProcessingChains = (UFunction*) UObject::GObjObjects()->Data[ 22250 ];

	ULocalPlayer_execRemoveAllPostProcessingChains_Parms RemoveAllPostProcessingChains_Parms;

	pFnRemoveAllPostProcessingChains->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllPostProcessingChains, &RemoveAllPostProcessingChains_Parms, NULL );

	pFnRemoveAllPostProcessingChains->FunctionFlags |= 0x400;

	return RemoveAllPostProcessingChains_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemovePostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

bool ULocalPlayer::RemovePostProcessingChain ( int InIndex )
{
	static UFunction* pFnRemovePostProcessingChain = NULL;

	if ( ! pFnRemovePostProcessingChain )
		pFnRemovePostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 22247 ];

	ULocalPlayer_execRemovePostProcessingChain_Parms RemovePostProcessingChain_Parms;
	RemovePostProcessingChain_Parms.InIndex = InIndex;

	pFnRemovePostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePostProcessingChain, &RemovePostProcessingChain_Parms, NULL );

	pFnRemovePostProcessingChain->FunctionFlags |= 0x400;

	return RemovePostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.InsertPostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPostProcessChain*       InChain                        ( CPF_Parm )
// int                            InIndex                        ( CPF_Parm )
// unsigned long                  bInClone                       ( CPF_Parm )

bool ULocalPlayer::InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone )
{
	static UFunction* pFnInsertPostProcessingChain = NULL;

	if ( ! pFnInsertPostProcessingChain )
		pFnInsertPostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 22242 ];

	ULocalPlayer_execInsertPostProcessingChain_Parms InsertPostProcessingChain_Parms;
	InsertPostProcessingChain_Parms.InChain = InChain;
	InsertPostProcessingChain_Parms.InIndex = InIndex;
	InsertPostProcessingChain_Parms.bInClone = bInClone;

	pFnInsertPostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertPostProcessingChain, &InsertPostProcessingChain_Parms, NULL );

	pFnInsertPostProcessingChain->FunctionFlags |= 0x400;

	return InsertPostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SetControllerId
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewControllerId                ( CPF_Parm )

void ULocalPlayer::SetControllerId ( int NewControllerId )
{
	static UFunction* pFnSetControllerId = NULL;

	if ( ! pFnSetControllerId )
		pFnSetControllerId = (UFunction*) UObject::GObjObjects()->Data[ 22238 ];

	ULocalPlayer_execSetControllerId_Parms SetControllerId_Parms;
	SetControllerId_Parms.NewControllerId = NewControllerId;

	this->ProcessEvent ( pFnSetControllerId, &SetControllerId_Parms, NULL );
};

// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// [0x00020102] 
// Parameters infos:

void ULocalPlayer::ClearPostProcessSettingsOverride ( )
{
	static UFunction* pFnClearPostProcessSettingsOverride = NULL;

	if ( ! pFnClearPostProcessSettingsOverride )
		pFnClearPostProcessSettingsOverride = (UFunction*) UObject::GObjObjects()->Data[ 22237 ];

	ULocalPlayer_execClearPostProcessSettingsOverride_Parms ClearPostProcessSettingsOverride_Parms;

	this->ProcessEvent ( pFnClearPostProcessSettingsOverride, &ClearPostProcessSettingsOverride_Parms, NULL );
};

// Function Engine.LocalPlayer.UpdateOverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm )

void ULocalPlayer::UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings )
{
	static UFunction* pFnUpdateOverridePostProcessSettings = NULL;

	if ( ! pFnUpdateOverridePostProcessSettings )
		pFnUpdateOverridePostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 22235 ];

	ULocalPlayer_execUpdateOverridePostProcessSettings_Parms UpdateOverridePostProcessSettings_Parms;
	memcpy ( &UpdateOverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0x134 );

	this->ProcessEvent ( pFnUpdateOverridePostProcessSettings, &UpdateOverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.ResetSoundGroupVolOnstop
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm )

void ULocalPlayer::ResetSoundGroupVolOnstop ( class UAudioComponent* AC )
{
	static UFunction* pFnResetSoundGroupVolOnstop = NULL;

	if ( ! pFnResetSoundGroupVolOnstop )
		pFnResetSoundGroupVolOnstop = (UFunction*) UObject::GObjObjects()->Data[ 22233 ];

	ULocalPlayer_execResetSoundGroupVolOnstop_Parms ResetSoundGroupVolOnstop_Parms;
	ResetSoundGroupVolOnstop_Parms.AC = AC;

	pFnResetSoundGroupVolOnstop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSoundGroupVolOnstop, &ResetSoundGroupVolOnstop_Parms, NULL );

	pFnResetSoundGroupVolOnstop->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.OverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm )
// float                          StartBlendTime                 ( CPF_Parm )

void ULocalPlayer::OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime )
{
	static UFunction* pFnOverridePostProcessSettings = NULL;

	if ( ! pFnOverridePostProcessSettings )
		pFnOverridePostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 22230 ];

	ULocalPlayer_execOverridePostProcessSettings_Parms OverridePostProcessSettings_Parms;
	memcpy ( &OverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0x134 );
	OverridePostProcessSettings_Parms.StartBlendTime = StartBlendTime;

	this->ProcessEvent ( pFnOverridePostProcessSettings, &OverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.GetActorVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool ULocalPlayer::GetActorVisibility ( class AActor* TestActor )
{
	static UFunction* pFnGetActorVisibility = NULL;

	if ( ! pFnGetActorVisibility )
		pFnGetActorVisibility = (UFunction*) UObject::GObjObjects()->Data[ 22227 ];

	ULocalPlayer_execGetActorVisibility_Parms GetActorVisibility_Parms;
	GetActorVisibility_Parms.TestActor = TestActor;

	pFnGetActorVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorVisibility, &GetActorVisibility_Parms, NULL );

	pFnGetActorVisibility->FunctionFlags |= 0x400;

	return GetActorVisibility_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SendSplitJoin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::SendSplitJoin ( )
{
	static UFunction* pFnSendSplitJoin = NULL;

	if ( ! pFnSendSplitJoin )
		pFnSendSplitJoin = (UFunction*) UObject::GObjObjects()->Data[ 17602 ];

	ULocalPlayer_execSendSplitJoin_Parms SendSplitJoin_Parms;

	pFnSendSplitJoin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSplitJoin, &SendSplitJoin_Parms, NULL );

	pFnSendSplitJoin->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.SpawnPlayActor
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

bool ULocalPlayer::SpawnPlayActor ( struct FString URL, struct FString* OutError )
{
	static UFunction* pFnSpawnPlayActor = NULL;

	if ( ! pFnSpawnPlayActor )
		pFnSpawnPlayActor = (UFunction*) UObject::GObjObjects()->Data[ 17601 ];

	ULocalPlayer_execSpawnPlayActor_Parms SpawnPlayActor_Parms;
	memcpy ( &SpawnPlayActor_Parms.URL, &URL, 0xC );

	pFnSpawnPlayActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPlayActor, &SpawnPlayActor_Parms, NULL );

	pFnSpawnPlayActor->FunctionFlags |= 0x400;

	if ( OutError )
		memcpy ( OutError, &SpawnPlayActor_Parms.OutError, 0xC );

	return SpawnPlayActor_Parms.ReturnValue;
};

// Function Engine.Material.GetTextures
// [0x00020002] 
// Parameters infos:
// TArray< class UTexture* >      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

TArray< class UTexture* > UMaterial::GetTextures ( )
{
	static UFunction* pFnGetTextures = NULL;

	if ( ! pFnGetTextures )
		pFnGetTextures = (UFunction*) UObject::GObjObjects()->Data[ 16812 ];

	UMaterial_execGetTextures_Parms GetTextures_Parms;

	this->ProcessEvent ( pFnGetTextures, &GetTextures_Parms, NULL );

	return GetTextures_Parms.ReturnValue;
};

// Function Engine.MatineeActor.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMatineeActor::eventUpdate ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 22628 ];

	AMatineeActor_eventUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceTimeVarying* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceTimeVarying = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceTimeVarying )
		pFnCreateAndSetMaterialInstanceTimeVarying = (UFunction*) UObject::GObjObjects()->Data[ 8804 ];

	UMeshComponent_execCreateAndSetMaterialInstanceTimeVarying_Parms CreateAndSetMaterialInstanceTimeVarying_Parms;
	CreateAndSetMaterialInstanceTimeVarying_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceTimeVarying, &CreateAndSetMaterialInstanceTimeVarying_Parms, NULL );

	return CreateAndSetMaterialInstanceTimeVarying_Parms.ReturnValue;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 8800 ];

	UMeshComponent_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;
	CreateAndSetMaterialInstanceConstant_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Engine.MeshComponent.GetNumElements
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UMeshComponent::GetNumElements ( )
{
	static UFunction* pFnGetNumElements = NULL;

	if ( ! pFnGetNumElements )
		pFnGetNumElements = (UFunction*) UObject::GObjObjects()->Data[ 8798 ];

	UMeshComponent_execGetNumElements_Parms GetNumElements_Parms;

	pFnGetNumElements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumElements, &GetNumElements_Parms, NULL );

	pFnGetNumElements->FunctionFlags |= 0x400;

	return GetNumElements_Parms.ReturnValue;
};

// Function Engine.MeshComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void UMeshComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 8795 ];

	UMeshComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetMaterial ( int ElementIndex )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 8792 ];

	UMeshComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.MultiFont.GetResolutionTestTableIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UMultiFont::GetResolutionTestTableIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionTestTableIndex = NULL;

	if ( ! pFnGetResolutionTestTableIndex )
		pFnGetResolutionTestTableIndex = (UFunction*) UObject::GObjObjects()->Data[ 22709 ];

	UMultiFont_execGetResolutionTestTableIndex_Parms GetResolutionTestTableIndex_Parms;
	GetResolutionTestTableIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionTestTableIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionTestTableIndex, &GetResolutionTestTableIndex_Parms, NULL );

	pFnGetResolutionTestTableIndex->FunctionFlags |= 0x400;

	return GetResolutionTestTableIndex_Parms.ReturnValue;
};

// Function Engine.Mutator.GetSeamlessTravelActorList
// [0x00420002] 
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm )

void AMutator::GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 22768 ];

	AMutator_execGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.Mutator.InitMutator
// [0x00420002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm )

void AMutator::InitMutator ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitMutator = NULL;

	if ( ! pFnInitMutator )
		pFnInitMutator = (UFunction*) UObject::GObjObjects()->Data[ 22765 ];

	AMutator_execInitMutator_Parms InitMutator_Parms;
	memcpy ( &InitMutator_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitMutator, &InitMutator_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitMutator_Parms.ErrorMessage, 0xC );
};

// Function Engine.Mutator.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 22762 ];

	AMutator_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.Mutator.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AMutator::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 22758 ];

	AMutator_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.Mutator.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 22755 ];

	AMutator_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogin
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AMutator::NotifyLogin ( class AController* NewPlayer )
{
	static UFunction* pFnNotifyLogin = NULL;

	if ( ! pFnNotifyLogin )
		pFnNotifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 22753 ];

	AMutator_execNotifyLogin_Parms NotifyLogin_Parms;
	NotifyLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnNotifyLogin, &NotifyLogin_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AMutator::NotifyLogout ( class AController* Exiting )
{
	static UFunction* pFnNotifyLogout = NULL;

	if ( ! pFnNotifyLogout )
		pFnNotifyLogout = (UFunction*) UObject::GObjObjects()->Data[ 22751 ];

	AMutator_execNotifyLogout_Parms NotifyLogout_Parms;
	NotifyLogout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnNotifyLogout, &NotifyLogout_Parms, NULL );
};

// Function Engine.Mutator.ParseChatPercVar
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Who                            ( CPF_Parm )
// struct FString                 Cmd                            ( CPF_Parm )

struct FString AMutator::ParseChatPercVar ( class AController* Who, struct FString Cmd )
{
	static UFunction* pFnParseChatPercVar = NULL;

	if ( ! pFnParseChatPercVar )
		pFnParseChatPercVar = (UFunction*) UObject::GObjObjects()->Data[ 22747 ];

	AMutator_execParseChatPercVar_Parms ParseChatPercVar_Parms;
	ParseChatPercVar_Parms.Who = Who;
	memcpy ( &ParseChatPercVar_Parms.Cmd, &Cmd, 0xC );

	this->ProcessEvent ( pFnParseChatPercVar, &ParseChatPercVar_Parms, NULL );

	return ParseChatPercVar_Parms.ReturnValue;
};

// Function Engine.Mutator.GetServerPlayers
// [0x00420000] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm )

void AMutator::GetServerPlayers ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerPlayers = NULL;

	if ( ! pFnGetServerPlayers )
		pFnGetServerPlayers = (UFunction*) UObject::GObjObjects()->Data[ 22745 ];

	AMutator_execGetServerPlayers_Parms GetServerPlayers_Parms;

	this->ProcessEvent ( pFnGetServerPlayers, &GetServerPlayers_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerPlayers_Parms.ServerState, 0x60 );
};

// Function Engine.Mutator.GetServerDetails
// [0x00420002] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm )

void AMutator::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerDetails = NULL;

	if ( ! pFnGetServerDetails )
		pFnGetServerDetails = (UFunction*) UObject::GObjObjects()->Data[ 22742 ];

	AMutator_execGetServerDetails_Parms GetServerDetails_Parms;

	this->ProcessEvent ( pFnGetServerDetails, &GetServerDetails_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerDetails_Parms.ServerState, 0x60 );
};

// Function Engine.Mutator.CheckReplacement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckReplacement ( class AActor* Other )
{
	static UFunction* pFnCheckReplacement = NULL;

	if ( ! pFnCheckReplacement )
		pFnCheckReplacement = (UFunction*) UObject::GObjObjects()->Data[ 22739 ];

	AMutator_execCheckReplacement_Parms CheckReplacement_Parms;
	CheckReplacement_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckReplacement, &CheckReplacement_Parms, NULL );

	return CheckReplacement_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 22735 ];

	AMutator_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.Mutator.IsRelevant
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::IsRelevant ( class AActor* Other )
{
	static UFunction* pFnIsRelevant = NULL;

	if ( ! pFnIsRelevant )
		pFnIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 22731 ];

	AMutator_execIsRelevant_Parms IsRelevant_Parms;
	IsRelevant_Parms.Other = Other;

	this->ProcessEvent ( pFnIsRelevant, &IsRelevant_Parms, NULL );

	return IsRelevant_Parms.ReturnValue;
};

// Function Engine.Mutator.AlwaysKeep
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::AlwaysKeep ( class AActor* Other )
{
	static UFunction* pFnAlwaysKeep = NULL;

	if ( ! pFnAlwaysKeep )
		pFnAlwaysKeep = (UFunction*) UObject::GObjObjects()->Data[ 22728 ];

	AMutator_execAlwaysKeep_Parms AlwaysKeep_Parms;
	AlwaysKeep_Parms.Other = Other;

	this->ProcessEvent ( pFnAlwaysKeep, &AlwaysKeep_Parms, NULL );

	return AlwaysKeep_Parms.ReturnValue;
};

// Function Engine.Mutator.AddMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                M                              ( CPF_Parm )

void AMutator::AddMutator ( class AMutator* M )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 22726 ];

	AMutator_execAddMutator_Parms AddMutator_Parms;
	AddMutator_Parms.M = M;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.Mutator.ModifyPlayer
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AMutator::ModifyPlayer ( class APawn* Other )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22724 ];

	AMutator_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.Mutator.ModifyLogin
// [0x00420002] 
// Parameters infos:
// struct FString                 Portal                         ( CPF_Parm | CPF_OutParm )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm )

void AMutator::ModifyLogin ( struct FString* Portal, struct FString* Options )
{
	static UFunction* pFnModifyLogin = NULL;

	if ( ! pFnModifyLogin )
		pFnModifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 22721 ];

	AMutator_execModifyLogin_Parms ModifyLogin_Parms;

	this->ProcessEvent ( pFnModifyLogin, &ModifyLogin_Parms, NULL );

	if ( Portal )
		memcpy ( Portal, &ModifyLogin_Parms.Portal, 0xC );

	if ( Options )
		memcpy ( Options, &ModifyLogin_Parms.Options, 0xC );
};

// Function Engine.Mutator.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm )
// class APlayerController*       Sender                         ( CPF_Parm )

void AMutator::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 22718 ];

	AMutator_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.Mutator.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 22717 ];

	AMutator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Mutator.MutatorIsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::MutatorIsAllowed ( )
{
	static UFunction* pFnMutatorIsAllowed = NULL;

	if ( ! pFnMutatorIsAllowed )
		pFnMutatorIsAllowed = (UFunction*) UObject::GObjObjects()->Data[ 22715 ];

	AMutator_execMutatorIsAllowed_Parms MutatorIsAllowed_Parms;

	this->ProcessEvent ( pFnMutatorIsAllowed, &MutatorIsAllowed_Parms, NULL );

	return MutatorIsAllowed_Parms.ReturnValue;
};

// Function Engine.Mutator.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22714 ];

	AMutator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Settings.UpdateFromURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm )

void USettings::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = (UFunction*) UObject::GObjObjects()->Data[ 23602 ];

	USettings_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	pFnUpdateFromURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	pFnUpdateFromURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0xC );
};

// Function Engine.Settings.BuildURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm )

void USettings::BuildURL ( struct FString* URL )
{
	static UFunction* pFnBuildURL = NULL;

	if ( ! pFnBuildURL )
		pFnBuildURL = (UFunction*) UObject::GObjObjects()->Data[ 23600 ];

	USettings_execBuildURL_Parms BuildURL_Parms;

	pFnBuildURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildURL, &BuildURL_Parms, NULL );

	pFnBuildURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &BuildURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendContextsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm )

void USettings::AppendContextsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendContextsToURL = NULL;

	if ( ! pFnAppendContextsToURL )
		pFnAppendContextsToURL = (UFunction*) UObject::GObjObjects()->Data[ 23598 ];

	USettings_execAppendContextsToURL_Parms AppendContextsToURL_Parms;

	pFnAppendContextsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendContextsToURL, &AppendContextsToURL_Parms, NULL );

	pFnAppendContextsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendContextsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendPropertiesToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm )

void USettings::AppendPropertiesToURL ( struct FString* URL )
{
	static UFunction* pFnAppendPropertiesToURL = NULL;

	if ( ! pFnAppendPropertiesToURL )
		pFnAppendPropertiesToURL = (UFunction*) UObject::GObjObjects()->Data[ 23596 ];

	USettings_execAppendPropertiesToURL_Parms AppendPropertiesToURL_Parms;

	pFnAppendPropertiesToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendPropertiesToURL, &AppendPropertiesToURL_Parms, NULL );

	pFnAppendPropertiesToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendPropertiesToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendDataBindingsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm )

void USettings::AppendDataBindingsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendDataBindingsToURL = NULL;

	if ( ! pFnAppendDataBindingsToURL )
		pFnAppendDataBindingsToURL = (UFunction*) UObject::GObjObjects()->Data[ 23594 ];

	USettings_execAppendDataBindingsToURL_Parms AppendDataBindingsToURL_Parms;

	pFnAppendDataBindingsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendDataBindingsToURL, &AppendDataBindingsToURL_Parms, NULL );

	pFnAppendDataBindingsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendDataBindingsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedStringSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FLocalizedStringSetting > QoSSettings                    ( CPF_Parm | CPF_OutParm )

void USettings::GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings )
{
	static UFunction* pFnGetQoSAdvertisedStringSettings = NULL;

	if ( ! pFnGetQoSAdvertisedStringSettings )
		pFnGetQoSAdvertisedStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 23591 ];

	USettings_execGetQoSAdvertisedStringSettings_Parms GetQoSAdvertisedStringSettings_Parms;

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedStringSettings, &GetQoSAdvertisedStringSettings_Parms, NULL );

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= 0x400;

	if ( QoSSettings )
		memcpy ( QoSSettings, &GetQoSAdvertisedStringSettings_Parms.QoSSettings, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedProperties
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FSettingsProperty > QoSProps                       ( CPF_Parm | CPF_OutParm )

void USettings::GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps )
{
	static UFunction* pFnGetQoSAdvertisedProperties = NULL;

	if ( ! pFnGetQoSAdvertisedProperties )
		pFnGetQoSAdvertisedProperties = (UFunction*) UObject::GObjObjects()->Data[ 23588 ];

	USettings_execGetQoSAdvertisedProperties_Parms GetQoSAdvertisedProperties_Parms;

	pFnGetQoSAdvertisedProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedProperties, &GetQoSAdvertisedProperties_Parms, NULL );

	pFnGetQoSAdvertisedProperties->FunctionFlags |= 0x400;

	if ( QoSProps )
		memcpy ( QoSProps, &GetQoSAdvertisedProperties_Parms.QoSProps, 0xC );
};

// Function Engine.Settings.GetRangedPropertyValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool USettings::GetRangedPropertyValue ( int PropertyId, float* OutValue )
{
	static UFunction* pFnGetRangedPropertyValue = NULL;

	if ( ! pFnGetRangedPropertyValue )
		pFnGetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 23584 ];

	USettings_execGetRangedPropertyValue_Parms GetRangedPropertyValue_Parms;
	GetRangedPropertyValue_Parms.PropertyId = PropertyId;

	pFnGetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedPropertyValue, &GetRangedPropertyValue_Parms, NULL );

	pFnGetRangedPropertyValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedPropertyValue_Parms.OutValue;

	return GetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetRangedPropertyValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool USettings::SetRangedPropertyValue ( int PropertyId, float NewValue )
{
	static UFunction* pFnSetRangedPropertyValue = NULL;

	if ( ! pFnSetRangedPropertyValue )
		pFnSetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 23580 ];

	USettings_execSetRangedPropertyValue_Parms SetRangedPropertyValue_Parms;
	SetRangedPropertyValue_Parms.PropertyId = PropertyId;
	SetRangedPropertyValue_Parms.NewValue = NewValue;

	pFnSetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedPropertyValue, &SetRangedPropertyValue_Parms, NULL );

	pFnSetRangedPropertyValue->FunctionFlags |= 0x400;

	return SetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetPropertyRange = NULL;

	if ( ! pFnGetPropertyRange )
		pFnGetPropertyRange = (UFunction*) UObject::GObjObjects()->Data[ 23573 ];

	USettings_execGetPropertyRange_Parms GetPropertyRange_Parms;
	GetPropertyRange_Parms.PropertyId = PropertyId;

	pFnGetPropertyRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyRange, &GetPropertyRange_Parms, NULL );

	pFnGetPropertyRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetPropertyRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetPropertyRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetPropertyRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetPropertyRange_Parms.bFormatAsInt;

	return GetPropertyRange_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyMappingType ( int PropertyId, unsigned char* OutType )
{
	static UFunction* pFnGetPropertyMappingType = NULL;

	if ( ! pFnGetPropertyMappingType )
		pFnGetPropertyMappingType = (UFunction*) UObject::GObjObjects()->Data[ 23569 ];

	USettings_execGetPropertyMappingType_Parms GetPropertyMappingType_Parms;
	GetPropertyMappingType_Parms.PropertyId = PropertyId;

	pFnGetPropertyMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyMappingType, &GetPropertyMappingType_Parms, NULL );

	pFnGetPropertyMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetPropertyMappingType_Parms.OutType;

	return GetPropertyMappingType_Parms.ReturnValue;
};

// Function Engine.Settings.HasStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SettingId                      ( CPF_Parm )

bool USettings::HasStringSetting ( int SettingId )
{
	static UFunction* pFnHasStringSetting = NULL;

	if ( ! pFnHasStringSetting )
		pFnHasStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 23566 ];

	USettings_execHasStringSetting_Parms HasStringSetting_Parms;
	HasStringSetting_Parms.SettingId = SettingId;

	pFnHasStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasStringSetting, &HasStringSetting_Parms, NULL );

	pFnHasStringSetting->FunctionFlags |= 0x400;

	return HasStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.HasProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

bool USettings::HasProperty ( int PropertyId )
{
	static UFunction* pFnHasProperty = NULL;

	if ( ! pFnHasProperty )
		pFnHasProperty = (UFunction*) UObject::GObjObjects()->Data[ 23563 ];

	USettings_execHasProperty_Parms HasProperty_Parms;
	HasProperty_Parms.PropertyId = PropertyId;

	pFnHasProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasProperty, &HasProperty_Parms, NULL );

	pFnHasProperty->FunctionFlags |= 0x400;

	return HasProperty_Parms.ReturnValue;
};

// Function Engine.Settings.UpdateProperties
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FSettingsProperty > Props                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void USettings::UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props )
{
	static UFunction* pFnUpdateProperties = NULL;

	if ( ! pFnUpdateProperties )
		pFnUpdateProperties = (UFunction*) UObject::GObjObjects()->Data[ 23559 ];

	USettings_execUpdateProperties_Parms UpdateProperties_Parms;
	UpdateProperties_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateProperties, &UpdateProperties_Parms, NULL );

	pFnUpdateProperties->FunctionFlags |= 0x400;

	if ( Props )
		memcpy ( Props, &UpdateProperties_Parms.Props, 0xC );
};

// Function Engine.Settings.UpdateStringSettings
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FLocalizedStringSetting > Settings                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void USettings::UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings )
{
	static UFunction* pFnUpdateStringSettings = NULL;

	if ( ! pFnUpdateStringSettings )
		pFnUpdateStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 23555 ];

	USettings_execUpdateStringSettings_Parms UpdateStringSettings_Parms;
	UpdateStringSettings_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStringSettings, &UpdateStringSettings_Parms, NULL );

	pFnUpdateStringSettings->FunctionFlags |= 0x400;

	if ( Settings )
		memcpy ( Settings, &UpdateStringSettings_Parms.Settings, 0xC );
};

// Function Engine.Settings.GetPropertyType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

unsigned char USettings::GetPropertyType ( int PropertyId )
{
	static UFunction* pFnGetPropertyType = NULL;

	if ( ! pFnGetPropertyType )
		pFnGetPropertyType = (UFunction*) UObject::GObjObjects()->Data[ 23552 ];

	USettings_execGetPropertyType_Parms GetPropertyType_Parms;
	GetPropertyType_Parms.PropertyId = PropertyId;

	pFnGetPropertyType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyType, &GetPropertyType_Parms, NULL );

	pFnGetPropertyType->FunctionFlags |= 0x400;

	return GetPropertyType_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyValueId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyValueId ( int PropertyId, int* ValueId )
{
	static UFunction* pFnGetPropertyValueId = NULL;

	if ( ! pFnGetPropertyValueId )
		pFnGetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 23548 ];

	USettings_execGetPropertyValueId_Parms GetPropertyValueId_Parms;
	GetPropertyValueId_Parms.PropertyId = PropertyId;

	pFnGetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyValueId, &GetPropertyValueId_Parms, NULL );

	pFnGetPropertyValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetPropertyValueId_Parms.ValueId;

	return GetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.SetPropertyValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm )

bool USettings::SetPropertyValueId ( int PropertyId, int ValueId )
{
	static UFunction* pFnSetPropertyValueId = NULL;

	if ( ! pFnSetPropertyValueId )
		pFnSetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 23544 ];

	USettings_execSetPropertyValueId_Parms SetPropertyValueId_Parms;
	SetPropertyValueId_Parms.PropertyId = PropertyId;
	SetPropertyValueId_Parms.ValueId = ValueId;

	pFnSetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyValueId, &SetPropertyValueId_Parms, NULL );

	pFnSetPropertyValueId->FunctionFlags |= 0x400;

	return SetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringProperty ( int PropertyId, struct FString* Value )
{
	static UFunction* pFnGetStringProperty = NULL;

	if ( ! pFnGetStringProperty )
		pFnGetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 23540 ];

	USettings_execGetStringProperty_Parms GetStringProperty_Parms;
	GetStringProperty_Parms.PropertyId = PropertyId;

	pFnGetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringProperty, &GetStringProperty_Parms, NULL );

	pFnGetStringProperty->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetStringProperty_Parms.Value, 0xC );

	return GetStringProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm )

void USettings::SetStringProperty ( int PropertyId, struct FString Value )
{
	static UFunction* pFnSetStringProperty = NULL;

	if ( ! pFnSetStringProperty )
		pFnSetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 23537 ];

	USettings_execSetStringProperty_Parms SetStringProperty_Parms;
	SetStringProperty_Parms.PropertyId = PropertyId;
	memcpy ( &SetStringProperty_Parms.Value, &Value, 0xC );

	pFnSetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringProperty, &SetStringProperty_Parms, NULL );

	pFnSetStringProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetIntProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetIntProperty ( int PropertyId, int* Value )
{
	static UFunction* pFnGetIntProperty = NULL;

	if ( ! pFnGetIntProperty )
		pFnGetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 23533 ];

	USettings_execGetIntProperty_Parms GetIntProperty_Parms;
	GetIntProperty_Parms.PropertyId = PropertyId;

	pFnGetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntProperty, &GetIntProperty_Parms, NULL );

	pFnGetIntProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetIntProperty_Parms.Value;

	return GetIntProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetIntProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USettings::SetIntProperty ( int PropertyId, int Value )
{
	static UFunction* pFnSetIntProperty = NULL;

	if ( ! pFnSetIntProperty )
		pFnSetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 23530 ];

	USettings_execSetIntProperty_Parms SetIntProperty_Parms;
	SetIntProperty_Parms.PropertyId = PropertyId;
	SetIntProperty_Parms.Value = Value;

	pFnSetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntProperty, &SetIntProperty_Parms, NULL );

	pFnSetIntProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetFloatProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetFloatProperty ( int PropertyId, float* Value )
{
	static UFunction* pFnGetFloatProperty = NULL;

	if ( ! pFnGetFloatProperty )
		pFnGetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 23526 ];

	USettings_execGetFloatProperty_Parms GetFloatProperty_Parms;
	GetFloatProperty_Parms.PropertyId = PropertyId;

	pFnGetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatProperty, &GetFloatProperty_Parms, NULL );

	pFnGetFloatProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetFloatProperty_Parms.Value;

	return GetFloatProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetFloatProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void USettings::SetFloatProperty ( int PropertyId, float Value )
{
	static UFunction* pFnSetFloatProperty = NULL;

	if ( ! pFnSetFloatProperty )
		pFnSetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 23523 ];

	USettings_execSetFloatProperty_Parms SetFloatProperty_Parms;
	SetFloatProperty_Parms.PropertyId = PropertyId;
	SetFloatProperty_Parms.Value = Value;

	pFnSetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatProperty, &SetFloatProperty_Parms, NULL );

	pFnSetFloatProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.SetPropertyFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool USettings::SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue )
{
	static UFunction* pFnSetPropertyFromStringByName = NULL;

	if ( ! pFnSetPropertyFromStringByName )
		pFnSetPropertyFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 23519 ];

	USettings_execSetPropertyFromStringByName_Parms SetPropertyFromStringByName_Parms;
	memcpy ( &SetPropertyFromStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnSetPropertyFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyFromStringByName, &SetPropertyFromStringByName_Parms, NULL );

	pFnSetPropertyFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetPropertyFromStringByName_Parms.NewValue, 0xC );

	return SetPropertyFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsStringByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )

struct FString USettings::GetPropertyAsStringByName ( struct FName PropertyName )
{
	static UFunction* pFnGetPropertyAsStringByName = NULL;

	if ( ! pFnGetPropertyAsStringByName )
		pFnGetPropertyAsStringByName = (UFunction*) UObject::GObjObjects()->Data[ 23516 ];

	USettings_execGetPropertyAsStringByName_Parms GetPropertyAsStringByName_Parms;
	memcpy ( &GetPropertyAsStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyAsStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsStringByName, &GetPropertyAsStringByName_Parms, NULL );

	pFnGetPropertyAsStringByName->FunctionFlags |= 0x400;

	return GetPropertyAsStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyAsString ( int PropertyId )
{
	static UFunction* pFnGetPropertyAsString = NULL;

	if ( ! pFnGetPropertyAsString )
		pFnGetPropertyAsString = (UFunction*) UObject::GObjObjects()->Data[ 23513 ];

	USettings_execGetPropertyAsString_Parms GetPropertyAsString_Parms;
	GetPropertyAsString_Parms.PropertyId = PropertyId;

	pFnGetPropertyAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsString, &GetPropertyAsString_Parms, NULL );

	pFnGetPropertyAsString->FunctionFlags |= 0x400;

	return GetPropertyAsString_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyColumnHeader ( int PropertyId )
{
	static UFunction* pFnGetPropertyColumnHeader = NULL;

	if ( ! pFnGetPropertyColumnHeader )
		pFnGetPropertyColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 23510 ];

	USettings_execGetPropertyColumnHeader_Parms GetPropertyColumnHeader_Parms;
	GetPropertyColumnHeader_Parms.PropertyId = PropertyId;

	pFnGetPropertyColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyColumnHeader, &GetPropertyColumnHeader_Parms, NULL );

	pFnGetPropertyColumnHeader->FunctionFlags |= 0x400;

	return GetPropertyColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FName USettings::GetPropertyName ( int PropertyId )
{
	static UFunction* pFnGetPropertyName = NULL;

	if ( ! pFnGetPropertyName )
		pFnGetPropertyName = (UFunction*) UObject::GObjObjects()->Data[ 23507 ];

	USettings_execGetPropertyName_Parms GetPropertyName_Parms;
	GetPropertyName_Parms.PropertyId = PropertyId;

	pFnGetPropertyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyName, &GetPropertyName_Parms, NULL );

	pFnGetPropertyName->FunctionFlags |= 0x400;

	return GetPropertyName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// int                            PropertyId                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyId ( struct FName PropertyName, int* PropertyId )
{
	static UFunction* pFnGetPropertyId = NULL;

	if ( ! pFnGetPropertyId )
		pFnGetPropertyId = (UFunction*) UObject::GObjObjects()->Data[ 23503 ];

	USettings_execGetPropertyId_Parms GetPropertyId_Parms;
	memcpy ( &GetPropertyId_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyId, &GetPropertyId_Parms, NULL );

	pFnGetPropertyId->FunctionFlags |= 0x400;

	if ( PropertyId )
		*PropertyId = GetPropertyId_Parms.PropertyId;

	return GetPropertyId_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool USettings::SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetStringSettingValueFromStringByName = NULL;

	if ( ! pFnSetStringSettingValueFromStringByName )
		pFnSetStringSettingValueFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 23499 ];

	USettings_execSetStringSettingValueFromStringByName_Parms SetStringSettingValueFromStringByName_Parms;
	memcpy ( &SetStringSettingValueFromStringByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueFromStringByName, &SetStringSettingValueFromStringByName_Parms, NULL );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetStringSettingValueFromStringByName_Parms.NewValue, 0xC );

	return SetStringSettingValueFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueNameByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )

struct FName USettings::GetStringSettingValueNameByName ( struct FName StringSettingName )
{
	static UFunction* pFnGetStringSettingValueNameByName = NULL;

	if ( ! pFnGetStringSettingValueNameByName )
		pFnGetStringSettingValueNameByName = (UFunction*) UObject::GObjObjects()->Data[ 23496 ];

	USettings_execGetStringSettingValueNameByName_Parms GetStringSettingValueNameByName_Parms;
	memcpy ( &GetStringSettingValueNameByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueNameByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNameByName, &GetStringSettingValueNameByName_Parms, NULL );

	pFnGetStringSettingValueNameByName->FunctionFlags |= 0x400;

	return GetStringSettingValueNameByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )

struct FName USettings::GetStringSettingValueName ( int StringSettingId, int ValueIndex )
{
	static UFunction* pFnGetStringSettingValueName = NULL;

	if ( ! pFnGetStringSettingValueName )
		pFnGetStringSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 23492 ];

	USettings_execGetStringSettingValueName_Parms GetStringSettingValueName_Parms;
	GetStringSettingValueName_Parms.StringSettingId = StringSettingId;
	GetStringSettingValueName_Parms.ValueIndex = ValueIndex;

	pFnGetStringSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueName, &GetStringSettingValueName_Parms, NULL );

	pFnGetStringSettingValueName->FunctionFlags |= 0x400;

	return GetStringSettingValueName_Parms.ReturnValue;
};

// Function Engine.Settings.IsWildcardStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

bool USettings::IsWildcardStringSetting ( int StringSettingId )
{
	static UFunction* pFnIsWildcardStringSetting = NULL;

	if ( ! pFnIsWildcardStringSetting )
		pFnIsWildcardStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 23489 ];

	USettings_execIsWildcardStringSetting_Parms IsWildcardStringSetting_Parms;
	IsWildcardStringSetting_Parms.StringSettingId = StringSettingId;

	pFnIsWildcardStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWildcardStringSetting, &IsWildcardStringSetting_Parms, NULL );

	pFnIsWildcardStringSetting->FunctionFlags |= 0x400;

	return IsWildcardStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

struct FString USettings::GetStringSettingColumnHeader ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingColumnHeader = NULL;

	if ( ! pFnGetStringSettingColumnHeader )
		pFnGetStringSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 23486 ];

	USettings_execGetStringSettingColumnHeader_Parms GetStringSettingColumnHeader_Parms;
	GetStringSettingColumnHeader_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingColumnHeader, &GetStringSettingColumnHeader_Parms, NULL );

	pFnGetStringSettingColumnHeader->FunctionFlags |= 0x400;

	return GetStringSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

struct FName USettings::GetStringSettingName ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingName = NULL;

	if ( ! pFnGetStringSettingName )
		pFnGetStringSettingName = (UFunction*) UObject::GObjObjects()->Data[ 23483 ];

	USettings_execGetStringSettingName_Parms GetStringSettingName_Parms;
	GetStringSettingName_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingName, &GetStringSettingName_Parms, NULL );

	pFnGetStringSettingName->FunctionFlags |= 0x400;

	return GetStringSettingName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            StringSettingId                ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingId ( struct FName StringSettingName, int* StringSettingId )
{
	static UFunction* pFnGetStringSettingId = NULL;

	if ( ! pFnGetStringSettingId )
		pFnGetStringSettingId = (UFunction*) UObject::GObjObjects()->Data[ 23479 ];

	USettings_execGetStringSettingId_Parms GetStringSettingId_Parms;
	memcpy ( &GetStringSettingId_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingId, &GetStringSettingId_Parms, NULL );

	pFnGetStringSettingId->FunctionFlags |= 0x400;

	if ( StringSettingId )
		*StringSettingId = GetStringSettingId_Parms.StringSettingId;

	return GetStringSettingId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValueByName = NULL;

	if ( ! pFnGetStringSettingValueByName )
		pFnGetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 23475 ];

	USettings_execGetStringSettingValueByName_Parms GetStringSettingValueByName_Parms;
	memcpy ( &GetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueByName, &GetStringSettingValueByName_Parms, NULL );

	pFnGetStringSettingValueByName->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValueByName_Parms.ValueIndex;

	return GetStringSettingValueByName_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_Parm )

void USettings::SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValueByName = NULL;

	if ( ! pFnSetStringSettingValueByName )
		pFnSetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 23471 ];

	USettings_execSetStringSettingValueByName_Parms SetStringSettingValueByName_Parms;
	memcpy ( &SetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );
	SetStringSettingValueByName_Parms.ValueIndex = ValueIndex;
	SetStringSettingValueByName_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueByName, &SetStringSettingValueByName_Parms, NULL );

	pFnSetStringSettingValueByName->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetStringSettingValueNames
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// TArray< struct FIdToStringMapping > Values                         ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values )
{
	static UFunction* pFnGetStringSettingValueNames = NULL;

	if ( ! pFnGetStringSettingValueNames )
		pFnGetStringSettingValueNames = (UFunction*) UObject::GObjObjects()->Data[ 23466 ];

	USettings_execGetStringSettingValueNames_Parms GetStringSettingValueNames_Parms;
	GetStringSettingValueNames_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValueNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNames, &GetStringSettingValueNames_Parms, NULL );

	pFnGetStringSettingValueNames->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetStringSettingValueNames_Parms.Values, 0xC );

	return GetStringSettingValueNames_Parms.ReturnValue;
};

// Function Engine.Settings.IncrementStringSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// unsigned long                  bShouldWrap                    ( CPF_Parm )

bool USettings::IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap )
{
	static UFunction* pFnIncrementStringSettingValue = NULL;

	if ( ! pFnIncrementStringSettingValue )
		pFnIncrementStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 23461 ];

	USettings_execIncrementStringSettingValue_Parms IncrementStringSettingValue_Parms;
	IncrementStringSettingValue_Parms.StringSettingId = StringSettingId;
	IncrementStringSettingValue_Parms.Direction = Direction;
	IncrementStringSettingValue_Parms.bShouldWrap = bShouldWrap;

	pFnIncrementStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementStringSettingValue, &IncrementStringSettingValue_Parms, NULL );

	pFnIncrementStringSettingValue->FunctionFlags |= 0x400;

	return IncrementStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValue ( int StringSettingId, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValue = NULL;

	if ( ! pFnGetStringSettingValue )
		pFnGetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 23457 ];

	USettings_execGetStringSettingValue_Parms GetStringSettingValue_Parms;
	GetStringSettingValue_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValue, &GetStringSettingValue_Parms, NULL );

	pFnGetStringSettingValue->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValue_Parms.ValueIndex;

	return GetStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_OptionalParm | CPF_Parm )

void USettings::SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValue = NULL;

	if ( ! pFnSetStringSettingValue )
		pFnSetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 23453 ];

	USettings_execSetStringSettingValue_Parms SetStringSettingValue_Parms;
	SetStringSettingValue_Parms.StringSettingId = StringSettingId;
	SetStringSettingValue_Parms.ValueIndex = ValueIndex;
	SetStringSettingValue_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValue, &SetStringSettingValue_Parms, NULL );

	pFnSetStringSettingValue->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// int                            OutInt1                        ( CPF_Parm | CPF_OutParm )
// int                            OutInt2                        ( CPF_Parm | CPF_OutParm )

void USettings::GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 )
{
	static UFunction* pFnGetSettingsDataDateTime = NULL;

	if ( ! pFnGetSettingsDataDateTime )
		pFnGetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 23449 ];

	USettings_execGetSettingsDataDateTime_Parms GetSettingsDataDateTime_Parms;

	pFnGetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataDateTime, &GetSettingsDataDateTime_Parms, NULL );

	pFnGetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataDateTime_Parms.Data, 0xC );

	if ( OutInt1 )
		*OutInt1 = GetSettingsDataDateTime_Parms.OutInt1;

	if ( OutInt2 )
		*OutInt2 = GetSettingsDataDateTime_Parms.OutInt2;
};

// Function Engine.Settings.GetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        OutBlob                        ( CPF_Parm | CPF_OutParm )

void USettings::GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob )
{
	static UFunction* pFnGetSettingsDataBlob = NULL;

	if ( ! pFnGetSettingsDataBlob )
		pFnGetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 23445 ];

	USettings_execGetSettingsDataBlob_Parms GetSettingsDataBlob_Parms;

	pFnGetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataBlob, &GetSettingsDataBlob_Parms, NULL );

	pFnGetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataBlob_Parms.Data, 0xC );

	if ( OutBlob )
		memcpy ( OutBlob, &GetSettingsDataBlob_Parms.OutBlob, 0xC );
};

// Function Engine.Settings.GetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

int USettings::GetSettingsDataInt ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataInt = NULL;

	if ( ! pFnGetSettingsDataInt )
		pFnGetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 23442 ];

	USettings_execGetSettingsDataInt_Parms GetSettingsDataInt_Parms;

	pFnGetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataInt, &GetSettingsDataInt_Parms, NULL );

	pFnGetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataInt_Parms.Data, 0xC );

	return GetSettingsDataInt_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

float USettings::GetSettingsDataFloat ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataFloat = NULL;

	if ( ! pFnGetSettingsDataFloat )
		pFnGetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 23439 ];

	USettings_execGetSettingsDataFloat_Parms GetSettingsDataFloat_Parms;

	pFnGetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataFloat, &GetSettingsDataFloat_Parms, NULL );

	pFnGetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataFloat_Parms.Data, 0xC );

	return GetSettingsDataFloat_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

struct FString USettings::GetSettingsDataString ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataString = NULL;

	if ( ! pFnGetSettingsDataString )
		pFnGetSettingsDataString = (UFunction*) UObject::GObjObjects()->Data[ 23436 ];

	USettings_execGetSettingsDataString_Parms GetSettingsDataString_Parms;

	pFnGetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataString, &GetSettingsDataString_Parms, NULL );

	pFnGetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataString_Parms.Data, 0xC );

	return GetSettingsDataString_Parms.ReturnValue;
};

// Function Engine.Settings.EmptySettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::EmptySettingsData ( struct FSettingsData* Data )
{
	static UFunction* pFnEmptySettingsData = NULL;

	if ( ! pFnEmptySettingsData )
		pFnEmptySettingsData = (UFunction*) UObject::GObjObjects()->Data[ 23434 ];

	USettings_execEmptySettingsData_Parms EmptySettingsData_Parms;

	pFnEmptySettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmptySettingsData, &EmptySettingsData_Parms, NULL );

	pFnEmptySettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &EmptySettingsData_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct FSettingsData           Data2Copy                      ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy )
{
	static UFunction* pFnSetSettingsData = NULL;

	if ( ! pFnSetSettingsData )
		pFnSetSettingsData = (UFunction*) UObject::GObjObjects()->Data[ 23431 ];

	USettings_execSetSettingsData_Parms SetSettingsData_Parms;

	pFnSetSettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsData, &SetSettingsData_Parms, NULL );

	pFnSetSettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsData_Parms.Data, 0xC );

	if ( Data2Copy )
		memcpy ( Data2Copy, &SetSettingsData_Parms.Data2Copy, 0xC );
};

// Function Engine.Settings.SetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        InBlob                         ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob )
{
	static UFunction* pFnSetSettingsDataBlob = NULL;

	if ( ! pFnSetSettingsDataBlob )
		pFnSetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 23427 ];

	USettings_execSetSettingsDataBlob_Parms SetSettingsDataBlob_Parms;

	pFnSetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataBlob, &SetSettingsDataBlob_Parms, NULL );

	pFnSetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataBlob_Parms.Data, 0xC );

	if ( InBlob )
		memcpy ( InBlob, &SetSettingsDataBlob_Parms.InBlob, 0xC );
};

// Function Engine.Settings.SetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt1                         ( CPF_Parm )
// int                            InInt2                         ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataDateTime = NULL;

	if ( ! pFnSetSettingsDataDateTime )
		pFnSetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 23423 ];

	USettings_execSetSettingsDataDateTime_Parms SetSettingsDataDateTime_Parms;
	SetSettingsDataDateTime_Parms.InInt1 = InInt1;
	SetSettingsDataDateTime_Parms.InInt2 = InInt2;

	pFnSetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataDateTime, &SetSettingsDataDateTime_Parms, NULL );

	pFnSetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataDateTime_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt                          ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataInt ( int InInt, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataInt = NULL;

	if ( ! pFnSetSettingsDataInt )
		pFnSetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 23420 ];

	USettings_execSetSettingsDataInt_Parms SetSettingsDataInt_Parms;
	SetSettingsDataInt_Parms.InInt = InInt;

	pFnSetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataInt, &SetSettingsDataInt_Parms, NULL );

	pFnSetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataInt_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          InFloat                        ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataFloat = NULL;

	if ( ! pFnSetSettingsDataFloat )
		pFnSetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 23417 ];

	USettings_execSetSettingsDataFloat_Parms SetSettingsDataFloat_Parms;
	SetSettingsDataFloat_Parms.InFloat = InFloat;

	pFnSetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataFloat, &SetSettingsDataFloat_Parms, NULL );

	pFnSetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataFloat_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 InString                       ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataString ( struct FString InString, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataString = NULL;

	if ( ! pFnSetSettingsDataString )
		pFnSetSettingsDataString = (UFunction*) UObject::GObjObjects()->Data[ 23414 ];

	USettings_execSetSettingsDataString_Parms SetSettingsDataString_Parms;
	memcpy ( &SetSettingsDataString_Parms.InString, &InString, 0xC );

	pFnSetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataString, &SetSettingsDataString_Parms, NULL );

	pFnSetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataString_Parms.Data, 0xC );
};

// Function Engine.Settings.NotifyPropertyValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )

void USettings::NotifyPropertyValueUpdated ( struct FName PropertyName )
{
	static UFunction* pFnNotifyPropertyValueUpdated = NULL;

	if ( ! pFnNotifyPropertyValueUpdated )
		pFnNotifyPropertyValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 23412 ];

	USettings_execNotifyPropertyValueUpdated_Parms NotifyPropertyValueUpdated_Parms;
	memcpy ( &NotifyPropertyValueUpdated_Parms.PropertyName, &PropertyName, 0x8 );

	this->ProcessEvent ( pFnNotifyPropertyValueUpdated, &NotifyPropertyValueUpdated_Parms, NULL );
};

// Function Engine.Settings.NotifySettingValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void USettings::NotifySettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnNotifySettingValueUpdated = NULL;

	if ( ! pFnNotifySettingValueUpdated )
		pFnNotifySettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 23410 ];

	USettings_execNotifySettingValueUpdated_Parms NotifySettingValueUpdated_Parms;
	memcpy ( &NotifySettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnNotifySettingValueUpdated, &NotifySettingValueUpdated_Parms, NULL );
};

// Function Engine.OnlineGameSearch.SortSearchResults
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineGameSearch::eventSortSearchResults ( )
{
	static UFunction* pFnSortSearchResults = NULL;

	if ( ! pFnSortSearchResults )
		pFnSortSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 23609 ];

	UOnlineGameSearch_eventSortSearchResults_Parms SortSearchResults_Parms;

	this->ProcessEvent ( pFnSortSearchResults, &SortSearchResults_Parms, NULL );
};

// Function Engine.OnlineGameSearch.SetSkillOverride
// [0x00420002] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineGameSearch::SetSkillOverride ( int LeaderboardId, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnSetSkillOverride = NULL;

	if ( ! pFnSetSkillOverride )
		pFnSetSkillOverride = (UFunction*) UObject::GObjObjects()->Data[ 23605 ];

	UOnlineGameSearch_execSetSkillOverride_Parms SetSkillOverride_Parms;
	SetSkillOverride_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnSetSkillOverride, &SetSkillOverride_Parms, NULL );

	if ( Players )
		memcpy ( Players, &SetSkillOverride_Parms.Players, 0xC );
};

// Function Engine.OnlinePlaylistManager.GetContentIdsFromPlaylist
// [0x00420002] 
// Parameters infos:
// int                            PlaylistId                     ( CPF_Parm )
// TArray< int >                  ContentIds                     ( CPF_Parm | CPF_OutParm )

void UOnlinePlaylistManager::GetContentIdsFromPlaylist ( int PlaylistId, TArray< int >* ContentIds )
{
	static UFunction* pFnGetContentIdsFromPlaylist = NULL;

	if ( ! pFnGetContentIdsFromPlaylist )
		pFnGetContentIdsFromPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 24093 ];

	UOnlinePlaylistManager_execGetContentIdsFromPlaylist_Parms GetContentIdsFromPlaylist_Parms;
	GetContentIdsFromPlaylist_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnGetContentIdsFromPlaylist, &GetContentIdsFromPlaylist_Parms, NULL );

	if ( ContentIds )
		memcpy ( ContentIds, &GetContentIdsFromPlaylist_Parms.ContentIds, 0xC );
};

// Function Engine.OnlinePlaylistManager.GetTeamInfoFromPlaylist
// [0x00420002] 
// Parameters infos:
// int                            PlaylistId                     ( CPF_Parm )
// int                            TeamSize                       ( CPF_Parm | CPF_OutParm )
// int                            TeamCount                      ( CPF_Parm | CPF_OutParm )

void UOnlinePlaylistManager::GetTeamInfoFromPlaylist ( int PlaylistId, int* TeamSize, int* TeamCount )
{
	static UFunction* pFnGetTeamInfoFromPlaylist = NULL;

	if ( ! pFnGetTeamInfoFromPlaylist )
		pFnGetTeamInfoFromPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 24088 ];

	UOnlinePlaylistManager_execGetTeamInfoFromPlaylist_Parms GetTeamInfoFromPlaylist_Parms;
	GetTeamInfoFromPlaylist_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnGetTeamInfoFromPlaylist, &GetTeamInfoFromPlaylist_Parms, NULL );

	if ( TeamSize )
		*TeamSize = GetTeamInfoFromPlaylist_Parms.TeamSize;

	if ( TeamCount )
		*TeamCount = GetTeamInfoFromPlaylist_Parms.TeamCount;
};

// Function Engine.OnlinePlaylistManager.GetGameSettings
// [0x00020002] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlaylistId                     ( CPF_Parm )
// int                            GameSettingsId                 ( CPF_Parm )

class UOnlineGameSettings* UOnlinePlaylistManager::GetGameSettings ( int PlaylistId, int GameSettingsId )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 24082 ];

	UOnlinePlaylistManager_execGetGameSettings_Parms GetGameSettings_Parms;
	GetGameSettings_Parms.PlaylistId = PlaylistId;
	GetGameSettings_Parms.GameSettingsId = GameSettingsId;

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlaylistManager.FinalizePlaylistObjects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlaylistManager::FinalizePlaylistObjects ( )
{
	static UFunction* pFnFinalizePlaylistObjects = NULL;

	if ( ! pFnFinalizePlaylistObjects )
		pFnFinalizePlaylistObjects = (UFunction*) UObject::GObjObjects()->Data[ 24081 ];

	UOnlinePlaylistManager_execFinalizePlaylistObjects_Parms FinalizePlaylistObjects_Parms;

	pFnFinalizePlaylistObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalizePlaylistObjects, &FinalizePlaylistObjects_Parms, NULL );

	pFnFinalizePlaylistObjects->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlaylistManager.OnReadTitleFileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm )

void UOnlinePlaylistManager::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 24076 ];

	UOnlinePlaylistManager_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlinePlaylistManager.DetermineFilesToDownload
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlaylistManager::DetermineFilesToDownload ( )
{
	static UFunction* pFnDetermineFilesToDownload = NULL;

	if ( ! pFnDetermineFilesToDownload )
		pFnDetermineFilesToDownload = (UFunction*) UObject::GObjObjects()->Data[ 24075 ];

	UOnlinePlaylistManager_execDetermineFilesToDownload_Parms DetermineFilesToDownload_Parms;

	pFnDetermineFilesToDownload->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineFilesToDownload, &DetermineFilesToDownload_Parms, NULL );

	pFnDetermineFilesToDownload->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlaylistManager.DownloadPlaylist
// [0x00020002] 
// Parameters infos:

void UOnlinePlaylistManager::DownloadPlaylist ( )
{
	static UFunction* pFnDownloadPlaylist = NULL;

	if ( ! pFnDownloadPlaylist )
		pFnDownloadPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 24072 ];

	UOnlinePlaylistManager_execDownloadPlaylist_Parms DownloadPlaylist_Parms;

	this->ProcessEvent ( pFnDownloadPlaylist, &DownloadPlaylist_Parms, NULL );
};

// Function Engine.OnlinePlaylistManager.OnReadPlaylistComplete
// [0x00120000] 
// Parameters infos:

void UOnlinePlaylistManager::OnReadPlaylistComplete ( )
{
	static UFunction* pFnOnReadPlaylistComplete = NULL;

	if ( ! pFnOnReadPlaylistComplete )
		pFnOnReadPlaylistComplete = (UFunction*) UObject::GObjObjects()->Data[ 24071 ];

	UOnlinePlaylistManager_execOnReadPlaylistComplete_Parms OnReadPlaylistComplete_Parms;

	this->ProcessEvent ( pFnOnReadPlaylistComplete, &OnReadPlaylistComplete_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineProfileSettings::eventModifyAvailableProfileSettings ( )
{
	static UFunction* pFnModifyAvailableProfileSettings = NULL;

	if ( ! pFnModifyAvailableProfileSettings )
		pFnModifyAvailableProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 24244 ];

	UOnlineProfileSettings_eventModifyAvailableProfileSettings_Parms ModifyAvailableProfileSettings_Parms;

	this->ProcessEvent ( pFnModifyAvailableProfileSettings, &ModifyAvailableProfileSettings_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.GetRangedProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetRangedProfileSettingValue ( int ProfileId, float* OutValue )
{
	static UFunction* pFnGetRangedProfileSettingValue = NULL;

	if ( ! pFnGetRangedProfileSettingValue )
		pFnGetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 24240 ];

	UOnlineProfileSettings_execGetRangedProfileSettingValue_Parms GetRangedProfileSettingValue_Parms;
	GetRangedProfileSettingValue_Parms.ProfileId = ProfileId;

	pFnGetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedProfileSettingValue, &GetRangedProfileSettingValue_Parms, NULL );

	pFnGetRangedProfileSettingValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedProfileSettingValue_Parms.OutValue;

	return GetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetRangedProfileSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool UOnlineProfileSettings::SetRangedProfileSettingValue ( int ProfileId, float NewValue )
{
	static UFunction* pFnSetRangedProfileSettingValue = NULL;

	if ( ! pFnSetRangedProfileSettingValue )
		pFnSetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 24236 ];

	UOnlineProfileSettings_execSetRangedProfileSettingValue_Parms SetRangedProfileSettingValue_Parms;
	SetRangedProfileSettingValue_Parms.ProfileId = ProfileId;
	SetRangedProfileSettingValue_Parms.NewValue = NewValue;

	pFnSetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedProfileSettingValue, &SetRangedProfileSettingValue_Parms, NULL );

	pFnSetRangedProfileSettingValue->FunctionFlags |= 0x400;

	return SetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetProfileSettingRange = NULL;

	if ( ! pFnGetProfileSettingRange )
		pFnGetProfileSettingRange = (UFunction*) UObject::GObjObjects()->Data[ 24229 ];

	UOnlineProfileSettings_execGetProfileSettingRange_Parms GetProfileSettingRange_Parms;
	GetProfileSettingRange_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingRange, &GetProfileSettingRange_Parms, NULL );

	pFnGetProfileSettingRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetProfileSettingRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetProfileSettingRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetProfileSettingRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetProfileSettingRange_Parms.bFormatAsInt;

	return GetProfileSettingRange_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType )
{
	static UFunction* pFnGetProfileSettingMappingType = NULL;

	if ( ! pFnGetProfileSettingMappingType )
		pFnGetProfileSettingMappingType = (UFunction*) UObject::GObjObjects()->Data[ 24225 ];

	UOnlineProfileSettings_execGetProfileSettingMappingType_Parms GetProfileSettingMappingType_Parms;
	GetProfileSettingMappingType_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingType, &GetProfileSettingMappingType_Parms, NULL );

	pFnGetProfileSettingMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetProfileSettingMappingType_Parms.OutType;

	return GetProfileSettingMappingType_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetDefaultVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::SetDefaultVersionNumber ( )
{
	static UFunction* pFnSetDefaultVersionNumber = NULL;

	if ( ! pFnSetDefaultVersionNumber )
		pFnSetDefaultVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 24224 ];

	UOnlineProfileSettings_execSetDefaultVersionNumber_Parms SetDefaultVersionNumber_Parms;

	pFnSetDefaultVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultVersionNumber, &SetDefaultVersionNumber_Parms, NULL );

	pFnSetDefaultVersionNumber->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineProfileSettings::GetVersionNumber ( )
{
	static UFunction* pFnGetVersionNumber = NULL;

	if ( ! pFnGetVersionNumber )
		pFnGetVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 24222 ];

	UOnlineProfileSettings_execGetVersionNumber_Parms GetVersionNumber_Parms;

	pFnGetVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVersionNumber, &GetVersionNumber_Parms, NULL );

	pFnGetVersionNumber->FunctionFlags |= 0x400;

	return GetVersionNumber_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.AppendVersionToSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToSettings ( )
{
	static UFunction* pFnAppendVersionToSettings = NULL;

	if ( ! pFnAppendVersionToSettings )
		pFnAppendVersionToSettings = (UFunction*) UObject::GObjObjects()->Data[ 24221 ];

	UOnlineProfileSettings_execAppendVersionToSettings_Parms AppendVersionToSettings_Parms;

	pFnAppendVersionToSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToSettings, &AppendVersionToSettings_Parms, NULL );

	pFnAppendVersionToSettings->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToReadIds ( )
{
	static UFunction* pFnAppendVersionToReadIds = NULL;

	if ( ! pFnAppendVersionToReadIds )
		pFnAppendVersionToReadIds = (UFunction*) UObject::GObjObjects()->Data[ 24220 ];

	UOnlineProfileSettings_execAppendVersionToReadIds_Parms AppendVersionToReadIds_Parms;

	pFnAppendVersionToReadIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToReadIds, &AppendVersionToReadIds_Parms, NULL );

	pFnAppendVersionToReadIds->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 24219 ];

	UOnlineProfileSettings_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          DefaultFloat                   ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat )
{
	static UFunction* pFnGetProfileSettingDefaultFloat = NULL;

	if ( ! pFnGetProfileSettingDefaultFloat )
		pFnGetProfileSettingDefaultFloat = (UFunction*) UObject::GObjObjects()->Data[ 24215 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultFloat_Parms GetProfileSettingDefaultFloat_Parms;
	GetProfileSettingDefaultFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultFloat, &GetProfileSettingDefaultFloat_Parms, NULL );

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= 0x400;

	if ( DefaultFloat )
		*DefaultFloat = GetProfileSettingDefaultFloat_Parms.DefaultFloat;

	return GetProfileSettingDefaultFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultInt                     ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt )
{
	static UFunction* pFnGetProfileSettingDefaultInt = NULL;

	if ( ! pFnGetProfileSettingDefaultInt )
		pFnGetProfileSettingDefaultInt = (UFunction*) UObject::GObjObjects()->Data[ 24211 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultInt_Parms GetProfileSettingDefaultInt_Parms;
	GetProfileSettingDefaultInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultInt, &GetProfileSettingDefaultInt_Parms, NULL );

	pFnGetProfileSettingDefaultInt->FunctionFlags |= 0x400;

	if ( DefaultInt )
		*DefaultInt = GetProfileSettingDefaultInt_Parms.DefaultInt;

	return GetProfileSettingDefaultInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultId                      ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingDefaultId = NULL;

	if ( ! pFnGetProfileSettingDefaultId )
		pFnGetProfileSettingDefaultId = (UFunction*) UObject::GObjObjects()->Data[ 24206 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultId_Parms GetProfileSettingDefaultId_Parms;
	GetProfileSettingDefaultId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultId, &GetProfileSettingDefaultId_Parms, NULL );

	pFnGetProfileSettingDefaultId->FunctionFlags |= 0x400;

	if ( DefaultId )
		*DefaultId = GetProfileSettingDefaultId_Parms.DefaultId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingDefaultId_Parms.ListIndex;

	return GetProfileSettingDefaultId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueFloat ( int ProfileSettingId, float Value )
{
	static UFunction* pFnSetProfileSettingValueFloat = NULL;

	if ( ! pFnSetProfileSettingValueFloat )
		pFnSetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 24202 ];

	UOnlineProfileSettings_execSetProfileSettingValueFloat_Parms SetProfileSettingValueFloat_Parms;
	SetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueFloat_Parms.Value = Value;

	pFnSetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Parms, NULL );

	pFnSetProfileSettingValueFloat->FunctionFlags |= 0x400;

	return SetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueInt ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueInt = NULL;

	if ( ! pFnSetProfileSettingValueInt )
		pFnSetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 24198 ];

	UOnlineProfileSettings_execSetProfileSettingValueInt_Parms SetProfileSettingValueInt_Parms;
	SetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueInt_Parms.Value = Value;

	pFnSetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Parms, NULL );

	pFnSetProfileSettingValueInt->FunctionFlags |= 0x400;

	return SetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueId ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueId = NULL;

	if ( ! pFnSetProfileSettingValueId )
		pFnSetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 24194 ];

	UOnlineProfileSettings_execSetProfileSettingValueId_Parms SetProfileSettingValueId_Parms;
	SetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueId_Parms.Value = Value;

	pFnSetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueId, &SetProfileSettingValueId_Parms, NULL );

	pFnSetProfileSettingValueId->FunctionFlags |= 0x400;

	return SetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueFloat ( int ProfileSettingId, float* Value )
{
	static UFunction* pFnGetProfileSettingValueFloat = NULL;

	if ( ! pFnGetProfileSettingValueFloat )
		pFnGetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 24190 ];

	UOnlineProfileSettings_execGetProfileSettingValueFloat_Parms GetProfileSettingValueFloat_Parms;
	GetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueFloat, &GetProfileSettingValueFloat_Parms, NULL );

	pFnGetProfileSettingValueFloat->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueFloat_Parms.Value;

	return GetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueInt ( int ProfileSettingId, int* Value )
{
	static UFunction* pFnGetProfileSettingValueInt = NULL;

	if ( ! pFnGetProfileSettingValueInt )
		pFnGetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 24186 ];

	UOnlineProfileSettings_execGetProfileSettingValueInt_Parms GetProfileSettingValueInt_Parms;
	GetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueInt, &GetProfileSettingValueInt_Parms, NULL );

	pFnGetProfileSettingValueInt->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueInt_Parms.Value;

	return GetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueId
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingValueId = NULL;

	if ( ! pFnGetProfileSettingValueId )
		pFnGetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 24181 ];

	UOnlineProfileSettings_execGetProfileSettingValueId_Parms GetProfileSettingValueId_Parms;
	GetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueId, &GetProfileSettingValueId_Parms, NULL );

	pFnGetProfileSettingValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetProfileSettingValueId_Parms.ValueId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingValueId_Parms.ListIndex;

	return GetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValue = NULL;

	if ( ! pFnSetProfileSettingValue )
		pFnSetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 24177 ];

	UOnlineProfileSettings_execSetProfileSettingValue_Parms SetProfileSettingValue_Parms;
	SetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;

	pFnSetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValue, &SetProfileSettingValue_Parms, NULL );

	pFnSetProfileSettingValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValue_Parms.NewValue, 0xC );

	return SetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValueByName = NULL;

	if ( ! pFnSetProfileSettingValueByName )
		pFnSetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 24173 ];

	UOnlineProfileSettings_execSetProfileSettingValueByName_Parms SetProfileSettingValueByName_Parms;
	memcpy ( &SetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnSetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueByName, &SetProfileSettingValueByName_Parms, NULL );

	pFnSetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValueByName_Parms.NewValue, 0xC );

	return SetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValueByName = NULL;

	if ( ! pFnGetProfileSettingValueByName )
		pFnGetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 24169 ];

	UOnlineProfileSettings_execGetProfileSettingValueByName_Parms GetProfileSettingValueByName_Parms;
	memcpy ( &GetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueByName, &GetProfileSettingValueByName_Parms, NULL );

	pFnGetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValueByName_Parms.Value, 0xC );

	return GetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// TArray< struct FName >         Values                         ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values )
{
	static UFunction* pFnGetProfileSettingValues = NULL;

	if ( ! pFnGetProfileSettingValues )
		pFnGetProfileSettingValues = (UFunction*) UObject::GObjObjects()->Data[ 24164 ];

	UOnlineProfileSettings_execGetProfileSettingValues_Parms GetProfileSettingValues_Parms;
	GetProfileSettingValues_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValues, &GetProfileSettingValues_Parms, NULL );

	pFnGetProfileSettingValues->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetProfileSettingValues_Parms.Values, 0xC );

	return GetProfileSettingValues_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlineProfileSettings::GetProfileSettingValueName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingValueName = NULL;

	if ( ! pFnGetProfileSettingValueName )
		pFnGetProfileSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 24161 ];

	UOnlineProfileSettings_execGetProfileSettingValueName_Parms GetProfileSettingValueName_Parms;
	GetProfileSettingValueName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueName, &GetProfileSettingValueName_Parms, NULL );

	pFnGetProfileSettingValueName->FunctionFlags |= 0x400;

	return GetProfileSettingValueName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueMapID                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValue = NULL;

	if ( ! pFnGetProfileSettingValue )
		pFnGetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 24156 ];

	UOnlineProfileSettings_execGetProfileSettingValue_Parms GetProfileSettingValue_Parms;
	GetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;
	GetProfileSettingValue_Parms.ValueMapID = ValueMapID;

	pFnGetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValue, &GetProfileSettingValue_Parms, NULL );

	pFnGetProfileSettingValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValue_Parms.Value, 0xC );

	return GetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.IsProfileSettingIdMapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

bool UOnlineProfileSettings::IsProfileSettingIdMapped ( int ProfileSettingId )
{
	static UFunction* pFnIsProfileSettingIdMapped = NULL;

	if ( ! pFnIsProfileSettingIdMapped )
		pFnIsProfileSettingIdMapped = (UFunction*) UObject::GObjObjects()->Data[ 24153 ];

	UOnlineProfileSettings_execIsProfileSettingIdMapped_Parms IsProfileSettingIdMapped_Parms;
	IsProfileSettingIdMapped_Parms.ProfileSettingId = ProfileSettingId;

	pFnIsProfileSettingIdMapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsProfileSettingIdMapped, &IsProfileSettingIdMapped_Parms, NULL );

	pFnIsProfileSettingIdMapped->FunctionFlags |= 0x400;

	return IsProfileSettingIdMapped_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.FindProfileMappingIndexByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )

int UOnlineProfileSettings::FindProfileMappingIndexByName ( struct FName ProfileSettingName )
{
	static UFunction* pFnFindProfileMappingIndexByName = NULL;

	if ( ! pFnFindProfileMappingIndexByName )
		pFnFindProfileMappingIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 24150 ];

	UOnlineProfileSettings_execFindProfileMappingIndexByName_Parms FindProfileMappingIndexByName_Parms;
	memcpy ( &FindProfileMappingIndexByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnFindProfileMappingIndexByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndexByName, &FindProfileMappingIndexByName_Parms, NULL );

	pFnFindProfileMappingIndexByName->FunctionFlags |= 0x400;

	return FindProfileMappingIndexByName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.FindProfileMappingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlineProfileSettings::FindProfileMappingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileMappingIndex = NULL;

	if ( ! pFnFindProfileMappingIndex )
		pFnFindProfileMappingIndex = (UFunction*) UObject::GObjObjects()->Data[ 24147 ];

	UOnlineProfileSettings_execFindProfileMappingIndex_Parms FindProfileMappingIndex_Parms;
	FindProfileMappingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileMappingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndex, &FindProfileMappingIndex_Parms, NULL );

	pFnFindProfileMappingIndex->FunctionFlags |= 0x400;

	return FindProfileMappingIndex_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.FindProfileSettingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlineProfileSettings::FindProfileSettingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileSettingIndex = NULL;

	if ( ! pFnFindProfileSettingIndex )
		pFnFindProfileSettingIndex = (UFunction*) UObject::GObjObjects()->Data[ 24144 ];

	UOnlineProfileSettings_execFindProfileSettingIndex_Parms FindProfileSettingIndex_Parms;
	FindProfileSettingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileSettingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileSettingIndex, &FindProfileSettingIndex_Parms, NULL );

	pFnFindProfileSettingIndex->FunctionFlags |= 0x400;

	return FindProfileSettingIndex_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FString UOnlineProfileSettings::GetProfileSettingColumnHeader ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingColumnHeader = NULL;

	if ( ! pFnGetProfileSettingColumnHeader )
		pFnGetProfileSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 24141 ];

	UOnlineProfileSettings_execGetProfileSettingColumnHeader_Parms GetProfileSettingColumnHeader_Parms;
	GetProfileSettingColumnHeader_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingColumnHeader, &GetProfileSettingColumnHeader_Parms, NULL );

	pFnGetProfileSettingColumnHeader->FunctionFlags |= 0x400;

	return GetProfileSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlineProfileSettings::GetProfileSettingName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingName = NULL;

	if ( ! pFnGetProfileSettingName )
		pFnGetProfileSettingName = (UFunction*) UObject::GObjObjects()->Data[ 24138 ];

	UOnlineProfileSettings_execGetProfileSettingName_Parms GetProfileSettingName_Parms;
	GetProfileSettingName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingName, &GetProfileSettingName_Parms, NULL );

	pFnGetProfileSettingName->FunctionFlags |= 0x400;

	return GetProfileSettingName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// int                            ProfileSettingId               ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingId = NULL;

	if ( ! pFnGetProfileSettingId )
		pFnGetProfileSettingId = (UFunction*) UObject::GObjObjects()->Data[ 24134 ];

	UOnlineProfileSettings_execGetProfileSettingId_Parms GetProfileSettingId_Parms;
	memcpy ( &GetProfileSettingId_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingId, &GetProfileSettingId_Parms, NULL );

	pFnGetProfileSettingId->FunctionFlags |= 0x400;

	if ( ProfileSettingId )
		*ProfileSettingId = GetProfileSettingId_Parms.ProfileSettingId;

	return GetProfileSettingId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.NotifySettingValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void UOnlineProfileSettings::NotifySettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnNotifySettingValueUpdated = NULL;

	if ( ! pFnNotifySettingValueUpdated )
		pFnNotifySettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 24132 ];

	UOnlineProfileSettings_execNotifySettingValueUpdated_Parms NotifySettingValueUpdated_Parms;
	memcpy ( &NotifySettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnNotifySettingValueUpdated, &NotifySettingValueUpdated_Parms, NULL );
};

// Function Engine.OnlineStats.GetViewName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ViewId                         ( CPF_Parm )

struct FName UOnlineStats::GetViewName ( int ViewId )
{
	static UFunction* pFnGetViewName = NULL;

	if ( ! pFnGetViewName )
		pFnGetViewName = (UFunction*) UObject::GObjObjects()->Data[ 24306 ];

	UOnlineStats_execGetViewName_Parms GetViewName_Parms;
	GetViewName_Parms.ViewId = ViewId;

	pFnGetViewName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewName, &GetViewName_Parms, NULL );

	pFnGetViewName->FunctionFlags |= 0x400;

	return GetViewName_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ViewName                       ( CPF_Parm )
// int                            ViewId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStats::GetViewId ( struct FName ViewName, int* ViewId )
{
	static UFunction* pFnGetViewId = NULL;

	if ( ! pFnGetViewId )
		pFnGetViewId = (UFunction*) UObject::GObjObjects()->Data[ 24302 ];

	UOnlineStats_execGetViewId_Parms GetViewId_Parms;
	memcpy ( &GetViewId_Parms.ViewName, &ViewName, 0x8 );

	pFnGetViewId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewId, &GetViewId_Parms, NULL );

	pFnGetViewId->FunctionFlags |= 0x400;

	if ( ViewId )
		*ViewId = GetViewId_Parms.ViewId;

	return GetViewId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.OnStatsReadComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsRead::OnStatsReadComplete ( )
{
	static UFunction* pFnOnStatsReadComplete = NULL;

	if ( ! pFnOnStatsReadComplete )
		pFnOnStatsReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 24403 ];

	UOnlineStatsRead_execOnStatsReadComplete_Parms OnStatsReadComplete_Parms;

	this->ProcessEvent ( pFnOnStatsReadComplete, &OnStatsReadComplete_Parms, NULL );
};

// Function Engine.OnlineStatsWrite.DecrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementIntStat ( int StatId, int DecBy )
{
	static UFunction* pFnDecrementIntStat = NULL;

	if ( ! pFnDecrementIntStat )
		pFnDecrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 24437 ];

	UOnlineStatsWrite_execDecrementIntStat_Parms DecrementIntStat_Parms;
	DecrementIntStat_Parms.StatId = StatId;
	DecrementIntStat_Parms.DecBy = DecBy;

	pFnDecrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementIntStat, &DecrementIntStat_Parms, NULL );

	pFnDecrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.DecrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementFloatStat ( int StatId, float DecBy )
{
	static UFunction* pFnDecrementFloatStat = NULL;

	if ( ! pFnDecrementFloatStat )
		pFnDecrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 24434 ];

	UOnlineStatsWrite_execDecrementFloatStat_Parms DecrementFloatStat_Parms;
	DecrementFloatStat_Parms.StatId = StatId;
	DecrementFloatStat_Parms.DecBy = DecBy;

	pFnDecrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementFloatStat, &DecrementFloatStat_Parms, NULL );

	pFnDecrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementIntStat ( int StatId, int IncBy )
{
	static UFunction* pFnIncrementIntStat = NULL;

	if ( ! pFnIncrementIntStat )
		pFnIncrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 24431 ];

	UOnlineStatsWrite_execIncrementIntStat_Parms IncrementIntStat_Parms;
	IncrementIntStat_Parms.StatId = StatId;
	IncrementIntStat_Parms.IncBy = IncBy;

	pFnIncrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementIntStat, &IncrementIntStat_Parms, NULL );

	pFnIncrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementFloatStat ( int StatId, float IncBy )
{
	static UFunction* pFnIncrementFloatStat = NULL;

	if ( ! pFnIncrementFloatStat )
		pFnIncrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 24428 ];

	UOnlineStatsWrite_execIncrementFloatStat_Parms IncrementFloatStat_Parms;
	IncrementFloatStat_Parms.StatId = StatId;
	IncrementFloatStat_Parms.IncBy = IncBy;

	pFnIncrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementFloatStat, &IncrementFloatStat_Parms, NULL );

	pFnIncrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetIntStat ( int StatId, int Value )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = (UFunction*) UObject::GObjObjects()->Data[ 24425 ];

	UOnlineStatsWrite_execSetIntStat_Parms SetIntStat_Parms;
	SetIntStat_Parms.StatId = StatId;
	SetIntStat_Parms.Value = Value;

	pFnSetIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );

	pFnSetIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetFloatStat ( int StatId, float Value )
{
	static UFunction* pFnSetFloatStat = NULL;

	if ( ! pFnSetFloatStat )
		pFnSetFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 24422 ];

	UOnlineStatsWrite_execSetFloatStat_Parms SetFloatStat_Parms;
	SetFloatStat_Parms.StatId = StatId;
	SetFloatStat_Parms.Value = Value;

	pFnSetFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStat, &SetFloatStat_Parms, NULL );

	pFnSetFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.GetStatName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StatId                         ( CPF_Parm )

struct FName UOnlineStatsWrite::GetStatName ( int StatId )
{
	static UFunction* pFnGetStatName = NULL;

	if ( ! pFnGetStatName )
		pFnGetStatName = (UFunction*) UObject::GObjObjects()->Data[ 24419 ];

	UOnlineStatsWrite_execGetStatName_Parms GetStatName_Parms;
	GetStatName_Parms.StatId = StatId;

	pFnGetStatName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatName, &GetStatName_Parms, NULL );

	pFnGetStatName->FunctionFlags |= 0x400;

	return GetStatName_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.GetStatId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )
// int                            StatId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsWrite::GetStatId ( struct FName StatName, int* StatId )
{
	static UFunction* pFnGetStatId = NULL;

	if ( ! pFnGetStatId )
		pFnGetStatId = (UFunction*) UObject::GObjObjects()->Data[ 24415 ];

	UOnlineStatsWrite_execGetStatId_Parms GetStatId_Parms;
	memcpy ( &GetStatId_Parms.StatName, &StatName, 0x8 );

	pFnGetStatId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatId, &GetStatId_Parms, NULL );

	pFnGetStatId->FunctionFlags |= 0x400;

	if ( StatId )
		*StatId = GetStatId_Parms.StatId;

	return GetStatId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsWrite::OnStatsWriteComplete ( )
{
	static UFunction* pFnOnStatsWriteComplete = NULL;

	if ( ! pFnOnStatsWriteComplete )
		pFnOnStatsWriteComplete = (UFunction*) UObject::GObjObjects()->Data[ 24414 ];

	UOnlineStatsWrite_execOnStatsWriteComplete_Parms OnStatsWriteComplete_Parms;

	this->ProcessEvent ( pFnOnStatsWriteComplete, &OnStatsWriteComplete_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpSessionState
// [0x00820002] 
// Parameters infos:

void UOnlineSubsystem::DumpSessionState ( )
{
	static UFunction* pFnDumpSessionState = NULL;

	if ( ! pFnDumpSessionState )
		pFnDumpSessionState = (UFunction*) UObject::GObjObjects()->Data[ 24493 ];

	UOnlineSubsystem_execDumpSessionState_Parms DumpSessionState_Parms;

	this->ProcessEvent ( pFnDumpSessionState, &DumpSessionState_Parms, NULL );
};

// Function Engine.OnlineSubsystem.GetBuildUniqueId
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetBuildUniqueId ( )
{
	static UFunction* pFnGetBuildUniqueId = NULL;

	if ( ! pFnGetBuildUniqueId )
		pFnGetBuildUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 24491 ];

	UOnlineSubsystem_execGetBuildUniqueId_Parms GetBuildUniqueId_Parms;

	pFnGetBuildUniqueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildUniqueId, &GetBuildUniqueId_Parms, NULL );

	pFnGetBuildUniqueId->FunctionFlags |= 0x400;

	return GetBuildUniqueId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.AreUniqueNetIdsEqual
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetIdA                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            NetIdB                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::AreUniqueNetIdsEqual ( struct FUniqueNetId* NetIdA, struct FUniqueNetId* NetIdB )
{
	static UFunction* pFnAreUniqueNetIdsEqual = NULL;

	if ( ! pFnAreUniqueNetIdsEqual )
		pFnAreUniqueNetIdsEqual = (UFunction*) UObject::GObjObjects()->Data[ 20728 ];

	UOnlineSubsystem_execAreUniqueNetIdsEqual_Parms AreUniqueNetIdsEqual_Parms;

	pFnAreUniqueNetIdsEqual->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreUniqueNetIdsEqual, &AreUniqueNetIdsEqual_Parms, NULL );

	pFnAreUniqueNetIdsEqual->FunctionFlags |= 0x400;

	if ( NetIdA )
		memcpy ( NetIdA, &AreUniqueNetIdsEqual_Parms.NetIdA, 0x8 );

	if ( NetIdB )
		memcpy ( NetIdB, &AreUniqueNetIdsEqual_Parms.NetIdB, 0x8 );

	return AreUniqueNetIdsEqual_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.StringToUniqueNetId
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UniqueNetIdString              ( CPF_Parm )
// struct FUniqueNetId            out_UniqueId                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId )
{
	static UFunction* pFnStringToUniqueNetId = NULL;

	if ( ! pFnStringToUniqueNetId )
		pFnStringToUniqueNetId = (UFunction*) UObject::GObjObjects()->Data[ 24484 ];

	UOnlineSubsystem_execStringToUniqueNetId_Parms StringToUniqueNetId_Parms;
	memcpy ( &StringToUniqueNetId_Parms.UniqueNetIdString, &UniqueNetIdString, 0xC );

	pFnStringToUniqueNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStringToUniqueNetId, &StringToUniqueNetId_Parms, NULL );

	pFnStringToUniqueNetId->FunctionFlags |= 0x400;

	if ( out_UniqueId )
		memcpy ( out_UniqueId, &StringToUniqueNetId_Parms.out_UniqueId, 0x8 );

	return StringToUniqueNetId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIdToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            IdToConvert                    ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UOnlineSubsystem::UniqueNetIdToString ( struct FUniqueNetId* IdToConvert )
{
	static UFunction* pFnUniqueNetIdToString = NULL;

	if ( ! pFnUniqueNetIdToString )
		pFnUniqueNetIdToString = (UFunction*) UObject::GObjObjects()->Data[ 24481 ];

	UOnlineSubsystem_execUniqueNetIdToString_Parms UniqueNetIdToString_Parms;

	pFnUniqueNetIdToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueNetIdToString, &UniqueNetIdToString_Parms, NULL );

	pFnUniqueNetIdToString->FunctionFlags |= 0x400;

	if ( IdToConvert )
		memcpy ( IdToConvert, &UniqueNetIdToString_Parms.IdToConvert, 0x8 );

	return UniqueNetIdToString_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InterfaceName                  ( CPF_Parm )

class UObject* UOnlineSubsystem::eventGetNamedInterface ( struct FName InterfaceName )
{
	static UFunction* pFnGetNamedInterface = NULL;

	if ( ! pFnGetNamedInterface )
		pFnGetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 24477 ];

	UOnlineSubsystem_eventGetNamedInterface_Parms GetNamedInterface_Parms;
	memcpy ( &GetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );

	this->ProcessEvent ( pFnGetNamedInterface, &GetNamedInterface_Parms, NULL );

	return GetNamedInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   InterfaceName                  ( CPF_Parm )
// class UObject*                 NewInterface                   ( CPF_Parm )

void UOnlineSubsystem::eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface )
{
	static UFunction* pFnSetNamedInterface = NULL;

	if ( ! pFnSetNamedInterface )
		pFnSetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 24473 ];

	UOnlineSubsystem_eventSetNamedInterface_Parms SetNamedInterface_Parms;
	memcpy ( &SetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );
	SetNamedInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNamedInterface, &SetNamedInterface_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetNewsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetNewsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetNewsInterface = NULL;

	if ( ! pFnSetNewsInterface )
		pFnSetNewsInterface = (UFunction*) UObject::GObjObjects()->Data[ 24470 ];

	UOnlineSubsystem_eventSetNewsInterface_Parms SetNewsInterface_Parms;
	SetNewsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNewsInterface, &SetNewsInterface_Parms, NULL );

	return SetNewsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetStatsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetStatsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetStatsInterface = NULL;

	if ( ! pFnSetStatsInterface )
		pFnSetStatsInterface = (UFunction*) UObject::GObjObjects()->Data[ 24467 ];

	UOnlineSubsystem_eventSetStatsInterface_Parms SetStatsInterface_Parms;
	SetStatsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetStatsInterface, &SetStatsInterface_Parms, NULL );

	return SetStatsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetVoiceInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetVoiceInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetVoiceInterface = NULL;

	if ( ! pFnSetVoiceInterface )
		pFnSetVoiceInterface = (UFunction*) UObject::GObjObjects()->Data[ 24464 ];

	UOnlineSubsystem_eventSetVoiceInterface_Parms SetVoiceInterface_Parms;
	SetVoiceInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetVoiceInterface, &SetVoiceInterface_Parms, NULL );

	return SetVoiceInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetContentInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetContentInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetContentInterface = NULL;

	if ( ! pFnSetContentInterface )
		pFnSetContentInterface = (UFunction*) UObject::GObjObjects()->Data[ 24461 ];

	UOnlineSubsystem_eventSetContentInterface_Parms SetContentInterface_Parms;
	SetContentInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetContentInterface, &SetContentInterface_Parms, NULL );

	return SetContentInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetGameInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetGameInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetGameInterface = NULL;

	if ( ! pFnSetGameInterface )
		pFnSetGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 24458 ];

	UOnlineSubsystem_eventSetGameInterface_Parms SetGameInterface_Parms;
	SetGameInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetGameInterface, &SetGameInterface_Parms, NULL );

	return SetGameInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSystemInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetSystemInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetSystemInterface = NULL;

	if ( ! pFnSetSystemInterface )
		pFnSetSystemInterface = (UFunction*) UObject::GObjObjects()->Data[ 24455 ];

	UOnlineSubsystem_eventSetSystemInterface_Parms SetSystemInterface_Parms;
	SetSystemInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetSystemInterface, &SetSystemInterface_Parms, NULL );

	return SetSystemInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterfaceEx ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterfaceEx = NULL;

	if ( ! pFnSetPlayerInterfaceEx )
		pFnSetPlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 24452 ];

	UOnlineSubsystem_eventSetPlayerInterfaceEx_Parms SetPlayerInterfaceEx_Parms;
	SetPlayerInterfaceEx_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterfaceEx, &SetPlayerInterfaceEx_Parms, NULL );

	return SetPlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterface = NULL;

	if ( ! pFnSetPlayerInterface )
		pFnSetPlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 24449 ];

	UOnlineSubsystem_eventSetPlayerInterface_Parms SetPlayerInterface_Parms;
	SetPlayerInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterface, &SetPlayerInterface_Parms, NULL );

	return SetPlayerInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAccountInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetAccountInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetAccountInterface = NULL;

	if ( ! pFnSetAccountInterface )
		pFnSetAccountInterface = (UFunction*) UObject::GObjObjects()->Data[ 24446 ];

	UOnlineSubsystem_eventSetAccountInterface_Parms SetAccountInterface_Parms;
	SetAccountInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetAccountInterface, &SetAccountInterface_Parms, NULL );

	return SetAccountInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Exit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineSubsystem::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 24445 ];

	UOnlineSubsystem_eventExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineSubsystem.PostInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventPostInit ( )
{
	static UFunction* pFnPostInit = NULL;

	if ( ! pFnPostInit )
		pFnPostInit = (UFunction*) UObject::GObjObjects()->Data[ 24442 ];

	UOnlineSubsystem_eventPostInit_Parms PostInit_Parms;

	this->ProcessEvent ( pFnPostInit, &PostInit_Parms, NULL );

	return PostInit_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 24440 ];

	UOnlineSubsystem_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;

	return Init_Parms.ReturnValue;
};

// Function Engine.PathNode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APathNode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 25533 ];

	APathNode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.Pawn.GlideDrop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::GlideDrop ( )
{
	static UFunction* pFnGlideDrop = NULL;

	if ( ! pFnGlideDrop )
		pFnGlideDrop = (UFunction*) UObject::GObjObjects()->Data[ 26400 ];

	APawn_execGlideDrop_Parms GlideDrop_Parms;

	pFnGlideDrop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGlideDrop, &GlideDrop_Parms, NULL );

	pFnGlideDrop->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StopGlide
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StopGlide ( )
{
	static UFunction* pFnStopGlide = NULL;

	if ( ! pFnStopGlide )
		pFnStopGlide = (UFunction*) UObject::GObjObjects()->Data[ 26399 ];

	APawn_execStopGlide_Parms StopGlide_Parms;

	pFnStopGlide->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGlide, &StopGlide_Parms, NULL );

	pFnStopGlide->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StartGlide
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StartGlide ( )
{
	static UFunction* pFnStartGlide = NULL;

	if ( ! pFnStartGlide )
		pFnStartGlide = (UFunction*) UObject::GObjObjects()->Data[ 26398 ];

	APawn_execStartGlide_Parms StartGlide_Parms;

	pFnStartGlide->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartGlide, &StartGlide_Parms, NULL );

	pFnStartGlide->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StopGroggy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StopGroggy ( )
{
	static UFunction* pFnStopGroggy = NULL;

	if ( ! pFnStopGroggy )
		pFnStopGroggy = (UFunction*) UObject::GObjObjects()->Data[ 26397 ];

	APawn_execStopGroggy_Parms StopGroggy_Parms;

	pFnStopGroggy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGroggy, &StopGroggy_Parms, NULL );

	pFnStopGroggy->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StartGroggy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StartGroggy ( )
{
	static UFunction* pFnStartGroggy = NULL;

	if ( ! pFnStartGroggy )
		pFnStartGroggy = (UFunction*) UObject::GObjObjects()->Data[ 26396 ];

	APawn_execStartGroggy_Parms StartGroggy_Parms;

	pFnStartGroggy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartGroggy, &StartGroggy_Parms, NULL );

	pFnStartGroggy->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.DoFalling
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::DoFalling ( )
{
	static UFunction* pFnDoFalling = NULL;

	if ( ! pFnDoFalling )
		pFnDoFalling = (UFunction*) UObject::GObjObjects()->Data[ 26395 ];

	APawn_execDoFalling_Parms DoFalling_Parms;

	pFnDoFalling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoFalling, &DoFalling_Parms, NULL );

	pFnDoFalling->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StopWallJump
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StopWallJump ( )
{
	static UFunction* pFnStopWallJump = NULL;

	if ( ! pFnStopWallJump )
		pFnStopWallJump = (UFunction*) UObject::GObjObjects()->Data[ 26394 ];

	APawn_execStopWallJump_Parms StopWallJump_Parms;

	pFnStopWallJump->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopWallJump, &StopWallJump_Parms, NULL );

	pFnStopWallJump->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StopMagnet
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StopMagnet ( )
{
	static UFunction* pFnStopMagnet = NULL;

	if ( ! pFnStopMagnet )
		pFnStopMagnet = (UFunction*) UObject::GObjObjects()->Data[ 26393 ];

	APawn_execStopMagnet_Parms StopMagnet_Parms;

	pFnStopMagnet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMagnet, &StopMagnet_Parms, NULL );

	pFnStopMagnet->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StartMagnet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )

void APawn::StartMagnet ( class AActor* HitActor )
{
	static UFunction* pFnStartMagnet = NULL;

	if ( ! pFnStartMagnet )
		pFnStartMagnet = (UFunction*) UObject::GObjObjects()->Data[ 26391 ];

	APawn_execStartMagnet_Parms StartMagnet_Parms;
	StartMagnet_Parms.HitActor = HitActor;

	pFnStartMagnet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartMagnet, &StartMagnet_Parms, NULL );

	pFnStartMagnet->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.EndDive
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::EndDive ( )
{
	static UFunction* pFnEndDive = NULL;

	if ( ! pFnEndDive )
		pFnEndDive = (UFunction*) UObject::GObjObjects()->Data[ 26390 ];

	APawn_execEndDive_Parms EndDive_Parms;

	pFnEndDive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndDive, &EndDive_Parms, NULL );

	pFnEndDive->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.StartDive
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::StartDive ( )
{
	static UFunction* pFnStartDive = NULL;

	if ( ! pFnStartDive )
		pFnStartDive = (UFunction*) UObject::GObjObjects()->Data[ 26389 ];

	APawn_execStartDive_Parms StartDive_Parms;

	pFnStartDive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartDive, &StartDive_Parms, NULL );

	pFnStartDive->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.UnDashing
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::UnDashing ( )
{
	static UFunction* pFnUnDashing = NULL;

	if ( ! pFnUnDashing )
		pFnUnDashing = (UFunction*) UObject::GObjObjects()->Data[ 26388 ];

	APawn_execUnDashing_Parms UnDashing_Parms;

	pFnUnDashing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnDashing, &UnDashing_Parms, NULL );

	pFnUnDashing->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.Dashing
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::Dashing ( )
{
	static UFunction* pFnDashing = NULL;

	if ( ! pFnDashing )
		pFnDashing = (UFunction*) UObject::GObjObjects()->Data[ 26387 ];

	APawn_execDashing_Parms Dashing_Parms;

	pFnDashing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDashing, &Dashing_Parms, NULL );

	pFnDashing->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.NativeJump
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::NativeJump ( )
{
	static UFunction* pFnNativeJump = NULL;

	if ( ! pFnNativeJump )
		pFnNativeJump = (UFunction*) UObject::GObjObjects()->Data[ 26385 ];

	APawn_execNativeJump_Parms NativeJump_Parms;

	pFnNativeJump->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeJump, &NativeJump_Parms, NULL );

	pFnNativeJump->FunctionFlags |= 0x400;

	return NativeJump_Parms.ReturnValue;
};

// Function Engine.Pawn.SetForceFallAnimMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFlag                          ( CPF_Parm )

void APawn::SetForceFallAnimMode ( unsigned long bFlag )
{
	static UFunction* pFnSetForceFallAnimMode = NULL;

	if ( ! pFnSetForceFallAnimMode )
		pFnSetForceFallAnimMode = (UFunction*) UObject::GObjObjects()->Data[ 26383 ];

	APawn_execSetForceFallAnimMode_Parms SetForceFallAnimMode_Parms;
	SetForceFallAnimMode_Parms.bFlag = bFlag;

	pFnSetForceFallAnimMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceFallAnimMode, &SetForceFallAnimMode_Parms, NULL );

	pFnSetForceFallAnimMode->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsIgnoreInputKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned long                  bPressedW                      ( CPF_Parm )

bool APawn::IsIgnoreInputKey ( struct FName Key, unsigned long bPressedW )
{
	static UFunction* pFnIsIgnoreInputKey = NULL;

	if ( ! pFnIsIgnoreInputKey )
		pFnIsIgnoreInputKey = (UFunction*) UObject::GObjObjects()->Data[ 26379 ];

	APawn_execIsIgnoreInputKey_Parms IsIgnoreInputKey_Parms;
	memcpy ( &IsIgnoreInputKey_Parms.Key, &Key, 0x8 );
	IsIgnoreInputKey_Parms.bPressedW = bPressedW;

	pFnIsIgnoreInputKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsIgnoreInputKey, &IsIgnoreInputKey_Parms, NULL );

	pFnIsIgnoreInputKey->FunctionFlags |= 0x400;

	return IsIgnoreInputKey_Parms.ReturnValue;
};

// Function Engine.Pawn.IsCheckReleasedKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )

bool APawn::IsCheckReleasedKey ( struct FName Key )
{
	static UFunction* pFnIsCheckReleasedKey = NULL;

	if ( ! pFnIsCheckReleasedKey )
		pFnIsCheckReleasedKey = (UFunction*) UObject::GObjObjects()->Data[ 26376 ];

	APawn_execIsCheckReleasedKey_Parms IsCheckReleasedKey_Parms;
	memcpy ( &IsCheckReleasedKey_Parms.Key, &Key, 0x8 );

	pFnIsCheckReleasedKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCheckReleasedKey, &IsCheckReleasedKey_Parms, NULL );

	pFnIsCheckReleasedKey->FunctionFlags |= 0x400;

	return IsCheckReleasedKey_Parms.ReturnValue;
};

// Function Engine.Pawn.ReleaseDoubleClicked
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ReleaseDoubleClicked ( )
{
	static UFunction* pFnReleaseDoubleClicked = NULL;

	if ( ! pFnReleaseDoubleClicked )
		pFnReleaseDoubleClicked = (UFunction*) UObject::GObjObjects()->Data[ 26375 ];

	APawn_execReleaseDoubleClicked_Parms ReleaseDoubleClicked_Parms;

	pFnReleaseDoubleClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseDoubleClicked, &ReleaseDoubleClicked_Parms, NULL );

	pFnReleaseDoubleClicked->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearPathStep ( )
{
	static UFunction* pFnClearPathStep = NULL;

	if ( ! pFnClearPathStep )
		pFnClearPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26374 ];

	APawn_execClearPathStep_Parms ClearPathStep_Parms;

	pFnClearPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPathStep, &ClearPathStep_Parms, NULL );

	pFnClearPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.DrawPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::DrawPathStep ( class UCanvas* C )
{
	static UFunction* pFnDrawPathStep = NULL;

	if ( ! pFnDrawPathStep )
		pFnDrawPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26372 ];

	APawn_execDrawPathStep_Parms DrawPathStep_Parms;
	DrawPathStep_Parms.C = C;

	pFnDrawPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathStep, &DrawPathStep_Parms, NULL );

	pFnDrawPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathChild ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathChild = NULL;

	if ( ! pFnIncrementPathChild )
		pFnIncrementPathChild = (UFunction*) UObject::GObjObjects()->Data[ 26369 ];

	APawn_execIncrementPathChild_Parms IncrementPathChild_Parms;
	IncrementPathChild_Parms.Cnt = Cnt;
	IncrementPathChild_Parms.C = C;

	pFnIncrementPathChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathChild, &IncrementPathChild_Parms, NULL );

	pFnIncrementPathChild->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathStep ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathStep = NULL;

	if ( ! pFnIncrementPathStep )
		pFnIncrementPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26366 ];

	APawn_execIncrementPathStep_Parms IncrementPathStep_Parms;
	IncrementPathStep_Parms.Cnt = Cnt;
	IncrementPathStep_Parms.C = C;

	pFnIncrementPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathStep, &IncrementPathStep_Parms, NULL );

	pFnIncrementPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathGoalEvaluator*      Evaluator                      ( CPF_Parm )

void APawn::AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 26364 ];

	APawn_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathConstraint*         Constraint                     ( CPF_Parm )

void APawn::AddPathConstraint ( class UPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 26362 ];

	APawn_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = (UFunction*) UObject::GObjObjects()->Data[ 26361 ];

	APawn_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSoakPause ( )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 26359 ];

	APawn_eventSoakPause_Parms SoakPause_Parms;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.Pawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void APawn::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 26357 ];

	APawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Pawn.AdjustCameraScale
// [0x00020100] 
// Parameters infos:
// unsigned long                  bMoveCameraIn                  ( CPF_Parm )

void APawn::AdjustCameraScale ( unsigned long bMoveCameraIn )
{
	static UFunction* pFnAdjustCameraScale = NULL;

	if ( ! pFnAdjustCameraScale )
		pFnAdjustCameraScale = (UFunction*) UObject::GObjObjects()->Data[ 26355 ];

	APawn_execAdjustCameraScale_Parms AdjustCameraScale_Parms;
	AdjustCameraScale_Parms.bMoveCameraIn = bMoveCameraIn;

	this->ProcessEvent ( pFnAdjustCameraScale, &AdjustCameraScale_Parms, NULL );
};

// Function Engine.Pawn.MessagePlayer
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )

void APawn::eventMessagePlayer ( struct FString msg )
{
	static UFunction* pFnMessagePlayer = NULL;

	if ( ! pFnMessagePlayer )
		pFnMessagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 26353 ];

	APawn_eventMessagePlayer_Parms MessagePlayer_Parms;
	memcpy ( &MessagePlayer_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnMessagePlayer, &MessagePlayer_Parms, NULL );
};

// Function Engine.Pawn.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool APawn::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 26347 ];

	APawn_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Pawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void APawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 26340 ];

	APawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Pawn.OnSetMaterial
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void APawn::eventOnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 26338 ];

	APawn_eventOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.Pawn.InCombat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 26336 ];

	APawn_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function Engine.Pawn.PoweredUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::PoweredUp ( )
{
	static UFunction* pFnPoweredUp = NULL;

	if ( ! pFnPoweredUp )
		pFnPoweredUp = (UFunction*) UObject::GObjObjects()->Data[ 26334 ];

	APawn_execPoweredUp_Parms PoweredUp_Parms;

	this->ProcessEvent ( pFnPoweredUp, &PoweredUp_Parms, NULL );

	return PoweredUp_Parms.ReturnValue;
};

// Function Engine.Pawn.GetDamageScaling
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetDamageScaling ( )
{
	static UFunction* pFnGetDamageScaling = NULL;

	if ( ! pFnGetDamageScaling )
		pFnGetDamageScaling = (UFunction*) UObject::GObjObjects()->Data[ 26332 ];

	APawn_execGetDamageScaling_Parms GetDamageScaling_Parms;

	this->ProcessEvent ( pFnGetDamageScaling, &GetDamageScaling_Parms, NULL );

	return GetDamageScaling_Parms.ReturnValue;
};

// Function Engine.Pawn.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void APawn::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 26325 ];

	APawn_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Pawn.SpawnedByKismet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 26324 ];

	APawn_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Pawn.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 26322 ];

	APawn_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionExtent
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::GetCollisionExtent ( )
{
	static UFunction* pFnGetCollisionExtent = NULL;

	if ( ! pFnGetCollisionExtent )
		pFnGetCollisionExtent = (UFunction*) UObject::GObjObjects()->Data[ 21424 ];

	APawn_execGetCollisionExtent_Parms GetCollisionExtent_Parms;

	this->ProcessEvent ( pFnGetCollisionExtent, &GetCollisionExtent_Parms, NULL );

	return GetCollisionExtent_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionHeight
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionHeight ( )
{
	static UFunction* pFnGetCollisionHeight = NULL;

	if ( ! pFnGetCollisionHeight )
		pFnGetCollisionHeight = (UFunction*) UObject::GObjObjects()->Data[ 26318 ];

	APawn_execGetCollisionHeight_Parms GetCollisionHeight_Parms;

	this->ProcessEvent ( pFnGetCollisionHeight, &GetCollisionHeight_Parms, NULL );

	return GetCollisionHeight_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionRadius ( )
{
	static UFunction* pFnGetCollisionRadius = NULL;

	if ( ! pFnGetCollisionRadius )
		pFnGetCollisionRadius = (UFunction*) UObject::GObjObjects()->Data[ 26316 ];

	APawn_execGetCollisionRadius_Parms GetCollisionRadius_Parms;

	this->ProcessEvent ( pFnGetCollisionRadius, &GetCollisionRadius_Parms, NULL );

	return GetCollisionRadius_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 26314 ];

	APawn_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 26312 ];

	APawn_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 26310 ];

	APawn_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayWeaponSwitch
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 OldWeapon                      ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 26307 ];

	APawn_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;
	PlayWeaponSwitch_Parms.OldWeapon = OldWeapon;
	PlayWeaponSwitch_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function Engine.Pawn.SetActiveWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::SetActiveWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnSetActiveWeapon = NULL;

	if ( ! pFnSetActiveWeapon )
		pFnSetActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 26305 ];

	APawn_execSetActiveWeapon_Parms SetActiveWeapon_Parms;
	SetActiveWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnSetActiveWeapon, &SetActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.TossInventory
// [0x00824002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )
// struct FVector                 ForceVelocity                  ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void APawn::TossInventory ( class AInventory* Inv, struct FVector ForceVelocity, class UClass* DamageType )
{
	static UFunction* pFnTossInventory = NULL;

	if ( ! pFnTossInventory )
		pFnTossInventory = (UFunction*) UObject::GObjObjects()->Data[ 26295 ];

	APawn_execTossInventory_Parms TossInventory_Parms;
	TossInventory_Parms.Inv = Inv;
	memcpy ( &TossInventory_Parms.ForceVelocity, &ForceVelocity, 0xC );
	TossInventory_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnTossInventory, &TossInventory_Parms, NULL );
};

// Function Engine.Pawn.ThrowActiveWeapon
// [0x00024002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void APawn::ThrowActiveWeapon ( class UClass* DamageType )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 26293 ];

	APawn_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;
	ThrowActiveWeapon_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APawn::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 26291 ];

	APawn_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.Pawn.FindInventoryType
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 12238 ];

	APawn_execFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.Pawn.CreateInventory
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInvClass                    ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 12239 ];

	APawn_eventCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInvClass = NewInvClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.Pawn.AddDefaultInventory
// [0x00020000] 
// Parameters infos:

void APawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 26284 ];

	APawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.Pawn.StopDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStopDriving ( class AVehicle* V )
{
	static UFunction* pFnStopDriving = NULL;

	if ( ! pFnStopDriving )
		pFnStopDriving = (UFunction*) UObject::GObjObjects()->Data[ 26282 ];

	APawn_eventStopDriving_Parms StopDriving_Parms;
	StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnStopDriving, &StopDriving_Parms, NULL );
};

// Function Engine.Pawn.StartDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStartDriving ( class AVehicle* V )
{
	static UFunction* pFnStartDriving = NULL;

	if ( ! pFnStartDriving )
		pFnStartDriving = (UFunction*) UObject::GObjObjects()->Data[ 26280 ];

	APawn_eventStartDriving_Parms StartDriving_Parms;
	StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnStartDriving, &StartDriving_Parms, NULL );
};

// Function Engine.Pawn.Suicide
// [0x00020002] 
// Parameters infos:

void APawn::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 26279 ];

	APawn_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Pawn.GetVehicleBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AVehicle*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AVehicle* APawn::GetVehicleBase ( )
{
	static UFunction* pFnGetVehicleBase = NULL;

	if ( ! pFnGetVehicleBase )
		pFnGetVehicleBase = (UFunction*) UObject::GObjObjects()->Data[ 26277 ];

	APawn_execGetVehicleBase_Parms GetVehicleBase_Parms;

	pFnGetVehicleBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVehicleBase, &GetVehicleBase_Parms, NULL );

	pFnGetVehicleBase->FunctionFlags |= 0x400;

	return GetVehicleBase_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayLanded
// [0x00020000] 
// Parameters infos:
// float                          ImpactVel                      ( CPF_Parm )

void APawn::PlayLanded ( float ImpactVel )
{
	static UFunction* pFnPlayLanded = NULL;

	if ( ! pFnPlayLanded )
		pFnPlayLanded = (UFunction*) UObject::GObjObjects()->Data[ 26275 ];

	APawn_execPlayLanded_Parms PlayLanded_Parms;
	PlayLanded_Parms.ImpactVel = ImpactVel;

	this->ProcessEvent ( pFnPlayLanded, &PlayLanded_Parms, NULL );
};

// Function Engine.Pawn.CannotJumpNow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CannotJumpNow ( )
{
	static UFunction* pFnCannotJumpNow = NULL;

	if ( ! pFnCannotJumpNow )
		pFnCannotJumpNow = (UFunction*) UObject::GObjObjects()->Data[ 26273 ];

	APawn_execCannotJumpNow_Parms CannotJumpNow_Parms;

	this->ProcessEvent ( pFnCannotJumpNow, &CannotJumpNow_Parms, NULL );

	return CannotJumpNow_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayFootStepSound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void APawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 26271 ];

	APawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function Engine.Pawn.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 26270 ];

	APawn_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Pawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void APawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 26267 ];

	APawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Pawn.TurnOff
// [0x00020102] 
// Parameters infos:

void APawn::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 26232 ];

	APawn_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.Pawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void APawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 26225 ];

	APawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function Engine.Pawn.PlayDyingSound
// [0x00020000] 
// Parameters infos:

void APawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 26224 ];

	APawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Engine.Pawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool APawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 26221 ];

	APawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckWaterJump
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WallNormal                     ( CPF_Parm | CPF_OutParm )

bool APawn::CheckWaterJump ( struct FVector* WallNormal )
{
	static UFunction* pFnCheckWaterJump = NULL;

	if ( ! pFnCheckWaterJump )
		pFnCheckWaterJump = (UFunction*) UObject::GObjObjects()->Data[ 26211 ];

	APawn_execCheckWaterJump_Parms CheckWaterJump_Parms;

	this->ProcessEvent ( pFnCheckWaterJump, &CheckWaterJump_Parms, NULL );

	if ( WallNormal )
		memcpy ( WallNormal, &CheckWaterJump_Parms.WallNormal, 0xC );

	return CheckWaterJump_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDrowningDamage
// [0x00020000] 
// Parameters infos:

void APawn::TakeDrowningDamage ( )
{
	static UFunction* pFnTakeDrowningDamage = NULL;

	if ( ! pFnTakeDrowningDamage )
		pFnTakeDrowningDamage = (UFunction*) UObject::GObjObjects()->Data[ 26210 ];

	APawn_execTakeDrowningDamage_Parms TakeDrowningDamage_Parms;

	this->ProcessEvent ( pFnTakeDrowningDamage, &TakeDrowningDamage_Parms, NULL );
};

// Function Engine.Pawn.BreathTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventBreathTimer ( )
{
	static UFunction* pFnBreathTimer = NULL;

	if ( ! pFnBreathTimer )
		pFnBreathTimer = (UFunction*) UObject::GObjObjects()->Data[ 26209 ];

	APawn_eventBreathTimer_Parms BreathTimer_Parms;

	this->ProcessEvent ( pFnBreathTimer, &BreathTimer_Parms, NULL );
};

// Function Engine.Pawn.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = (UFunction*) UObject::GObjObjects()->Data[ 26206 ];

	APawn_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Pawn.TouchingWaterVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TouchingWaterVolume ( )
{
	static UFunction* pFnTouchingWaterVolume = NULL;

	if ( ! pFnTouchingWaterVolume )
		pFnTouchingWaterVolume = (UFunction*) UObject::GObjObjects()->Data[ 26203 ];

	APawn_execTouchingWaterVolume_Parms TouchingWaterVolume_Parms;

	this->ProcessEvent ( pFnTouchingWaterVolume, &TouchingWaterVolume_Parms, NULL );

	return TouchingWaterVolume_Parms.ReturnValue;
};

// Function Engine.Pawn.HeadVolumeChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          newHeadVolume                  ( CPF_Parm )

void APawn::eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume )
{
	static UFunction* pFnHeadVolumeChange = NULL;

	if ( ! pFnHeadVolumeChange )
		pFnHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 26201 ];

	APawn_eventHeadVolumeChange_Parms HeadVolumeChange_Parms;
	HeadVolumeChange_Parms.newHeadVolume = newHeadVolume;

	this->ProcessEvent ( pFnHeadVolumeChange, &HeadVolumeChange_Parms, NULL );
};

// Function Engine.Pawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void APawn::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 26198 ];

	APawn_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Pawn.HitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm )

void APawn::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 26194 ];

	APawn_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Pawn.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APawn::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 26193 ];

	APawn_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Pawn.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool APawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 26187 ];

	APawn_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Pawn.IsSameTeam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::eventIsSameTeam ( class APawn* Other )
{
	static UFunction* pFnIsSameTeam = NULL;

	if ( ! pFnIsSameTeam )
		pFnIsSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 26184 ];

	APawn_eventIsSameTeam_Parms IsSameTeam_Parms;
	IsSameTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnIsSameTeam, &IsSameTeam_Parms, NULL );

	return IsSameTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeam
// [0x00020102] 
// Parameters infos:
// class ATeamInfo*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATeamInfo* APawn::GetTeam ( )
{
	static UFunction* pFnGetTeam = NULL;

	if ( ! pFnGetTeam )
		pFnGetTeam = (UFunction*) UObject::GObjObjects()->Data[ 26182 ];

	APawn_execGetTeam_Parms GetTeam_Parms;

	this->ProcessEvent ( pFnGetTeam, &GetTeam_Parms, NULL );

	return GetTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 26180 ];

	APawn_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void APawn::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 26169 ];

	APawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Pawn.SetKillInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* APawn::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = (UFunction*) UObject::GObjObjects()->Data[ 26165 ];

	APawn_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Pawn.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APawn::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 26159 ];

	APawn_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Pawn.TakeRadiusDamageOnBones
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// TArray< struct FName >         Bones                          ( CPF_Parm )

bool APawn::eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones )
{
	static UFunction* pFnTakeRadiusDamageOnBones = NULL;

	if ( ! pFnTakeRadiusDamageOnBones )
		pFnTakeRadiusDamageOnBones = (UFunction*) UObject::GObjObjects()->Data[ 26140 ];

	APawn_eventTakeRadiusDamageOnBones_Parms TakeRadiusDamageOnBones_Parms;
	TakeRadiusDamageOnBones_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamageOnBones_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamageOnBones_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamageOnBones_Parms.DamageType = DamageType;
	TakeRadiusDamageOnBones_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamageOnBones_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamageOnBones_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamageOnBones_Parms.DamageCauser = DamageCauser;
	memcpy ( &TakeRadiusDamageOnBones_Parms.Bones, &Bones, 0xC );

	this->ProcessEvent ( pFnTakeRadiusDamageOnBones, &TakeRadiusDamageOnBones_Parms, NULL );

	return TakeRadiusDamageOnBones_Parms.ReturnValue;
};

// Function Engine.Pawn.PruneDamagedBoneList
// [0x00420000] 
// Parameters infos:
// TArray< struct FName >         Bones                          ( CPF_Parm | CPF_OutParm )

void APawn::PruneDamagedBoneList ( TArray< struct FName >* Bones )
{
	static UFunction* pFnPruneDamagedBoneList = NULL;

	if ( ! pFnPruneDamagedBoneList )
		pFnPruneDamagedBoneList = (UFunction*) UObject::GObjObjects()->Data[ 26137 ];

	APawn_execPruneDamagedBoneList_Parms PruneDamagedBoneList_Parms;

	this->ProcessEvent ( pFnPruneDamagedBoneList, &PruneDamagedBoneList_Parms, NULL );

	if ( Bones )
		memcpy ( Bones, &PruneDamagedBoneList_Parms.Bones, 0xC );
};

// Function Engine.Pawn.HealDamage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool APawn::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 26132 ];

	APawn_execHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDamage
// [0x00424000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// int                            inDamage                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void APawn::AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = (UFunction*) UObject::GObjObjects()->Data[ 26125 ];

	APawn_execAdjustDamage_Parms AdjustDamage_Parms;
	AdjustDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDamage_Parms.DamageType = DamageType;
	memcpy ( &AdjustDamage_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );

	if ( inDamage )
		*inDamage = AdjustDamage_Parms.inDamage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDamage_Parms.Momentum, 0xC );
};

// Function Engine.Pawn.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 26124 ];

	APawn_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function Engine.Pawn.Gasp
// [0x00020000] 
// Parameters infos:

void APawn::Gasp ( )
{
	static UFunction* pFnGasp = NULL;

	if ( ! pFnGasp )
		pFnGasp = (UFunction*) UObject::GObjObjects()->Data[ 26123 ];

	APawn_execGasp_Parms Gasp_Parms;

	this->ProcessEvent ( pFnGasp, &Gasp_Parms, NULL );
};

// Function Engine.Pawn.OnGiveInventory
// [0x00020102] 
// Parameters infos:
// class USeqAct_GiveInventory*   inAction                       ( CPF_Parm )

void APawn::OnGiveInventory ( class USeqAct_GiveInventory* inAction )
{
	static UFunction* pFnOnGiveInventory = NULL;

	if ( ! pFnOnGiveInventory )
		pFnOnGiveInventory = (UFunction*) UObject::GObjObjects()->Data[ 26119 ];

	APawn_execOnGiveInventory_Parms OnGiveInventory_Parms;
	OnGiveInventory_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGiveInventory, &OnGiveInventory_Parms, NULL );
};

// Function Engine.Pawn.OnAssignController
// [0x00020002] 
// Parameters infos:
// class USeqAct_AssignController* inAction                       ( CPF_Parm )

void APawn::OnAssignController ( class USeqAct_AssignController* inAction )
{
	static UFunction* pFnOnAssignController = NULL;

	if ( ! pFnOnAssignController )
		pFnOnAssignController = (UFunction*) UObject::GObjObjects()->Data[ 26117 ];

	APawn_execOnAssignController_Parms OnAssignController_Parms;
	OnAssignController_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnAssignController, &OnAssignController_Parms, NULL );
};

// Function Engine.Pawn.SpawnDefaultController
// [0x00020002] 
// Parameters infos:

void APawn::SpawnDefaultController ( )
{
	static UFunction* pFnSpawnDefaultController = NULL;

	if ( ! pFnSpawnDefaultController )
		pFnSpawnDefaultController = (UFunction*) UObject::GObjObjects()->Data[ 26116 ];

	APawn_execSpawnDefaultController_Parms SpawnDefaultController_Parms;

	this->ProcessEvent ( pFnSpawnDefaultController, &SpawnDefaultController_Parms, NULL );
};

// Function Engine.Pawn.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26115 ];

	APawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26114 ];

	APawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 26113 ];

	APawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Pawn.DetachFromController
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDestroyController             ( CPF_OptionalParm | CPF_Parm )

void APawn::DetachFromController ( unsigned long bDestroyController )
{
	static UFunction* pFnDetachFromController = NULL;

	if ( ! pFnDetachFromController )
		pFnDetachFromController = (UFunction*) UObject::GObjObjects()->Data[ 26110 ];

	APawn_execDetachFromController_Parms DetachFromController_Parms;
	DetachFromController_Parms.bDestroyController = bDestroyController;

	this->ProcessEvent ( pFnDetachFromController, &DetachFromController_Parms, NULL );
};

// Function Engine.Pawn.CrushedBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 26108 ];

	APawn_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Pawn.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   aPawn                          ( CPF_Parm )

bool APawn::CanBeBaseForPawn ( class APawn* aPawn )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = (UFunction*) UObject::GObjObjects()->Data[ 26105 ];

	APawn_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;
	CanBeBaseForPawn_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );

	return CanBeBaseForPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.BaseChange
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void APawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 26103 ];

	APawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Pawn.StuckOnPawn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::eventStuckOnPawn ( class APawn* OtherPawn )
{
	static UFunction* pFnStuckOnPawn = NULL;

	if ( ! pFnStuckOnPawn )
		pFnStuckOnPawn = (UFunction*) UObject::GObjObjects()->Data[ 26101 ];

	APawn_eventStuckOnPawn_Parms StuckOnPawn_Parms;
	StuckOnPawn_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnStuckOnPawn, &StuckOnPawn_Parms, NULL );
};

// Function Engine.Pawn.JumpOffPawn
// [0x00020002] 
// Parameters infos:

void APawn::JumpOffPawn ( )
{
	static UFunction* pFnJumpOffPawn = NULL;

	if ( ! pFnJumpOffPawn )
		pFnJumpOffPawn = (UFunction*) UObject::GObjObjects()->Data[ 26100 ];

	APawn_execJumpOffPawn_Parms JumpOffPawn_Parms;

	this->ProcessEvent ( pFnJumpOffPawn, &JumpOffPawn_Parms, NULL );
};

// Function Engine.Pawn.gibbedBy
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = (UFunction*) UObject::GObjObjects()->Data[ 26098 ];

	APawn_execgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 26096 ];

	APawn_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 26093 ];

	APawn_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void APawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 26090 ];

	APawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetRotation
// [0x00020002] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 26088 ];

	APawn_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 26085 ];

	APawn_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Pawn.ClientRestart
// [0x00020102] 
// Parameters infos:

void APawn::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 26084 ];

	APawn_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.Pawn.Restart
// [0x00020000] 
// Parameters infos:

void APawn::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 26083 ];

	APawn_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Pawn.TakeFallingDamage
// [0x00020002] 
// Parameters infos:

void APawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = (UFunction*) UObject::GObjObjects()->Data[ 26081 ];

	APawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function Engine.Pawn.KilledBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void APawn::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 26078 ];

	APawn_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Pawn.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 26073 ];

	APawn_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.Pawn.RestartPlayer
// [0x00020000] 
// Parameters infos:

void APawn::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26072 ];

	APawn_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.Pawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 26070 ];

	APawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function Engine.Pawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 26068 ];

	APawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function Engine.Pawn.ShouldCrouch
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCrouch                        ( CPF_Parm )

void APawn::ShouldCrouch ( unsigned long bCrouch )
{
	static UFunction* pFnShouldCrouch = NULL;

	if ( ! pFnShouldCrouch )
		pFnShouldCrouch = (UFunction*) UObject::GObjObjects()->Data[ 26066 ];

	APawn_execShouldCrouch_Parms ShouldCrouch_Parms;
	ShouldCrouch_Parms.bCrouch = bCrouch;

	this->ProcessEvent ( pFnShouldCrouch, &ShouldCrouch_Parms, NULL );
};

// Function Engine.Pawn.UnCrouch
// [0x00020102] 
// Parameters infos:

void APawn::UnCrouch ( )
{
	static UFunction* pFnUnCrouch = NULL;

	if ( ! pFnUnCrouch )
		pFnUnCrouch = (UFunction*) UObject::GObjObjects()->Data[ 26065 ];

	APawn_execUnCrouch_Parms UnCrouch_Parms;

	this->ProcessEvent ( pFnUnCrouch, &UnCrouch_Parms, NULL );
};

// Function Engine.Pawn.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void APawn::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 26064 ];

	APawn_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Pawn.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APawn::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 26062 ];

	APawn_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Pawn.ModifyVelocity
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 OldVelocity                    ( CPF_Parm )

void APawn::eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity )
{
	static UFunction* pFnModifyVelocity = NULL;

	if ( ! pFnModifyVelocity )
		pFnModifyVelocity = (UFunction*) UObject::GObjObjects()->Data[ 26059 ];

	APawn_eventModifyVelocity_Parms ModifyVelocity_Parms;
	ModifyVelocity_Parms.DeltaTime = DeltaTime;
	memcpy ( &ModifyVelocity_Parms.OldVelocity, &OldVelocity, 0xC );

	this->ProcessEvent ( pFnModifyVelocity, &ModifyVelocity_Parms, NULL );
};

// Function Engine.Pawn.JumpOutOfWater
// [0x00020002] 
// Parameters infos:
// struct FVector                 jumpDir                        ( CPF_Parm )

void APawn::JumpOutOfWater ( struct FVector jumpDir )
{
	static UFunction* pFnJumpOutOfWater = NULL;

	if ( ! pFnJumpOutOfWater )
		pFnJumpOutOfWater = (UFunction*) UObject::GObjObjects()->Data[ 26057 ];

	APawn_execJumpOutOfWater_Parms JumpOutOfWater_Parms;
	memcpy ( &JumpOutOfWater_Parms.jumpDir, &jumpDir, 0xC );

	this->ProcessEvent ( pFnJumpOutOfWater, &JumpOutOfWater_Parms, NULL );
};

// Function Engine.Pawn.FinishedInterpolation
// [0x00020002] 
// Parameters infos:

void APawn::FinishedInterpolation ( )
{
	static UFunction* pFnFinishedInterpolation = NULL;

	if ( ! pFnFinishedInterpolation )
		pFnFinishedInterpolation = (UFunction*) UObject::GObjObjects()->Data[ 26056 ];

	APawn_execFinishedInterpolation_Parms FinishedInterpolation_Parms;

	this->ProcessEvent ( pFnFinishedInterpolation, &FinishedInterpolation_Parms, NULL );
};

// Function Engine.Pawn.ClientMessage
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void APawn::eventClientMessage ( struct FString S, struct FName Type )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 26053 ];

	APawn_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.Pawn.ReceiveLocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APawn::ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 26047 ];

	APawn_execReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.Pawn.AdjustedStrength
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::AdjustedStrength ( )
{
	static UFunction* pFnAdjustedStrength = NULL;

	if ( ! pFnAdjustedStrength )
		pFnAdjustedStrength = (UFunction*) UObject::GObjObjects()->Data[ 26045 ];

	APawn_execAdjustedStrength_Parms AdjustedStrength_Parms;

	this->ProcessEvent ( pFnAdjustedStrength, &AdjustedStrength_Parms, NULL );

	return AdjustedStrength_Parms.ReturnValue;
};

// Function Engine.Pawn.LineOfSightTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::LineOfSightTo ( class AActor* Other )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 26042 ];

	APawn_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Pawn.SetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void APawn::SetMoveTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetMoveTarget = NULL;

	if ( ! pFnSetMoveTarget )
		pFnSetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 26040 ];

	APawn_execSetMoveTarget_Parms SetMoveTarget_Parms;
	SetMoveTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetMoveTarget, &SetMoveTarget_Parms, NULL );
};

// Function Engine.Pawn.GetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APawn::GetMoveTarget ( )
{
	static UFunction* pFnGetMoveTarget = NULL;

	if ( ! pFnGetMoveTarget )
		pFnGetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 26038 ];

	APawn_execGetMoveTarget_Parms GetMoveTarget_Parms;

	this->ProcessEvent ( pFnGetMoveTarget, &GetMoveTarget_Parms, NULL );

	return GetMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.NearMoveTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::NearMoveTarget ( )
{
	static UFunction* pFnNearMoveTarget = NULL;

	if ( ! pFnNearMoveTarget )
		pFnNearMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 26036 ];

	APawn_execNearMoveTarget_Parms NearMoveTarget_Parms;

	this->ProcessEvent ( pFnNearMoveTarget, &NearMoveTarget_Parms, NULL );

	return NearMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.AffectedByHitEffects
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 26034 ];

	APawn_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );

	return AffectedByHitEffects_Parms.ReturnValue;
};

// Function Engine.Pawn.InGodMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InGodMode ( )
{
	static UFunction* pFnInGodMode = NULL;

	if ( ! pFnInGodMode )
		pFnInGodMode = (UFunction*) UObject::GObjObjects()->Data[ 26032 ];

	APawn_execInGodMode_Parms InGodMode_Parms;

	this->ProcessEvent ( pFnInGodMode, &InGodMode_Parms, NULL );

	return InGodMode_Parms.ReturnValue;
};

// Function Engine.Pawn.PawnCalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool APawn::PawnCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnPawnCalcCamera = NULL;

	if ( ! pFnPawnCalcCamera )
		pFnPawnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 26026 ];

	APawn_execPawnCalcCamera_Parms PawnCalcCamera_Parms;
	PawnCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnPawnCalcCamera, &PawnCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &PawnCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &PawnCalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = PawnCalcCamera_Parms.out_FOV;

	return PawnCalcCamera_Parms.ReturnValue;
};

// Function Engine.Pawn.SetViewRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::SetViewRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetViewRotation = NULL;

	if ( ! pFnSetViewRotation )
		pFnSetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 26024 ];

	APawn_execSetViewRotation_Parms SetViewRotation_Parms;
	memcpy ( &SetViewRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnSetViewRotation, &SetViewRotation_Parms, NULL );
};

// Function Engine.Pawn.InFreeCam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventInFreeCam ( )
{
	static UFunction* pFnInFreeCam = NULL;

	if ( ! pFnInFreeCam )
		pFnInFreeCam = (UFunction*) UObject::GObjObjects()->Data[ 26021 ];

	APawn_eventInFreeCam_Parms InFreeCam_Parms;

	this->ProcessEvent ( pFnInFreeCam, &InFreeCam_Parms, NULL );

	return InFreeCam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBaseAimRotation
// [0x00820922] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 26017 ];

	APawn_eventGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetWeaponStartTraceLocation
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector APawn::eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 26012 ];

	APawn_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetPawnViewLocation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::eventGetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 26010 ];

	APawn_eventGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	pFnGetPawnViewLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	pFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetViewRotation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 26008 ];

	APawn_eventGetViewRotation_Parms GetViewRotation_Parms;

	pFnGetViewRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	pFnGetViewRotation->FunctionFlags |= 0x400;

	return GetViewRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APawn::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 26005 ];

	APawn_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Pawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void APawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 26001 ];

	APawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.Pawn.IsFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFirstPerson ( )
{
	static UFunction* pFnIsFirstPerson = NULL;

	if ( ! pFnIsFirstPerson )
		pFnIsFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 25998 ];

	APawn_execIsFirstPerson_Parms IsFirstPerson_Parms;

	this->ProcessEvent ( pFnIsFirstPerson, &IsFirstPerson_Parms, NULL );

	return IsFirstPerson_Parms.ReturnValue;
};

// Function Engine.Pawn.WasPlayerPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::WasPlayerPawn ( )
{
	static UFunction* pFnWasPlayerPawn = NULL;

	if ( ! pFnWasPlayerPawn )
		pFnWasPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 25996 ];

	APawn_execWasPlayerPawn_Parms WasPlayerPawn_Parms;

	this->ProcessEvent ( pFnWasPlayerPawn, &WasPlayerPawn_Parms, NULL );

	return WasPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPlayerRealClientPawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPlayerRealClientPawn ( )
{
	static UFunction* pFnIsPlayerRealClientPawn = NULL;

	if ( ! pFnIsPlayerRealClientPawn )
		pFnIsPlayerRealClientPawn = (UFunction*) UObject::GObjObjects()->Data[ 25994 ];

	APawn_execIsPlayerRealClientPawn_Parms IsPlayerRealClientPawn_Parms;

	pFnIsPlayerRealClientPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerRealClientPawn, &IsPlayerRealClientPawn_Parms, NULL );

	pFnIsPlayerRealClientPawn->FunctionFlags |= 0x400;

	return IsPlayerRealClientPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPlayerPawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPlayerPawn ( )
{
	static UFunction* pFnIsPlayerPawn = NULL;

	if ( ! pFnIsPlayerPawn )
		pFnIsPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 25992 ];

	APawn_execIsPlayerPawn_Parms IsPlayerPawn_Parms;

	pFnIsPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerPawn, &IsPlayerPawn_Parms, NULL );

	pFnIsPlayerPawn->FunctionFlags |= 0x400;

	return IsPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsLocallyControlled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsLocallyControlled ( )
{
	static UFunction* pFnIsLocallyControlled = NULL;

	if ( ! pFnIsLocallyControlled )
		pFnIsLocallyControlled = (UFunction*) UObject::GObjObjects()->Data[ 5990 ];

	APawn_execIsLocallyControlled_Parms IsLocallyControlled_Parms;

	pFnIsLocallyControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocallyControlled, &IsLocallyControlled_Parms, NULL );

	pFnIsLocallyControlled->FunctionFlags |= 0x400;

	return IsLocallyControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.IsHumanControlled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsHumanControlled ( )
{
	static UFunction* pFnIsHumanControlled = NULL;

	if ( ! pFnIsHumanControlled )
		pFnIsHumanControlled = (UFunction*) UObject::GObjObjects()->Data[ 5989 ];

	APawn_execIsHumanControlled_Parms IsHumanControlled_Parms;

	pFnIsHumanControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHumanControlled, &IsHumanControlled_Parms, NULL );

	pFnIsHumanControlled->FunctionFlags |= 0x400;

	return IsHumanControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APawn::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 25982 ];

	APawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Pawn.ClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           L                              ( CPF_Parm )

void APawn::ClimbLadder ( class ALadderVolume* L )
{
	static UFunction* pFnClimbLadder = NULL;

	if ( ! pFnClimbLadder )
		pFnClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 25980 ];

	APawn_execClimbLadder_Parms ClimbLadder_Parms;
	ClimbLadder_Parms.L = L;

	this->ProcessEvent ( pFnClimbLadder, &ClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.EndClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           OldLadder                      ( CPF_Parm )

void APawn::EndClimbLadder ( class ALadderVolume* OldLadder )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 25978 ];

	APawn_execEndClimbLadder_Parms EndClimbLadder_Parms;
	EndClimbLadder_Parms.OldLadder = OldLadder;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 25976 ];

	APawn_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Pawn.SetWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewIsWalking                  ( CPF_Parm )

void APawn::eventSetWalking ( unsigned long bNewIsWalking )
{
	static UFunction* pFnSetWalking = NULL;

	if ( ! pFnSetWalking )
		pFnSetWalking = (UFunction*) UObject::GObjObjects()->Data[ 25974 ];

	APawn_eventSetWalking_Parms SetWalking_Parms;
	SetWalking_Parms.bNewIsWalking = bNewIsWalking;

	this->ProcessEvent ( pFnSetWalking, &SetWalking_Parms, NULL );
};

// Function Engine.Pawn.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = (UFunction*) UObject::GObjObjects()->Data[ 25972 ];

	APawn_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Pawn.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 25970 ];

	APawn_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanGrabLadder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanGrabLadder ( )
{
	static UFunction* pFnCanGrabLadder = NULL;

	if ( ! pFnCanGrabLadder )
		pFnCanGrabLadder = (UFunction*) UObject::GObjObjects()->Data[ 25968 ];

	APawn_execCanGrabLadder_Parms CanGrabLadder_Parms;

	this->ProcessEvent ( pFnCanGrabLadder, &CanGrabLadder_Parms, NULL );

	return CanGrabLadder_Parms.ReturnValue;
};

// Function Engine.Pawn.DropToGround
// [0x00020002] 
// Parameters infos:

void APawn::DropToGround ( )
{
	static UFunction* pFnDropToGround = NULL;

	if ( ! pFnDropToGround )
		pFnDropToGround = (UFunction*) UObject::GObjObjects()->Data[ 25967 ];

	APawn_execDropToGround_Parms DropToGround_Parms;

	this->ProcessEvent ( pFnDropToGround, &DropToGround_Parms, NULL );
};

// Function Engine.Pawn.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName APawn::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 25964 ];

	APawn_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Pawn.UnPossessed
// [0x00020002] 
// Parameters infos:

void APawn::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 25963 ];

	APawn_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Pawn.UpdateControllerOnPossess
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::UpdateControllerOnPossess ( unsigned long bVehicleTransition )
{
	static UFunction* pFnUpdateControllerOnPossess = NULL;

	if ( ! pFnUpdateControllerOnPossess )
		pFnUpdateControllerOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 25961 ];

	APawn_execUpdateControllerOnPossess_Parms UpdateControllerOnPossess_Parms;
	UpdateControllerOnPossess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnUpdateControllerOnPossess, &UpdateControllerOnPossess_Parms, NULL );
};

// Function Engine.Pawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 25958 ];

	APawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Pawn.NotifyTeamChanged
// [0x00020100] 
// Parameters infos:

void APawn::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 25957 ];

	APawn_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.Pawn.PlayTeleportEffect
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void APawn::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 25954 ];

	APawn_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Pawn.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APawn::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 25952 ];

	APawn_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Pawn.NeedToTurn
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 targ                           ( CPF_Parm )

bool APawn::NeedToTurn ( struct FVector targ )
{
	static UFunction* pFnNeedToTurn = NULL;

	if ( ! pFnNeedToTurn )
		pFnNeedToTurn = (UFunction*) UObject::GObjObjects()->Data[ 25947 ];

	APawn_execNeedToTurn_Parms NeedToTurn_Parms;
	memcpy ( &NeedToTurn_Parms.targ, &targ, 0xC );

	this->ProcessEvent ( pFnNeedToTurn, &NeedToTurn_Parms, NULL );

	return NeedToTurn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 25945 ];

	APawn_execIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.HasRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::HasRangedAttack ( )
{
	static UFunction* pFnHasRangedAttack = NULL;

	if ( ! pFnHasRangedAttack )
		pFnHasRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 25943 ];

	APawn_execHasRangedAttack_Parms HasRangedAttack_Parms;

	this->ProcessEvent ( pFnHasRangedAttack, &HasRangedAttack_Parms, NULL );

	return HasRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 25941 ];

	APawn_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Pawn.TooCloseToAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::TooCloseToAttack ( class AActor* Other )
{
	static UFunction* pFnTooCloseToAttack = NULL;

	if ( ! pFnTooCloseToAttack )
		pFnTooCloseToAttack = (UFunction*) UObject::GObjObjects()->Data[ 25938 ];

	APawn_execTooCloseToAttack_Parms TooCloseToAttack_Parms;
	TooCloseToAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnTooCloseToAttack, &TooCloseToAttack_Parms, NULL );

	return TooCloseToAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 25935 ];

	APawn_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.ChooseFireMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::ChooseFireMode ( )
{
	static UFunction* pFnChooseFireMode = NULL;

	if ( ! pFnChooseFireMode )
		pFnChooseFireMode = (UFunction*) UObject::GObjObjects()->Data[ 25933 ];

	APawn_execChooseFireMode_Parms ChooseFireMode_Parms;

	this->ProcessEvent ( pFnChooseFireMode, &ChooseFireMode_Parms, NULL );

	return ChooseFireMode_Parms.ReturnValue;
};

// Function Engine.Pawn.BotFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFinished                      ( CPF_Parm )

bool APawn::BotFire ( unsigned long bFinished )
{
	static UFunction* pFnBotFire = NULL;

	if ( ! pFnBotFire )
		pFnBotFire = (UFunction*) UObject::GObjObjects()->Data[ 25930 ];

	APawn_execBotFire_Parms BotFire_Parms;
	BotFire_Parms.bFinished = bFinished;

	this->ProcessEvent ( pFnBotFire, &BotFire_Parms, NULL );

	return BotFire_Parms.ReturnValue;
};

// Function Engine.Pawn.WeaponStoppedFiring
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::WeaponStoppedFiring ( unsigned long bViaReplication )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 25928 ];

	APawn_execWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function Engine.Pawn.WeaponFired
// [0x00024102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void APawn::WeaponFired ( unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 25925 ];

	APawn_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function Engine.Pawn.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashLocationUpdated ( unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25923 ];

	APawn_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Engine.Pawn.FlashCountUpdated
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashCountUpdated ( unsigned long bViaReplication )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25921 ];

	APawn_execFlashCountUpdated_Parms FlashCountUpdated_Parms;
	FlashCountUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function Engine.Pawn.ClearFlashLocation
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )

void APawn::ClearFlashLocation ( class AWeapon* Who )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 25919 ];

	APawn_execClearFlashLocation_Parms ClearFlashLocation_Parms;
	ClearFlashLocation_Parms.Who = Who;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 NewLoc                         ( CPF_Parm )

void APawn::SetFlashLocation ( class AWeapon* Who, unsigned char FireModeNum, struct FVector NewLoc )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 25915 ];

	APawn_execSetFlashLocation_Parms SetFlashLocation_Parms;
	SetFlashLocation_Parms.Who = Who;
	SetFlashLocation_Parms.FireModeNum = FireModeNum;
	memcpy ( &SetFlashLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.ClearFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )

void APawn::ClearFlashCount ( class AWeapon* Who )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 25913 ];

	APawn_execClearFlashCount_Parms ClearFlashCount_Parms;
	ClearFlashCount_Parms.Who = Who;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Pawn.IncrementFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::IncrementFlashCount ( class AWeapon* Who, unsigned char FireModeNum )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 25910 ];

	APawn_execIncrementFlashCount_Parms IncrementFlashCount_Parms;
	IncrementFlashCount_Parms.Who = Who;
	IncrementFlashCount_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Pawn.FiringModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FiringModeUpdated ( unsigned long bViaReplication )
{
	static UFunction* pFnFiringModeUpdated = NULL;

	if ( ! pFnFiringModeUpdated )
		pFnFiringModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25908 ];

	APawn_execFiringModeUpdated_Parms FiringModeUpdated_Parms;
	FiringModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFiringModeUpdated, &FiringModeUpdated_Parms, NULL );
};

// Function Engine.Pawn.SetFiringMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void APawn::SetFiringMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetFiringMode = NULL;

	if ( ! pFnSetFiringMode )
		pFnSetFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 25906 ];

	APawn_execSetFiringMode_Parms SetFiringMode_Parms;
	SetFiringMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetFiringMode, &SetFiringMode_Parms, NULL );
};

// Function Engine.Pawn.StopFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 25904 ];

	APawn_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Pawn.StartFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 25902 ];

	APawn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Pawn.Reset
// [0x00020002] 
// Parameters infos:

void APawn::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 25901 ];

	APawn_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Pawn.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void APawn::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 25900 ];

	APawn_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Pawn.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void APawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 25899 ];

	APawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Pawn.SpecialMoveTo
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )
// class AActor*                  Next                           ( CPF_Parm )

bool APawn::SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next )
{
	static UFunction* pFnSpecialMoveTo = NULL;

	if ( ! pFnSpecialMoveTo )
		pFnSpecialMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 25894 ];

	APawn_execSpecialMoveTo_Parms SpecialMoveTo_Parms;
	SpecialMoveTo_Parms.Start = Start;
	SpecialMoveTo_Parms.End = End;
	SpecialMoveTo_Parms.Next = Next;

	this->ProcessEvent ( pFnSpecialMoveTo, &SpecialMoveTo_Parms, NULL );

	return SpecialMoveTo_Parms.ReturnValue;
};

// Function Engine.Pawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 25892 ];

	APawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 25890 ];

	APawn_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;

	return InitRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemy
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsValidEnemy ( )
{
	static UFunction* pFnIsValidEnemy = NULL;

	if ( ! pFnIsValidEnemy )
		pFnIsValidEnemy = (UFunction*) UObject::GObjObjects()->Data[ 25888 ];

	APawn_execIsValidEnemy_Parms IsValidEnemy_Parms;

	this->ProcessEvent ( pFnIsValidEnemy, &IsValidEnemy_Parms, NULL );

	return IsValidEnemy_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialCostForPath
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UReachSpec*              Path                           ( CPF_Parm )

int APawn::SpecialCostForPath ( class UReachSpec* Path )
{
	static UFunction* pFnSpecialCostForPath = NULL;

	if ( ! pFnSpecialCostForPath )
		pFnSpecialCostForPath = (UFunction*) UObject::GObjObjects()->Data[ 25885 ];

	APawn_execSpecialCostForPath_Parms SpecialCostForPath_Parms;
	SpecialCostForPath_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCostForPath, &SpecialCostForPath_Parms, NULL );

	return SpecialCostForPath_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void APawn::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 25882 ];

	APawn_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Pawn.SetTickPauseFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void APawn::SetTickPauseFlag ( unsigned long bPause )
{
	static UFunction* pFnSetTickPauseFlag = NULL;

	if ( ! pFnSetTickPauseFlag )
		pFnSetTickPauseFlag = (UFunction*) UObject::GObjObjects()->Data[ 25880 ];

	APawn_execSetTickPauseFlag_Parms SetTickPauseFlag_Parms;
	SetTickPauseFlag_Parms.bPause = bPause;

	pFnSetTickPauseFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickPauseFlag, &SetTickPauseFlag_Parms, NULL );

	pFnSetTickPauseFlag->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsAnimTickPause
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsAnimTickPause ( )
{
	static UFunction* pFnIsAnimTickPause = NULL;

	if ( ! pFnIsAnimTickPause )
		pFnIsAnimTickPause = (UFunction*) UObject::GObjObjects()->Data[ 25878 ];

	APawn_execIsAnimTickPause_Parms IsAnimTickPause_Parms;

	pFnIsAnimTickPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnimTickPause, &IsAnimTickPause_Parms, NULL );

	pFnIsAnimTickPause->FunctionFlags |= 0x400;

	return IsAnimTickPause_Parms.ReturnValue;
};

// Function Engine.Pawn.SetAnimTickPauseFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void APawn::SetAnimTickPauseFlag ( unsigned long bPause )
{
	static UFunction* pFnSetAnimTickPauseFlag = NULL;

	if ( ! pFnSetAnimTickPauseFlag )
		pFnSetAnimTickPauseFlag = (UFunction*) UObject::GObjObjects()->Data[ 25876 ];

	APawn_execSetAnimTickPauseFlag_Parms SetAnimTickPauseFlag_Parms;
	SetAnimTickPauseFlag_Parms.bPause = bPause;

	pFnSetAnimTickPauseFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimTickPauseFlag, &SetAnimTickPauseFlag_Parms, NULL );

	pFnSetAnimTickPauseFlag->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetPushesRigidBodies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewPush                        ( CPF_Parm )

void APawn::SetPushesRigidBodies ( unsigned long NewPush )
{
	static UFunction* pFnSetPushesRigidBodies = NULL;

	if ( ! pFnSetPushesRigidBodies )
		pFnSetPushesRigidBodies = (UFunction*) UObject::GObjObjects()->Data[ 25874 ];

	APawn_execSetPushesRigidBodies_Parms SetPushesRigidBodies_Parms;
	SetPushesRigidBodies_Parms.NewPush = NewPush;

	pFnSetPushesRigidBodies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPushesRigidBodies, &SetPushesRigidBodies_Parms, NULL );

	pFnSetPushesRigidBodies->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ForceCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ForceCrouch ( )
{
	static UFunction* pFnForceCrouch = NULL;

	if ( ! pFnForceCrouch )
		pFnForceCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25873 ];

	APawn_execForceCrouch_Parms ForceCrouch_Parms;

	pFnForceCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceCrouch, &ForceCrouch_Parms, NULL );

	pFnForceCrouch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ReachedPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// class AActor*                  NewAnchor                      ( CPF_Parm )

bool APawn::ReachedPoint ( struct FVector Point, class AActor* NewAnchor )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 25869 ];

	APawn_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );
	ReachedPoint_Parms.NewAnchor = NewAnchor;

	pFnReachedPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	pFnReachedPoint->FunctionFlags |= 0x400;

	return ReachedPoint_Parms.ReturnValue;
};

// Function Engine.Pawn.ReachedDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )

bool APawn::ReachedDestination ( class AActor* Goal )
{
	static UFunction* pFnReachedDestination = NULL;

	if ( ! pFnReachedDestination )
		pFnReachedDestination = (UFunction*) UObject::GObjObjects()->Data[ 25866 ];

	APawn_execReachedDestination_Parms ReachedDestination_Parms;
	ReachedDestination_Parms.Goal = Goal;

	pFnReachedDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDestination, &ReachedDestination_Parms, NULL );

	pFnReachedDestination->FunctionFlags |= 0x400;

	return ReachedDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBestAnchor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bStartPoint                    ( CPF_Parm )
// unsigned long                  bOnlyCheckVisible              ( CPF_Parm )
// float                          out_Dist                       ( CPF_Parm | CPF_OutParm )

class ANavigationPoint* APawn::GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist )
{
	static UFunction* pFnGetBestAnchor = NULL;

	if ( ! pFnGetBestAnchor )
		pFnGetBestAnchor = (UFunction*) UObject::GObjObjects()->Data[ 25859 ];

	APawn_execGetBestAnchor_Parms GetBestAnchor_Parms;
	GetBestAnchor_Parms.TestActor = TestActor;
	memcpy ( &GetBestAnchor_Parms.TestLocation, &TestLocation, 0xC );
	GetBestAnchor_Parms.bStartPoint = bStartPoint;
	GetBestAnchor_Parms.bOnlyCheckVisible = bOnlyCheckVisible;

	pFnGetBestAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestAnchor, &GetBestAnchor_Parms, NULL );

	pFnGetBestAnchor->FunctionFlags |= 0x400;

	if ( out_Dist )
		*out_Dist = GetBestAnchor_Parms.out_Dist;

	return GetBestAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.SetAnchor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        NewAnchor                      ( CPF_Parm )

void APawn::SetAnchor ( class ANavigationPoint* NewAnchor )
{
	static UFunction* pFnSetAnchor = NULL;

	if ( ! pFnSetAnchor )
		pFnSetAnchor = (UFunction*) UObject::GObjObjects()->Data[ 25857 ];

	APawn_execSetAnchor_Parms SetAnchor_Parms;
	SetAnchor_Parms.NewAnchor = NewAnchor;

	pFnSetAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchor, &SetAnchor_Parms, NULL );

	pFnSetAnchor->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetRemoteViewPitch
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRemoteViewPitch             ( CPF_Parm )

void APawn::SetRemoteViewPitch ( int NewRemoteViewPitch )
{
	static UFunction* pFnSetRemoteViewPitch = NULL;

	if ( ! pFnSetRemoteViewPitch )
		pFnSetRemoteViewPitch = (UFunction*) UObject::GObjObjects()->Data[ 8495 ];

	APawn_execSetRemoteViewPitch_Parms SetRemoteViewPitch_Parms;
	SetRemoteViewPitch_Parms.NewRemoteViewPitch = NewRemoteViewPitch;

	pFnSetRemoteViewPitch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRemoteViewPitch, &SetRemoteViewPitch_Parms, NULL );

	pFnSetRemoteViewPitch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 25854 ];

	APawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemyTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Const | CPF_Parm )
// unsigned long                  bNoPRIisEnemy                  ( CPF_Parm )

bool APawn::IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy )
{
	static UFunction* pFnIsValidEnemyTargetFor = NULL;

	if ( ! pFnIsValidEnemyTargetFor )
		pFnIsValidEnemyTargetFor = (UFunction*) UObject::GObjObjects()->Data[ 25850 ];

	APawn_execIsValidEnemyTargetFor_Parms IsValidEnemyTargetFor_Parms;
	IsValidEnemyTargetFor_Parms.PRI = PRI;
	IsValidEnemyTargetFor_Parms.bNoPRIisEnemy = bNoPRIisEnemy;

	pFnIsValidEnemyTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidEnemyTargetFor, &IsValidEnemyTargetFor_Parms, NULL );

	pFnIsValidEnemyTargetFor->FunctionFlags |= 0x400;

	return IsValidEnemyTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Const | CPF_Parm )

bool APawn::IsValidTargetFor ( class AController* C )
{
	static UFunction* pFnIsValidTargetFor = NULL;

	if ( ! pFnIsValidTargetFor )
		pFnIsValidTargetFor = (UFunction*) UObject::GObjObjects()->Data[ 25847 ];

	APawn_execIsValidTargetFor_Parms IsValidTargetFor_Parms;
	IsValidTargetFor_Parms.C = C;

	pFnIsValidTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTargetFor, &IsValidTargetFor_Parms, NULL );

	pFnIsValidTargetFor->FunctionFlags |= 0x400;

	return IsValidTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.SuggestJumpVelocity
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 JumpVelocity                   ( CPF_Parm | CPF_OutParm )

bool APawn::SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity )
{
	static UFunction* pFnSuggestJumpVelocity = NULL;

	if ( ! pFnSuggestJumpVelocity )
		pFnSuggestJumpVelocity = (UFunction*) UObject::GObjObjects()->Data[ 25842 ];

	APawn_execSuggestJumpVelocity_Parms SuggestJumpVelocity_Parms;
	memcpy ( &SuggestJumpVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestJumpVelocity_Parms.Start, &Start, 0xC );

	pFnSuggestJumpVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestJumpVelocity, &SuggestJumpVelocity_Parms, NULL );

	pFnSuggestJumpVelocity->FunctionFlags |= 0x400;

	if ( JumpVelocity )
		memcpy ( JumpVelocity, &SuggestJumpVelocity_Parms.JumpVelocity, 0xC );

	return SuggestJumpVelocity_Parms.ReturnValue;
};

// Function Engine.Pawn.ResetToDefaults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 25841 ];

	APawn_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ValidAnchor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ValidAnchor ( )
{
	static UFunction* pFnValidAnchor = NULL;

	if ( ! pFnValidAnchor )
		pFnValidAnchor = (UFunction*) UObject::GObjObjects()->Data[ 22109 ];

	APawn_execValidAnchor_Parms ValidAnchor_Parms;

	pFnValidAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidAnchor, &ValidAnchor_Parms, NULL );

	pFnValidAnchor->FunctionFlags |= 0x400;

	return ValidAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 25838 ];

	APawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PickupFactory.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::ShouldRespawn ( )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = (UFunction*) UObject::GObjObjects()->Data[ 26963 ];

	APickupFactory_execShouldRespawn_Parms ShouldRespawn_Parms;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 26958 ];

	APickupFactory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupVisible
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupVisible ( )
{
	static UFunction* pFnSetPickupVisible = NULL;

	if ( ! pFnSetPickupVisible )
		pFnSetPickupVisible = (UFunction*) UObject::GObjObjects()->Data[ 26957 ];

	APickupFactory_execSetPickupVisible_Parms SetPickupVisible_Parms;

	this->ProcessEvent ( pFnSetPickupVisible, &SetPickupVisible_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupHidden
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupHidden ( )
{
	static UFunction* pFnSetPickupHidden = NULL;

	if ( ! pFnSetPickupHidden )
		pFnSetPickupHidden = (UFunction*) UObject::GObjObjects()->Data[ 26956 ];

	APickupFactory_execSetPickupHidden_Parms SetPickupHidden_Parms;

	this->ProcessEvent ( pFnSetPickupHidden, &SetPickupHidden_Parms, NULL );
};

// Function Engine.PickupFactory.RespawnEffect
// [0x00020000] 
// Parameters infos:

void APickupFactory::RespawnEffect ( )
{
	static UFunction* pFnRespawnEffect = NULL;

	if ( ! pFnRespawnEffect )
		pFnRespawnEffect = (UFunction*) UObject::GObjObjects()->Data[ 26955 ];

	APickupFactory_execRespawnEffect_Parms RespawnEffect_Parms;

	this->ProcessEvent ( pFnRespawnEffect, &RespawnEffect_Parms, NULL );
};

// Function Engine.PickupFactory.GetRespawnTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APickupFactory::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = (UFunction*) UObject::GObjObjects()->Data[ 26953 ];

	APickupFactory_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );

	return GetRespawnTime_Parms.ReturnValue;
};

// Function Engine.PickupFactory.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void APickupFactory::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 26930 ];

	APickupFactory_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.PickupFactory.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 26928 ];

	APickupFactory_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.PickupFactory.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 26926 ];

	APickupFactory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.PickupFactory.ReadyToPickup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxWait                        ( CPF_Parm )

bool APickupFactory::ReadyToPickup ( float MaxWait )
{
	static UFunction* pFnReadyToPickup = NULL;

	if ( ! pFnReadyToPickup )
		pFnReadyToPickup = (UFunction*) UObject::GObjObjects()->Data[ 26923 ];

	APickupFactory_execReadyToPickup_Parms ReadyToPickup_Parms;
	ReadyToPickup_Parms.MaxWait = MaxWait;

	this->ProcessEvent ( pFnReadyToPickup, &ReadyToPickup_Parms, NULL );

	return ReadyToPickup_Parms.ReturnValue;
};

// Function Engine.PickupFactory.SpawnCopyFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Recipient                      ( CPF_Parm )

void APickupFactory::SpawnCopyFor ( class APawn* Recipient )
{
	static UFunction* pFnSpawnCopyFor = NULL;

	if ( ! pFnSpawnCopyFor )
		pFnSpawnCopyFor = (UFunction*) UObject::GObjObjects()->Data[ 26920 ];

	APickupFactory_execSpawnCopyFor_Parms SpawnCopyFor_Parms;
	SpawnCopyFor_Parms.Recipient = Recipient;

	this->ProcessEvent ( pFnSpawnCopyFor, &SpawnCopyFor_Parms, NULL );
};

// Function Engine.PickupFactory.DetourWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float APickupFactory::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 26916 ];

	APickupFactory_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.PickupFactory.StartSleeping
// [0x00020002] 
// Parameters infos:

void APickupFactory::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = (UFunction*) UObject::GObjObjects()->Data[ 26915 ];

	APickupFactory_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function Engine.PickupFactory.SetRespawn
// [0x00020002] 
// Parameters infos:

void APickupFactory::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = (UFunction*) UObject::GObjObjects()->Data[ 26914 ];

	APickupFactory_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function Engine.PickupFactory.CheckForErrors
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 26909 ];

	APickupFactory_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Reset
// [0x00020002] 
// Parameters infos:

void APickupFactory::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26908 ];

	APickupFactory_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PickupFactory.StaticPrecache
// [0x00022000] 
// Parameters infos:
// class AWorldInfo*              W                              ( CPF_Parm )

void APickupFactory::StaticPrecache ( class AWorldInfo* W )
{
	static UFunction* pFnStaticPrecache = NULL;

	if ( ! pFnStaticPrecache )
		pFnStaticPrecache = (UFunction*) UObject::GObjObjects()->Data[ 26906 ];

	APickupFactory_execStaticPrecache_Parms StaticPrecache_Parms;
	StaticPrecache_Parms.W = W;

	this->ProcessEvent ( pFnStaticPrecache, &StaticPrecache_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 26905 ];

	APickupFactory_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.PickupFactory.ShutDown
// [0x00020102] 
// Parameters infos:

void APickupFactory::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 26904 ];

	APickupFactory_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.PickupFactory.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 26903 ];

	APickupFactory_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.PickupFactory.InitializePickup
// [0x00020102] 
// Parameters infos:

void APickupFactory::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = (UFunction*) UObject::GObjObjects()->Data[ 26902 ];

	APickupFactory_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function Engine.PickupFactory.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26901 ];

	APickupFactory_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PickupFactory.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APickupFactory::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 26899 ];

	APickupFactory_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
// [0x00820102] 
// Parameters infos:

void APlayerReplicationInfo::UnregisterPlayerFromSession ( )
{
	static UFunction* pFnUnregisterPlayerFromSession = NULL;

	if ( ! pFnUnregisterPlayerFromSession )
		pFnUnregisterPlayerFromSession = (UFunction*) UObject::GObjObjects()->Data[ 27138 ];

	APlayerReplicationInfo_execUnregisterPlayerFromSession_Parms UnregisterPlayerFromSession_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerFromSession, &UnregisterPlayerFromSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::RegisterPlayerWithSession ( )
{
	static UFunction* pFnRegisterPlayerWithSession = NULL;

	if ( ! pFnRegisterPlayerWithSession )
		pFnRegisterPlayerWithSession = (UFunction*) UObject::GObjObjects()->Data[ 27135 ];

	APlayerReplicationInfo_execRegisterPlayerWithSession_Parms RegisterPlayerWithSession_Parms;

	this->ProcessEvent ( pFnRegisterPlayerWithSession, &RegisterPlayerWithSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerAlias
// [0x00020002] 
// Parameters infos:
// struct FString                 NewAlias                       ( CPF_Parm )

void APlayerReplicationInfo::SetPlayerAlias ( struct FString NewAlias )
{
	static UFunction* pFnSetPlayerAlias = NULL;

	if ( ! pFnSetPlayerAlias )
		pFnSetPlayerAlias = (UFunction*) UObject::GObjObjects()->Data[ 27133 ];

	APlayerReplicationInfo_execSetPlayerAlias_Parms SetPlayerAlias_Parms;
	memcpy ( &SetPlayerAlias_Parms.NewAlias, &NewAlias, 0xC );

	this->ProcessEvent ( pFnSetPlayerAlias, &SetPlayerAlias_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsInvalidName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsInvalidName ( )
{
	static UFunction* pFnIsInvalidName = NULL;

	if ( ! pFnIsInvalidName )
		pFnIsInvalidName = (UFunction*) UObject::GObjObjects()->Data[ 27127 ];

	APlayerReplicationInfo_execIsInvalidName_Parms IsInvalidName_Parms;

	this->ProcessEvent ( pFnIsInvalidName, &IsInvalidName_Parms, NULL );

	return IsInvalidName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APlayerReplicationInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 27125 ];

	APlayerReplicationInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.ServerSetPartyLeaderId
// [0x00A200C2] 
// Parameters infos:
// struct FUniqueNetId            PartyLeaderId                  ( CPF_Parm )

void APlayerReplicationInfo::ServerSetPartyLeaderId ( struct FUniqueNetId PartyLeaderId )
{
	static UFunction* pFnServerSetPartyLeaderId = NULL;

	if ( ! pFnServerSetPartyLeaderId )
		pFnServerSetPartyLeaderId = (UFunction*) UObject::GObjObjects()->Data[ 27122 ];

	APlayerReplicationInfo_execServerSetPartyLeaderId_Parms ServerSetPartyLeaderId_Parms;
	memcpy ( &ServerSetPartyLeaderId_Parms.PartyLeaderId, &PartyLeaderId, 0x8 );

	this->ProcessEvent ( pFnServerSetPartyLeaderId, &ServerSetPartyLeaderId_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPartyLeaderId
// [0x00820102] 
// Parameters infos:
// struct FUniqueNetId            PartyLeaderId                  ( CPF_Parm )

void APlayerReplicationInfo::SetPartyLeaderId ( struct FUniqueNetId PartyLeaderId )
{
	static UFunction* pFnSetPartyLeaderId = NULL;

	if ( ! pFnSetPartyLeaderId )
		pFnSetPartyLeaderId = (UFunction*) UObject::GObjObjects()->Data[ 27119 ];

	APlayerReplicationInfo_execSetPartyLeaderId_Parms SetPartyLeaderId_Parms;
	memcpy ( &SetPartyLeaderId_Parms.PartyLeaderId, &PartyLeaderId, 0x8 );

	this->ProcessEvent ( pFnSetPartyLeaderId, &SetPartyLeaderId_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetUniqueId
// [0x00020102] 
// Parameters infos:
// struct FUniqueNetId            PlayerUniqueId                 ( CPF_Parm )

void APlayerReplicationInfo::SetUniqueId ( struct FUniqueNetId PlayerUniqueId )
{
	static UFunction* pFnSetUniqueId = NULL;

	if ( ! pFnSetUniqueId )
		pFnSetUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 27117 ];

	APlayerReplicationInfo_execSetUniqueId_Parms SetUniqueId_Parms;
	memcpy ( &SetUniqueId_Parms.PlayerUniqueId, &PlayerUniqueId, 0x8 );

	this->ProcessEvent ( pFnSetUniqueId, &SetUniqueId_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ServerSetSplitscreenIndex
// [0x002200C2] 
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )

void APlayerReplicationInfo::ServerSetSplitscreenIndex ( unsigned char PlayerIndex )
{
	static UFunction* pFnServerSetSplitscreenIndex = NULL;

	if ( ! pFnServerSetSplitscreenIndex )
		pFnServerSetSplitscreenIndex = (UFunction*) UObject::GObjObjects()->Data[ 27115 ];

	APlayerReplicationInfo_execServerSetSplitscreenIndex_Parms ServerSetSplitscreenIndex_Parms;
	ServerSetSplitscreenIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnServerSetSplitscreenIndex, &ServerSetSplitscreenIndex_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetSplitscreenIndex
// [0x00020102] 
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )

void APlayerReplicationInfo::SetSplitscreenIndex ( unsigned char PlayerIndex )
{
	static UFunction* pFnSetSplitscreenIndex = NULL;

	if ( ! pFnSetSplitscreenIndex )
		pFnSetSplitscreenIndex = (UFunction*) UObject::GObjObjects()->Data[ 27113 ];

	APlayerReplicationInfo_execSetSplitscreenIndex_Parms SetSplitscreenIndex_Parms;
	SetSplitscreenIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSetSplitscreenIndex, &SetSplitscreenIndex_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsPartyMember
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            TestPartyLeaderId              ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerReplicationInfo::IsPartyMember ( struct FUniqueNetId* TestPartyLeaderId )
{
	static UFunction* pFnIsPartyMember = NULL;

	if ( ! pFnIsPartyMember )
		pFnIsPartyMember = (UFunction*) UObject::GObjObjects()->Data[ 27110 ];

	APlayerReplicationInfo_execIsPartyMember_Parms IsPartyMember_Parms;

	this->ProcessEvent ( pFnIsPartyMember, &IsPartyMember_Parms, NULL );

	if ( TestPartyLeaderId )
		memcpy ( TestPartyLeaderId, &IsPartyMember_Parms.TestPartyLeaderId, 0x8 );

	return IsPartyMember_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.IsPartyLeader
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsPartyLeader ( )
{
	static UFunction* pFnIsPartyLeader = NULL;

	if ( ! pFnIsPartyLeader )
		pFnIsPartyLeader = (UFunction*) UObject::GObjObjects()->Data[ 27108 ];

	APlayerReplicationInfo_execIsPartyLeader_Parms IsPartyLeader_Parms;

	this->ProcessEvent ( pFnIsPartyLeader, &IsPartyLeader_Parms, NULL );

	return IsPartyLeader_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsLocalPlayerPRI ( )
{
	static UFunction* pFnIsLocalPlayerPRI = NULL;

	if ( ! pFnIsLocalPlayerPRI )
		pFnIsLocalPlayerPRI = (UFunction*) UObject::GObjObjects()->Data[ 27104 ];

	APlayerReplicationInfo_execIsLocalPlayerPRI_Parms IsLocalPlayerPRI_Parms;

	this->ProcessEvent ( pFnIsLocalPlayerPRI, &IsLocalPlayerPRI_Parms, NULL );

	return IsLocalPlayerPRI_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider
// [0x00020100] 
// Parameters infos:

void APlayerReplicationInfo::BindPlayerOwnerDataProvider ( )
{
	static UFunction* pFnBindPlayerOwnerDataProvider = NULL;

	if ( ! pFnBindPlayerOwnerDataProvider )
		pFnBindPlayerOwnerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 27103 ];

	APlayerReplicationInfo_execBindPlayerOwnerDataProvider_Parms BindPlayerOwnerDataProvider_Parms;

	this->ProcessEvent ( pFnBindPlayerOwnerDataProvider, &BindPlayerOwnerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.NotifyLocalPlayerTeamReceived
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = (UFunction*) UObject::GObjObjects()->Data[ 27102 ];

	APlayerReplicationInfo_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdateTeamDataProvider
// [0x00020100] 
// Parameters infos:

void APlayerReplicationInfo::UpdateTeamDataProvider ( )
{
	static UFunction* pFnUpdateTeamDataProvider = NULL;

	if ( ! pFnUpdateTeamDataProvider )
		pFnUpdateTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 27101 ];

	APlayerReplicationInfo_execUpdateTeamDataProvider_Parms UpdateTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateTeamDataProvider, &UpdateTeamDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerDataProvider
// [0x00024100] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_OptionalParm | CPF_Parm )

void APlayerReplicationInfo::UpdatePlayerDataProvider ( struct FName PropertyName )
{
	static UFunction* pFnUpdatePlayerDataProvider = NULL;

	if ( ! pFnUpdatePlayerDataProvider )
		pFnUpdatePlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 27099 ];

	APlayerReplicationInfo_execUpdatePlayerDataProvider_Parms UpdatePlayerDataProvider_Parms;
	memcpy ( &UpdatePlayerDataProvider_Parms.PropertyName, &PropertyName, 0x8 );

	this->ProcessEvent ( pFnUpdatePlayerDataProvider, &UpdatePlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  NewPRI                         ( CPF_Parm )

void APlayerReplicationInfo::SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 27097 ];

	APlayerReplicationInfo_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPRI = NewPRI;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 27095 ];

	APlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::OverrideWith ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = (UFunction*) UObject::GObjObjects()->Data[ 27093 ];

	APlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;
	OverrideWith_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Duplicate
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate ( )
{
	static UFunction* pFnDuplicate = NULL;

	if ( ! pFnDuplicate )
		pFnDuplicate = (UFunction*) UObject::GObjObjects()->Data[ 27090 ];

	APlayerReplicationInfo_execDuplicate_Parms Duplicate_Parms;

	this->ProcessEvent ( pFnDuplicate, &Duplicate_Parms, NULL );

	return Duplicate_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void APlayerReplicationInfo::SetWaitingPlayer ( unsigned long B )
{
	static UFunction* pFnSetWaitingPlayer = NULL;

	if ( ! pFnSetWaitingPlayer )
		pFnSetWaitingPlayer = (UFunction*) UObject::GObjObjects()->Data[ 27088 ];

	APlayerReplicationInfo_execSetWaitingPlayer_Parms SetWaitingPlayer_Parms;
	SetWaitingPlayer_Parms.B = B;

	this->ProcessEvent ( pFnSetWaitingPlayer, &SetWaitingPlayer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void APlayerReplicationInfo::eventSetPlayerName ( struct FString S )
{
	static UFunction* pFnSetPlayerName = NULL;

	if ( ! pFnSetPlayerName )
		pFnSetPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 27086 ];

	APlayerReplicationInfo_eventSetPlayerName_Parms SetPlayerName_Parms;
	memcpy ( &SetPlayerName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetPlayerName, &SetPlayerName_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 27085 ];

	APlayerReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )
// float                          YPos                           ( CPF_Parm | CPF_OutParm )

void APlayerReplicationInfo::DisplayDebug ( class AHUD* HUD, float* YL, float* YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 27079 ];

	APlayerReplicationInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( YL )
		*YL = DisplayDebug_Parms.YL;

	if ( YPos )
		*YPos = DisplayDebug_Parms.YPos;
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerLocation
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::UpdatePlayerLocation ( )
{
	static UFunction* pFnUpdatePlayerLocation = NULL;

	if ( ! pFnUpdatePlayerLocation )
		pFnUpdatePlayerLocation = (UFunction*) UObject::GObjObjects()->Data[ 27075 ];

	APlayerReplicationInfo_execUpdatePlayerLocation_Parms UpdatePlayerLocation_Parms;

	this->ProcessEvent ( pFnUpdatePlayerLocation, &UpdatePlayerLocation_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetLocationName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerReplicationInfo::GetLocationName ( )
{
	static UFunction* pFnGetLocationName = NULL;

	if ( ! pFnGetLocationName )
		pFnGetLocationName = (UFunction*) UObject::GObjObjects()->Data[ 27072 ];

	APlayerReplicationInfo_execGetLocationName_Parms GetLocationName_Parms;

	this->ProcessEvent ( pFnGetLocationName, &GetLocationName_Parms, NULL );

	return GetLocationName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerReplicationInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 27070 ];

	APlayerReplicationInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 27069 ];

	APlayerReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 27067 ];

	APlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage ( )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 27065 ];

	APlayerReplicationInfo_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.UpdatePing
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerReplicationInfo::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 8521 ];

	APlayerReplicationInfo_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	pFnUpdatePing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );

	pFnUpdatePing->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.ReplicatedDataBinding
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 27062 ];

	APlayerReplicationInfo_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 27056 ];

	APlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerTeam
// [0x00020002] 
// Parameters infos:
// class ATeamInfo*               NewTeam                        ( CPF_Parm )

void APlayerReplicationInfo::SetPlayerTeam ( class ATeamInfo* NewTeam )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = (UFunction*) UObject::GObjObjects()->Data[ 27054 ];

	APlayerReplicationInfo_execSetPlayerTeam_Parms SetPlayerTeam_Parms;
	SetPlayerTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ClientInitialize
// [0x00020102] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void APlayerReplicationInfo::ClientInitialize ( class AController* C )
{
	static UFunction* pFnClientInitialize = NULL;

	if ( ! pFnClientInitialize )
		pFnClientInitialize = (UFunction*) UObject::GObjObjects()->Data[ 27048 ];

	APlayerReplicationInfo_execClientInitialize_Parms ClientInitialize_Parms;
	ClientInitialize_Parms.C = C;

	this->ProcessEvent ( pFnClientInitialize, &ClientInitialize_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 27047 ];

	APlayerReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetPlayerAlias
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString APlayerReplicationInfo::GetPlayerAlias ( )
{
	static UFunction* pFnGetPlayerAlias = NULL;

	if ( ! pFnGetPlayerAlias )
		pFnGetPlayerAlias = (UFunction*) UObject::GObjObjects()->Data[ 27045 ];

	APlayerReplicationInfo_execGetPlayerAlias_Parms GetPlayerAlias_Parms;

	pFnGetPlayerAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerAlias, &GetPlayerAlias_Parms, NULL );

	pFnGetPlayerAlias->FunctionFlags |= 0x400;

	return GetPlayerAlias_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  OtherPRI                       ( CPF_Parm )

bool APlayerReplicationInfo::AreUniqueNetIdsEqual ( class APlayerReplicationInfo* OtherPRI )
{
	static UFunction* pFnAreUniqueNetIdsEqual = NULL;

	if ( ! pFnAreUniqueNetIdsEqual )
		pFnAreUniqueNetIdsEqual = (UFunction*) UObject::GObjObjects()->Data[ 20739 ];

	APlayerReplicationInfo_execAreUniqueNetIdsEqual_Parms AreUniqueNetIdsEqual_Parms;
	AreUniqueNetIdsEqual_Parms.OtherPRI = OtherPRI;

	pFnAreUniqueNetIdsEqual->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreUniqueNetIdsEqual, &AreUniqueNetIdsEqual_Parms, NULL );

	pFnAreUniqueNetIdsEqual->FunctionFlags |= 0x400;

	return AreUniqueNetIdsEqual_Parms.ReturnValue;
};

// Function Engine.PlayerStart.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APlayerStart::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27142 ];

	APlayerStart_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 27158 ];

	UPointLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 27157 ];

	UPointLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.PointLightComponent.SetTranslation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPointLightComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 27155 ];

	UPointLightComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PortalMarker.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalMarker::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 27165 ];

	APortalMarker_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool APortalTeleporter::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 27225 ];

	APortalTeleporter_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.CreatePortalTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture ( )
{
	static UFunction* pFnCreatePortalTexture = NULL;

	if ( ! pFnCreatePortalTexture )
		pFnCreatePortalTexture = (UFunction*) UObject::GObjObjects()->Data[ 27223 ];

	APortalTeleporter_execCreatePortalTexture_Parms CreatePortalTexture_Parms;

	pFnCreatePortalTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePortalTexture, &CreatePortalTexture_Parms, NULL );

	pFnCreatePortalTexture->FunctionFlags |= 0x400;

	return CreatePortalTexture_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformHitLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )

struct FVector APortalTeleporter::TransformHitLocation ( struct FVector HitLocation )
{
	static UFunction* pFnTransformHitLocation = NULL;

	if ( ! pFnTransformHitLocation )
		pFnTransformHitLocation = (UFunction*) UObject::GObjObjects()->Data[ 27220 ];

	APortalTeleporter_execTransformHitLocation_Parms TransformHitLocation_Parms;
	memcpy ( &TransformHitLocation_Parms.HitLocation, &HitLocation, 0xC );

	pFnTransformHitLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformHitLocation, &TransformHitLocation_Parms, NULL );

	pFnTransformHitLocation->FunctionFlags |= 0x400;

	return TransformHitLocation_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformVectorDir
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )

struct FVector APortalTeleporter::TransformVectorDir ( struct FVector V )
{
	static UFunction* pFnTransformVectorDir = NULL;

	if ( ! pFnTransformVectorDir )
		pFnTransformVectorDir = (UFunction*) UObject::GObjObjects()->Data[ 27217 ];

	APortalTeleporter_execTransformVectorDir_Parms TransformVectorDir_Parms;
	memcpy ( &TransformVectorDir_Parms.V, &V, 0xC );

	pFnTransformVectorDir->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformVectorDir, &TransformVectorDir_Parms, NULL );

	pFnTransformVectorDir->FunctionFlags |= 0x400;

	return TransformVectorDir_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalTeleporter::TransformActor ( class AActor* A )
{
	static UFunction* pFnTransformActor = NULL;

	if ( ! pFnTransformActor )
		pFnTransformActor = (UFunction*) UObject::GObjObjects()->Data[ 27214 ];

	APortalTeleporter_execTransformActor_Parms TransformActor_Parms;
	TransformActor_Parms.A = A;

	pFnTransformActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformActor, &TransformActor_Parms, NULL );

	pFnTransformActor->FunctionFlags |= 0x400;

	return TransformActor_Parms.ReturnValue;
};

// Function Engine.PostProcessChain.FindPostProcessEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPostProcessEffect*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectName                     ( CPF_Parm )

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect ( struct FName EffectName )
{
	static UFunction* pFnFindPostProcessEffect = NULL;

	if ( ! pFnFindPostProcessEffect )
		pFnFindPostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 27235 ];

	UPostProcessChain_execFindPostProcessEffect_Parms FindPostProcessEffect_Parms;
	memcpy ( &FindPostProcessEffect_Parms.EffectName, &EffectName, 0x8 );

	this->ProcessEvent ( pFnFindPostProcessEffect, &FindPostProcessEffect_Parms, NULL );

	return FindPostProcessEffect_Parms.ReturnValue;
};

// Function Engine.PotentialClimbWatcher.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APotentialClimbWatcher::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 27304 ];

	APotentialClimbWatcher_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Projectile.GetRange
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AProjectile::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 27531 ];

	AProjectile_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function Engine.Projectile.StaticGetTimeToLocation
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )
// class AController*             RequestedBy                    ( CPF_Parm )

float AProjectile::StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy )
{
	static UFunction* pFnStaticGetTimeToLocation = NULL;

	if ( ! pFnStaticGetTimeToLocation )
		pFnStaticGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 27526 ];

	AProjectile_execStaticGetTimeToLocation_Parms StaticGetTimeToLocation_Parms;
	memcpy ( &StaticGetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );
	memcpy ( &StaticGetTimeToLocation_Parms.StartLoc, &StartLoc, 0xC );
	StaticGetTimeToLocation_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnStaticGetTimeToLocation, &StaticGetTimeToLocation_Parms, NULL );

	return StaticGetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTimeToLocation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )

float AProjectile::GetTimeToLocation ( struct FVector TargetLoc )
{
	static UFunction* pFnGetTimeToLocation = NULL;

	if ( ! pFnGetTimeToLocation )
		pFnGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 27523 ];

	AProjectile_execGetTimeToLocation_Parms GetTimeToLocation_Parms;
	memcpy ( &GetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );

	this->ProcessEvent ( pFnGetTimeToLocation, &GetTimeToLocation_Parms, NULL );

	return GetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AProjectile::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 27521 ];

	AProjectile_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Projectile.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 27519 ];

	AProjectile_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Projectile.RandSpin
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          spinRate                       ( CPF_Parm )

void AProjectile::RandSpin ( float spinRate )
{
	static UFunction* pFnRandSpin = NULL;

	if ( ! pFnRandSpin )
		pFnRandSpin = (UFunction*) UObject::GObjObjects()->Data[ 27517 ];

	AProjectile_execRandSpin_Parms RandSpin_Parms;
	RandSpin_Parms.spinRate = spinRate;

	this->ProcessEvent ( pFnRandSpin, &RandSpin_Parms, NULL );
};

// Function Engine.Projectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 27514 ];

	AProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.Projectile.EncroachedBy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AProjectile::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 27512 ];

	AProjectile_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Projectile.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm )

void AProjectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 27508 ];

	AProjectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Projectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 27504 ];

	AProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Engine.Projectile.Touch
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 27499 ];

	AProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Projectile.HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AProjectile::HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 27487 ];

	AProjectile_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.DamageAmount = DamageAmount;
	HurtRadius_Parms.InDamageRadius = InDamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.Reset
// [0x00020002] 
// Parameters infos:

void AProjectile::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 27486 ];

	AProjectile_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Projectile.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 27484 ];

	AProjectile_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AProjectile::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 27482 ];

	AProjectile_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Projectile.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void AProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 27480 ];

	AProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.Projectile.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 27479 ];

	AProjectile_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 27478 ];

	AProjectile_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AProjectile::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 27475 ];

	AProjectile_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Route.MoveOntoRoutePath
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_OptionalParm | CPF_Parm )
// float                          DistFudgeFactor                ( CPF_OptionalParm | CPF_Parm )

int ARoute::MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor )
{
	static UFunction* pFnMoveOntoRoutePath = NULL;

	if ( ! pFnMoveOntoRoutePath )
		pFnMoveOntoRoutePath = (UFunction*) UObject::GObjObjects()->Data[ 27947 ];

	ARoute_execMoveOntoRoutePath_Parms MoveOntoRoutePath_Parms;
	MoveOntoRoutePath_Parms.P = P;
	MoveOntoRoutePath_Parms.RouteDirection = RouteDirection;
	MoveOntoRoutePath_Parms.DistFudgeFactor = DistFudgeFactor;

	pFnMoveOntoRoutePath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveOntoRoutePath, &MoveOntoRoutePath_Parms, NULL );

	pFnMoveOntoRoutePath->FunctionFlags |= 0x400;

	return MoveOntoRoutePath_Parms.ReturnValue;
};

// Function Engine.Route.ResolveRouteIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Idx                            ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_Parm )
// unsigned char                  out_bComplete                  ( CPF_Parm | CPF_OutParm )
// unsigned char                  out_bReverse                   ( CPF_Parm | CPF_OutParm )

int ARoute::ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse )
{
	static UFunction* pFnResolveRouteIndex = NULL;

	if ( ! pFnResolveRouteIndex )
		pFnResolveRouteIndex = (UFunction*) UObject::GObjObjects()->Data[ 27941 ];

	ARoute_execResolveRouteIndex_Parms ResolveRouteIndex_Parms;
	ResolveRouteIndex_Parms.Idx = Idx;
	ResolveRouteIndex_Parms.RouteDirection = RouteDirection;

	pFnResolveRouteIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRouteIndex, &ResolveRouteIndex_Parms, NULL );

	pFnResolveRouteIndex->FunctionFlags |= 0x400;

	if ( out_bComplete )
		*out_bComplete = ResolveRouteIndex_Parms.out_bComplete;

	if ( out_bReverse )
		*out_bReverse = ResolveRouteIndex_Parms.out_bReverse;

	return ResolveRouteIndex_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetFlags
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Flags                          ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

unsigned char USavedMove::SetFlags ( unsigned char Flags, class APlayerController* PC )
{
	static UFunction* pFnSetFlags = NULL;

	if ( ! pFnSetFlags )
		pFnSetFlags = (UFunction*) UObject::GObjObjects()->Data[ 27992 ];

	USavedMove_execSetFlags_Parms SetFlags_Parms;
	SetFlags_Parms.Flags = Flags;
	SetFlags_Parms.PC = PC;

	this->ProcessEvent ( pFnSetFlags, &SetFlags_Parms, NULL );

	return SetFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.CompressedFlags
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USavedMove::CompressedFlags ( )
{
	static UFunction* pFnCompressedFlags = NULL;

	if ( ! pFnCompressedFlags )
		pFnCompressedFlags = (UFunction*) UObject::GObjObjects()->Data[ 27989 ];

	USavedMove_execCompressedFlags_Parms CompressedFlags_Parms;

	this->ProcessEvent ( pFnCompressedFlags, &CompressedFlags_Parms, NULL );

	return CompressedFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetMoveFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  InDoubleClick                  ( CPF_Parm )

void USavedMove::SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick )
{
	static UFunction* pFnSetMoveFor = NULL;

	if ( ! pFnSetMoveFor )
		pFnSetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 27984 ];

	USavedMove_execSetMoveFor_Parms SetMoveFor_Parms;
	SetMoveFor_Parms.P = P;
	SetMoveFor_Parms.DeltaTime = DeltaTime;
	memcpy ( &SetMoveFor_Parms.newAccel, &newAccel, 0xC );
	SetMoveFor_Parms.InDoubleClick = InDoubleClick;

	this->ProcessEvent ( pFnSetMoveFor, &SetMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.CanCombineWith
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USavedMove*              NewMove                        ( CPF_Parm )
// class APawn*                   inPawn                         ( CPF_Parm )
// float                          MaxDelta                       ( CPF_Parm )

bool USavedMove::CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta )
{
	static UFunction* pFnCanCombineWith = NULL;

	if ( ! pFnCanCombineWith )
		pFnCanCombineWith = (UFunction*) UObject::GObjObjects()->Data[ 27979 ];

	USavedMove_execCanCombineWith_Parms CanCombineWith_Parms;
	CanCombineWith_Parms.NewMove = NewMove;
	CanCombineWith_Parms.inPawn = inPawn;
	CanCombineWith_Parms.MaxDelta = MaxDelta;

	this->ProcessEvent ( pFnCanCombineWith, &CanCombineWith_Parms, NULL );

	return CanCombineWith_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetInitialPosition
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::SetInitialPosition ( class APawn* P )
{
	static UFunction* pFnSetInitialPosition = NULL;

	if ( ! pFnSetInitialPosition )
		pFnSetInitialPosition = (UFunction*) UObject::GObjObjects()->Data[ 27977 ];

	USavedMove_execSetInitialPosition_Parms SetInitialPosition_Parms;
	SetInitialPosition_Parms.P = P;

	this->ProcessEvent ( pFnSetInitialPosition, &SetInitialPosition_Parms, NULL );
};

// Function Engine.SavedMove.GetStartLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USavedMove::GetStartLocation ( )
{
	static UFunction* pFnGetStartLocation = NULL;

	if ( ! pFnGetStartLocation )
		pFnGetStartLocation = (UFunction*) UObject::GObjObjects()->Data[ 27975 ];

	USavedMove_execGetStartLocation_Parms GetStartLocation_Parms;

	this->ProcessEvent ( pFnGetStartLocation, &GetStartLocation_Parms, NULL );

	return GetStartLocation_Parms.ReturnValue;
};

// Function Engine.SavedMove.IsImportantMove
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CompareAccel                   ( CPF_Parm )

bool USavedMove::IsImportantMove ( struct FVector CompareAccel )
{
	static UFunction* pFnIsImportantMove = NULL;

	if ( ! pFnIsImportantMove )
		pFnIsImportantMove = (UFunction*) UObject::GObjObjects()->Data[ 27971 ];

	USavedMove_execIsImportantMove_Parms IsImportantMove_Parms;
	memcpy ( &IsImportantMove_Parms.CompareAccel, &CompareAccel, 0xC );

	this->ProcessEvent ( pFnIsImportantMove, &IsImportantMove_Parms, NULL );

	return IsImportantMove_Parms.ReturnValue;
};

// Function Engine.SavedMove.PostUpdate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void USavedMove::PostUpdate ( class APlayerController* P )
{
	static UFunction* pFnPostUpdate = NULL;

	if ( ! pFnPostUpdate )
		pFnPostUpdate = (UFunction*) UObject::GObjObjects()->Data[ 27969 ];

	USavedMove_execPostUpdate_Parms PostUpdate_Parms;
	PostUpdate_Parms.P = P;

	this->ProcessEvent ( pFnPostUpdate, &PostUpdate_Parms, NULL );
};

// Function Engine.SavedMove.Clear
// [0x00020002] 
// Parameters infos:

void USavedMove::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 27968 ];

	USavedMove_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function Engine.SceneCaptureComponent.NeedsUpdate
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USceneCaptureComponent::NeedsUpdate ( )
{
	static UFunction* pFnNeedsUpdate = NULL;

	if ( ! pFnNeedsUpdate )
		pFnNeedsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 27187 ];

	USceneCaptureComponent_execNeedsUpdate_Parms NeedsUpdate_Parms;

	this->ProcessEvent ( pFnNeedsUpdate, &NeedsUpdate_Parms, NULL );

	return NeedsUpdate_Parms.ReturnValue;
};

// Function Engine.SceneCaptureComponent.SetFrameRate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewFrameRate                   ( CPF_Parm )

void USceneCaptureComponent::SetFrameRate ( float NewFrameRate )
{
	static UFunction* pFnSetFrameRate = NULL;

	if ( ! pFnSetFrameRate )
		pFnSetFrameRate = (UFunction*) UObject::GObjObjects()->Data[ 27185 ];

	USceneCaptureComponent_execSetFrameRate_Parms SetFrameRate_Parms;
	SetFrameRate_Parms.NewFrameRate = NewFrameRate;

	pFnSetFrameRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFrameRate, &SetFrameRate_Parms, NULL );

	pFnSetFrameRate->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetView
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void USceneCapture2DComponent::SetView ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnSetView = NULL;

	if ( ! pFnSetView )
		pFnSetView = (UFunction*) UObject::GObjObjects()->Data[ 28011 ];

	USceneCapture2DComponent_execSetView_Parms SetView_Parms;
	memcpy ( &SetView_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &SetView_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetView, &SetView_Parms, NULL );

	pFnSetView->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewFOV                         ( CPF_OptionalParm | CPF_Parm )
// float                          NewNearPlane                   ( CPF_OptionalParm | CPF_Parm )
// float                          NewFarPlane                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapture2DComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 28006 ];

	USceneCapture2DComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewFOV = NewFOV;
	SetCaptureParameters_Parms.NewNearPlane = NewNearPlane;
	SetCaptureParameters_Parms.NewFarPlane = NewFarPlane;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewScaleFOV                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  NewViewDest                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapturePortalComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 27198 ];

	USceneCapturePortalComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewScaleFOV = NewScaleFOV;
	SetCaptureParameters_Parms.NewViewDest = NewViewDest;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.Scout.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AScout::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 28047 ];

	AScout_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.TextureRenderTarget2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            InClearColor                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyRenderOnce                ( CPF_OptionalParm | CPF_Parm )

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 28083 ];

	UTextureRenderTarget2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	memcpy ( &Create_Parms.InClearColor, &InClearColor, 0x10 );
	Create_Parms.bOnlyRenderOnce = bOnlyRenderOnce;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.ScriptedTexture.Render
// [0x00120000] 
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void UScriptedTexture::Render ( class UCanvas* C )
{
	static UFunction* pFnRender = NULL;

	if ( ! pFnRender )
		pFnRender = (UFunction*) UObject::GObjObjects()->Data[ 28093 ];

	UScriptedTexture_execRender_Parms Render_Parms;
	Render_Parms.C = C;

	this->ProcessEvent ( pFnRender, &Render_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.StopAnim
// [0x00020002] 
// Parameters infos:

void USkeletalMeshComponent::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 9455 ];

	USkeletalMeshComponent_execStopAnim_Parms StopAnim_Parms;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayAnim
// [0x00024002] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRestartIfAlreadyPlaying       ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 9448 ];

	USkeletalMeshComponent_execPlayAnim_Parms PlayAnim_Parms;
	memcpy ( &PlayAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayAnim_Parms.Duration = Duration;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.CalcDrawScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::CalcDrawScale ( )
{
	static UFunction* pFnCalcDrawScale = NULL;

	if ( ! pFnCalcDrawScale )
		pFnCalcDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 9447 ];

	USkeletalMeshComponent_execCalcDrawScale_Parms CalcDrawScale_Parms;

	pFnCalcDrawScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcDrawScale, &CalcDrawScale_Parms, NULL );

	pFnCalcDrawScale->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsBoneHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

bool USkeletalMeshComponent::IsBoneHidden ( int BoneIndex )
{
	static UFunction* pFnIsBoneHidden = NULL;

	if ( ! pFnIsBoneHidden )
		pFnIsBoneHidden = (UFunction*) UObject::GObjObjects()->Data[ 9444 ];

	USkeletalMeshComponent_execIsBoneHidden_Parms IsBoneHidden_Parms;
	IsBoneHidden_Parms.BoneIndex = BoneIndex;

	pFnIsBoneHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBoneHidden, &IsBoneHidden_Parms, NULL );

	pFnIsBoneHidden->FunctionFlags |= 0x400;

	return IsBoneHidden_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UnHideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )

void USkeletalMeshComponent::UnHideBone ( int BoneIndex )
{
	static UFunction* pFnUnHideBone = NULL;

	if ( ! pFnUnHideBone )
		pFnUnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 9442 ];

	USkeletalMeshComponent_execUnHideBone_Parms UnHideBone_Parms;
	UnHideBone_Parms.BoneIndex = BoneIndex;

	pFnUnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBone, &UnHideBone_Parms, NULL );

	pFnUnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bTermBodiesBelow               ( CPF_Parm )

void USkeletalMeshComponent::HideBone ( int BoneIndex, unsigned long bTermBodiesBelow )
{
	static UFunction* pFnHideBone = NULL;

	if ( ! pFnHideBone )
		pFnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 9439 ];

	USkeletalMeshComponent_execHideBone_Parms HideBone_Parms;
	HideBone_Parms.BoneIndex = BoneIndex;
	HideBone_Parms.bTermBodiesBelow = bTermBodiesBelow;

	pFnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBone, &HideBone_Parms, NULL );

	pFnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          FirstValue                     ( CPF_Parm )
// float                          FirstInterpDuration            ( CPF_Parm )
// float                          NextValue                      ( CPF_Parm )
// float                          NextInterpDuration             ( CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration )
{
	static UFunction* pFnSetFaceFXRegisterEx = NULL;

	if ( ! pFnSetFaceFXRegisterEx )
		pFnSetFaceFXRegisterEx = (UFunction*) UObject::GObjObjects()->Data[ 9432 ];

	USkeletalMeshComponent_execSetFaceFXRegisterEx_Parms SetFaceFXRegisterEx_Parms;
	memcpy ( &SetFaceFXRegisterEx_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegisterEx_Parms.RegOp = RegOp;
	SetFaceFXRegisterEx_Parms.FirstValue = FirstValue;
	SetFaceFXRegisterEx_Parms.FirstInterpDuration = FirstInterpDuration;
	SetFaceFXRegisterEx_Parms.NextValue = NextValue;
	SetFaceFXRegisterEx_Parms.NextInterpDuration = NextInterpDuration;

	pFnSetFaceFXRegisterEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegisterEx, &SetFaceFXRegisterEx_Parms, NULL );

	pFnSetFaceFXRegisterEx->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm )
// float                          RegVal                         ( CPF_Parm )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          InterpDuration                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration )
{
	static UFunction* pFnSetFaceFXRegister = NULL;

	if ( ! pFnSetFaceFXRegister )
		pFnSetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9427 ];

	USkeletalMeshComponent_execSetFaceFXRegister_Parms SetFaceFXRegister_Parms;
	memcpy ( &SetFaceFXRegister_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegister_Parms.RegVal = RegVal;
	SetFaceFXRegister_Parms.RegOp = RegOp;
	SetFaceFXRegister_Parms.InterpDuration = InterpDuration;

	pFnSetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegister, &SetFaceFXRegister_Parms, NULL );

	pFnSetFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 RegName                        ( CPF_Parm )

float USkeletalMeshComponent::GetFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnGetFaceFXRegister = NULL;

	if ( ! pFnGetFaceFXRegister )
		pFnGetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9424 ];

	USkeletalMeshComponent_execGetFaceFXRegister_Parms GetFaceFXRegister_Parms;
	memcpy ( &GetFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnGetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceFXRegister, &GetFaceFXRegister_Parms, NULL );

	pFnGetFaceFXRegister->FunctionFlags |= 0x400;

	return GetFaceFXRegister_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm )

void USkeletalMeshComponent::DeclareFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnDeclareFaceFXRegister = NULL;

	if ( ! pFnDeclareFaceFXRegister )
		pFnDeclareFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9422 ];

	USkeletalMeshComponent_execDeclareFaceFXRegister_Parms DeclareFaceFXRegister_Parms;
	memcpy ( &DeclareFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnDeclareFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeclareFaceFXRegister, &DeclareFaceFXRegister_Parms, NULL );

	pFnDeclareFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USkeletalMeshComponent::IsPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsPlayingFaceFXAnim = NULL;

	if ( ! pFnIsPlayingFaceFXAnim )
		pFnIsPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9420 ];

	USkeletalMeshComponent_execIsPlayingFaceFXAnim_Parms IsPlayingFaceFXAnim_Parms;

	pFnIsPlayingFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingFaceFXAnim, &IsPlayingFaceFXAnim_Parms, NULL );

	pFnIsPlayingFaceFXAnim->FunctionFlags |= 0x400;

	return IsPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::StopFaceFXAnim ( )
{
	static UFunction* pFnStopFaceFXAnim = NULL;

	if ( ! pFnStopFaceFXAnim )
		pFnStopFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9419 ];

	USkeletalMeshComponent_execStopFaceFXAnim_Parms StopFaceFXAnim_Parms;

	pFnStopFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopFaceFXAnim, &StopFaceFXAnim_Parms, NULL );

	pFnStopFaceFXAnim->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          FaceFXAnimSetRef               ( CPF_Parm )
// struct FString                 AnimName                       ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm )
// int                            SoundTrackType                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InStopPrevious                 ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, int SoundTrackType, unsigned long InStopPrevious )
{
	static UFunction* pFnPlayFaceFXAnim = NULL;

	if ( ! pFnPlayFaceFXAnim )
		pFnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9412 ];

	USkeletalMeshComponent_execPlayFaceFXAnim_Parms PlayFaceFXAnim_Parms;
	PlayFaceFXAnim_Parms.FaceFXAnimSetRef = FaceFXAnimSetRef;
	memcpy ( &PlayFaceFXAnim_Parms.AnimName, &AnimName, 0xC );
	memcpy ( &PlayFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	PlayFaceFXAnim_Parms.SoundTrackType = SoundTrackType;
	PlayFaceFXAnim_Parms.InStopPrevious = InStopPrevious;

	pFnPlayFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFaceFXAnim, &PlayFaceFXAnim_Parms, NULL );

	pFnPlayFaceFXAnim->FunctionFlags |= 0x400;

	return PlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitialFindAnimNodeCahce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitialFindAnimNodeCahce ( )
{
	static UFunction* pFnInitialFindAnimNodeCahce = NULL;

	if ( ! pFnInitialFindAnimNodeCahce )
		pFnInitialFindAnimNodeCahce = (UFunction*) UObject::GObjObjects()->Data[ 9411 ];

	USkeletalMeshComponent_execInitialFindAnimNodeCahce_Parms InitialFindAnimNodeCahce_Parms;

	pFnInitialFindAnimNodeCahce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialFindAnimNodeCahce, &InitialFindAnimNodeCahce_Parms, NULL );

	pFnInitialFindAnimNodeCahce->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USkeletalMeshComponent::ToggleInstanceVertexWeights ( unsigned long bEnable )
{
	static UFunction* pFnToggleInstanceVertexWeights = NULL;

	if ( ! pFnToggleInstanceVertexWeights )
		pFnToggleInstanceVertexWeights = (UFunction*) UObject::GObjObjects()->Data[ 9409 ];

	USkeletalMeshComponent_execToggleInstanceVertexWeights_Parms ToggleInstanceVertexWeights_Parms;
	ToggleInstanceVertexWeights_Parms.bEnable = bEnable;

	pFnToggleInstanceVertexWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleInstanceVertexWeights, &ToggleInstanceVertexWeights_Parms, NULL );

	pFnToggleInstanceVertexWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FBonePair >     BonePairs                      ( CPF_Parm )

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs )
{
	static UFunction* pFnUpdateInstanceVertexWeightBones = NULL;

	if ( ! pFnUpdateInstanceVertexWeightBones )
		pFnUpdateInstanceVertexWeightBones = (UFunction*) UObject::GObjObjects()->Data[ 9406 ];

	USkeletalMeshComponent_execUpdateInstanceVertexWeightBones_Parms UpdateInstanceVertexWeightBones_Parms;
	memcpy ( &UpdateInstanceVertexWeightBones_Parms.BonePairs, &BonePairs, 0xC );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateInstanceVertexWeightBones, &UpdateInstanceVertexWeightBones_Parms, NULL );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBonePair               Bones                          ( CPF_Parm )

int USkeletalMeshComponent::FindInstanceVertexweightBonePair ( struct FBonePair Bones )
{
	static UFunction* pFnFindInstanceVertexweightBonePair = NULL;

	if ( ! pFnFindInstanceVertexweightBonePair )
		pFnFindInstanceVertexweightBonePair = (UFunction*) UObject::GObjObjects()->Data[ 9403 ];

	USkeletalMeshComponent_execFindInstanceVertexweightBonePair_Parms FindInstanceVertexweightBonePair_Parms;
	memcpy ( &FindInstanceVertexweightBonePair_Parms.Bones, &Bones, 0x10 );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInstanceVertexweightBonePair, &FindInstanceVertexweightBonePair_Parms, NULL );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= 0x400;

	return FindInstanceVertexweightBonePair_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnRemoveInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnRemoveInstanceVertexWeightBoneParented )
		pFnRemoveInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 9401 ];

	USkeletalMeshComponent_execRemoveInstanceVertexWeightBoneParented_Parms RemoveInstanceVertexWeightBoneParented_Parms;
	memcpy ( &RemoveInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveInstanceVertexWeightBoneParented, &RemoveInstanceVertexWeightBoneParented_Parms, NULL );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnAddInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnAddInstanceVertexWeightBoneParented )
		pFnAddInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 9399 ];

	USkeletalMeshComponent_execAddInstanceVertexWeightBoneParented_Parms AddInstanceVertexWeightBoneParented_Parms;
	memcpy ( &AddInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddInstanceVertexWeightBoneParented, &AddInstanceVertexWeightBoneParented_Parms, NULL );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            TraceFlags                     ( CPF_Parm )
// TArray< struct FName >         out_Bones                      ( CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones )
{
	static UFunction* pFnGetBonesWithinRadius = NULL;

	if ( ! pFnGetBonesWithinRadius )
		pFnGetBonesWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 9392 ];

	USkeletalMeshComponent_execGetBonesWithinRadius_Parms GetBonesWithinRadius_Parms;
	memcpy ( &GetBonesWithinRadius_Parms.Origin, &Origin, 0xC );
	GetBonesWithinRadius_Parms.Radius = Radius;
	GetBonesWithinRadius_Parms.TraceFlags = TraceFlags;

	pFnGetBonesWithinRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBonesWithinRadius, &GetBonesWithinRadius_Parms, NULL );

	pFnGetBonesWithinRadius->FunctionFlags |= 0x400;

	if ( out_Bones )
		memcpy ( out_Bones, &GetBonesWithinRadius_Parms.out_Bones, 0xC );

	return GetBonesWithinRadius_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UpdateAnimations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateAnimations ( )
{
	static UFunction* pFnUpdateAnimations = NULL;

	if ( ! pFnUpdateAnimations )
		pFnUpdateAnimations = (UFunction*) UObject::GObjObjects()->Data[ 9391 ];

	USkeletalMeshComponent_execUpdateAnimations_Parms UpdateAnimations_Parms;

	pFnUpdateAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimations, &UpdateAnimations_Parms, NULL );

	pFnUpdateAnimations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceSkelUpdate ( )
{
	static UFunction* pFnForceSkelUpdate = NULL;

	if ( ! pFnForceSkelUpdate )
		pFnForceSkelUpdate = (UFunction*) UObject::GObjObjects()->Data[ 9390 ];

	USkeletalMeshComponent_execForceSkelUpdate_Parms ForceSkelUpdate_Parms;

	pFnForceSkelUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSkelUpdate, &ForceSkelUpdate_Parms, NULL );

	pFnForceSkelUpdate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bMoveUnfixedBodies             ( CPF_Parm )
// unsigned long                  bTeleport                      ( CPF_Parm )

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport )
{
	static UFunction* pFnUpdateRBBonesFromSpaceBases = NULL;

	if ( ! pFnUpdateRBBonesFromSpaceBases )
		pFnUpdateRBBonesFromSpaceBases = (UFunction*) UObject::GObjObjects()->Data[ 9387 ];

	USkeletalMeshComponent_execUpdateRBBonesFromSpaceBases_Parms UpdateRBBonesFromSpaceBases_Parms;
	UpdateRBBonesFromSpaceBases_Parms.bMoveUnfixedBodies = bMoveUnfixedBodies;
	UpdateRBBonesFromSpaceBases_Parms.bTeleport = bTeleport;

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRBBonesFromSpaceBases, &UpdateRBBonesFromSpaceBases_Parms, NULL );

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bHasInstance                   ( CPF_Parm )

void USkeletalMeshComponent::SetHasPhysicsAssetInstance ( unsigned long bHasInstance )
{
	static UFunction* pFnSetHasPhysicsAssetInstance = NULL;

	if ( ! pFnSetHasPhysicsAssetInstance )
		pFnSetHasPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 9385 ];

	USkeletalMeshComponent_execSetHasPhysicsAssetInstance_Parms SetHasPhysicsAssetInstance_Parms;
	SetHasPhysicsAssetInstance_Parms.bHasInstance = bHasInstance;

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHasPhysicsAssetInstance, &SetHasPhysicsAssetInstance_Parms, NULL );

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed ( struct FName BoneName )
{
	static UFunction* pFnFindBodyInstanceNamed = NULL;

	if ( ! pFnFindBodyInstanceNamed )
		pFnFindBodyInstanceNamed = (UFunction*) UObject::GObjObjects()->Data[ 9382 ];

	USkeletalMeshComponent_execFindBodyInstanceNamed_Parms FindBodyInstanceNamed_Parms;
	memcpy ( &FindBodyInstanceNamed_Parms.BoneName, &BoneName, 0x8 );

	pFnFindBodyInstanceNamed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstanceNamed, &FindBodyInstanceNamed_Parms, NULL );

	pFnFindBodyInstanceNamed->FunctionFlags |= 0x400;

	return FindBodyInstanceNamed_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ConstraintIndex                ( CPF_Parm )

struct FName USkeletalMeshComponent::FindConstraintBoneName ( int ConstraintIndex )
{
	static UFunction* pFnFindConstraintBoneName = NULL;

	if ( ! pFnFindConstraintBoneName )
		pFnFindConstraintBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9379 ];

	USkeletalMeshComponent_execFindConstraintBoneName_Parms FindConstraintBoneName_Parms;
	FindConstraintBoneName_Parms.ConstraintIndex = ConstraintIndex;

	pFnFindConstraintBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintBoneName, &FindConstraintBoneName_Parms, NULL );

	pFnFindConstraintBoneName->FunctionFlags |= 0x400;

	return FindConstraintBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConstraintName                 ( CPF_Parm )

int USkeletalMeshComponent::FindConstraintIndex ( struct FName ConstraintName )
{
	static UFunction* pFnFindConstraintIndex = NULL;

	if ( ! pFnFindConstraintIndex )
		pFnFindConstraintIndex = (UFunction*) UObject::GObjObjects()->Data[ 9376 ];

	USkeletalMeshComponent_execFindConstraintIndex_Parms FindConstraintIndex_Parms;
	memcpy ( &FindConstraintIndex_Parms.ConstraintName, &ConstraintName, 0x8 );

	pFnFindConstraintIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintIndex, &FindConstraintIndex_Parms, NULL );

	pFnFindConstraintIndex->FunctionFlags |= 0x400;

	return FindConstraintIndex_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitSkelControls
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitSkelControls ( )
{
	static UFunction* pFnInitSkelControls = NULL;

	if ( ! pFnInitSkelControls )
		pFnInitSkelControls = (UFunction*) UObject::GObjObjects()->Data[ 9375 ];

	USkeletalMeshComponent_execInitSkelControls_Parms InitSkelControls_Parms;

	pFnInitSkelControls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSkelControls, &InitSkelControls_Parms, NULL );

	pFnInitSkelControls->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateParentBoneMap ( )
{
	static UFunction* pFnUpdateParentBoneMap = NULL;

	if ( ! pFnUpdateParentBoneMap )
		pFnUpdateParentBoneMap = (UFunction*) UObject::GObjObjects()->Data[ 9374 ];

	USkeletalMeshComponent_execUpdateParentBoneMap_Parms UpdateParentBoneMap_Parms;

	pFnUpdateParentBoneMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateParentBoneMap, &UpdateParentBoneMap_Parms, NULL );

	pFnUpdateParentBoneMap->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  NewParentAnimComp              ( CPF_Parm )

void USkeletalMeshComponent::SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp )
{
	static UFunction* pFnSetParentAnimComponent = NULL;

	if ( ! pFnSetParentAnimComponent )
		pFnSetParentAnimComponent = (UFunction*) UObject::GObjObjects()->Data[ 9372 ];

	USkeletalMeshComponent_execSetParentAnimComponent_Parms SetParentAnimComponent_Parms;
	SetParentAnimComponent_Parms.NewParentAnimComp = NewParentAnimComp;

	pFnSetParentAnimComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParentAnimComponent, &SetParentAnimComponent_Parms, NULL );

	pFnSetParentAnimComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimTree*               NewTemplate                    ( CPF_Parm )

void USkeletalMeshComponent::SetAnimTreeTemplate ( class UAnimTree* NewTemplate )
{
	static UFunction* pFnSetAnimTreeTemplate = NULL;

	if ( ! pFnSetAnimTreeTemplate )
		pFnSetAnimTreeTemplate = (UFunction*) UObject::GObjObjects()->Data[ 9370 ];

	USkeletalMeshComponent_execSetAnimTreeTemplate_Parms SetAnimTreeTemplate_Parms;
	SetAnimTreeTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetAnimTreeTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimTreeTemplate, &SetAnimTreeTemplate_Parms, NULL );

	pFnSetAnimTreeTemplate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bCheckZeroExtent               ( CPF_Parm )
// unsigned long                  bCheckNonZeroExtent            ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent )
{
	static UFunction* pFnGetClosestCollidingBoneLocation = NULL;

	if ( ! pFnGetClosestCollidingBoneLocation )
		pFnGetClosestCollidingBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 9365 ];

	USkeletalMeshComponent_execGetClosestCollidingBoneLocation_Parms GetClosestCollidingBoneLocation_Parms;
	memcpy ( &GetClosestCollidingBoneLocation_Parms.TestLocation, &TestLocation, 0xC );
	GetClosestCollidingBoneLocation_Parms.bCheckZeroExtent = bCheckZeroExtent;
	GetClosestCollidingBoneLocation_Parms.bCheckNonZeroExtent = bCheckNonZeroExtent;

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestCollidingBoneLocation, &GetClosestCollidingBoneLocation_Parms, NULL );

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= 0x400;

	return GetClosestCollidingBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindClosestBone
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          IgnoreScale                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoneLocation                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FName USkeletalMeshComponent::FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation )
{
	static UFunction* pFnFindClosestBone = NULL;

	if ( ! pFnFindClosestBone )
		pFnFindClosestBone = (UFunction*) UObject::GObjObjects()->Data[ 9360 ];

	USkeletalMeshComponent_execFindClosestBone_Parms FindClosestBone_Parms;
	memcpy ( &FindClosestBone_Parms.TestLocation, &TestLocation, 0xC );
	FindClosestBone_Parms.IgnoreScale = IgnoreScale;

	pFnFindClosestBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestBone, &FindClosestBone_Parms, NULL );

	pFnFindClosestBone->FunctionFlags |= 0x400;

	if ( BoneLocation )
		memcpy ( BoneLocation, &FindClosestBone_Parms.BoneLocation, 0xC );

	return FindClosestBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformFromBoneSpace = NULL;

	if ( ! pFnTransformFromBoneSpace )
		pFnTransformFromBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 9354 ];

	USkeletalMeshComponent_execTransformFromBoneSpace_Parms TransformFromBoneSpace_Parms;
	memcpy ( &TransformFromBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformFromBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformFromBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformFromBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformFromBoneSpace, &TransformFromBoneSpace_Parms, NULL );

	pFnTransformFromBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformFromBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformFromBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformToBoneSpace = NULL;

	if ( ! pFnTransformToBoneSpace )
		pFnTransformToBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 9348 ];

	USkeletalMeshComponent_execTransformToBoneSpace_Parms TransformToBoneSpace_Parms;
	memcpy ( &TransformToBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformToBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformToBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformToBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformToBoneSpace, &TransformToBoneSpace_Parms, NULL );

	pFnTransformToBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformToBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformToBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetBoneAxis
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  Axis                           ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneAxis ( struct FName BoneName, unsigned char Axis )
{
	static UFunction* pFnGetBoneAxis = NULL;

	if ( ! pFnGetBoneAxis )
		pFnGetBoneAxis = (UFunction*) UObject::GObjObjects()->Data[ 9344 ];

	USkeletalMeshComponent_execGetBoneAxis_Parms GetBoneAxis_Parms;
	memcpy ( &GetBoneAxis_Parms.BoneName, &BoneName, 0x8 );
	GetBoneAxis_Parms.Axis = Axis;

	pFnGetBoneAxis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneAxis, &GetBoneAxis_Parms, NULL );

	pFnGetBoneAxis->FunctionFlags |= 0x400;

	return GetBoneAxis_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetRefPosePosition ( int BoneIndex )
{
	static UFunction* pFnGetRefPosePosition = NULL;

	if ( ! pFnGetRefPosePosition )
		pFnGetRefPosePosition = (UFunction*) UObject::GObjObjects()->Data[ 9341 ];

	USkeletalMeshComponent_execGetRefPosePosition_Parms GetRefPosePosition_Parms;
	GetRefPosePosition_Parms.BoneIndex = BoneIndex;

	pFnGetRefPosePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRefPosePosition, &GetRefPosePosition_Parms, NULL );

	pFnGetRefPosePosition->FunctionFlags |= 0x400;

	return GetRefPosePosition_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FName                   ParentBoneName                 ( CPF_Parm )

bool USkeletalMeshComponent::BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName )
{
	static UFunction* pFnBoneIsChildOf = NULL;

	if ( ! pFnBoneIsChildOf )
		pFnBoneIsChildOf = (UFunction*) UObject::GObjObjects()->Data[ 9337 ];

	USkeletalMeshComponent_execBoneIsChildOf_Parms BoneIsChildOf_Parms;
	memcpy ( &BoneIsChildOf_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &BoneIsChildOf_Parms.ParentBoneName, &ParentBoneName, 0x8 );

	pFnBoneIsChildOf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBoneIsChildOf, &BoneIsChildOf_Parms, NULL );

	pFnBoneIsChildOf->FunctionFlags |= 0x400;

	return BoneIsChildOf_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneNames
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::GetBoneNames ( TArray< struct FName >* BoneNames )
{
	static UFunction* pFnGetBoneNames = NULL;

	if ( ! pFnGetBoneNames )
		pFnGetBoneNames = (UFunction*) UObject::GObjObjects()->Data[ 9334 ];

	USkeletalMeshComponent_execGetBoneNames_Parms GetBoneNames_Parms;

	pFnGetBoneNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneNames, &GetBoneNames_Parms, NULL );

	pFnGetBoneNames->FunctionFlags |= 0x400;

	if ( BoneNames )
		memcpy ( BoneNames, &GetBoneNames_Parms.BoneNames, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetParentBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

struct FName USkeletalMeshComponent::GetParentBone ( struct FName BoneName )
{
	static UFunction* pFnGetParentBone = NULL;

	if ( ! pFnGetParentBone )
		pFnGetParentBone = (UFunction*) UObject::GObjObjects()->Data[ 9331 ];

	USkeletalMeshComponent_execGetParentBone_Parms GetParentBone_Parms;
	memcpy ( &GetParentBone_Parms.BoneName, &BoneName, 0x8 );

	pFnGetParentBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParentBone, &GetParentBone_Parms, NULL );

	pFnGetParentBone->FunctionFlags |= 0x400;

	return GetParentBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bForRender                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWorldSpace                    ( CPF_OptionalParm | CPF_Parm )

struct FMatrix USkeletalMeshComponent::GetBoneMatrix ( int BoneIndex, unsigned long bForRender, unsigned long bWorldSpace )
{
	static UFunction* pFnGetBoneMatrix = NULL;

	if ( ! pFnGetBoneMatrix )
		pFnGetBoneMatrix = (UFunction*) UObject::GObjObjects()->Data[ 9326 ];

	USkeletalMeshComponent_execGetBoneMatrix_Parms GetBoneMatrix_Parms;
	GetBoneMatrix_Parms.BoneIndex = BoneIndex;
	GetBoneMatrix_Parms.bForRender = bForRender;
	GetBoneMatrix_Parms.bWorldSpace = bWorldSpace;

	pFnGetBoneMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneMatrix, &GetBoneMatrix_Parms, NULL );

	pFnGetBoneMatrix->FunctionFlags |= 0x400;

	return GetBoneMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FName USkeletalMeshComponent::GetBoneName ( int BoneIndex )
{
	static UFunction* pFnGetBoneName = NULL;

	if ( ! pFnGetBoneName )
		pFnGetBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9323 ];

	USkeletalMeshComponent_execGetBoneName_Parms GetBoneName_Parms;
	GetBoneName_Parms.BoneIndex = BoneIndex;

	pFnGetBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneName, &GetBoneName_Parms, NULL );

	pFnGetBoneName->FunctionFlags |= 0x400;

	return GetBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.MatchRefBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

int USkeletalMeshComponent::MatchRefBone ( struct FName BoneName )
{
	static UFunction* pFnMatchRefBone = NULL;

	if ( ! pFnMatchRefBone )
		pFnMatchRefBone = (UFunction*) UObject::GObjObjects()->Data[ 9320 ];

	USkeletalMeshComponent_execMatchRefBone_Parms MatchRefBone_Parms;
	memcpy ( &MatchRefBone_Parms.BoneName, &BoneName, 0x8 );

	pFnMatchRefBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchRefBone, &MatchRefBone_Parms, NULL );

	pFnMatchRefBone->FunctionFlags |= 0x400;

	return MatchRefBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DestroyProgressEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::DestroyProgressEffect ( )
{
	static UFunction* pFnDestroyProgressEffect = NULL;

	if ( ! pFnDestroyProgressEffect )
		pFnDestroyProgressEffect = (UFunction*) UObject::GObjObjects()->Data[ 9319 ];

	USkeletalMeshComponent_execDestroyProgressEffect_Parms DestroyProgressEffect_Parms;

	pFnDestroyProgressEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyProgressEffect, &DestroyProgressEffect_Parms, NULL );

	pFnDestroyProgressEffect->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.InitializeProgressEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           SkelMesh                       ( CPF_Parm )

void USkeletalMeshComponent::InitializeProgressEffect ( class USkeletalMesh* SkelMesh )
{
	static UFunction* pFnInitializeProgressEffect = NULL;

	if ( ! pFnInitializeProgressEffect )
		pFnInitializeProgressEffect = (UFunction*) UObject::GObjObjects()->Data[ 9317 ];

	USkeletalMeshComponent_execInitializeProgressEffect_Parms InitializeProgressEffect_Parms;
	InitializeProgressEffect_Parms.SkelMesh = SkelMesh;

	pFnInitializeProgressEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeProgressEffect, &InitializeProgressEffect_Parms, NULL );

	pFnInitializeProgressEffect->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateCustomSetNameIndexMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateCustomSetNameIndexMap ( )
{
	static UFunction* pFnUpdateCustomSetNameIndexMap = NULL;

	if ( ! pFnUpdateCustomSetNameIndexMap )
		pFnUpdateCustomSetNameIndexMap = (UFunction*) UObject::GObjObjects()->Data[ 9316 ];

	USkeletalMeshComponent_execUpdateCustomSetNameIndexMap_Parms UpdateCustomSetNameIndexMap_Parms;

	pFnUpdateCustomSetNameIndexMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCustomSetNameIndexMap, &UpdateCustomSetNameIndexMap_Parms, NULL );

	pFnUpdateCustomSetNameIndexMap->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetRefBoneLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FVector USkeletalMeshComponent::GetRefBoneLocation ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetRefBoneLocation = NULL;

	if ( ! pFnGetRefBoneLocation )
		pFnGetRefBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 9312 ];

	USkeletalMeshComponent_execGetRefBoneLocation_Parms GetRefBoneLocation_Parms;
	memcpy ( &GetRefBoneLocation_Parms.BoneName, &BoneName, 0x8 );
	GetRefBoneLocation_Parms.Space = Space;

	pFnGetRefBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRefBoneLocation, &GetRefBoneLocation_Parms, NULL );

	pFnGetRefBoneLocation->FunctionFlags |= 0x400;

	return GetRefBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneLocation ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneLocation = NULL;

	if ( ! pFnGetBoneLocation )
		pFnGetBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 9308 ];

	USkeletalMeshComponent_execGetBoneLocation_Parms GetBoneLocation_Parms;
	memcpy ( &GetBoneLocation_Parms.BoneName, &BoneName, 0x8 );
	GetBoneLocation_Parms.Space = Space;

	pFnGetBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneLocation, &GetBoneLocation_Parms, NULL );

	pFnGetBoneLocation->FunctionFlags |= 0x400;

	return GetBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FQuat USkeletalMeshComponent::GetBoneQuaternion ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneQuaternion = NULL;

	if ( ! pFnGetBoneQuaternion )
		pFnGetBoneQuaternion = (UFunction*) UObject::GObjObjects()->Data[ 9304 ];

	USkeletalMeshComponent_execGetBoneQuaternion_Parms GetBoneQuaternion_Parms;
	memcpy ( &GetBoneQuaternion_Parms.BoneName, &BoneName, 0x8 );
	GetBoneQuaternion_Parms.Space = Space;

	pFnGetBoneQuaternion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneQuaternion, &GetBoneQuaternion_Parms, NULL );

	pFnGetBoneQuaternion->FunctionFlags |= 0x400;

	return GetBoneQuaternion_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 9301 ];

	USkeletalMeshComponent_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* USkeletalMeshComponent::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 9298 ];

	USkeletalMeshComponent_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AllAnimNodes
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UAnimNode*               Node                           ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node )
{
	static UFunction* pFnAllAnimNodes = NULL;

	if ( ! pFnAllAnimNodes )
		pFnAllAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 9295 ];

	USkeletalMeshComponent_execAllAnimNodes_Parms AllAnimNodes_Parms;
	AllAnimNodes_Parms.BaseClass = BaseClass;

	pFnAllAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllAnimNodes, &AllAnimNodes_Parms, NULL );

	pFnAllAnimNodes->FunctionFlags |= 0x400;

	if ( Node )
		*Node = AllAnimNodes_Parms.Node;
};

// Function Engine.SkeletalMeshComponent.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* USkeletalMeshComponent::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 9292 ];

	USkeletalMeshComponent_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 9289 ];

	USkeletalMeshComponent_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimLength
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

float USkeletalMeshComponent::GetAnimLength ( struct FName AnimSeqName )
{
	static UFunction* pFnGetAnimLength = NULL;

	if ( ! pFnGetAnimLength )
		pFnGetAnimLength = (UFunction*) UObject::GObjObjects()->Data[ 9285 ];

	USkeletalMeshComponent_execGetAnimLength_Parms GetAnimLength_Parms;
	memcpy ( &GetAnimLength_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	this->ProcessEvent ( pFnGetAnimLength, &GetAnimLength_Parms, NULL );

	return GetAnimLength_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

float USkeletalMeshComponent::GetAnimRateByDuration ( struct FName AnimSeqName, float Duration )
{
	static UFunction* pFnGetAnimRateByDuration = NULL;

	if ( ! pFnGetAnimRateByDuration )
		pFnGetAnimRateByDuration = (UFunction*) UObject::GObjObjects()->Data[ 9280 ];

	USkeletalMeshComponent_execGetAnimRateByDuration_Parms GetAnimRateByDuration_Parms;
	memcpy ( &GetAnimRateByDuration_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	GetAnimRateByDuration_Parms.Duration = Duration;

	this->ProcessEvent ( pFnGetAnimRateByDuration, &GetAnimRateByDuration_Parms, NULL );

	return GetAnimRateByDuration_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::RestoreSavedAnimSets ( )
{
	static UFunction* pFnRestoreSavedAnimSets = NULL;

	if ( ! pFnRestoreSavedAnimSets )
		pFnRestoreSavedAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 9279 ];

	USkeletalMeshComponent_execRestoreSavedAnimSets_Parms RestoreSavedAnimSets_Parms;

	pFnRestoreSavedAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreSavedAnimSets, &RestoreSavedAnimSets_Parms, NULL );

	pFnRestoreSavedAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SaveAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::SaveAnimSets ( )
{
	static UFunction* pFnSaveAnimSets = NULL;

	if ( ! pFnSaveAnimSets )
		pFnSaveAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 9278 ];

	USkeletalMeshComponent_execSaveAnimSets_Parms SaveAnimSets_Parms;

	pFnSaveAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveAnimSets, &SaveAnimSets_Parms, NULL );

	pFnSaveAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindAnimSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimSequence*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence ( struct FName AnimSeqName )
{
	static UFunction* pFnFindAnimSequence = NULL;

	if ( ! pFnFindAnimSequence )
		pFnFindAnimSequence = (UFunction*) UObject::GObjObjects()->Data[ 9275 ];

	USkeletalMeshComponent_execFindAnimSequence_Parms FindAnimSequence_Parms;
	memcpy ( &FindAnimSequence_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	pFnFindAnimSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimSequence, &FindAnimSequence_Parms, NULL );

	pFnFindAnimSequence->FunctionFlags |= 0x400;

	return FindAnimSequence_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.WakeSoftBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::WakeSoftBody ( )
{
	static UFunction* pFnWakeSoftBody = NULL;

	if ( ! pFnWakeSoftBody )
		pFnWakeSoftBody = (UFunction*) UObject::GObjObjects()->Data[ 9274 ];

	USkeletalMeshComponent_execWakeSoftBody_Parms WakeSoftBody_Parms;

	pFnWakeSoftBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeSoftBody, &WakeSoftBody_Parms, NULL );

	pFnWakeSoftBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetSoftBodyFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetSoftBodyFrozen = NULL;

	if ( ! pFnSetSoftBodyFrozen )
		pFnSetSoftBodyFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9272 ];

	USkeletalMeshComponent_execSetSoftBodyFrozen_Parms SetSoftBodyFrozen_Parms;
	SetSoftBodyFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetSoftBodyFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoftBodyFrozen, &SetSoftBodyFrozen_Parms, NULL );

	pFnSetSoftBodyFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateSoftBodyParams ( )
{
	static UFunction* pFnUpdateSoftBodyParams = NULL;

	if ( ! pFnUpdateSoftBodyParams )
		pFnUpdateSoftBodyParams = (UFunction*) UObject::GObjObjects()->Data[ 9271 ];

	USkeletalMeshComponent_execUpdateSoftBodyParams_Parms UpdateSoftBodyParams_Parms;

	pFnUpdateSoftBodyParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSoftBodyParams, &UpdateSoftBodyParams_Parms, NULL );

	pFnUpdateSoftBodyParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothValidBoundsMin            ( CPF_Parm )
// struct FVector                 ClothValidBoundsMax            ( CPF_Parm )

void USkeletalMeshComponent::SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax )
{
	static UFunction* pFnSetClothValidBounds = NULL;

	if ( ! pFnSetClothValidBounds )
		pFnSetClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 9268 ];

	USkeletalMeshComponent_execSetClothValidBounds_Parms SetClothValidBounds_Parms;
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMin, &ClothValidBoundsMin, 0xC );
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMax, &ClothValidBoundsMax, 0xC );

	pFnSetClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothValidBounds, &SetClothValidBounds_Parms, NULL );

	pFnSetClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfEnableClothValidBounds       ( CPF_Parm )

void USkeletalMeshComponent::EnableClothValidBounds ( unsigned long IfEnableClothValidBounds )
{
	static UFunction* pFnEnableClothValidBounds = NULL;

	if ( ! pFnEnableClothValidBounds )
		pFnEnableClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 9266 ];

	USkeletalMeshComponent_execEnableClothValidBounds_Parms EnableClothValidBounds_Parms;
	EnableClothValidBounds_Parms.IfEnableClothValidBounds = IfEnableClothValidBounds;

	pFnEnableClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableClothValidBounds, &EnableClothValidBounds_Parms, NULL );

	pFnEnableClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  AttatchTwoWay                  ( CPF_Parm )
// unsigned long                  AttachTearable                 ( CPF_Parm )

void USkeletalMeshComponent::AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable )
{
	static UFunction* pFnAttachClothToCollidingShapes = NULL;

	if ( ! pFnAttachClothToCollidingShapes )
		pFnAttachClothToCollidingShapes = (UFunction*) UObject::GObjObjects()->Data[ 9263 ];

	USkeletalMeshComponent_execAttachClothToCollidingShapes_Parms AttachClothToCollidingShapes_Parms;
	AttachClothToCollidingShapes_Parms.AttatchTwoWay = AttatchTwoWay;
	AttachClothToCollidingShapes_Parms.AttachTearable = AttachTearable;

	pFnAttachClothToCollidingShapes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachClothToCollidingShapes, &AttachClothToCollidingShapes_Parms, NULL );

	pFnAttachClothToCollidingShapes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 VelocityOffSet                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothVelocity ( struct FVector VelocityOffSet )
{
	static UFunction* pFnSetClothVelocity = NULL;

	if ( ! pFnSetClothVelocity )
		pFnSetClothVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9261 ];

	USkeletalMeshComponent_execSetClothVelocity_Parms SetClothVelocity_Parms;
	memcpy ( &SetClothVelocity_Parms.VelocityOffSet, &VelocityOffSet, 0xC );

	pFnSetClothVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothVelocity, &SetClothVelocity_Parms, NULL );

	pFnSetClothVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPosition
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothOffSet                    ( CPF_Parm )

void USkeletalMeshComponent::SetClothPosition ( struct FVector ClothOffSet )
{
	static UFunction* pFnSetClothPosition = NULL;

	if ( ! pFnSetClothPosition )
		pFnSetClothPosition = (UFunction*) UObject::GObjObjects()->Data[ 9259 ];

	USkeletalMeshComponent_execSetClothPosition_Parms SetClothPosition_Parms;
	memcpy ( &SetClothPosition_Parms.ClothOffSet, &ClothOffSet, 0xC );

	pFnSetClothPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPosition, &SetClothPosition_Parms, NULL );

	pFnSetClothPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleep
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfClothSleep                   ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleep ( unsigned long IfClothSleep )
{
	static UFunction* pFnSetClothSleep = NULL;

	if ( ! pFnSetClothSleep )
		pFnSetClothSleep = (UFunction*) UObject::GObjObjects()->Data[ 9257 ];

	USkeletalMeshComponent_execSetClothSleep_Parms SetClothSleep_Parms;
	SetClothSleep_Parms.IfClothSleep = IfClothSleep;

	pFnSetClothSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleep, &SetClothSleep_Parms, NULL );

	pFnSetClothSleep->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothThickness                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothThickness ( float ClothThickness )
{
	static UFunction* pFnSetClothThickness = NULL;

	if ( ! pFnSetClothThickness )
		pFnSetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 9255 ];

	USkeletalMeshComponent_execSetClothThickness_Parms SetClothThickness_Parms;
	SetClothThickness_Parms.ClothThickness = ClothThickness;

	pFnSetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothThickness, &SetClothThickness_Parms, NULL );

	pFnSetClothThickness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothTearFactor                ( CPF_Parm )

void USkeletalMeshComponent::SetClothTearFactor ( float ClothTearFactor )
{
	static UFunction* pFnSetClothTearFactor = NULL;

	if ( ! pFnSetClothTearFactor )
		pFnSetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9253 ];

	USkeletalMeshComponent_execSetClothTearFactor_Parms SetClothTearFactor_Parms;
	SetClothTearFactor_Parms.ClothTearFactor = ClothTearFactor;

	pFnSetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothTearFactor, &SetClothTearFactor_Parms, NULL );

	pFnSetClothTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothStretchingStiffness       ( CPF_Parm )

void USkeletalMeshComponent::SetClothStretchingStiffness ( float ClothStretchingStiffness )
{
	static UFunction* pFnSetClothStretchingStiffness = NULL;

	if ( ! pFnSetClothStretchingStiffness )
		pFnSetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9251 ];

	USkeletalMeshComponent_execSetClothStretchingStiffness_Parms SetClothStretchingStiffness_Parms;
	SetClothStretchingStiffness_Parms.ClothStretchingStiffness = ClothStretchingStiffness;

	pFnSetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothStretchingStiffness, &SetClothStretchingStiffness_Parms, NULL );

	pFnSetClothStretchingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothSolverIterations          ( CPF_Parm )

void USkeletalMeshComponent::SetClothSolverIterations ( int ClothSolverIterations )
{
	static UFunction* pFnSetClothSolverIterations = NULL;

	if ( ! pFnSetClothSolverIterations )
		pFnSetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 9249 ];

	USkeletalMeshComponent_execSetClothSolverIterations_Parms SetClothSolverIterations_Parms;
	SetClothSolverIterations_Parms.ClothSolverIterations = ClothSolverIterations;

	pFnSetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSolverIterations, &SetClothSolverIterations_Parms, NULL );

	pFnSetClothSolverIterations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothSleepLinearVelocity       ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity )
{
	static UFunction* pFnSetClothSleepLinearVelocity = NULL;

	if ( ! pFnSetClothSleepLinearVelocity )
		pFnSetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9247 ];

	USkeletalMeshComponent_execSetClothSleepLinearVelocity_Parms SetClothSleepLinearVelocity_Parms;
	SetClothSleepLinearVelocity_Parms.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	pFnSetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleepLinearVelocity, &SetClothSleepLinearVelocity_Parms, NULL );

	pFnSetClothSleepLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothPressure                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothPressure ( float ClothPressure )
{
	static UFunction* pFnSetClothPressure = NULL;

	if ( ! pFnSetClothPressure )
		pFnSetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 9245 ];

	USkeletalMeshComponent_execSetClothPressure_Parms SetClothPressure_Parms;
	SetClothPressure_Parms.ClothPressure = ClothPressure;

	pFnSetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPressure, &SetClothPressure_Parms, NULL );

	pFnSetClothPressure->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothFriction                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothFriction ( float ClothFriction )
{
	static UFunction* pFnSetClothFriction = NULL;

	if ( ! pFnSetClothFriction )
		pFnSetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 9243 ];

	USkeletalMeshComponent_execSetClothFriction_Parms SetClothFriction_Parms;
	SetClothFriction_Parms.ClothFriction = ClothFriction;

	pFnSetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFriction, &SetClothFriction_Parms, NULL );

	pFnSetClothFriction->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothFlags                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFlags ( int ClothFlags )
{
	static UFunction* pFnSetClothFlags = NULL;

	if ( ! pFnSetClothFlags )
		pFnSetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 9241 ];

	USkeletalMeshComponent_execSetClothFlags_Parms SetClothFlags_Parms;
	SetClothFlags_Parms.ClothFlags = ClothFlags;

	pFnSetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFlags, &SetClothFlags_Parms, NULL );

	pFnSetClothFlags->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothDampingCoefficient        ( CPF_Parm )

void USkeletalMeshComponent::SetClothDampingCoefficient ( float ClothDampingCoefficient )
{
	static UFunction* pFnSetClothDampingCoefficient = NULL;

	if ( ! pFnSetClothDampingCoefficient )
		pFnSetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9239 ];

	USkeletalMeshComponent_execSetClothDampingCoefficient_Parms SetClothDampingCoefficient_Parms;
	SetClothDampingCoefficient_Parms.ClothDampingCoefficient = ClothDampingCoefficient;

	pFnSetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothDampingCoefficient, &SetClothDampingCoefficient_Parms, NULL );

	pFnSetClothDampingCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothCollisionResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient )
{
	static UFunction* pFnSetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnSetClothCollisionResponseCoefficient )
		pFnSetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9237 ];

	USkeletalMeshComponent_execSetClothCollisionResponseCoefficient_Parms SetClothCollisionResponseCoefficient_Parms;
	SetClothCollisionResponseCoefficient_Parms.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothCollisionResponseCoefficient, &SetClothCollisionResponseCoefficient_Parms, NULL );

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothBendingStiffness          ( CPF_Parm )

void USkeletalMeshComponent::SetClothBendingStiffness ( float ClothBendingStiffness )
{
	static UFunction* pFnSetClothBendingStiffness = NULL;

	if ( ! pFnSetClothBendingStiffness )
		pFnSetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9235 ];

	USkeletalMeshComponent_execSetClothBendingStiffness_Parms SetClothBendingStiffness_Parms;
	SetClothBendingStiffness_Parms.ClothBendingStiffness = ClothBendingStiffness;

	pFnSetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothBendingStiffness, &SetClothBendingStiffness_Parms, NULL );

	pFnSetClothBendingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachTearFactor          ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentTearFactor ( float ClothAttachTearFactor )
{
	static UFunction* pFnSetClothAttachmentTearFactor = NULL;

	if ( ! pFnSetClothAttachmentTearFactor )
		pFnSetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9233 ];

	USkeletalMeshComponent_execSetClothAttachmentTearFactor_Parms SetClothAttachmentTearFactor_Parms;
	SetClothAttachmentTearFactor_Parms.ClothAttachTearFactor = ClothAttachTearFactor;

	pFnSetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentTearFactor, &SetClothAttachmentTearFactor_Parms, NULL );

	pFnSetClothAttachmentTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachmentResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient )
{
	static UFunction* pFnSetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnSetClothAttachmentResponseCoefficient )
		pFnSetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9231 ];

	USkeletalMeshComponent_execSetClothAttachmentResponseCoefficient_Parms SetClothAttachmentResponseCoefficient_Parms;
	SetClothAttachmentResponseCoefficient_Parms.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentResponseCoefficient, &SetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothThickness ( )
{
	static UFunction* pFnGetClothThickness = NULL;

	if ( ! pFnGetClothThickness )
		pFnGetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 9229 ];

	USkeletalMeshComponent_execGetClothThickness_Parms GetClothThickness_Parms;

	pFnGetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothThickness, &GetClothThickness_Parms, NULL );

	pFnGetClothThickness->FunctionFlags |= 0x400;

	return GetClothThickness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothTearFactor ( )
{
	static UFunction* pFnGetClothTearFactor = NULL;

	if ( ! pFnGetClothTearFactor )
		pFnGetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9227 ];

	USkeletalMeshComponent_execGetClothTearFactor_Parms GetClothTearFactor_Parms;

	pFnGetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothTearFactor, &GetClothTearFactor_Parms, NULL );

	pFnGetClothTearFactor->FunctionFlags |= 0x400;

	return GetClothTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothStretchingStiffness ( )
{
	static UFunction* pFnGetClothStretchingStiffness = NULL;

	if ( ! pFnGetClothStretchingStiffness )
		pFnGetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9225 ];

	USkeletalMeshComponent_execGetClothStretchingStiffness_Parms GetClothStretchingStiffness_Parms;

	pFnGetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothStretchingStiffness, &GetClothStretchingStiffness_Parms, NULL );

	pFnGetClothStretchingStiffness->FunctionFlags |= 0x400;

	return GetClothStretchingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothSolverIterations ( )
{
	static UFunction* pFnGetClothSolverIterations = NULL;

	if ( ! pFnGetClothSolverIterations )
		pFnGetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 9223 ];

	USkeletalMeshComponent_execGetClothSolverIterations_Parms GetClothSolverIterations_Parms;

	pFnGetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSolverIterations, &GetClothSolverIterations_Parms, NULL );

	pFnGetClothSolverIterations->FunctionFlags |= 0x400;

	return GetClothSolverIterations_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothSleepLinearVelocity ( )
{
	static UFunction* pFnGetClothSleepLinearVelocity = NULL;

	if ( ! pFnGetClothSleepLinearVelocity )
		pFnGetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9221 ];

	USkeletalMeshComponent_execGetClothSleepLinearVelocity_Parms GetClothSleepLinearVelocity_Parms;

	pFnGetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSleepLinearVelocity, &GetClothSleepLinearVelocity_Parms, NULL );

	pFnGetClothSleepLinearVelocity->FunctionFlags |= 0x400;

	return GetClothSleepLinearVelocity_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothPressure ( )
{
	static UFunction* pFnGetClothPressure = NULL;

	if ( ! pFnGetClothPressure )
		pFnGetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 9219 ];

	USkeletalMeshComponent_execGetClothPressure_Parms GetClothPressure_Parms;

	pFnGetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothPressure, &GetClothPressure_Parms, NULL );

	pFnGetClothPressure->FunctionFlags |= 0x400;

	return GetClothPressure_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothFriction ( )
{
	static UFunction* pFnGetClothFriction = NULL;

	if ( ! pFnGetClothFriction )
		pFnGetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 9217 ];

	USkeletalMeshComponent_execGetClothFriction_Parms GetClothFriction_Parms;

	pFnGetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFriction, &GetClothFriction_Parms, NULL );

	pFnGetClothFriction->FunctionFlags |= 0x400;

	return GetClothFriction_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothFlags ( )
{
	static UFunction* pFnGetClothFlags = NULL;

	if ( ! pFnGetClothFlags )
		pFnGetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 9215 ];

	USkeletalMeshComponent_execGetClothFlags_Parms GetClothFlags_Parms;

	pFnGetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFlags, &GetClothFlags_Parms, NULL );

	pFnGetClothFlags->FunctionFlags |= 0x400;

	return GetClothFlags_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothDampingCoefficient ( )
{
	static UFunction* pFnGetClothDampingCoefficient = NULL;

	if ( ! pFnGetClothDampingCoefficient )
		pFnGetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9213 ];

	USkeletalMeshComponent_execGetClothDampingCoefficient_Parms GetClothDampingCoefficient_Parms;

	pFnGetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothDampingCoefficient, &GetClothDampingCoefficient_Parms, NULL );

	pFnGetClothDampingCoefficient->FunctionFlags |= 0x400;

	return GetClothDampingCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient ( )
{
	static UFunction* pFnGetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnGetClothCollisionResponseCoefficient )
		pFnGetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9211 ];

	USkeletalMeshComponent_execGetClothCollisionResponseCoefficient_Parms GetClothCollisionResponseCoefficient_Parms;

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothCollisionResponseCoefficient, &GetClothCollisionResponseCoefficient_Parms, NULL );

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothCollisionResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothBendingStiffness ( )
{
	static UFunction* pFnGetClothBendingStiffness = NULL;

	if ( ! pFnGetClothBendingStiffness )
		pFnGetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9209 ];

	USkeletalMeshComponent_execGetClothBendingStiffness_Parms GetClothBendingStiffness_Parms;

	pFnGetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothBendingStiffness, &GetClothBendingStiffness_Parms, NULL );

	pFnGetClothBendingStiffness->FunctionFlags |= 0x400;

	return GetClothBendingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentTearFactor ( )
{
	static UFunction* pFnGetClothAttachmentTearFactor = NULL;

	if ( ! pFnGetClothAttachmentTearFactor )
		pFnGetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9207 ];

	USkeletalMeshComponent_execGetClothAttachmentTearFactor_Parms GetClothAttachmentTearFactor_Parms;

	pFnGetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentTearFactor, &GetClothAttachmentTearFactor_Parms, NULL );

	pFnGetClothAttachmentTearFactor->FunctionFlags |= 0x400;

	return GetClothAttachmentTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient ( )
{
	static UFunction* pFnGetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnGetClothAttachmentResponseCoefficient )
		pFnGetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9205 ];

	USkeletalMeshComponent_execGetClothAttachmentResponseCoefficient_Parms GetClothAttachmentResponseCoefficient_Parms;

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentResponseCoefficient, &GetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothAttachmentResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ResetClothVertsToRefPose ( )
{
	static UFunction* pFnResetClothVertsToRefPose = NULL;

	if ( ! pFnResetClothVertsToRefPose )
		pFnResetClothVertsToRefPose = (UFunction*) UObject::GObjObjects()->Data[ 9204 ];

	USkeletalMeshComponent_execResetClothVertsToRefPose_Parms ResetClothVertsToRefPose_Parms;

	pFnResetClothVertsToRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetClothVertsToRefPose, &ResetClothVertsToRefPose_Parms, NULL );

	pFnResetClothVertsToRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAttachVerts                   ( CPF_Parm )

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts )
{
	static UFunction* pFnSetAttachClothVertsToBaseBody = NULL;

	if ( ! pFnSetAttachClothVertsToBaseBody )
		pFnSetAttachClothVertsToBaseBody = (UFunction*) UObject::GObjObjects()->Data[ 9202 ];

	USkeletalMeshComponent_execSetAttachClothVertsToBaseBody_Parms SetAttachClothVertsToBaseBody_Parms;
	SetAttachClothVertsToBaseBody_Parms.bAttachVerts = bAttachVerts;

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttachClothVertsToBaseBody, &SetAttachClothVertsToBaseBody_Parms, NULL );

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InForce                        ( CPF_Parm )

void USkeletalMeshComponent::SetClothExternalForce ( struct FVector InForce )
{
	static UFunction* pFnSetClothExternalForce = NULL;

	if ( ! pFnSetClothExternalForce )
		pFnSetClothExternalForce = (UFunction*) UObject::GObjObjects()->Data[ 9200 ];

	USkeletalMeshComponent_execSetClothExternalForce_Parms SetClothExternalForce_Parms;
	memcpy ( &SetClothExternalForce_Parms.InForce, &InForce, 0xC );

	pFnSetClothExternalForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothExternalForce, &SetClothExternalForce_Parms, NULL );

	pFnSetClothExternalForce->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateClothParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateClothParams ( )
{
	static UFunction* pFnUpdateClothParams = NULL;

	if ( ! pFnUpdateClothParams )
		pFnUpdateClothParams = (UFunction*) UObject::GObjObjects()->Data[ 9199 ];

	USkeletalMeshComponent_execUpdateClothParams_Parms UpdateClothParams_Parms;

	pFnUpdateClothParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClothParams, &UpdateClothParams_Parms, NULL );

	pFnUpdateClothParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetClothFrozen = NULL;

	if ( ! pFnSetClothFrozen )
		pFnSetClothFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9197 ];

	USkeletalMeshComponent_execSetClothFrozen_Parms SetClothFrozen_Parms;
	SetClothFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetClothFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFrozen, &SetClothFrozen_Parms, NULL );

	pFnSetClothFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnable                      ( CPF_Parm )

void USkeletalMeshComponent::SetEnableClothSimulation ( unsigned long bInEnable )
{
	static UFunction* pFnSetEnableClothSimulation = NULL;

	if ( ! pFnSetEnableClothSimulation )
		pFnSetEnableClothSimulation = (UFunction*) UObject::GObjObjects()->Data[ 9195 ];

	USkeletalMeshComponent_execSetEnableClothSimulation_Parms SetEnableClothSimulation_Parms;
	SetEnableClothSimulation_Parms.bInEnable = bInEnable;

	pFnSetEnableClothSimulation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnableClothSimulation, &SetEnableClothSimulation_Parms, NULL );

	pFnSetEnableClothSimulation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetForceRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewForceRefPose               ( CPF_Parm )

void USkeletalMeshComponent::SetForceRefPose ( unsigned long bNewForceRefPose )
{
	static UFunction* pFnSetForceRefPose = NULL;

	if ( ! pFnSetForceRefPose )
		pFnSetForceRefPose = (UFunction*) UObject::GObjObjects()->Data[ 9193 ];

	USkeletalMeshComponent_execSetForceRefPose_Parms SetForceRefPose_Parms;
	SetForceRefPose_Parms.bNewForceRefPose = bNewForceRefPose;

	pFnSetForceRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceRefPose, &SetForceRefPose_Parms, NULL );

	pFnSetForceRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           NewPhysicsAsset                ( CPF_Parm )
// unsigned long                  bForceReInit                   ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit )
{
	static UFunction* pFnSetPhysicsAsset = NULL;

	if ( ! pFnSetPhysicsAsset )
		pFnSetPhysicsAsset = (UFunction*) UObject::GObjObjects()->Data[ 9190 ];

	USkeletalMeshComponent_execSetPhysicsAsset_Parms SetPhysicsAsset_Parms;
	SetPhysicsAsset_Parms.NewPhysicsAsset = NewPhysicsAsset;
	SetPhysicsAsset_Parms.bForceReInit = bForceReInit;

	pFnSetPhysicsAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysicsAsset, &SetPhysicsAsset_Parms, NULL );

	pFnSetPhysicsAsset->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// unsigned long                  bKeepSpaceBases                ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases )
{
	static UFunction* pFnSetSkeletalMesh = NULL;

	if ( ! pFnSetSkeletalMesh )
		pFnSetSkeletalMesh = (UFunction*) UObject::GObjObjects()->Data[ 9187 ];

	USkeletalMeshComponent_execSetSkeletalMesh_Parms SetSkeletalMesh_Parms;
	SetSkeletalMesh_Parms.NewMesh = NewMesh;
	SetSkeletalMesh_Parms.bKeepSpaceBases = bKeepSpaceBases;

	pFnSetSkeletalMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMesh, &SetSkeletalMesh_Parms, NULL );

	pFnSetSkeletalMesh->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAttachedComponents = NULL;

	if ( ! pFnAttachedComponents )
		pFnAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 9184 ];

	USkeletalMeshComponent_execAttachedComponents_Parms AttachedComponents_Parms;
	AttachedComponents_Parms.BaseClass = BaseClass;

	pFnAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachedComponents, &AttachedComponents_Parms, NULL );

	pFnAttachedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AttachedComponents_Parms.OutComponent;
};

// Function Engine.SkeletalMeshComponent.IsComponentAttached
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::IsComponentAttached ( class UActorComponent* Component, struct FName BoneName )
{
	static UFunction* pFnIsComponentAttached = NULL;

	if ( ! pFnIsComponentAttached )
		pFnIsComponentAttached = (UFunction*) UObject::GObjObjects()->Data[ 9180 ];

	USkeletalMeshComponent_execIsComponentAttached_Parms IsComponentAttached_Parms;
	IsComponentAttached_Parms.Component = Component;
	memcpy ( &IsComponentAttached_Parms.BoneName, &BoneName, 0x8 );

	pFnIsComponentAttached->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsComponentAttached, &IsComponentAttached_Parms, NULL );

	pFnIsComponentAttached->FunctionFlags |= 0x400;

	return IsComponentAttached_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InBoneName                     ( CPF_Parm )

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone ( struct FName InBoneName )
{
	static UFunction* pFnFindComponentAttachedToBone = NULL;

	if ( ! pFnFindComponentAttachedToBone )
		pFnFindComponentAttachedToBone = (UFunction*) UObject::GObjObjects()->Data[ 9177 ];

	USkeletalMeshComponent_execFindComponentAttachedToBone_Parms FindComponentAttachedToBone_Parms;
	memcpy ( &FindComponentAttachedToBone_Parms.InBoneName, &InBoneName, 0x8 );

	pFnFindComponentAttachedToBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentAttachedToBone, &FindComponentAttachedToBone_Parms, NULL );

	pFnFindComponentAttachedToBone->FunctionFlags |= 0x400;

	return FindComponentAttachedToBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

struct FName USkeletalMeshComponent::GetSocketBoneName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketBoneName = NULL;

	if ( ! pFnGetSocketBoneName )
		pFnGetSocketBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9174 ];

	USkeletalMeshComponent_execGetSocketBoneName_Parms GetSocketBoneName_Parms;
	memcpy ( &GetSocketBoneName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketBoneName, &GetSocketBoneName_Parms, NULL );

	pFnGetSocketBoneName->FunctionFlags |= 0x400;

	return GetSocketBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshSocket*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketByName = NULL;

	if ( ! pFnGetSocketByName )
		pFnGetSocketByName = (UFunction*) UObject::GObjObjects()->Data[ 9171 ];

	USkeletalMeshComponent_execGetSocketByName_Parms GetSocketByName_Parms;
	memcpy ( &GetSocketByName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketByName, &GetSocketByName_Parms, NULL );

	pFnGetSocketByName->FunctionFlags |= 0x400;

	return GetSocketByName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

struct FMatrix USkeletalMeshComponent::GetSocketWorldMatrix ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketWorldMatrix = NULL;

	if ( ! pFnGetSocketWorldMatrix )
		pFnGetSocketWorldMatrix = (UFunction*) UObject::GObjObjects()->Data[ 9168 ];

	USkeletalMeshComponent_execGetSocketWorldMatrix_Parms GetSocketWorldMatrix_Parms;
	memcpy ( &GetSocketWorldMatrix_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketWorldMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketWorldMatrix, &GetSocketWorldMatrix_Parms, NULL );

	pFnGetSocketWorldMatrix->FunctionFlags |= 0x400;

	return GetSocketWorldMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketLocalLocationAndRotation
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketLocalLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetSocketLocalLocationAndRotation = NULL;

	if ( ! pFnGetSocketLocalLocationAndRotation )
		pFnGetSocketLocalLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 9163 ];

	USkeletalMeshComponent_execGetSocketLocalLocationAndRotation_Parms GetSocketLocalLocationAndRotation_Parms;
	memcpy ( &GetSocketLocalLocationAndRotation_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketLocalLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketLocalLocationAndRotation, &GetSocketLocalLocationAndRotation_Parms, NULL );

	pFnGetSocketLocalLocationAndRotation->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetSocketLocalLocationAndRotation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetSocketLocalLocationAndRotation_Parms.OutRotation, 0xC );

	return GetSocketLocalLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetSocketWorldLocationAndRotation = NULL;

	if ( ! pFnGetSocketWorldLocationAndRotation )
		pFnGetSocketWorldLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 9158 ];

	USkeletalMeshComponent_execGetSocketWorldLocationAndRotation_Parms GetSocketWorldLocationAndRotation_Parms;
	memcpy ( &GetSocketWorldLocationAndRotation_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketWorldLocationAndRotation, &GetSocketWorldLocationAndRotation_Parms, NULL );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetSocketWorldLocationAndRotation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetSocketWorldLocationAndRotation_Parms.OutRotation, 0xC );

	return GetSocketWorldLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.IsExistAttachMents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm )

bool USkeletalMeshComponent::IsExistAttachMents ( class UActorComponent* Component )
{
	static UFunction* pFnIsExistAttachMents = NULL;

	if ( ! pFnIsExistAttachMents )
		pFnIsExistAttachMents = (UFunction*) UObject::GObjObjects()->Data[ 9155 ];

	USkeletalMeshComponent_execIsExistAttachMents_Parms IsExistAttachMents_Parms;
	IsExistAttachMents_Parms.Component = Component;

	pFnIsExistAttachMents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExistAttachMents, &IsExistAttachMents_Parms, NULL );

	pFnIsExistAttachMents->FunctionFlags |= 0x400;

	return IsExistAttachMents_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm )

bool USkeletalMeshComponent::DetachComponent ( class UActorComponent* Component )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 9152 ];

	USkeletalMeshComponent_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.Component = Component;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;

	return DetachComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 RelativeLocation               ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRotation               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeScale                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseSocketRelativeValue        ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale, unsigned long bUseSocketRelativeValue )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 9144 ];

	USkeletalMeshComponent_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.Component = Component;
	memcpy ( &AttachComponent_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &AttachComponent_Parms.RelativeLocation, &RelativeLocation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeRotation, &RelativeRotation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeScale, &RelativeScale, 0xC );
	AttachComponent_Parms.bUseSocketRelativeValue = bUseSocketRelativeValue;

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;

	return AttachComponent_Parms.ReturnValue;
};

// Function Engine.SoundCue.GetCueDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USoundCue::GetCueDuration ( )
{
	static UFunction* pFnGetCueDuration = NULL;

	if ( ! pFnGetCueDuration )
		pFnGetCueDuration = (UFunction*) UObject::GObjObjects()->Data[ 9887 ];

	USoundCue_execGetCueDuration_Parms GetCueDuration_Parms;

	pFnGetCueDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCueDuration, &GetCueDuration_Parms, NULL );

	pFnGetCueDuration->FunctionFlags |= 0x400;

	return GetCueDuration_Parms.ReturnValue;
};

// Function Engine.StaticMeshActor.PreBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30460 ];

	AStaticMeshActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.StaticMeshActor.GetComponentsBoundingBox
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBox                    ActorBox                       ( CPF_Parm | CPF_OutParm )

void AStaticMeshActor::GetComponentsBoundingBox ( struct FBox* ActorBox )
{
	static UFunction* pFnGetComponentsBoundingBox = NULL;

	if ( ! pFnGetComponentsBoundingBox )
		pFnGetComponentsBoundingBox = (UFunction*) UObject::GObjObjects()->Data[ 30458 ];

	AStaticMeshActor_execGetComponentsBoundingBox_Parms GetComponentsBoundingBox_Parms;

	pFnGetComponentsBoundingBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Parms, NULL );

	pFnGetComponentsBoundingBox->FunctionFlags |= 0x400;

	if ( ActorBox )
		memcpy ( ActorBox, &GetComponentsBoundingBox_Parms.ActorBox, 0x1C );
};

// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    OtherSMC                       ( CPF_Parm )
// unsigned long                  bDisabled                      ( CPF_Parm )

void UStaticMeshComponent::DisableRBCollisionWithSMC ( class UStaticMeshComponent* OtherSMC, unsigned long bDisabled )
{
	static UFunction* pFnDisableRBCollisionWithSMC = NULL;

	if ( ! pFnDisableRBCollisionWithSMC )
		pFnDisableRBCollisionWithSMC = (UFunction*) UObject::GObjObjects()->Data[ 10141 ];

	UStaticMeshComponent_execDisableRBCollisionWithSMC_Parms DisableRBCollisionWithSMC_Parms;
	DisableRBCollisionWithSMC_Parms.OtherSMC = OtherSMC;
	DisableRBCollisionWithSMC_Parms.bDisabled = bDisabled;

	pFnDisableRBCollisionWithSMC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableRBCollisionWithSMC, &DisableRBCollisionWithSMC_Parms, NULL );

	pFnDisableRBCollisionWithSMC->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.SetStaticMesh
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )

bool UStaticMeshComponent::SetStaticMesh ( class UStaticMesh* NewMesh )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 10138 ];

	UStaticMeshComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATeamInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 30961 ];

	ATeamInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetTextColor
// [0x00020002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetTextColor ( )
{
	static UFunction* pFnGetTextColor = NULL;

	if ( ! pFnGetTextColor )
		pFnGetTextColor = (UFunction*) UObject::GObjObjects()->Data[ 30959 ];

	ATeamInfo_execGetTextColor_Parms GetTextColor_Parms;

	this->ProcessEvent ( pFnGetTextColor, &GetTextColor_Parms, NULL );

	return GetTextColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHUDColor
// [0x00020102] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetHUDColor ( )
{
	static UFunction* pFnGetHUDColor = NULL;

	if ( ! pFnGetHUDColor )
		pFnGetHUDColor = (UFunction*) UObject::GObjObjects()->Data[ 30957 ];

	ATeamInfo_execGetHUDColor_Parms GetHUDColor_Parms;

	this->ProcessEvent ( pFnGetHUDColor, &GetHUDColor_Parms, NULL );

	return GetHUDColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString ATeamInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 30955 ];

	ATeamInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.TeamInfo.RemoveFromTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATeamInfo::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = (UFunction*) UObject::GObjObjects()->Data[ 30953 ];

	ATeamInfo_execRemoveFromTeam_Parms RemoveFromTeam_Parms;
	RemoveFromTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function Engine.TeamInfo.AddToTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ATeamInfo::AddToTeam ( class AController* Other )
{
	static UFunction* pFnAddToTeam = NULL;

	if ( ! pFnAddToTeam )
		pFnAddToTeam = (UFunction*) UObject::GObjObjects()->Data[ 30948 ];

	ATeamInfo_execAddToTeam_Parms AddToTeam_Parms;
	AddToTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnAddToTeam, &AddToTeam_Parms, NULL );

	return AddToTeam_Parms.ReturnValue;
};

// Function Engine.TeamInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATeamInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 30946 ];

	ATeamInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.TeamInfo.UnbindTeamDataProvider
// [0x00020100] 
// Parameters infos:

void ATeamInfo::UnbindTeamDataProvider ( )
{
	static UFunction* pFnUnbindTeamDataProvider = NULL;

	if ( ! pFnUnbindTeamDataProvider )
		pFnUnbindTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 30945 ];

	ATeamInfo_execUnbindTeamDataProvider_Parms UnbindTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUnbindTeamDataProvider, &UnbindTeamDataProvider_Parms, NULL );
};

// Function Engine.TeamInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATeamInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 30943 ];

	ATeamInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Teleporter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATeleporter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 30997 ];

	ATeleporter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATeleporter::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 30992 ];

	ATeleporter_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Teleporter.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATeleporter::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 30987 ];

	ATeleporter_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Teleporter.Accept
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ATeleporter::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 30978 ];

	ATeleporter_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30977 ];

	ATeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ATeleporter::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 30974 ];

	ATeleporter_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Texture2DComposite.ResetSourceRegions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTexture2DComposite::ResetSourceRegions ( )
{
	static UFunction* pFnResetSourceRegions = NULL;

	if ( ! pFnResetSourceRegions )
		pFnResetSourceRegions = (UFunction*) UObject::GObjObjects()->Data[ 31300 ];

	UTexture2DComposite_execResetSourceRegions_Parms ResetSourceRegions_Parms;

	pFnResetSourceRegions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSourceRegions, &ResetSourceRegions_Parms, NULL );

	pFnResetSourceRegions->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.UpdateCompositeTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NumMipsToGenerate              ( CPF_Parm )

void UTexture2DComposite::UpdateCompositeTexture ( int NumMipsToGenerate )
{
	static UFunction* pFnUpdateCompositeTexture = NULL;

	if ( ! pFnUpdateCompositeTexture )
		pFnUpdateCompositeTexture = (UFunction*) UObject::GObjObjects()->Data[ 31298 ];

	UTexture2DComposite_execUpdateCompositeTexture_Parms UpdateCompositeTexture_Parms;
	UpdateCompositeTexture_Parms.NumMipsToGenerate = NumMipsToGenerate;

	pFnUpdateCompositeTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompositeTexture, &UpdateCompositeTexture_Parms, NULL );

	pFnUpdateCompositeTexture->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTexture2DComposite::SourceTexturesFullyStreamedIn ( )
{
	static UFunction* pFnSourceTexturesFullyStreamedIn = NULL;

	if ( ! pFnSourceTexturesFullyStreamedIn )
		pFnSourceTexturesFullyStreamedIn = (UFunction*) UObject::GObjObjects()->Data[ 31296 ];

	UTexture2DComposite_execSourceTexturesFullyStreamedIn_Parms SourceTexturesFullyStreamedIn_Parms;

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSourceTexturesFullyStreamedIn, &SourceTexturesFullyStreamedIn_Parms, NULL );

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= 0x400;

	return SourceTexturesFullyStreamedIn_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2DDynamic*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

class UTexture2DDynamic* UTexture2DDynamic::Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 31311 ];

	UTexture2DDynamic_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	Create_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.Init
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

void UTexture2DDynamic::Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 31306 ];

	UTexture2DDynamic_execInit_Parms Init_Parms;
	Init_Parms.InSizeX = InSizeX;
	Init_Parms.InSizeY = InSizeY;
	Init_Parms.InFormat = InFormat;
	Init_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.SetCurrentFrame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Row                            ( CPF_Parm )
// int                            Col                            ( CPF_Parm )

void UTextureFlipBook::SetCurrentFrame ( int Row, int Col )
{
	static UFunction* pFnSetCurrentFrame = NULL;

	if ( ! pFnSetCurrentFrame )
		pFnSetCurrentFrame = (UFunction*) UObject::GObjObjects()->Data[ 31347 ];

	UTextureFlipBook_execSetCurrentFrame_Parms SetCurrentFrame_Parms;
	SetCurrentFrame_Parms.Row = Row;
	SetCurrentFrame_Parms.Col = Col;

	pFnSetCurrentFrame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentFrame, &SetCurrentFrame_Parms, NULL );

	pFnSetCurrentFrame->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 31346 ];

	UTextureFlipBook_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 31345 ];

	UTextureFlipBook_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 31344 ];

	UTextureFlipBook_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 31368 ];

	UTextureMovie_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Resume
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Resume ( )
{
	static UFunction* pFnResume = NULL;

	if ( ! pFnResume )
		pFnResume = (UFunction*) UObject::GObjObjects()->Data[ 31367 ];

	UTextureMovie_execResume_Parms Resume_Parms;

	pFnResume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResume, &Resume_Parms, NULL );

	pFnResume->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 31366 ];

	UTextureMovie_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 31365 ];

	UTextureMovie_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.Trigger.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ATrigger::ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31542 ];

	ATrigger_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ATrigger::CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31540 ];

	ATrigger_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATrigger::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 31537 ];

	ATrigger_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Trigger.UnTrigger
// [0x00020002] 
// Parameters infos:

void ATrigger::UnTrigger ( )
{
	static UFunction* pFnUnTrigger = NULL;

	if ( ! pFnUnTrigger )
		pFnUnTrigger = (UFunction*) UObject::GObjObjects()->Data[ 31536 ];

	ATrigger_execUnTrigger_Parms UnTrigger_Parms;

	this->ProcessEvent ( pFnUnTrigger, &UnTrigger_Parms, NULL );
};

// Function Engine.Trigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 31531 ];

	ATrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.TriggerVolume.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATriggerVolume::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 18530 ];

	ATriggerVolume_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.TriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18529 ];

	ATriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.NotifyDriverTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AVehicle::NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyDriverTakeHit = NULL;

	if ( ! pFnNotifyDriverTakeHit )
		pFnNotifyDriverTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 30665 ];

	AVehicle_execNotifyDriverTakeHit_Parms NotifyDriverTakeHit_Parms;
	NotifyDriverTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyDriverTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyDriverTakeHit_Parms.Damage = Damage;
	NotifyDriverTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyDriverTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyDriverTakeHit, &NotifyDriverTakeHit_Parms, NULL );
};

// Function Engine.Vehicle.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AVehicle::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 30663 ];

	AVehicle_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Vehicle.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void AVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 30662 ];

	AVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.Vehicle.HandleDeadVehicleDriver
// [0x00020000] 
// Parameters infos:

void AVehicle::HandleDeadVehicleDriver ( )
{
	static UFunction* pFnHandleDeadVehicleDriver = NULL;

	if ( ! pFnHandleDeadVehicleDriver )
		pFnHandleDeadVehicleDriver = (UFunction*) UObject::GObjObjects()->Data[ 30661 ];

	AVehicle_execHandleDeadVehicleDriver_Parms HandleDeadVehicleDriver_Parms;

	this->ProcessEvent ( pFnHandleDeadVehicleDriver, &HandleDeadVehicleDriver_Parms, NULL );
};

// Function Engine.Vehicle.SetDriving
// [0x00020102] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void AVehicle::SetDriving ( unsigned long B )
{
	static UFunction* pFnSetDriving = NULL;

	if ( ! pFnSetDriving )
		pFnSetDriving = (UFunction*) UObject::GObjObjects()->Data[ 30659 ];

	AVehicle_execSetDriving_Parms SetDriving_Parms;
	SetDriving_Parms.B = B;

	this->ProcessEvent ( pFnSetDriving, &SetDriving_Parms, NULL );
};

// Function Engine.Vehicle.GetEntryLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AVehicle::GetEntryLocation ( )
{
	static UFunction* pFnGetEntryLocation = NULL;

	if ( ! pFnGetEntryLocation )
		pFnGetEntryLocation = (UFunction*) UObject::GObjObjects()->Data[ 30657 ];

	AVehicle_execGetEntryLocation_Parms GetEntryLocation_Parms;

	this->ProcessEvent ( pFnGetEntryLocation, &GetEntryLocation_Parms, NULL );

	return GetEntryLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void AVehicle::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 30655 ];

	AVehicle_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Vehicle.PancakeOther
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AVehicle::PancakeOther ( class APawn* Other )
{
	static UFunction* pFnPancakeOther = NULL;

	if ( ! pFnPancakeOther )
		pFnPancakeOther = (UFunction*) UObject::GObjObjects()->Data[ 30653 ];

	AVehicle_execPancakeOther_Parms PancakeOther_Parms;
	PancakeOther_Parms.Other = Other;

	this->ProcessEvent ( pFnPancakeOther, &PancakeOther_Parms, NULL );
};

// Function Engine.Vehicle.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVehicle::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 30645 ];

	AVehicle_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Vehicle.GetCollisionDamageInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AController* AVehicle::GetCollisionDamageInstigator ( )
{
	static UFunction* pFnGetCollisionDamageInstigator = NULL;

	if ( ! pFnGetCollisionDamageInstigator )
		pFnGetCollisionDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 30643 ];

	AVehicle_execGetCollisionDamageInstigator_Parms GetCollisionDamageInstigator_Parms;

	this->ProcessEvent ( pFnGetCollisionDamageInstigator, &GetCollisionDamageInstigator_Parms, NULL );

	return GetCollisionDamageInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVehicle::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 30641 ];

	AVehicle_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Vehicle.FaceRotation
// [0x00020100] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void AVehicle::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 30638 ];

	AVehicle_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Vehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName AVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 30635 ];

	AVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlayDying
// [0x00020100] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void AVehicle::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 30632 ];

	AVehicle_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Vehicle.DriverDied
// [0x00020002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void AVehicle::DriverDied ( class UClass* DamageType )
{
	static UFunction* pFnDriverDied = NULL;

	if ( ! pFnDriverDied )
		pFnDriverDied = (UFunction*) UObject::GObjObjects()->Data[ 30628 ];

	AVehicle_execDriverDied_Parms DriverDied_Parms;
	DriverDied_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDriverDied, &DriverDied_Parms, NULL );
};

// Function Engine.Vehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 30623 ];

	AVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Vehicle.ThrowActiveWeapon
// [0x00024000] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AVehicle::ThrowActiveWeapon ( class UClass* DamageType )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 30621 ];

	AVehicle_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;
	ThrowActiveWeapon_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Vehicle.AdjustDriverDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AVehicle::AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDriverDamage = NULL;

	if ( ! pFnAdjustDriverDamage )
		pFnAdjustDriverDamage = (UFunction*) UObject::GObjObjects()->Data[ 30615 ];

	AVehicle_execAdjustDriverDamage_Parms AdjustDriverDamage_Parms;
	AdjustDriverDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDriverDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDriverDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnAdjustDriverDamage, &AdjustDriverDamage_Parms, NULL );

	if ( Damage )
		*Damage = AdjustDriverDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDriverDamage_Parms.Momentum, 0xC );
};

// Function Engine.Vehicle.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AVehicle::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 30607 ];

	AVehicle_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Vehicle.SetKillInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* AVehicle::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = (UFunction*) UObject::GObjObjects()->Data[ 30603 ];

	AVehicle_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.UnPossessed
// [0x00020002] 
// Parameters infos:

void AVehicle::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 30602 ];

	AVehicle_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Vehicle.TryExitPos
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FVector                 ExitPos                        ( CPF_Parm )
// unsigned long                  bMustFindGround                ( CPF_Parm )

bool AVehicle::TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround )
{
	static UFunction* pFnTryExitPos = NULL;

	if ( ! pFnTryExitPos )
		pFnTryExitPos = (UFunction*) UObject::GObjObjects()->Data[ 30591 ];

	AVehicle_execTryExitPos_Parms TryExitPos_Parms;
	TryExitPos_Parms.ExitingDriver = ExitingDriver;
	memcpy ( &TryExitPos_Parms.ExitPos, &ExitPos, 0xC );
	TryExitPos_Parms.bMustFindGround = bMustFindGround;

	this->ProcessEvent ( pFnTryExitPos, &TryExitPos_Parms, NULL );

	return TryExitPos_Parms.ReturnValue;
};

// Function Engine.Vehicle.FindAutoExit
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )

bool AVehicle::FindAutoExit ( class APawn* ExitingDriver )
{
	static UFunction* pFnFindAutoExit = NULL;

	if ( ! pFnFindAutoExit )
		pFnFindAutoExit = (UFunction*) UObject::GObjObjects()->Data[ 30585 ];

	AVehicle_execFindAutoExit_Parms FindAutoExit_Parms;
	FindAutoExit_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnFindAutoExit, &FindAutoExit_Parms, NULL );

	return FindAutoExit_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlaceExitingDriver
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )

bool AVehicle::PlaceExitingDriver ( class APawn* ExitingDriver )
{
	static UFunction* pFnPlaceExitingDriver = NULL;

	if ( ! pFnPlaceExitingDriver )
		pFnPlaceExitingDriver = (UFunction*) UObject::GObjObjects()->Data[ 30576 ];

	AVehicle_execPlaceExitingDriver_Parms PlaceExitingDriver_Parms;
	PlaceExitingDriver_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnPlaceExitingDriver, &PlaceExitingDriver_Parms, NULL );

	return PlaceExitingDriver_Parms.ReturnValue;
};

// Function Engine.Vehicle.DriverLeft
// [0x00020002] 
// Parameters infos:

void AVehicle::DriverLeft ( )
{
	static UFunction* pFnDriverLeft = NULL;

	if ( ! pFnDriverLeft )
		pFnDriverLeft = (UFunction*) UObject::GObjObjects()->Data[ 30575 ];

	AVehicle_execDriverLeft_Parms DriverLeft_Parms;

	this->ProcessEvent ( pFnDriverLeft, &DriverLeft_Parms, NULL );
};

// Function Engine.Vehicle.SetInputs
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )

void AVehicle::SetInputs ( float InForward, float InStrafe, float InUp )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = (UFunction*) UObject::GObjObjects()->Data[ 30571 ];

	AVehicle_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );
};

// Function Engine.Vehicle.DriverLeave
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool AVehicle::eventDriverLeave ( unsigned long bForceLeave )
{
	static UFunction* pFnDriverLeave = NULL;

	if ( ! pFnDriverLeave )
		pFnDriverLeave = (UFunction*) UObject::GObjObjects()->Data[ 30565 ];

	AVehicle_eventDriverLeave_Parms DriverLeave_Parms;
	DriverLeave_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnDriverLeave, &DriverLeave_Parms, NULL );

	return DriverLeave_Parms.ReturnValue;
};

// Function Engine.Vehicle.ContinueOnFoot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::eventContinueOnFoot ( )
{
	static UFunction* pFnContinueOnFoot = NULL;

	if ( ! pFnContinueOnFoot )
		pFnContinueOnFoot = (UFunction*) UObject::GObjObjects()->Data[ 30563 ];

	AVehicle_eventContinueOnFoot_Parms ContinueOnFoot_Parms;

	this->ProcessEvent ( pFnContinueOnFoot, &ContinueOnFoot_Parms, NULL );

	return ContinueOnFoot_Parms.ReturnValue;
};

// Function Engine.Vehicle.DetachDriver
// [0x00020100] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::DetachDriver ( class APawn* P )
{
	static UFunction* pFnDetachDriver = NULL;

	if ( ! pFnDetachDriver )
		pFnDetachDriver = (UFunction*) UObject::GObjObjects()->Data[ 30561 ];

	AVehicle_execDetachDriver_Parms DetachDriver_Parms;
	DetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnDetachDriver, &DetachDriver_Parms, NULL );
};

// Function Engine.Vehicle.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 30559 ];

	AVehicle_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function Engine.Vehicle.EntryAnnouncement
// [0x00020000] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AVehicle::EntryAnnouncement ( class AController* C )
{
	static UFunction* pFnEntryAnnouncement = NULL;

	if ( ! pFnEntryAnnouncement )
		pFnEntryAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 30557 ];

	AVehicle_execEntryAnnouncement_Parms EntryAnnouncement_Parms;
	EntryAnnouncement_Parms.C = C;

	this->ProcessEvent ( pFnEntryAnnouncement, &EntryAnnouncement_Parms, NULL );
};

// Function Engine.Vehicle.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AVehicle::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 30554 ];

	AVehicle_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Vehicle.DriverEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::DriverEnter ( class APawn* P )
{
	static UFunction* pFnDriverEnter = NULL;

	if ( ! pFnDriverEnter )
		pFnDriverEnter = (UFunction*) UObject::GObjObjects()->Data[ 30550 ];

	AVehicle_execDriverEnter_Parms DriverEnter_Parms;
	DriverEnter_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnter, &DriverEnter_Parms, NULL );

	return DriverEnter_Parms.ReturnValue;
};

// Function Engine.Vehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 30547 ];

	AVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.Vehicle.AnySeatAvailable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::AnySeatAvailable ( )
{
	static UFunction* pFnAnySeatAvailable = NULL;

	if ( ! pFnAnySeatAvailable )
		pFnAnySeatAvailable = (UFunction*) UObject::GObjObjects()->Data[ 30545 ];

	AVehicle_execAnySeatAvailable_Parms AnySeatAvailable_Parms;

	this->ProcessEvent ( pFnAnySeatAvailable, &AnySeatAvailable_Parms, NULL );

	return AnySeatAvailable_Parms.ReturnValue;
};

// Function Engine.Vehicle.CanEnterVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::CanEnterVehicle ( class APawn* P )
{
	static UFunction* pFnCanEnterVehicle = NULL;

	if ( ! pFnCanEnterVehicle )
		pFnCanEnterVehicle = (UFunction*) UObject::GObjObjects()->Data[ 30542 ];

	AVehicle_execCanEnterVehicle_Parms CanEnterVehicle_Parms;
	CanEnterVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanEnterVehicle, &CanEnterVehicle_Parms, NULL );

	return CanEnterVehicle_Parms.ReturnValue;
};

// Function Engine.Vehicle.Destroyed_HandleDriver
// [0x00020102] 
// Parameters infos:

void AVehicle::Destroyed_HandleDriver ( )
{
	static UFunction* pFnDestroyed_HandleDriver = NULL;

	if ( ! pFnDestroyed_HandleDriver )
		pFnDestroyed_HandleDriver = (UFunction*) UObject::GObjObjects()->Data[ 30540 ];

	AVehicle_execDestroyed_HandleDriver_Parms Destroyed_HandleDriver_Parms;

	this->ProcessEvent ( pFnDestroyed_HandleDriver, &Destroyed_HandleDriver_Parms, NULL );
};

// Function Engine.Vehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 30539 ];

	AVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Vehicle.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 30537 ];

	AVehicle_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 30535 ];

	AVehicle_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 30533 ];

	AVehicle_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Vehicle.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30532 ];

	AVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void AVehicle::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 30531 ];

	AVehicle_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Vehicle.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void AVehicle::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 30530 ];

	AVehicle_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Vehicle.DriverRadiusDamage
// [0x00020002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AVehicle::DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser )
{
	static UFunction* pFnDriverRadiusDamage = NULL;

	if ( ! pFnDriverRadiusDamage )
		pFnDriverRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 30522 ];

	AVehicle_execDriverRadiusDamage_Parms DriverRadiusDamage_Parms;
	DriverRadiusDamage_Parms.DamageAmount = DamageAmount;
	DriverRadiusDamage_Parms.DamageRadius = DamageRadius;
	DriverRadiusDamage_Parms.EventInstigator = EventInstigator;
	DriverRadiusDamage_Parms.DamageType = DamageType;
	DriverRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &DriverRadiusDamage_Parms.HitLocation, &HitLocation, 0xC );
	DriverRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnDriverRadiusDamage, &DriverRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 30513 ];

	AVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AVehicle::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 30509 ];

	AVehicle_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.Suicide
// [0x00020002] 
// Parameters infos:

void AVehicle::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 30508 ];

	AVehicle_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Vehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 30503 ];

	AVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Vehicle.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AVehicle::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 30502 ];

	AVehicle_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.Weapon.StillFiring
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireMode                       ( CPF_Parm )

bool AWeapon::StillFiring ( unsigned char FireMode )
{
	static UFunction* pFnStillFiring = NULL;

	if ( ! pFnStillFiring )
		pFnStillFiring = (UFunction*) UObject::GObjObjects()->Data[ 32996 ];

	AWeapon_execStillFiring_Parms StillFiring_Parms;
	StillFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnStillFiring, &StillFiring_Parms, NULL );

	return StillFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 32994 ];

	AWeapon_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.Weapon.NotifyWeaponFinishedFiring
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFinishedFiring ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 32992 ];

	AWeapon_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 32990 ];

	AWeapon_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.Weapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void AWeapon::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 32989 ];

	AWeapon_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.TryPutDown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = (UFunction*) UObject::GObjObjects()->Data[ 32956 ];

	AWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );

	return TryPutDown_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPhysicalFireStartLoc
// [0x00024D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector AWeapon::eventGetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 32953 ];

	AWeapon_eventGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= 0x400;

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.GetMuzzleLoc
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AWeapon::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 32951 ];

	AWeapon_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.CustomFire
// [0x00020100] 
// Parameters infos:

void AWeapon::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 32950 ];

	AWeapon_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function Engine.Weapon.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 32942 ];

	AWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function Engine.Weapon.ProcessInstantHit
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void AWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 32939 ];

	AWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function Engine.Weapon.InstantFire
// [0x00820102] 
// Parameters infos:

void AWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 32932 ];

	AWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function Engine.Weapon.PassThroughDamage
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool AWeapon::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = (UFunction*) UObject::GObjObjects()->Data[ 32929 ];

	AWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function Engine.Weapon.CalcWeaponFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FImpactInfo AWeapon::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 32915 ];

	AWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AWeapon::GetTraceOwner ( )
{
	static UFunction* pFnGetTraceOwner = NULL;

	if ( ! pFnGetTraceOwner )
		pFnGetTraceOwner = (UFunction*) UObject::GObjObjects()->Data[ 32913 ];

	AWeapon_execGetTraceOwner_Parms GetTraceOwner_Parms;

	this->ProcessEvent ( pFnGetTraceOwner, &GetTraceOwner_Parms, NULL );

	return GetTraceOwner_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceRange
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::eventGetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 32911 ];

	AWeapon_eventGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AWeapon::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 32907 ];

	AWeapon_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function Engine.Weapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 32906 ];

	AWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Engine.Weapon.FireModeUpdated
// [0x00020100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void AWeapon::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 32903 ];

	AWeapon_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function Engine.Weapon.SetCurrentFireMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void AWeapon::SetCurrentFireMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetCurrentFireMode = NULL;

	if ( ! pFnSetCurrentFireMode )
		pFnSetCurrentFireMode = (UFunction*) UObject::GObjObjects()->Data[ 32901 ];

	AWeapon_execSetCurrentFireMode_Parms SetCurrentFireMode_Parms;
	SetCurrentFireMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetCurrentFireMode, &SetCurrentFireMode_Parms, NULL );
};

// Function Engine.Weapon.SendToFiringState
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::SendToFiringState ( unsigned char FireModeNum )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = (UFunction*) UObject::GObjObjects()->Data[ 32899 ];

	AWeapon_execSendToFiringState_Parms SendToFiringState_Parms;
	SendToFiringState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function Engine.Weapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void AWeapon::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 32897 ];

	AWeapon_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function Engine.Weapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 32895 ];

	AWeapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 32893 ];

	AWeapon_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function Engine.Weapon.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 32891 ];

	AWeapon_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Weapon.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 32889 ];

	AWeapon_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStartFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = (UFunction*) UObject::GObjObjects()->Data[ 32887 ];

	AWeapon_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function Engine.Weapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 32885 ];

	AWeapon_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Weapon.WeaponCalcCamera
// [0x00420100] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )

void AWeapon::WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot )
{
	static UFunction* pFnWeaponCalcCamera = NULL;

	if ( ! pFnWeaponCalcCamera )
		pFnWeaponCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 32881 ];

	AWeapon_execWeaponCalcCamera_Parms WeaponCalcCamera_Parms;
	WeaponCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnWeaponCalcCamera, &WeaponCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &WeaponCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &WeaponCalcCamera_Parms.out_CamRot, 0xC );
};

// Function Engine.Weapon.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 32878 ];

	AWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.Weapon.AdjustFOVAngle
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOVAngle                       ( CPF_Parm )

float AWeapon::AdjustFOVAngle ( float FOVAngle )
{
	static UFunction* pFnAdjustFOVAngle = NULL;

	if ( ! pFnAdjustFOVAngle )
		pFnAdjustFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 32875 ];

	AWeapon_execAdjustFOVAngle_Parms AdjustFOVAngle_Parms;
	AdjustFOVAngle_Parms.FOVAngle = FOVAngle;

	this->ProcessEvent ( pFnAdjustFOVAngle, &AdjustFOVAngle_Parms, NULL );

	return AdjustFOVAngle_Parms.ReturnValue;
};

// Function Engine.Weapon.GetViewAxes
// [0x00C20102] 
// Parameters infos:
// struct FVector                 XAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 YAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 ZAxis                          ( CPF_Parm | CPF_OutParm )

void AWeapon::GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis )
{
	static UFunction* pFnGetViewAxes = NULL;

	if ( ! pFnGetViewAxes )
		pFnGetViewAxes = (UFunction*) UObject::GObjObjects()->Data[ 32870 ];

	AWeapon_execGetViewAxes_Parms GetViewAxes_Parms;

	this->ProcessEvent ( pFnGetViewAxes, &GetViewAxes_Parms, NULL );

	if ( XAxis )
		memcpy ( XAxis, &GetViewAxes_Parms.XAxis, 0xC );

	if ( YAxis )
		memcpy ( YAxis, &GetViewAxes_Parms.YAxis, 0xC );

	if ( ZAxis )
		memcpy ( ZAxis, &GetViewAxes_Parms.ZAxis, 0xC );
};

// Function Engine.Weapon.DetachWeapon
// [0x00020100] 
// Parameters infos:

void AWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32869 ];

	AWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function Engine.Weapon.AttachWeaponTo
// [0x00024100] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void AWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 32866 ];

	AWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashLocation
// [0x00020002] 
// Parameters infos:

void AWeapon::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 32865 ];

	AWeapon_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AWeapon::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 32863 ];

	AWeapon_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::ClearFlashCount ( )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 32862 ];

	AWeapon_execClearFlashCount_Parms ClearFlashCount_Parms;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Weapon.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 32861 ];

	AWeapon_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Weapon.WeaponEmpty
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 32860 ];

	AWeapon_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Engine.Weapon.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AWeapon::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 32856 ];

	AWeapon_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Weapon.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void AWeapon::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32855 ];

	AWeapon_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function Engine.Weapon.Activate
// [0x00020102] 
// Parameters infos:

void AWeapon::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 32854 ];

	AWeapon_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = (UFunction*) UObject::GObjObjects()->Data[ 32853 ];

	AWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponPutDown ( )
{
	static UFunction* pFnTimeWeaponPutDown = NULL;

	if ( ! pFnTimeWeaponPutDown )
		pFnTimeWeaponPutDown = (UFunction*) UObject::GObjObjects()->Data[ 32852 ];

	AWeapon_execTimeWeaponPutDown_Parms TimeWeaponPutDown_Parms;

	this->ProcessEvent ( pFnTimeWeaponPutDown, &TimeWeaponPutDown_Parms, NULL );
};

// Function Engine.Weapon.RefireCheckTimer
// [0x00020100] 
// Parameters infos:

void AWeapon::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 32851 ];

	AWeapon_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 32849 ];

	AWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function Engine.Weapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float AWeapon::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 32846 ];

	AWeapon_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function Engine.Weapon.PlayFiringSound
// [0x00020100] 
// Parameters infos:

void AWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 32845 ];

	AWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function Engine.Weapon.StopFireEffects
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 32843 ];

	AWeapon_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function Engine.Weapon.PlayFireEffects
// [0x00024100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 32840 ];

	AWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function Engine.Weapon.StopWeaponAnimation
// [0x00020102] 
// Parameters infos:

void AWeapon::StopWeaponAnimation ( )
{
	static UFunction* pFnStopWeaponAnimation = NULL;

	if ( ! pFnStopWeaponAnimation )
		pFnStopWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 32838 ];

	AWeapon_execStopWeaponAnimation_Parms StopWeaponAnimation_Parms;

	this->ProcessEvent ( pFnStopWeaponAnimation, &StopWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm )

void AWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 32831 ];

	AWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.WeaponPlaySound
// [0x00024102] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )

void AWeapon::WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness )
{
	static UFunction* pFnWeaponPlaySound = NULL;

	if ( ! pFnWeaponPlaySound )
		pFnWeaponPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 32828 ];

	AWeapon_execWeaponPlaySound_Parms WeaponPlaySound_Parms;
	WeaponPlaySound_Parms.Sound = Sound;
	WeaponPlaySound_Parms.NoiseLoudness = NoiseLoudness;

	this->ProcessEvent ( pFnWeaponPlaySound, &WeaponPlaySound_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 32823 ];

	AWeapon_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );

	return GetWeaponAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.Weapon.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 32821 ];

	AWeapon_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestDefenseStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestDefenseStyle ( )
{
	static UFunction* pFnSuggestDefenseStyle = NULL;

	if ( ! pFnSuggestDefenseStyle )
		pFnSuggestDefenseStyle = (UFunction*) UObject::GObjObjects()->Data[ 32819 ];

	AWeapon_execSuggestDefenseStyle_Parms SuggestDefenseStyle_Parms;

	this->ProcessEvent ( pFnSuggestDefenseStyle, &SuggestDefenseStyle_Parms, NULL );

	return SuggestDefenseStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestAttackStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestAttackStyle ( )
{
	static UFunction* pFnSuggestAttackStyle = NULL;

	if ( ! pFnSuggestAttackStyle )
		pFnSuggestAttackStyle = (UFunction*) UObject::GObjObjects()->Data[ 32817 ];

	AWeapon_execSuggestAttackStyle_Parms SuggestAttackStyle_Parms;

	this->ProcessEvent ( pFnSuggestAttackStyle, &SuggestAttackStyle_Parms, NULL );

	return SuggestAttackStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AWeapon::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 32814 ];

	AWeapon_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = (UFunction*) UObject::GObjObjects()->Data[ 32812 ];

	AWeapon_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 32810 ];

	AWeapon_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.FocusOnLeader
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bLeaderFiring                  ( CPF_Parm )

bool AWeapon::FocusOnLeader ( unsigned long bLeaderFiring )
{
	static UFunction* pFnFocusOnLeader = NULL;

	if ( ! pFnFocusOnLeader )
		pFnFocusOnLeader = (UFunction*) UObject::GObjObjects()->Data[ 32807 ];

	AWeapon_execFocusOnLeader_Parms FocusOnLeader_Parms;
	FocusOnLeader_Parms.bLeaderFiring = bLeaderFiring;

	this->ProcessEvent ( pFnFocusOnLeader, &FocusOnLeader_Parms, NULL );

	return FocusOnLeader_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendRangedAttack ( )
{
	static UFunction* pFnRecommendRangedAttack = NULL;

	if ( ! pFnRecommendRangedAttack )
		pFnRecommendRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 32805 ];

	AWeapon_execRecommendRangedAttack_Parms RecommendRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendRangedAttack, &RecommendRangedAttack_Parms, NULL );

	return RecommendRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.GetWeaponRating
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetWeaponRating ( )
{
	static UFunction* pFnGetWeaponRating = NULL;

	if ( ! pFnGetWeaponRating )
		pFnGetWeaponRating = (UFunction*) UObject::GObjObjects()->Data[ 32803 ];

	AWeapon_execGetWeaponRating_Parms GetWeaponRating_Parms;

	this->ProcessEvent ( pFnGetWeaponRating, &GetWeaponRating_Parms, NULL );

	return GetWeaponRating_Parms.ReturnValue;
};

// Function Engine.Weapon.RelativeStrengthVersus
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          Dist                           ( CPF_Parm )

float AWeapon::RelativeStrengthVersus ( class APawn* P, float Dist )
{
	static UFunction* pFnRelativeStrengthVersus = NULL;

	if ( ! pFnRelativeStrengthVersus )
		pFnRelativeStrengthVersus = (UFunction*) UObject::GObjObjects()->Data[ 32799 ];

	AWeapon_execRelativeStrengthVersus_Parms RelativeStrengthVersus_Parms;
	RelativeStrengthVersus_Parms.P = P;
	RelativeStrengthVersus_Parms.Dist = Dist;

	this->ProcessEvent ( pFnRelativeStrengthVersus, &RelativeStrengthVersus_Parms, NULL );

	return RelativeStrengthVersus_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = (UFunction*) UObject::GObjObjects()->Data[ 32797 ];

	AWeapon_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function Engine.Weapon.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 32794 ];

	AWeapon_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Weapon.GetDamageRadius
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 32791 ];

	AWeapon_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function Engine.Weapon.MaxRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::MaxRange ( )
{
	static UFunction* pFnMaxRange = NULL;

	if ( ! pFnMaxRange )
		pFnMaxRange = (UFunction*) UObject::GObjObjects()->Data[ 32788 ];

	AWeapon_execMaxRange_Parms MaxRange_Parms;

	this->ProcessEvent ( pFnMaxRange, &MaxRange_Parms, NULL );

	return MaxRange_Parms.ReturnValue;
};

// Function Engine.Weapon.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AWeapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 32779 ];

	AWeapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function Engine.Weapon.GetProjectileClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWeapon::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = (UFunction*) UObject::GObjObjects()->Data[ 32777 ];

	AWeapon_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );

	return GetProjectileClass_Parms.ReturnValue;
};

// Function Engine.Weapon.ClearPendingFire
// [0x00020102] 
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::ClearPendingFire ( int FireMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 32775 ];

	AWeapon_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.Weapon.SetPendingFire
// [0x00020102] 
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::SetPendingFire ( int FireMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 32773 ];

	AWeapon_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.Weapon.PendingFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

bool AWeapon::PendingFire ( int FireMode )
{
	static UFunction* pFnPendingFire = NULL;

	if ( ! pFnPendingFire )
		pFnPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 32770 ];

	AWeapon_execPendingFire_Parms PendingFire_Parms;
	PendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnPendingFire, &PendingFire_Parms, NULL );

	return PendingFire_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 32768 ];

	AWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 32764 ];

	AWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.AddAmmo
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int AWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 32761 ];

	AWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.ConsumeAmmo
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 32759 ];

	AWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Engine.Weapon.WeaponLog
// [0x00020102] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FString                 FuncStr                        ( CPF_Parm | CPF_CoerceParm )

void AWeapon::WeaponLog ( struct FString msg, struct FString FuncStr )
{
	static UFunction* pFnWeaponLog = NULL;

	if ( ! pFnWeaponLog )
		pFnWeaponLog = (UFunction*) UObject::GObjObjects()->Data[ 32756 ];

	AWeapon_execWeaponLog_Parms WeaponLog_Parms;
	memcpy ( &WeaponLog_Parms.msg, &msg, 0xC );
	memcpy ( &WeaponLog_Parms.FuncStr, &FuncStr, 0xC );

	this->ProcessEvent ( pFnWeaponLog, &WeaponLog_Parms, NULL );
};

// Function Engine.Weapon.DumpWeaponDebugToLog
// [0x00020102] 
// Parameters infos:

void AWeapon::DumpWeaponDebugToLog ( )
{
	static UFunction* pFnDumpWeaponDebugToLog = NULL;

	if ( ! pFnDumpWeaponDebugToLog )
		pFnDumpWeaponDebugToLog = (UFunction*) UObject::GObjObjects()->Data[ 32752 ];

	AWeapon_execDumpWeaponDebugToLog_Parms DumpWeaponDebugToLog_Parms;

	this->ProcessEvent ( pFnDumpWeaponDebugToLog, &DumpWeaponDebugToLog_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm )

void AWeapon::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 32747 ];

	AWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.Weapon.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AWeapon::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 32740 ];

	AWeapon_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Weapon.DenyClientWeaponSet
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DenyClientWeaponSet ( )
{
	static UFunction* pFnDenyClientWeaponSet = NULL;

	if ( ! pFnDenyClientWeaponSet )
		pFnDenyClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 32738 ];

	AWeapon_execDenyClientWeaponSet_Parms DenyClientWeaponSet_Parms;

	this->ProcessEvent ( pFnDenyClientWeaponSet, &DenyClientWeaponSet_Parms, NULL );

	return DenyClientWeaponSet_Parms.ReturnValue;
};

// Function Engine.Weapon.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 32736 ];

	AWeapon_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void AWeapon::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 32735 ];

	AWeapon_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function Engine.Weapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 32733 ];

	AWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function Engine.Weapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AWeapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 32730 ];

	AWeapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Weapon.DoOverridePrevWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverridePrevWeapon ( )
{
	static UFunction* pFnDoOverridePrevWeapon = NULL;

	if ( ! pFnDoOverridePrevWeapon )
		pFnDoOverridePrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32728 ];

	AWeapon_execDoOverridePrevWeapon_Parms DoOverridePrevWeapon_Parms;

	this->ProcessEvent ( pFnDoOverridePrevWeapon, &DoOverridePrevWeapon_Parms, NULL );

	return DoOverridePrevWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.DoOverrideNextWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverrideNextWeapon ( )
{
	static UFunction* pFnDoOverrideNextWeapon = NULL;

	if ( ! pFnDoOverrideNextWeapon )
		pFnDoOverrideNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32726 ];

	AWeapon_execDoOverrideNextWeapon_Parms DoOverrideNextWeapon_Parms;

	this->ProcessEvent ( pFnDoOverrideNextWeapon, &DoOverrideNextWeapon_Parms, NULL );

	return DoOverrideNextWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.HolderDied
// [0x00020002] 
// Parameters infos:

void AWeapon::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 32725 ];

	AWeapon_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function Engine.Weapon.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::IsActiveWeapon ( )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32723 ];

	AWeapon_execIsActiveWeapon_Parms IsActiveWeapon_Parms;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AWeapon::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 32722 ];

	AWeapon_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Weapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 32721 ];

	AWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.WorldInfo.AddOnScreenDebugMessage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Key                            ( CPF_Parm )
// float                          TimeToDisplay                  ( CPF_Parm )
// struct FColor                  DisplayColor                   ( CPF_Parm )
// struct FString                 DebugMessage                   ( CPF_Parm )

void AWorldInfo::AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage )
{
	static UFunction* pFnAddOnScreenDebugMessage = NULL;

	if ( ! pFnAddOnScreenDebugMessage )
		pFnAddOnScreenDebugMessage = (UFunction*) UObject::GObjObjects()->Data[ 33134 ];

	AWorldInfo_execAddOnScreenDebugMessage_Parms AddOnScreenDebugMessage_Parms;
	AddOnScreenDebugMessage_Parms.Key = Key;
	AddOnScreenDebugMessage_Parms.TimeToDisplay = TimeToDisplay;
	memcpy ( &AddOnScreenDebugMessage_Parms.DisplayColor, &DisplayColor, 0x4 );
	memcpy ( &AddOnScreenDebugMessage_Parms.DebugMessage, &DebugMessage, 0xC );

	pFnAddOnScreenDebugMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOnScreenDebugMessage, &AddOnScreenDebugMessage_Parms, NULL );

	pFnAddOnScreenDebugMessage->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.DoMemoryTracking
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::DoMemoryTracking ( )
{
	static UFunction* pFnDoMemoryTracking = NULL;

	if ( ! pFnDoMemoryTracking )
		pFnDoMemoryTracking = (UFunction*) UObject::GObjObjects()->Data[ 33133 ];

	AWorldInfo_execDoMemoryTracking_Parms DoMemoryTracking_Parms;

	pFnDoMemoryTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoMemoryTracking, &DoMemoryTracking_Parms, NULL );

	pFnDoMemoryTracking->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsPlayingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayingDemo ( )
{
	static UFunction* pFnIsPlayingDemo = NULL;

	if ( ! pFnIsPlayingDemo )
		pFnIsPlayingDemo = (UFunction*) UObject::GObjObjects()->Data[ 33131 ];

	AWorldInfo_execIsPlayingDemo_Parms IsPlayingDemo_Parms;

	pFnIsPlayingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingDemo, &IsPlayingDemo_Parms, NULL );

	pFnIsPlayingDemo->FunctionFlags |= 0x400;

	return IsPlayingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsRecordingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsRecordingDemo ( )
{
	static UFunction* pFnIsRecordingDemo = NULL;

	if ( ! pFnIsRecordingDemo )
		pFnIsRecordingDemo = (UFunction*) UObject::GObjObjects()->Data[ 33129 ];

	AWorldInfo_execIsRecordingDemo_Parms IsRecordingDemo_Parms;

	pFnIsRecordingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRecordingDemo, &IsRecordingDemo_Parms, NULL );

	pFnIsRecordingDemo->FunctionFlags |= 0x400;

	return IsRecordingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDetailMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AWorldInfo::GetDetailMode ( )
{
	static UFunction* pFnGetDetailMode = NULL;

	if ( ! pFnGetDetailMode )
		pFnGetDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 33127 ];

	AWorldInfo_execGetDetailMode_Parms GetDetailMode_Parms;

	pFnGetDetailMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDetailMode, &GetDetailMode_Parms, NULL );

	pFnGetDetailMode->FunctionFlags |= 0x400;

	return GetDetailMode_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetMapName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludePrefix                 ( CPF_OptionalParm | CPF_Parm )

struct FString AWorldInfo::GetMapName ( unsigned long bIncludePrefix )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = (UFunction*) UObject::GObjObjects()->Data[ 33124 ];

	AWorldInfo_execGetMapName_Parms GetMapName_Parms;
	GetMapName_Parms.bIncludePrefix = bIncludePrefix;

	pFnGetMapName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );

	pFnGetMapName->FunctionFlags |= 0x400;

	return GetMapName_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                NewMapInfo                     ( CPF_Parm )

void AWorldInfo::SetMapInfo ( class UMapInfo* NewMapInfo )
{
	static UFunction* pFnSetMapInfo = NULL;

	if ( ! pFnSetMapInfo )
		pFnSetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 33122 ];

	AWorldInfo_execSetMapInfo_Parms SetMapInfo_Parms;
	SetMapInfo_Parms.NewMapInfo = NewMapInfo;

	pFnSetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMapInfo, &SetMapInfo_Parms, NULL );

	pFnSetMapInfo->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMapInfo* AWorldInfo::GetMapInfo ( )
{
	static UFunction* pFnGetMapInfo = NULL;

	if ( ! pFnGetMapInfo )
		pFnGetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 33120 ];

	AWorldInfo_execGetMapInfo_Parms GetMapInfo_Parms;

	pFnGetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapInfo, &GetMapInfo_Parms, NULL );

	pFnGetMapInfo->FunctionFlags |= 0x400;

	return GetMapInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowPaused                     ( CPF_Parm )

void AWorldInfo::SetSeamlessTravelMidpointPause ( unsigned long bNowPaused )
{
	static UFunction* pFnSetSeamlessTravelMidpointPause = NULL;

	if ( ! pFnSetSeamlessTravelMidpointPause )
		pFnSetSeamlessTravelMidpointPause = (UFunction*) UObject::GObjObjects()->Data[ 33118 ];

	AWorldInfo_execSetSeamlessTravelMidpointPause_Parms SetSeamlessTravelMidpointPause_Parms;
	SetSeamlessTravelMidpointPause_Parms.bNowPaused = bNowPaused;

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSeamlessTravelMidpointPause, &SetSeamlessTravelMidpointPause_Parms, NULL );

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsInSeamlessTravel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsInSeamlessTravel ( )
{
	static UFunction* pFnIsInSeamlessTravel = NULL;

	if ( ! pFnIsInSeamlessTravel )
		pFnIsInSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 20756 ];

	AWorldInfo_execIsInSeamlessTravel_Parms IsInSeamlessTravel_Parms;

	pFnIsInSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSeamlessTravel, &IsInSeamlessTravel_Parms, NULL );

	pFnIsInSeamlessTravel->FunctionFlags |= 0x400;

	return IsInSeamlessTravel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SeamlessTravel
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid )
{
	static UFunction* pFnSeamlessTravel = NULL;

	if ( ! pFnSeamlessTravel )
		pFnSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 20768 ];

	AWorldInfo_execSeamlessTravel_Parms SeamlessTravel_Parms;
	memcpy ( &SeamlessTravel_Parms.URL, &URL, 0xC );
	SeamlessTravel_Parms.bAbsolute = bAbsolute;
	memcpy ( &SeamlessTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeamlessTravel, &SeamlessTravel_Parms, NULL );

	pFnSeamlessTravel->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.CommitMapChange
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldSkipLevelStartupEvent   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipLevelBeginningEvent ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::CommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent )
{
	static UFunction* pFnCommitMapChange = NULL;

	if ( ! pFnCommitMapChange )
		pFnCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8448 ];

	AWorldInfo_execCommitMapChange_Parms CommitMapChange_Parms;
	CommitMapChange_Parms.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	CommitMapChange_Parms.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	pFnCommitMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommitMapChange, &CommitMapChange_Parms, NULL );

	pFnCommitMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMapChangeReady
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsMapChangeReady ( )
{
	static UFunction* pFnIsMapChangeReady = NULL;

	if ( ! pFnIsMapChangeReady )
		pFnIsMapChangeReady = (UFunction*) UObject::GObjObjects()->Data[ 33110 ];

	AWorldInfo_execIsMapChangeReady_Parms IsMapChangeReady_Parms;

	pFnIsMapChangeReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMapChangeReady, &IsMapChangeReady_Parms, NULL );

	pFnIsMapChangeReady->FunctionFlags |= 0x400;

	return IsMapChangeReady_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPreparingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPreparingMapChange ( )
{
	static UFunction* pFnIsPreparingMapChange = NULL;

	if ( ! pFnIsPreparingMapChange )
		pFnIsPreparingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8449 ];

	AWorldInfo_execIsPreparingMapChange_Parms IsPreparingMapChange_Parms;

	pFnIsPreparingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPreparingMapChange, &IsPreparingMapChange_Parms, NULL );

	pFnIsPreparingMapChange->FunctionFlags |= 0x400;

	return IsPreparingMapChange_Parms.ReturnValue;
};

// Function Engine.WorldInfo.PrepareMapChange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         LevelNames                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AWorldInfo::PrepareMapChange ( TArray< struct FName >* LevelNames )
{
	static UFunction* pFnPrepareMapChange = NULL;

	if ( ! pFnPrepareMapChange )
		pFnPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 8450 ];

	AWorldInfo_execPrepareMapChange_Parms PrepareMapChange_Parms;

	pFnPrepareMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrepareMapChange, &PrepareMapChange_Parms, NULL );

	pFnPrepareMapChange->FunctionFlags |= 0x400;

	if ( LevelNames )
		memcpy ( LevelNames, &PrepareMapChange_Parms.LevelNames, 0xC );
};

// Function Engine.WorldInfo.NotifyMatchStarted
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldActivateLevelStartupEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelBeginningEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelLoadedEvents ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents )
{
	static UFunction* pFnNotifyMatchStarted = NULL;

	if ( ! pFnNotifyMatchStarted )
		pFnNotifyMatchStarted = (UFunction*) UObject::GObjObjects()->Data[ 20734 ];

	AWorldInfo_execNotifyMatchStarted_Parms NotifyMatchStarted_Parms;
	NotifyMatchStarted_Parms.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	pFnNotifyMatchStarted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyMatchStarted, &NotifyMatchStarted_Parms, NULL );

	pFnNotifyMatchStarted->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.AllPawns
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_OptionalParm | CPF_Parm )
// float                          TestRadius                     ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   P                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P )
{
	static UFunction* pFnAllPawns = NULL;

	if ( ! pFnAllPawns )
		pFnAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 33099 ];

	AWorldInfo_execAllPawns_Parms AllPawns_Parms;
	AllPawns_Parms.BaseClass = BaseClass;
	memcpy ( &AllPawns_Parms.TestLocation, &TestLocation, 0xC );
	AllPawns_Parms.TestRadius = TestRadius;

	pFnAllPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllPawns, &AllPawns_Parms, NULL );

	pFnAllPawns->FunctionFlags |= 0x400;

	if ( P )
		*P = AllPawns_Parms.P;
};

// Function Engine.WorldInfo.AllControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllControllers ( class UClass* BaseClass, class AController** C )
{
	static UFunction* pFnAllControllers = NULL;

	if ( ! pFnAllControllers )
		pFnAllControllers = (UFunction*) UObject::GObjObjects()->Data[ 6652 ];

	AWorldInfo_execAllControllers_Parms AllControllers_Parms;
	AllControllers_Parms.BaseClass = BaseClass;

	pFnAllControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllControllers, &AllControllers_Parms, NULL );

	pFnAllControllers->FunctionFlags |= 0x400;

	if ( C )
		*C = AllControllers_Parms.C;
};

// Function Engine.WorldInfo.NavigationPointCheck
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// TArray< class ANavigationPoint* > Navs                           ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// TArray< class UReachSpec* >    Specs                          ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AWorldInfo::NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs )
{
	static UFunction* pFnNavigationPointCheck = NULL;

	if ( ! pFnNavigationPointCheck )
		pFnNavigationPointCheck = (UFunction*) UObject::GObjObjects()->Data[ 33090 ];

	AWorldInfo_execNavigationPointCheck_Parms NavigationPointCheck_Parms;
	memcpy ( &NavigationPointCheck_Parms.Point, &Point, 0xC );
	memcpy ( &NavigationPointCheck_Parms.Extent, &Extent, 0xC );

	pFnNavigationPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigationPointCheck, &NavigationPointCheck_Parms, NULL );

	pFnNavigationPointCheck->FunctionFlags |= 0x400;

	if ( Navs )
		memcpy ( Navs, &NavigationPointCheck_Parms.Navs, 0xC );

	if ( Specs )
		memcpy ( Specs, &NavigationPointCheck_Parms.Specs, 0xC );
};

// Function Engine.WorldInfo.RadiusNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N )
{
	static UFunction* pFnRadiusNavigationPoints = NULL;

	if ( ! pFnRadiusNavigationPoints )
		pFnRadiusNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 33085 ];

	AWorldInfo_execRadiusNavigationPoints_Parms RadiusNavigationPoints_Parms;
	RadiusNavigationPoints_Parms.BaseClass = BaseClass;
	memcpy ( &RadiusNavigationPoints_Parms.Point, &Point, 0xC );
	RadiusNavigationPoints_Parms.Radius = Radius;

	pFnRadiusNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadiusNavigationPoints, &RadiusNavigationPoints_Parms, NULL );

	pFnRadiusNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = RadiusNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.AllNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N )
{
	static UFunction* pFnAllNavigationPoints = NULL;

	if ( ! pFnAllNavigationPoints )
		pFnAllNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 8507 ];

	AWorldInfo_execAllNavigationPoints_Parms AllNavigationPoints_Parms;
	AllNavigationPoints_Parms.BaseClass = BaseClass;

	pFnAllNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllNavigationPoints, &AllNavigationPoints_Parms, NULL );

	pFnAllNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = AllNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.Reset
// [0x00020002] 
// Parameters infos:

void AWorldInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 33082 ];

	AWorldInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.WorldInfo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 33081 ];

	AWorldInfo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 33076 ];

	AWorldInfo_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.ThisIsNeverExecuted
// [0x00020002] 
// Parameters infos:
// class ADefaultPhysicsVolume*   P                              ( CPF_Parm )

void AWorldInfo::ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P )
{
	static UFunction* pFnThisIsNeverExecuted = NULL;

	if ( ! pFnThisIsNeverExecuted )
		pFnThisIsNeverExecuted = (UFunction*) UObject::GObjObjects()->Data[ 33074 ];

	AWorldInfo_execThisIsNeverExecuted_Parms ThisIsNeverExecuted_Parms;
	ThisIsNeverExecuted_Parms.P = P;

	this->ProcessEvent ( pFnThisIsNeverExecuted, &ThisIsNeverExecuted_Parms, NULL );
};

// Function Engine.WorldInfo.ServerTravel
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::eventServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnServerTravel = NULL;

	if ( ! pFnServerTravel )
		pFnServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 33071 ];

	AWorldInfo_eventServerTravel_Parms ServerTravel_Parms;
	memcpy ( &ServerTravel_Parms.URL, &URL, 0xC );
	ServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnServerTravel, &ServerTravel_Parms, NULL );
};

// Function Engine.WorldInfo.GetGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWorldInfo::GetGameClass ( )
{
	static UFunction* pFnGetGameClass = NULL;

	if ( ! pFnGetGameClass )
		pFnGetGameClass = (UFunction*) UObject::GObjObjects()->Data[ 33069 ];

	AWorldInfo_execGetGameClass_Parms GetGameClass_Parms;

	this->ProcessEvent ( pFnGetGameClass, &GetGameClass_Parms, NULL );

	return GetGameClass_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetAddressURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AWorldInfo::GetAddressURL ( )
{
	static UFunction* pFnGetAddressURL = NULL;

	if ( ! pFnGetAddressURL )
		pFnGetAddressURL = (UFunction*) UObject::GObjObjects()->Data[ 33067 ];

	AWorldInfo_execGetAddressURL_Parms GetAddressURL_Parms;

	pFnGetAddressURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAddressURL, &GetAddressURL_Parms, NULL );

	pFnGetAddressURL->FunctionFlags |= 0x400;

	return GetAddressURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.VerifyNavList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::VerifyNavList ( )
{
	static UFunction* pFnVerifyNavList = NULL;

	if ( ! pFnVerifyNavList )
		pFnVerifyNavList = (UFunction*) UObject::GObjObjects()->Data[ 33066 ];

	AWorldInfo_execVerifyNavList_Parms VerifyNavList_Parms;

	pFnVerifyNavList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavList, &VerifyNavList_Parms, NULL );

	pFnVerifyNavList->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.DelayGarbageCollection
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InDelayedTime                  ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::DelayGarbageCollection ( float InDelayedTime )
{
	static UFunction* pFnDelayGarbageCollection = NULL;

	if ( ! pFnDelayGarbageCollection )
		pFnDelayGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 33064 ];

	AWorldInfo_execDelayGarbageCollection_Parms DelayGarbageCollection_Parms;
	DelayGarbageCollection_Parms.InDelayedTime = InDelayedTime;

	pFnDelayGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDelayGarbageCollection, &DelayGarbageCollection_Parms, NULL );

	pFnDelayGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ForceGarbageCollection
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFullPurge                     ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::ForceGarbageCollection ( unsigned long bFullPurge )
{
	static UFunction* pFnForceGarbageCollection = NULL;

	if ( ! pFnForceGarbageCollection )
		pFnForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 8452 ];

	AWorldInfo_execForceGarbageCollection_Parms ForceGarbageCollection_Parms;
	ForceGarbageCollection_Parms.bFullPurge = bFullPurge;

	pFnForceGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGarbageCollection, &ForceGarbageCollection_Parms, NULL );

	pFnForceGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsPlayInEditor
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayInEditor ( )
{
	static UFunction* pFnIsPlayInEditor = NULL;

	if ( ! pFnIsPlayInEditor )
		pFnIsPlayInEditor = (UFunction*) UObject::GObjObjects()->Data[ 33061 ];

	AWorldInfo_execIsPlayInEditor_Parms IsPlayInEditor_Parms;

	pFnIsPlayInEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayInEditor, &IsPlayInEditor_Parms, NULL );

	pFnIsPlayInEditor->FunctionFlags |= 0x400;

	return IsPlayInEditor_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsConsoleBuild
// [0x00026501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool AWorldInfo::IsConsoleBuild ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsoleBuild = NULL;

	if ( ! pFnIsConsoleBuild )
		pFnIsConsoleBuild = (UFunction*) UObject::GObjObjects()->Data[ 6648 ];

	AWorldInfo_execIsConsoleBuild_Parms IsConsoleBuild_Parms;
	IsConsoleBuild_Parms.ConsoleType = ConsoleType;

	pFnIsConsoleBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConsoleBuild, &IsConsoleBuild_Parms, NULL );

	pFnIsConsoleBuild->FunctionFlags |= 0x400;

	return IsConsoleBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsDemoBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsDemoBuild ( )
{
	static UFunction* pFnIsDemoBuild = NULL;

	if ( ! pFnIsDemoBuild )
		pFnIsDemoBuild = (UFunction*) UObject::GObjObjects()->Data[ 20740 ];

	AWorldInfo_execIsDemoBuild_Parms IsDemoBuild_Parms;

	pFnIsDemoBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDemoBuild, &IsDemoBuild_Parms, NULL );

	pFnIsDemoBuild->FunctionFlags |= 0x400;

	return IsDemoBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetLocalURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AWorldInfo::GetLocalURL ( )
{
	static UFunction* pFnGetLocalURL = NULL;

	if ( ! pFnGetLocalURL )
		pFnGetLocalURL = (UFunction*) UObject::GObjObjects()->Data[ 33056 ];

	AWorldInfo_execGetLocalURL_Parms GetLocalURL_Parms;

	pFnGetLocalURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalURL, &GetLocalURL_Parms, NULL );

	pFnGetLocalURL->FunctionFlags |= 0x400;

	return GetLocalURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetLevelRBGravity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewGrav                        ( CPF_Parm )

void AWorldInfo::SetLevelRBGravity ( struct FVector NewGrav )
{
	static UFunction* pFnSetLevelRBGravity = NULL;

	if ( ! pFnSetLevelRBGravity )
		pFnSetLevelRBGravity = (UFunction*) UObject::GObjObjects()->Data[ 33054 ];

	AWorldInfo_execSetLevelRBGravity_Parms SetLevelRBGravity_Parms;
	memcpy ( &SetLevelRBGravity_Parms.NewGrav, &NewGrav, 0xC );

	pFnSetLevelRBGravity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevelRBGravity, &SetLevelRBGravity_Parms, NULL );

	pFnSetLevelRBGravity->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetGameSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequence*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USequence* AWorldInfo::GetGameSequence ( )
{
	static UFunction* pFnGetGameSequence = NULL;

	if ( ! pFnGetGameSequence )
		pFnGetGameSequence = (UFunction*) UObject::GObjObjects()->Data[ 8466 ];

	AWorldInfo_execGetGameSequence_Parms GetGameSequence_Parms;

	pFnGetGameSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameSequence, &GetGameSequence_Parms, NULL );

	pFnGetGameSequence->FunctionFlags |= 0x400;

	return GetGameSequence_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWorldInfo::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 33051 ];

	AWorldInfo_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsServer ( )
{
	static UFunction* pFnIsServer = NULL;

	if ( ! pFnIsServer )
		pFnIsServer = (UFunction*) UObject::GObjObjects()->Data[ 33049 ];

	AWorldInfo_execIsServer_Parms IsServer_Parms;

	this->ProcessEvent ( pFnIsServer, &IsServer_Parms, NULL );

	return IsServer_Parms.ReturnValue;
};

// Function Engine.WorldInfo.UpdateMusicTrack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       NewMusicTrack                  ( CPF_Parm )

void AWorldInfo::UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack )
{
	static UFunction* pFnUpdateMusicTrack = NULL;

	if ( ! pFnUpdateMusicTrack )
		pFnUpdateMusicTrack = (UFunction*) UObject::GObjObjects()->Data[ 33047 ];

	AWorldInfo_execUpdateMusicTrack_Parms UpdateMusicTrack_Parms;
	memcpy ( &UpdateMusicTrack_Parms.NewMusicTrack, &NewMusicTrack, 0x18 );

	pFnUpdateMusicTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMusicTrack, &UpdateMusicTrack_Parms, NULL );

	pFnUpdateMusicTrack->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AWorldInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 33045 ];

	AWorldInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.AIController.CanFireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AAIController::CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 8658 ];

	AAIController_execCanFireWeapon_Parms CanFireWeapon_Parms;
	CanFireWeapon_Parms.Wpn = Wpn;
	CanFireWeapon_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function Engine.AIController.ShouldRefire
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 8656 ];

	AAIController_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.AIController.NotifyWeaponFinishedFiring
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 8653 ];

	AAIController_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.W = W;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.AIController.NotifyWeaponFired
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 8650 ];

	AAIController_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.AIController.OnAIMoveToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AIMoveToActor*   Action                         ( CPF_Parm )

void AAIController::OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action )
{
	static UFunction* pFnOnAIMoveToActor = NULL;

	if ( ! pFnOnAIMoveToActor )
		pFnOnAIMoveToActor = (UFunction*) UObject::GObjObjects()->Data[ 8641 ];

	AAIController_execOnAIMoveToActor_Parms OnAIMoveToActor_Parms;
	OnAIMoveToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAIMoveToActor, &OnAIMoveToActor_Parms, NULL );
};

// Function Engine.AIController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AAIController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 8638 ];

	AAIController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.AIController.SetTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            inTeamIdx                      ( CPF_Parm )

void AAIController::eventSetTeam ( int inTeamIdx )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 8636 ];

	AAIController_eventSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.inTeamIdx = inTeamIdx;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.AIController.PriorityObjective
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::PriorityObjective ( )
{
	static UFunction* pFnPriorityObjective = NULL;

	if ( ! pFnPriorityObjective )
		pFnPriorityObjective = (UFunction*) UObject::GObjObjects()->Data[ 8634 ];

	AAIController_execPriorityObjective_Parms PriorityObjective_Parms;

	this->ProcessEvent ( pFnPriorityObjective, &PriorityObjective_Parms, NULL );

	return PriorityObjective_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrders
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName AAIController::GetOrders ( )
{
	static UFunction* pFnGetOrders = NULL;

	if ( ! pFnGetOrders )
		pFnGetOrders = (UFunction*) UObject::GObjObjects()->Data[ 8632 ];

	AAIController_execGetOrders_Parms GetOrders_Parms;

	this->ProcessEvent ( pFnGetOrders, &GetOrders_Parms, NULL );

	return GetOrders_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrderObject
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AAIController::GetOrderObject ( )
{
	static UFunction* pFnGetOrderObject = NULL;

	if ( ! pFnGetOrderObject )
		pFnGetOrderObject = (UFunction*) UObject::GObjObjects()->Data[ 8630 ];

	AAIController_execGetOrderObject_Parms GetOrderObject_Parms;

	this->ProcessEvent ( pFnGetOrderObject, &GetOrderObject_Parms, NULL );

	return GetOrderObject_Parms.ReturnValue;
};

// Function Engine.AIController.SetOrders
// [0x00020000] 
// Parameters infos:
// struct FName                   NewOrders                      ( CPF_Parm )
// class AController*             OrderGiver                     ( CPF_Parm )

void AAIController::SetOrders ( struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pFnSetOrders = NULL;

	if ( ! pFnSetOrders )
		pFnSetOrders = (UFunction*) UObject::GObjObjects()->Data[ 8627 ];

	AAIController_execSetOrders_Parms SetOrders_Parms;
	memcpy ( &SetOrders_Parms.NewOrders, &NewOrders, 0x8 );
	SetOrders_Parms.OrderGiver = OrderGiver;

	this->ProcessEvent ( pFnSetOrders, &SetOrders_Parms, NULL );
};

// Function Engine.AIController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AAIController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 8620 ];

	AAIController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.AIController.Reset
// [0x00020002] 
// Parameters infos:

void AAIController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 8619 ];

	AAIController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.AIController.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAIController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8618 ];

	AAIController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Goal_AtActor.AtActor
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UGoal_AtActor::AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 21274 ];

	UGoal_AtActor_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.P = P;
	AtActor_Parms.Goal = Goal;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.Path_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UPath_AlongLine::AlongLine ( class APawn* P, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = (UFunction*) UObject::GObjObjects()->Data[ 25502 ];

	UPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.P = P;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.Path_TowardGoal.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UPath_TowardGoal::TowardGoal ( class APawn* P, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = (UFunction*) UObject::GObjObjects()->Data[ 25508 ];

	UPath_TowardGoal_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.P = P;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinTraversalDist::DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = (UFunction*) UObject::GObjObjects()->Data[ 25516 ];

	UPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.P = P;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.AnimNode.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 9728 ];

	UAnimNode_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// float                          EndTime                        ( CPF_OptionalParm | CPF_Parm )

void UAnimNode::PlayAnim ( unsigned long bLoop, float Rate, float StartTime, float EndTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 9723 ];

	UAnimNode_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;
	PlayAnim_Parms.EndTime = EndTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* UAnimNode::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 9720 ];

	UAnimNode_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.AnimNode.OnCeaseRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnCeaseRelevant ( )
{
	static UFunction* pFnOnCeaseRelevant = NULL;

	if ( ! pFnOnCeaseRelevant )
		pFnOnCeaseRelevant = (UFunction*) UObject::GObjObjects()->Data[ 9719 ];

	UAnimNode_eventOnCeaseRelevant_Parms OnCeaseRelevant_Parms;

	this->ProcessEvent ( pFnOnCeaseRelevant, &OnCeaseRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnBecomeRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 9718 ];

	UAnimNode_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnInit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnInit ( )
{
	static UFunction* pFnOnInit = NULL;

	if ( ! pFnOnInit )
		pFnOnInit = (UFunction*) UObject::GObjObjects()->Data[ 9717 ];

	UAnimNode_eventOnInit_Parms OnInit_Parms;

	this->ProcessEvent ( pFnOnInit, &OnInit_Parms, NULL );
};

// Function Engine.AnimNodeBlendBase.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 10446 ];

	UAnimNodeBlendBase_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// float                          EndTime                        ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendBase::PlayAnim ( unsigned long bLoop, float Rate, float StartTime, float EndTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 10441 ];

	UAnimNodeBlendBase_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;
	PlayAnim_Parms.EndTime = EndTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlend.SetBlendTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlend::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = (UFunction*) UObject::GObjObjects()->Data[ 10451 ];

	UAnimNodeBlend_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ProfileIndex                   ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByIndex ( int ProfileIndex )
{
	static UFunction* pFnSetActiveProfileByIndex = NULL;

	if ( ! pFnSetActiveProfileByIndex )
		pFnSetActiveProfileByIndex = (UFunction*) UObject::GObjObjects()->Data[ 10503 ];

	UAnimNodeAimOffset_execSetActiveProfileByIndex_Parms SetActiveProfileByIndex_Parms;
	SetActiveProfileByIndex_Parms.ProfileIndex = ProfileIndex;

	pFnSetActiveProfileByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByIndex, &SetActiveProfileByIndex_Parms, NULL );

	pFnSetActiveProfileByIndex->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ProfileName                    ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByName ( struct FName ProfileName )
{
	static UFunction* pFnSetActiveProfileByName = NULL;

	if ( ! pFnSetActiveProfileByName )
		pFnSetActiveProfileByName = (UFunction*) UObject::GObjObjects()->Data[ 10501 ];

	UAnimNodeAimOffset_execSetActiveProfileByName_Parms SetActiveProfileByName_Parms;
	memcpy ( &SetActiveProfileByName_Parms.ProfileName, &ProfileName, 0x8 );

	pFnSetActiveProfileByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByName, &SetActiveProfileByName_Parms, NULL );

	pFnSetActiveProfileByName->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendList::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 10513 ];

	UAnimNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendList_AutoNextStep.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendList_AutoNextStep::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 10540 ];

	UAnimNodeBlendList_AutoNextStep_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TargetIdx                      ( CPF_Parm )
// struct FName                   StartBoneName                  ( CPF_Parm )
// float                          PerBoneIncrease                ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendMultiBone::SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease )
{
	static UFunction* pFnSetTargetStartBone = NULL;

	if ( ! pFnSetTargetStartBone )
		pFnSetTargetStartBone = (UFunction*) UObject::GObjObjects()->Data[ 10556 ];

	UAnimNodeBlendMultiBone_execSetTargetStartBone_Parms SetTargetStartBone_Parms;
	SetTargetStartBone_Parms.TargetIdx = TargetIdx;
	memcpy ( &SetTargetStartBone_Parms.StartBoneName, &StartBoneName, 0x8 );
	SetTargetStartBone_Parms.PerBoneIncrease = PerBoneIncrease;

	pFnSetTargetStartBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetStartBone, &SetTargetStartBone_Parms, NULL );

	pFnSetTargetStartBone->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.GetTimeLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetTimeLeft ( )
{
	static UFunction* pFnGetTimeLeft = NULL;

	if ( ! pFnGetTimeLeft )
		pFnGetTimeLeft = (UFunction*) UObject::GObjObjects()->Data[ 9782 ];

	UAnimNodeSequence_execGetTimeLeft_Parms GetTimeLeft_Parms;

	pFnGetTimeLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeLeft, &GetTimeLeft_Parms, NULL );

	pFnGetTimeLeft->FunctionFlags |= 0x400;

	return GetTimeLeft_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetAnimPlaybackLength ( )
{
	static UFunction* pFnGetAnimPlaybackLength = NULL;

	if ( ! pFnGetAnimPlaybackLength )
		pFnGetAnimPlaybackLength = (UFunction*) UObject::GObjObjects()->Data[ 9780 ];

	UAnimNodeSequence_execGetAnimPlaybackLength_Parms GetAnimPlaybackLength_Parms;

	pFnGetAnimPlaybackLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimPlaybackLength, &GetAnimPlaybackLength_Parms, NULL );

	pFnGetAnimPlaybackLength->FunctionFlags |= 0x400;

	return GetAnimPlaybackLength_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGlobalPlayRate ( )
{
	static UFunction* pFnGetGlobalPlayRate = NULL;

	if ( ! pFnGetGlobalPlayRate )
		pFnGetGlobalPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 9778 ];

	UAnimNodeSequence_execGetGlobalPlayRate_Parms GetGlobalPlayRate_Parms;

	pFnGetGlobalPlayRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalPlayRate, &GetGlobalPlayRate_Parms, NULL );

	pFnGetGlobalPlayRate->FunctionFlags |= 0x400;

	return GetGlobalPlayRate_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindNormalizedPositionFromGroupRelativePosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindNormalizedPositionFromGroupRelativePosition = NULL;

	if ( ! pFnFindNormalizedPositionFromGroupRelativePosition )
		pFnFindNormalizedPositionFromGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 9775 ];

	UAnimNodeSequence_execFindNormalizedPositionFromGroupRelativePosition_Parms FindNormalizedPositionFromGroupRelativePosition_Parms;
	FindNormalizedPositionFromGroupRelativePosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindNormalizedPositionFromGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindNormalizedPositionFromGroupRelativePosition, &FindNormalizedPositionFromGroupRelativePosition_Parms, NULL );

	pFnFindNormalizedPositionFromGroupRelativePosition->FunctionFlags |= 0x400;

	return FindNormalizedPositionFromGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetNormalizedPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetNormalizedPosition ( )
{
	static UFunction* pFnGetNormalizedPosition = NULL;

	if ( ! pFnGetNormalizedPosition )
		pFnGetNormalizedPosition = (UFunction*) UObject::GObjObjects()->Data[ 9773 ];

	UAnimNodeSequence_execGetNormalizedPosition_Parms GetNormalizedPosition_Parms;

	pFnGetNormalizedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNormalizedPosition, &GetNormalizedPosition_Parms, NULL );

	pFnGetNormalizedPosition->FunctionFlags |= 0x400;

	return GetNormalizedPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewTime                        ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )

void UAnimNodeSequence::SetPosition ( float NewTime, unsigned long bFireNotifies )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 9770 ];

	UAnimNodeSequence_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewTime = NewTime;
	SetPosition_Parms.bFireNotifies = bFireNotifies;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 9769 ];

	UAnimNodeSequence_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InRate                         ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// float                          EndTime                        ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::PlayAnim ( unsigned long bLoop, float InRate, float StartTime, float EndTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 9764 ];

	UAnimNodeSequence_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.InRate = InRate;
	PlayAnim_Parms.StartTime = StartTime;
	PlayAnim_Parms.EndTime = EndTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.SetAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )

void UAnimNodeSequence::SetAnim ( struct FName Sequence )
{
	static UFunction* pFnSetAnim = NULL;

	if ( ! pFnSetAnim )
		pFnSetAnim = (UFunction*) UObject::GObjObjects()->Data[ 9762 ];

	UAnimNodeSequence_execSetAnim_Parms SetAnim_Parms;
	memcpy ( &SetAnim_Parms.Sequence, &Sequence, 0x8 );

	pFnSetAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnim, &SetAnim_Parms, NULL );

	pFnSetAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.GetActiveChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild ( )
{
	static UFunction* pFnGetActiveChild = NULL;

	if ( ! pFnGetActiveChild )
		pFnGetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 10631 ];

	UAnimNodeCrossfader_execGetActiveChild_Parms GetActiveChild_Parms;

	pFnGetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveChild, &GetActiveChild_Parms, NULL );

	pFnGetActiveChild->FunctionFlags |= 0x400;

	return GetActiveChild_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.GetAnimName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeCrossfader::GetAnimName ( )
{
	static UFunction* pFnGetAnimName = NULL;

	if ( ! pFnGetAnimName )
		pFnGetAnimName = (UFunction*) UObject::GObjObjects()->Data[ 10629 ];

	UAnimNodeCrossfader_execGetAnimName_Parms GetAnimName_Parms;

	pFnGetAnimName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimName, &GetAnimName_Parms, NULL );

	pFnGetAnimName->FunctionFlags |= 0x400;

	return GetAnimName_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate )
{
	static UFunction* pFnBlendToLoopingAnim = NULL;

	if ( ! pFnBlendToLoopingAnim )
		pFnBlendToLoopingAnim = (UFunction*) UObject::GObjObjects()->Data[ 10625 ];

	UAnimNodeCrossfader_execBlendToLoopingAnim_Parms BlendToLoopingAnim_Parms;
	memcpy ( &BlendToLoopingAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	BlendToLoopingAnim_Parms.BlendInTime = BlendInTime;
	BlendToLoopingAnim_Parms.Rate = Rate;

	pFnBlendToLoopingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendToLoopingAnim, &BlendToLoopingAnim_Parms, NULL );

	pFnBlendToLoopingAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDontBlendOut                  ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate )
{
	static UFunction* pFnPlayOneShotAnim = NULL;

	if ( ! pFnPlayOneShotAnim )
		pFnPlayOneShotAnim = (UFunction*) UObject::GObjObjects()->Data[ 10619 ];

	UAnimNodeCrossfader_execPlayOneShotAnim_Parms PlayOneShotAnim_Parms;
	memcpy ( &PlayOneShotAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	PlayOneShotAnim_Parms.BlendInTime = BlendInTime;
	PlayOneShotAnim_Parms.BlendOutTime = BlendOutTime;
	PlayOneShotAnim_Parms.bDontBlendOut = bDontBlendOut;
	PlayOneShotAnim_Parms.Rate = Rate;

	pFnPlayOneShotAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayOneShotAnim, &PlayOneShotAnim_Parms, NULL );

	pFnPlayOneShotAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 10661 ];

	UAnimNodePlayCustomAnim_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 10659 ];

	UAnimNodePlayCustomAnim_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 10656 ];

	UAnimNodePlayCustomAnim_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10653 ];

	UAnimNodePlayCustomAnim_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodePlayCustomAnim::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10651 ];

	UAnimNodePlayCustomAnim_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 10644 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodePlayCustomAnim::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10636 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSeqBlendByEnvState.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InfRate                        ( CPF_OptionalParm | CPF_Parm )
// float                          InfStartTime                   ( CPF_OptionalParm | CPF_Parm )
// float                          InfEndTime                     ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSeqBlendByEnvState::PlayAnim ( unsigned long bLoop, float InfRate, float InfStartTime, float InfEndTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 10695 ];

	UAnimNodeSeqBlendByEnvState_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.InfRate = InfRate;
	PlayAnim_Parms.InfStartTime = InfStartTime;
	PlayAnim_Parms.InfEndTime = InfEndTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSeqBlendByEnvState.IsChangedEnvState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAnimNodeSeqBlendByEnvState::IsChangedEnvState ( )
{
	static UFunction* pFnIsChangedEnvState = NULL;

	if ( ! pFnIsChangedEnvState )
		pFnIsChangedEnvState = (UFunction*) UObject::GObjObjects()->Data[ 10693 ];

	UAnimNodeSeqBlendByEnvState_execIsChangedEnvState_Parms IsChangedEnvState_Parms;

	pFnIsChangedEnvState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsChangedEnvState, &IsChangedEnvState_Parms, NULL );

	pFnIsChangedEnvState->FunctionFlags |= 0x400;

	return IsChangedEnvState_Parms.ReturnValue;
};

// Function Engine.AnimNodeSeqBlendByEnvState.GetTransitAnimIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UAnimNodeSeqBlendByEnvState::GetTransitAnimIndex ( )
{
	static UFunction* pFnGetTransitAnimIndex = NULL;

	if ( ! pFnGetTransitAnimIndex )
		pFnGetTransitAnimIndex = (UFunction*) UObject::GObjObjects()->Data[ 10691 ];

	UAnimNodeSeqBlendByEnvState_execGetTransitAnimIndex_Parms GetTransitAnimIndex_Parms;

	pFnGetTransitAnimIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTransitAnimIndex, &GetTransitAnimIndex_Parms, NULL );

	pFnGetTransitAnimIndex->FunctionFlags |= 0x400;

	return GetTransitAnimIndex_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate ( )
{
	static UFunction* pFnCheckAnimsUpToDate = NULL;

	if ( ! pFnCheckAnimsUpToDate )
		pFnCheckAnimsUpToDate = (UFunction*) UObject::GObjObjects()->Data[ 10722 ];

	UAnimNodeSequenceBlendByAim_execCheckAnimsUpToDate_Parms CheckAnimsUpToDate_Parms;

	pFnCheckAnimsUpToDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAnimsUpToDate, &CheckAnimsUpToDate_Parms, NULL );

	pFnCheckAnimsUpToDate->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.AddToSynchGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSlot::AddToSynchGroup ( struct FName GroupName )
{
	static UFunction* pFnAddToSynchGroup = NULL;

	if ( ! pFnAddToSynchGroup )
		pFnAddToSynchGroup = (UFunction*) UObject::GObjObjects()->Data[ 10762 ];

	UAnimNodeSlot_execAddToSynchGroup_Parms AddToSynchGroup_Parms;
	memcpy ( &AddToSynchGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddToSynchGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToSynchGroup, &AddToSynchGroup_Parms, NULL );

	pFnAddToSynchGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 10758 ];

	UAnimNodeSlot_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneAxisOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );

	pFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 10756 ];

	UAnimNodeSlot_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	pFnGetCustomAnimNodeSeq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	pFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodeSlot::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 10754 ];

	UAnimNodeSlot_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	pFnSetActorAnimEndNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );

	pFnSetActorAnimEndNotification->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodeSlot::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10752 ];

	UAnimNodeSlot_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	pFnSetCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );

	pFnSetCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodeSlot::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10750 ];

	UAnimNodeSlot_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetPlayedAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeSlot::GetPlayedAnimation ( )
{
	static UFunction* pFnGetPlayedAnimation = NULL;

	if ( ! pFnGetPlayedAnimation )
		pFnGetPlayedAnimation = (UFunction*) UObject::GObjObjects()->Data[ 10748 ];

	UAnimNodeSlot_execGetPlayedAnimation_Parms GetPlayedAnimation_Parms;

	pFnGetPlayedAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayedAnimation, &GetPlayedAnimation_Parms, NULL );

	pFnGetPlayedAnimation->FunctionFlags |= 0x400;

	return GetPlayedAnimation_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 10741 ];

	UAnimNodeSlot_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodeSlot::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 10733 ];

	UAnimNodeSlot_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimNodeSynch::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 10788 ];

	UAnimNodeSynch_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimNodeSynch::GetRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetRelativePosition = NULL;

	if ( ! pFnGetRelativePosition )
		pFnGetRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 10785 ];

	UAnimNodeSynch_execGetRelativePosition_Parms GetRelativePosition_Parms;
	memcpy ( &GetRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRelativePosition, &GetRelativePosition_Parms, NULL );

	pFnGetRelativePosition->FunctionFlags |= 0x400;

	return GetRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.ForceRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimNodeSynch::ForceRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceRelativePosition = NULL;

	if ( ! pFnForceRelativePosition )
		pFnForceRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 10782 ];

	UAnimNodeSynch_execForceRelativePosition_Parms ForceRelativePosition_Parms;
	memcpy ( &ForceRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRelativePosition, &ForceRelativePosition_Parms, NULL );

	pFnForceRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup ( struct FName GroupName )
{
	static UFunction* pFnGetMasterNodeOfGroup = NULL;

	if ( ! pFnGetMasterNodeOfGroup )
		pFnGetMasterNodeOfGroup = (UFunction*) UObject::GObjObjects()->Data[ 10779 ];

	UAnimNodeSynch_execGetMasterNodeOfGroup_Parms GetMasterNodeOfGroup_Parms;
	memcpy ( &GetMasterNodeOfGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnGetMasterNodeOfGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMasterNodeOfGroup, &GetMasterNodeOfGroup_Parms, NULL );

	pFnGetMasterNodeOfGroup->FunctionFlags |= 0x400;

	return GetMasterNodeOfGroup_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnRemoveNodeFromGroup = NULL;

	if ( ! pFnRemoveNodeFromGroup )
		pFnRemoveNodeFromGroup = (UFunction*) UObject::GObjObjects()->Data[ 10776 ];

	UAnimNodeSynch_execRemoveNodeFromGroup_Parms RemoveNodeFromGroup_Parms;
	RemoveNodeFromGroup_Parms.SeqNode = SeqNode;
	memcpy ( &RemoveNodeFromGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnRemoveNodeFromGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveNodeFromGroup, &RemoveNodeFromGroup_Parms, NULL );

	pFnRemoveNodeFromGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.AddNodeToGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnAddNodeToGroup = NULL;

	if ( ! pFnAddNodeToGroup )
		pFnAddNodeToGroup = (UFunction*) UObject::GObjObjects()->Data[ 10773 ];

	UAnimNodeSynch_execAddNodeToGroup_Parms AddNodeToGroup_Parms;
	AddNodeToGroup_Parms.SeqNode = SeqNode;
	memcpy ( &AddNodeToGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddNodeToGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNodeToGroup, &AddNodeToGroup_Parms, NULL );

	pFnAddNodeToGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNotify_Scripted.Notify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_Scripted::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 10836 ];

	UAnimNotify_Scripted_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimTree.GetGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

int UAnimTree::GetGroupIndex ( struct FName GroupName )
{
	static UFunction* pFnGetGroupIndex = NULL;

	if ( ! pFnGetGroupIndex )
		pFnGetGroupIndex = (UFunction*) UObject::GObjObjects()->Data[ 11175 ];

	UAnimTree_execGetGroupIndex_Parms GetGroupIndex_Parms;
	memcpy ( &GetGroupIndex_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupIndex, &GetGroupIndex_Parms, NULL );

	pFnGetGroupIndex->FunctionFlags |= 0x400;

	return GetGroupIndex_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRateScale ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRateScale = NULL;

	if ( ! pFnGetGroupRateScale )
		pFnGetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 11172 ];

	UAnimTree_execGetGroupRateScale_Parms GetGroupRateScale_Parms;
	memcpy ( &GetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRateScale, &GetGroupRateScale_Parms, NULL );

	pFnGetGroupRateScale->FunctionFlags |= 0x400;

	return GetGroupRateScale_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimTree::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 11169 ];

	UAnimTree_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 11166 ];

	UAnimTree_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;
	memcpy ( &GetGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimTree.ForceGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimTree::ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceGroupRelativePosition = NULL;

	if ( ! pFnForceGroupRelativePosition )
		pFnForceGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 11163 ];

	UAnimTree_execForceGroupRelativePosition_Parms ForceGroupRelativePosition_Parms;
	memcpy ( &ForceGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceGroupRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGroupRelativePosition, &ForceGroupRelativePosition_Parms, NULL );

	pFnForceGroupRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupNotifyMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupNotifyMaster = NULL;

	if ( ! pFnGetGroupNotifyMaster )
		pFnGetGroupNotifyMaster = (UFunction*) UObject::GObjObjects()->Data[ 11160 ];

	UAnimTree_execGetGroupNotifyMaster_Parms GetGroupNotifyMaster_Parms;
	memcpy ( &GetGroupNotifyMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupNotifyMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupNotifyMaster, &GetGroupNotifyMaster_Parms, NULL );

	pFnGetGroupNotifyMaster->FunctionFlags |= 0x400;

	return GetGroupNotifyMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupSynchMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupSynchMaster = NULL;

	if ( ! pFnGetGroupSynchMaster )
		pFnGetGroupSynchMaster = (UFunction*) UObject::GObjObjects()->Data[ 11157 ];

	UAnimTree_execGetGroupSynchMaster_Parms GetGroupSynchMaster_Parms;
	memcpy ( &GetGroupSynchMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupSynchMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupSynchMaster, &GetGroupSynchMaster_Parms, NULL );

	pFnGetGroupSynchMaster->FunctionFlags |= 0x400;

	return GetGroupSynchMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetAnimGroupForNode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )
// unsigned long                  bCreateIfNotFound              ( CPF_OptionalParm | CPF_Parm )

bool UAnimTree::SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound )
{
	static UFunction* pFnSetAnimGroupForNode = NULL;

	if ( ! pFnSetAnimGroupForNode )
		pFnSetAnimGroupForNode = (UFunction*) UObject::GObjObjects()->Data[ 11152 ];

	UAnimTree_execSetAnimGroupForNode_Parms SetAnimGroupForNode_Parms;
	SetAnimGroupForNode_Parms.SeqNode = SeqNode;
	memcpy ( &SetAnimGroupForNode_Parms.GroupName, &GroupName, 0x8 );
	SetAnimGroupForNode_Parms.bCreateIfNotFound = bCreateIfNotFound;

	pFnSetAnimGroupForNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimGroupForNode, &SetAnimGroupForNode_Parms, NULL );

	pFnSetAnimGroupForNode->FunctionFlags |= 0x400;

	return SetAnimGroupForNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* UAnimTree::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 11149 ];

	UAnimTree_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* UAnimTree::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 11146 ];

	UAnimTree_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.CrowdAgent.TakeDamage
// [0x00024002] 
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ACrowdAgent::TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 15344 ];

	ACrowdAgent_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.CrowdAgent.PlayDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACrowdAgent::PlayDeath ( )
{
	static UFunction* pFnPlayDeath = NULL;

	if ( ! pFnPlayDeath )
		pFnPlayDeath = (UFunction*) UObject::GObjObjects()->Data[ 15343 ];

	ACrowdAgent_execPlayDeath_Parms PlayDeath_Parms;

	pFnPlayDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayDeath, &PlayDeath_Parms, NULL );

	pFnPlayDeath->FunctionFlags |= 0x400;
};

// Function Engine.CrowdAttractor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACrowdAttractor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 15368 ];

	ACrowdAttractor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.MorphNodePose.SetMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodePose::SetMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnSetMorphTarget = NULL;

	if ( ! pFnSetMorphTarget )
		pFnSetMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 22655 ];

	UMorphNodePose_execSetMorphTarget_Parms SetMorphTarget_Parms;
	memcpy ( &SetMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnSetMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphTarget, &SetMorphTarget_Parms, NULL );

	pFnSetMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeWeight.SetNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewWeight                      ( CPF_Parm )

void UMorphNodeWeight::SetNodeWeight ( float NewWeight )
{
	static UFunction* pFnSetNodeWeight = NULL;

	if ( ! pFnSetNodeWeight )
		pFnSetNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 22665 ];

	UMorphNodeWeight_execSetNodeWeight_Parms SetNodeWeight_Parms;
	SetNodeWeight_Parms.NewWeight = NewWeight;

	pFnSetNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNodeWeight, &SetNodeWeight_Parms, NULL );

	pFnSetNodeWeight->FunctionFlags |= 0x400;
};

// Function Engine.MorphTargetSet.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* UMorphTargetSet::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 22672 ];

	UMorphTargetSet_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.SetCustomizeSkelMeshActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActor::SetCustomizeSkelMeshActor ( )
{
	static UFunction* pFnSetCustomizeSkelMeshActor = NULL;

	if ( ! pFnSetCustomizeSkelMeshActor )
		pFnSetCustomizeSkelMeshActor = (UFunction*) UObject::GObjObjects()->Data[ 9677 ];

	ASkeletalMeshActor_execSetCustomizeSkelMeshActor_Parms SetCustomizeSkelMeshActor_Parms;

	pFnSetCustomizeSkelMeshActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomizeSkelMeshActor, &SetCustomizeSkelMeshActor_Parms, NULL );

	pFnSetCustomizeSkelMeshActor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.SetMaterialVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  InSkelComp                     ( CPF_Parm )
// struct FString                 ParamName                      ( CPF_Parm )
// struct FLinearColor            InColor                        ( CPF_Parm )
// struct FName                   MaterialName                   ( CPF_Parm )

void ASkeletalMeshActor::SetMaterialVectorParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, struct FLinearColor InColor, struct FName MaterialName )
{
	static UFunction* pFnSetMaterialVectorParameterValue = NULL;

	if ( ! pFnSetMaterialVectorParameterValue )
		pFnSetMaterialVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 9672 ];

	ASkeletalMeshActor_execSetMaterialVectorParameterValue_Parms SetMaterialVectorParameterValue_Parms;
	SetMaterialVectorParameterValue_Parms.InSkelComp = InSkelComp;
	memcpy ( &SetMaterialVectorParameterValue_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &SetMaterialVectorParameterValue_Parms.InColor, &InColor, 0x10 );
	memcpy ( &SetMaterialVectorParameterValue_Parms.MaterialName, &MaterialName, 0x8 );

	pFnSetMaterialVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialVectorParameterValue, &SetMaterialVectorParameterValue_Parms, NULL );

	pFnSetMaterialVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.SetMaterialTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  InSkelComp                     ( CPF_Parm )
// struct FString                 ParamName                      ( CPF_Parm )
// class UTexture*                InTexture                      ( CPF_Parm )
// struct FName                   MaterialName                   ( CPF_Parm )

void ASkeletalMeshActor::SetMaterialTextureParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, class UTexture* InTexture, struct FName MaterialName )
{
	static UFunction* pFnSetMaterialTextureParameterValue = NULL;

	if ( ! pFnSetMaterialTextureParameterValue )
		pFnSetMaterialTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 9667 ];

	ASkeletalMeshActor_execSetMaterialTextureParameterValue_Parms SetMaterialTextureParameterValue_Parms;
	SetMaterialTextureParameterValue_Parms.InSkelComp = InSkelComp;
	memcpy ( &SetMaterialTextureParameterValue_Parms.ParamName, &ParamName, 0xC );
	SetMaterialTextureParameterValue_Parms.InTexture = InTexture;
	memcpy ( &SetMaterialTextureParameterValue_Parms.MaterialName, &MaterialName, 0x8 );

	pFnSetMaterialTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialTextureParameterValue, &SetMaterialTextureParameterValue_Parms, NULL );

	pFnSetMaterialTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.SetMaterialScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  InSkelComp                     ( CPF_Parm )
// struct FString                 ParamName                      ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// struct FName                   MaterialName                   ( CPF_Parm )

void ASkeletalMeshActor::SetMaterialScalarParameterValue ( class USkeletalMeshComponent* InSkelComp, struct FString ParamName, float fValue, struct FName MaterialName )
{
	static UFunction* pFnSetMaterialScalarParameterValue = NULL;

	if ( ! pFnSetMaterialScalarParameterValue )
		pFnSetMaterialScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 9662 ];

	ASkeletalMeshActor_execSetMaterialScalarParameterValue_Parms SetMaterialScalarParameterValue_Parms;
	SetMaterialScalarParameterValue_Parms.InSkelComp = InSkelComp;
	memcpy ( &SetMaterialScalarParameterValue_Parms.ParamName, &ParamName, 0xC );
	SetMaterialScalarParameterValue_Parms.fValue = fValue;
	memcpy ( &SetMaterialScalarParameterValue_Parms.MaterialName, &MaterialName, 0x8 );

	pFnSetMaterialScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialScalarParameterValue, &SetMaterialScalarParameterValue_Parms, NULL );

	pFnSetMaterialScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 9660 ];

	ASkeletalMeshActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 9658 ];

	ASkeletalMeshActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 9656 ];

	ASkeletalMeshActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASkeletalMeshActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 9647 ];

	ASkeletalMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void ASkeletalMeshActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 9640 ];

	ASkeletalMeshActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMaterial
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9638 ];

	ASkeletalMeshActor_eventOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetSkeletalMesh
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetSkeletalMesh* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetSkeletalMesh ( class USeqAct_SetSkeletalMesh* Action )
{
	static UFunction* pFnOnSetSkeletalMesh = NULL;

	if ( ! pFnOnSetSkeletalMesh )
		pFnOnSetSkeletalMesh = (UFunction*) UObject::GObjObjects()->Data[ 9636 ];

	ASkeletalMeshActor_eventOnSetSkeletalMesh_Parms OnSetSkeletalMesh_Parms;
	OnSetSkeletalMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSkeletalMesh, &OnSetSkeletalMesh_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9634 ];

	ASkeletalMeshActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* ASkeletalMeshActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 9632 ];

	ASkeletalMeshActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void ASkeletalMeshActor::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9629 ];

	ASkeletalMeshActor_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioComponent* ASkeletalMeshActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 9627 ];

	ASkeletalMeshActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9626 ];

	ASkeletalMeshActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm )
// struct FString                 SeqName                        ( CPF_Parm )
// int                            SoundTrackType                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InStopPrevious                 ( CPF_OptionalParm | CPF_Parm )

bool ASkeletalMeshActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, int SoundTrackType, unsigned long InStopPrevious )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9619 ];

	ASkeletalMeshActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundTrackType = SoundTrackType;
	PlayActorFaceFXAnim_Parms.InStopPrevious = InStopPrevious;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 9618 ];

	ASkeletalMeshActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 9610 ];

	ASkeletalMeshActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm )

void ASkeletalMeshActor::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 9606 ];

	ASkeletalMeshActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 9603 ];

	ASkeletalMeshActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASkeletalMeshActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 9601 ];

	ASkeletalMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9600 ];

	ASkeletalMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkelControlBase.SetSkelControlStrength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewStrength                    ( CPF_Parm )
// float                          InBlendTime                    ( CPF_Parm )

void USkelControlBase::SetSkelControlStrength ( float NewStrength, float InBlendTime )
{
	static UFunction* pFnSetSkelControlStrength = NULL;

	if ( ! pFnSetSkelControlStrength )
		pFnSetSkelControlStrength = (UFunction*) UObject::GObjObjects()->Data[ 29733 ];

	USkelControlBase_execSetSkelControlStrength_Parms SetSkelControlStrength_Parms;
	SetSkelControlStrength_Parms.NewStrength = NewStrength;
	SetSkelControlStrength_Parms.InBlendTime = InBlendTime;

	pFnSetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlStrength, &SetSkelControlStrength_Parms, NULL );

	pFnSetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.SetSkelControlActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInActive                      ( CPF_Parm )

void USkelControlBase::SetSkelControlActive ( unsigned long bInActive )
{
	static UFunction* pFnSetSkelControlActive = NULL;

	if ( ! pFnSetSkelControlActive )
		pFnSetSkelControlActive = (UFunction*) UObject::GObjObjects()->Data[ 29731 ];

	USkelControlBase_execSetSkelControlActive_Parms SetSkelControlActive_Parms;
	SetSkelControlActive_Parms.bInActive = bInActive;

	pFnSetSkelControlActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlActive, &SetSkelControlActive_Parms, NULL );

	pFnSetSkelControlActive->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.CanLookAtPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PointLoc                       ( CPF_Parm )
// unsigned long                  bDrawDebugInfo                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugUsePersistentLines       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugFlushLinesFirst          ( CPF_OptionalParm | CPF_Parm )

bool USkelControlLookAt::CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst )
{
	static UFunction* pFnCanLookAtPoint = NULL;

	if ( ! pFnCanLookAtPoint )
		pFnCanLookAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 29797 ];

	USkelControlLookAt_execCanLookAtPoint_Parms CanLookAtPoint_Parms;
	memcpy ( &CanLookAtPoint_Parms.PointLoc, &PointLoc, 0xC );
	CanLookAtPoint_Parms.bDrawDebugInfo = bDrawDebugInfo;
	CanLookAtPoint_Parms.bDebugUsePersistentLines = bDebugUsePersistentLines;
	CanLookAtPoint_Parms.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	pFnCanLookAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanLookAtPoint, &CanLookAtPoint_Parms, NULL );

	pFnCanLookAtPoint->FunctionFlags |= 0x400;

	return CanLookAtPoint_Parms.ReturnValue;
};

// Function Engine.SkelControlLookAt.SetLookAtAlpha
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DesiredAlpha                   ( CPF_Parm )
// float                          DesiredBlendTime               ( CPF_Parm )

void USkelControlLookAt::SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime )
{
	static UFunction* pFnSetLookAtAlpha = NULL;

	if ( ! pFnSetLookAtAlpha )
		pFnSetLookAtAlpha = (UFunction*) UObject::GObjObjects()->Data[ 29794 ];

	USkelControlLookAt_execSetLookAtAlpha_Parms SetLookAtAlpha_Parms;
	SetLookAtAlpha_Parms.DesiredAlpha = DesiredAlpha;
	SetLookAtAlpha_Parms.DesiredBlendTime = DesiredBlendTime;

	pFnSetLookAtAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLookAtAlpha, &SetLookAtAlpha_Parms, NULL );

	pFnSetLookAtAlpha->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USkelControlLookAt::InterpolateTargetLocation ( float DeltaTime )
{
	static UFunction* pFnInterpolateTargetLocation = NULL;

	if ( ! pFnInterpolateTargetLocation )
		pFnInterpolateTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 29792 ];

	USkelControlLookAt_execInterpolateTargetLocation_Parms InterpolateTargetLocation_Parms;
	InterpolateTargetLocation_Parms.DeltaTime = DeltaTime;

	pFnInterpolateTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateTargetLocation, &InterpolateTargetLocation_Parms, NULL );

	pFnInterpolateTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.SetTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTargetLocation              ( CPF_Parm )

void USkelControlLookAt::SetTargetLocation ( struct FVector NewTargetLocation )
{
	static UFunction* pFnSetTargetLocation = NULL;

	if ( ! pFnSetTargetLocation )
		pFnSetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 29790 ];

	USkelControlLookAt_execSetTargetLocation_Parms SetTargetLocation_Parms;
	memcpy ( &SetTargetLocation_Parms.NewTargetLocation, &NewTargetLocation, 0xC );

	pFnSetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetLocation, &SetTargetLocation_Parms, NULL );

	pFnSetTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 30137 ];

	ASkeletalMeshActorMAT_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 30134 ];

	ASkeletalMeshActorMAT_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorMAT::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30133 ];

	ASkeletalMeshActorMAT_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 30126 ];

	ASkeletalMeshActorMAT_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm )

void ASkeletalMeshActorMAT::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30123 ];

	ASkeletalMeshActorMAT_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 30120 ];

	ASkeletalMeshActorMAT_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 30117 ];

	ASkeletalMeshActorMAT_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActorMAT::MAT_FinishAnimControl ( )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30116 ];

	ASkeletalMeshActorMAT_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 30113 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 30106 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_BeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30103 ];

	ASkeletalMeshActorMAT_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	memcpy ( &MAT_BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.TrailComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTrailComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 31434 ];

	UTrailComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.TrailComponent.BeginGenerating
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTrailComponent::BeginGenerating ( )
{
	static UFunction* pFnBeginGenerating = NULL;

	if ( ! pFnBeginGenerating )
		pFnBeginGenerating = (UFunction*) UObject::GObjObjects()->Data[ 31433 ];

	UTrailComponent_execBeginGenerating_Parms BeginGenerating_Parms;

	pFnBeginGenerating->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginGenerating, &BeginGenerating_Parms, NULL );

	pFnBeginGenerating->FunctionFlags |= 0x400;
};

// Function Engine.TrailComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTrailTemplate*          InTemplate                     ( CPF_Parm )

void UTrailComponent::SetTemplate ( class UTrailTemplate* InTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 31431 ];

	UTrailComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.InTemplate = InTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.GetDecalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInterface* UDecalComponent::GetDecalMaterial ( )
{
	static UFunction* pFnGetDecalMaterial = NULL;

	if ( ! pFnGetDecalMaterial )
		pFnGetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18177 ];

	UDecalComponent_execGetDecalMaterial_Parms GetDecalMaterial_Parms;

	pFnGetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDecalMaterial, &GetDecalMaterial_Parms, NULL );

	pFnGetDecalMaterial->FunctionFlags |= 0x400;

	return GetDecalMaterial_Parms.ReturnValue;
};

// Function Engine.DecalComponent.SetDecalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewDecalMaterial               ( CPF_Parm )

void UDecalComponent::SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial )
{
	static UFunction* pFnSetDecalMaterial = NULL;

	if ( ! pFnSetDecalMaterial )
		pFnSetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18175 ];

	UDecalComponent_execSetDecalMaterial_Parms SetDecalMaterial_Parms;
	SetDecalMaterial_Parms.NewDecalMaterial = NewDecalMaterial;

	pFnSetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDecalMaterial, &SetDecalMaterial_Parms, NULL );

	pFnSetDecalMaterial->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDecalComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 18174 ];

	UDecalComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.DecalManager.SpawnDecal
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UMaterialInterface*      DecalMaterial                  ( CPF_Parm )
// struct FVector                 DecalLocation                  ( CPF_Parm )
// struct FRotator                DecalOrientation               ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          Thickness                      ( CPF_Parm )
// unsigned long                  bNoClip                        ( CPF_Parm )
// float                          DecalRotation                  ( CPF_OptionalParm | CPF_Parm )
// class UPrimitiveComponent*     HitComponent                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bProjectOnTerrain              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bProjectOnSkeletalMeshes       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   HitBone                        ( CPF_OptionalParm | CPF_Parm )
// int                            HitNodeIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            HitLevelIndex                  ( CPF_OptionalParm | CPF_Parm )
// float                          InDecalLifeSpan                ( CPF_OptionalParm | CPF_Parm )

class UDecalComponent* ADecalManager::eventSpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan )
{
	static UFunction* pFnSpawnDecal = NULL;

	if ( ! pFnSpawnDecal )
		pFnSpawnDecal = (UFunction*) UObject::GObjObjects()->Data[ 18218 ];

	ADecalManager_eventSpawnDecal_Parms SpawnDecal_Parms;
	SpawnDecal_Parms.DecalMaterial = DecalMaterial;
	memcpy ( &SpawnDecal_Parms.DecalLocation, &DecalLocation, 0xC );
	memcpy ( &SpawnDecal_Parms.DecalOrientation, &DecalOrientation, 0xC );
	SpawnDecal_Parms.Width = Width;
	SpawnDecal_Parms.Height = Height;
	SpawnDecal_Parms.Thickness = Thickness;
	SpawnDecal_Parms.bNoClip = bNoClip;
	SpawnDecal_Parms.DecalRotation = DecalRotation;
	SpawnDecal_Parms.HitComponent = HitComponent;
	SpawnDecal_Parms.bProjectOnTerrain = bProjectOnTerrain;
	SpawnDecal_Parms.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	memcpy ( &SpawnDecal_Parms.HitBone, &HitBone, 0x8 );
	SpawnDecal_Parms.HitNodeIndex = HitNodeIndex;
	SpawnDecal_Parms.HitLevelIndex = HitLevelIndex;
	SpawnDecal_Parms.InDecalLifeSpan = InDecalLifeSpan;

	this->ProcessEvent ( pFnSpawnDecal, &SpawnDecal_Parms, NULL );

	return SpawnDecal_Parms.ReturnValue;
};

// Function Engine.DecalManager.SetDecalParameters
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UDecalComponent*         TheDecal                       ( CPF_Parm )
// class UMaterialInterface*      DecalMaterial                  ( CPF_Parm )
// struct FVector                 DecalLocation                  ( CPF_Parm )
// struct FRotator                DecalOrientation               ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          Thickness                      ( CPF_Parm )
// unsigned long                  bNoClip                        ( CPF_Parm )
// float                          DecalRotation                  ( CPF_Parm )
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm )
// unsigned long                  bProjectOnTerrain              ( CPF_Parm )
// unsigned long                  bProjectOnSkeletalMeshes       ( CPF_Parm )
// struct FName                   HitBone                        ( CPF_Parm )
// int                            HitNodeIndex                   ( CPF_Parm )
// int                            HitLevelIndex                  ( CPF_Parm )
// float                          InDecalLifeSpan                ( CPF_Parm )

void ADecalManager::SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan )
{
	static UFunction* pFnSetDecalParameters = NULL;

	if ( ! pFnSetDecalParameters )
		pFnSetDecalParameters = (UFunction*) UObject::GObjObjects()->Data[ 18201 ];

	ADecalManager_execSetDecalParameters_Parms SetDecalParameters_Parms;
	SetDecalParameters_Parms.TheDecal = TheDecal;
	SetDecalParameters_Parms.DecalMaterial = DecalMaterial;
	memcpy ( &SetDecalParameters_Parms.DecalLocation, &DecalLocation, 0xC );
	memcpy ( &SetDecalParameters_Parms.DecalOrientation, &DecalOrientation, 0xC );
	SetDecalParameters_Parms.Width = Width;
	SetDecalParameters_Parms.Height = Height;
	SetDecalParameters_Parms.Thickness = Thickness;
	SetDecalParameters_Parms.bNoClip = bNoClip;
	SetDecalParameters_Parms.DecalRotation = DecalRotation;
	SetDecalParameters_Parms.HitComponent = HitComponent;
	SetDecalParameters_Parms.bProjectOnTerrain = bProjectOnTerrain;
	SetDecalParameters_Parms.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	memcpy ( &SetDecalParameters_Parms.HitBone, &HitBone, 0x8 );
	SetDecalParameters_Parms.HitNodeIndex = HitNodeIndex;
	SetDecalParameters_Parms.HitLevelIndex = HitLevelIndex;
	SetDecalParameters_Parms.InDecalLifeSpan = InDecalLifeSpan;

	this->ProcessEvent ( pFnSetDecalParameters, &SetDecalParameters_Parms, NULL );
};

// Function Engine.DecalManager.CanSpawnDecals
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ADecalManager::CanSpawnDecals ( )
{
	static UFunction* pFnCanSpawnDecals = NULL;

	if ( ! pFnCanSpawnDecals )
		pFnCanSpawnDecals = (UFunction*) UObject::GObjObjects()->Data[ 18199 ];

	ADecalManager_execCanSpawnDecals_Parms CanSpawnDecals_Parms;

	this->ProcessEvent ( pFnCanSpawnDecals, &CanSpawnDecals_Parms, NULL );

	return CanSpawnDecals_Parms.ReturnValue;
};

// Function Engine.DecalManager.DecalFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UDecalComponent*         Decal                          ( CPF_Parm )

void ADecalManager::eventDecalFinished ( class UDecalComponent* Decal )
{
	static UFunction* pFnDecalFinished = NULL;

	if ( ! pFnDecalFinished )
		pFnDecalFinished = (UFunction*) UObject::GObjObjects()->Data[ 18197 ];

	ADecalManager_eventDecalFinished_Parms DecalFinished_Parms;
	DecalFinished_Parms.Decal = Decal;

	this->ProcessEvent ( pFnDecalFinished, &DecalFinished_Parms, NULL );
};

// Function Engine.DecalManager.AreDynamicDecalsEnabled
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ADecalManager::AreDynamicDecalsEnabled ( )
{
	static UFunction* pFnAreDynamicDecalsEnabled = NULL;

	if ( ! pFnAreDynamicDecalsEnabled )
		pFnAreDynamicDecalsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 18195 ];

	ADecalManager_execAreDynamicDecalsEnabled_Parms AreDynamicDecalsEnabled_Parms;

	pFnAreDynamicDecalsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreDynamicDecalsEnabled, &AreDynamicDecalsEnabled_Parms, NULL );

	pFnAreDynamicDecalsEnabled->FunctionFlags |= 0x400;

	return AreDynamicDecalsEnabled_Parms.ReturnValue;
};

// Function Engine.FogVolumeDensityComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UFogVolumeDensityComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 19503 ];

	UFogVolumeDensityComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityInfo.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AFogVolumeDensityInfo::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19518 ];

	AFogVolumeDensityInfo_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFogVolumeDensityInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19516 ];

	AFogVolumeDensityInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFogVolumeDensityInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19515 ];

	AFogVolumeDensityInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FracturedBaseComponent.GetNumVisibleFragments
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedBaseComponent::GetNumVisibleFragments ( )
{
	static UFunction* pFnGetNumVisibleFragments = NULL;

	if ( ! pFnGetNumVisibleFragments )
		pFnGetNumVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 19739 ];

	UFracturedBaseComponent_execGetNumVisibleFragments_Parms GetNumVisibleFragments_Parms;

	pFnGetNumVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumVisibleFragments, &GetNumVisibleFragments_Parms, NULL );

	pFnGetNumVisibleFragments->FunctionFlags |= 0x400;

	return GetNumVisibleFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.GetNumFragments
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedBaseComponent::GetNumFragments ( )
{
	static UFunction* pFnGetNumFragments = NULL;

	if ( ! pFnGetNumFragments )
		pFnGetNumFragments = (UFunction*) UObject::GObjObjects()->Data[ 19737 ];

	UFracturedBaseComponent_execGetNumFragments_Parms GetNumFragments_Parms;

	pFnGetNumFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumFragments, &GetNumFragments_Parms, NULL );

	pFnGetNumFragments->FunctionFlags |= 0x400;

	return GetNumFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.IsFragmentVisible
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedBaseComponent::IsFragmentVisible ( int FragmentIndex )
{
	static UFunction* pFnIsFragmentVisible = NULL;

	if ( ! pFnIsFragmentVisible )
		pFnIsFragmentVisible = (UFunction*) UObject::GObjObjects()->Data[ 19734 ];

	UFracturedBaseComponent_execIsFragmentVisible_Parms IsFragmentVisible_Parms;
	IsFragmentVisible_Parms.FragmentIndex = FragmentIndex;

	pFnIsFragmentVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFragmentVisible, &IsFragmentVisible_Parms, NULL );

	pFnIsFragmentVisible->FunctionFlags |= 0x400;

	return IsFragmentVisible_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.GetVisibleFragments
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

TArray< unsigned char > UFracturedBaseComponent::GetVisibleFragments ( )
{
	static UFunction* pFnGetVisibleFragments = NULL;

	if ( ! pFnGetVisibleFragments )
		pFnGetVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 19731 ];

	UFracturedBaseComponent_execGetVisibleFragments_Parms GetVisibleFragments_Parms;

	pFnGetVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVisibleFragments, &GetVisibleFragments_Parms, NULL );

	pFnGetVisibleFragments->FunctionFlags |= 0x400;

	return GetVisibleFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.SetStaticMesh
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )

bool UFracturedBaseComponent::SetStaticMesh ( class UStaticMesh* NewMesh )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 19728 ];

	UFracturedBaseComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          RBStrength                     ( CPF_Parm )
// unsigned long                  bWantPhysChunksAndParticles    ( CPF_Parm )

void AFracturedStaticMeshActor::eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles )
{
	static UFunction* pFnBreakOffPartsInRadius = NULL;

	if ( ! pFnBreakOffPartsInRadius )
		pFnBreakOffPartsInRadius = (UFunction*) UObject::GObjObjects()->Data[ 19897 ];

	AFracturedStaticMeshActor_eventBreakOffPartsInRadius_Parms BreakOffPartsInRadius_Parms;
	memcpy ( &BreakOffPartsInRadius_Parms.Origin, &Origin, 0xC );
	BreakOffPartsInRadius_Parms.Radius = Radius;
	BreakOffPartsInRadius_Parms.RBStrength = RBStrength;
	BreakOffPartsInRadius_Parms.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	pFnBreakOffPartsInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakOffPartsInRadius, &BreakOffPartsInRadius_Parms, NULL );

	pFnBreakOffPartsInRadius->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.Explode
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventExplode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 19889 ];

	AFracturedStaticMeshActor_eventExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.TakeDamage
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFracturedStaticMeshActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 19863 ];

	AFracturedStaticMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// class APawn*                   EffectInstigator               ( CPF_Parm )
// unsigned char                  bWantPhysChunksAndParticles    ( CPF_Parm | CPF_OutParm )

bool AFracturedStaticMeshActor::FractureEffectIsRelevant ( unsigned long bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles )
{
	static UFunction* pFnFractureEffectIsRelevant = NULL;

	if ( ! pFnFractureEffectIsRelevant )
		pFnFractureEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 19854 ];

	AFracturedStaticMeshActor_execFractureEffectIsRelevant_Parms FractureEffectIsRelevant_Parms;
	FractureEffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	FractureEffectIsRelevant_Parms.EffectInstigator = EffectInstigator;

	this->ProcessEvent ( pFnFractureEffectIsRelevant, &FractureEffectIsRelevant_Parms, NULL );

	if ( bWantPhysChunksAndParticles )
		*bWantPhysChunksAndParticles = FractureEffectIsRelevant_Parms.bWantPhysChunksAndParticles;

	return FractureEffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  dmgType                        ( CPF_Parm )

bool AFracturedStaticMeshActor::IsFracturedByDamageType ( class UClass* dmgType )
{
	static UFunction* pFnIsFracturedByDamageType = NULL;

	if ( ! pFnIsFracturedByDamageType )
		pFnIsFracturedByDamageType = (UFunction*) UObject::GObjObjects()->Data[ 19850 ];

	AFracturedStaticMeshActor_execIsFracturedByDamageType_Parms IsFracturedByDamageType_Parms;
	IsFracturedByDamageType_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnIsFracturedByDamageType, &IsFracturedByDamageType_Parms, NULL );

	return IsFracturedByDamageType_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.SpawnDeferredParts
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AFracturedStaticMeshActor::eventSpawnDeferredParts ( )
{
	static UFunction* pFnSpawnDeferredParts = NULL;

	if ( ! pFnSpawnDeferredParts )
		pFnSpawnDeferredParts = (UFunction*) UObject::GObjObjects()->Data[ 19848 ];

	AFracturedStaticMeshActor_eventSpawnDeferredParts_Parms SpawnDeferredParts_Parms;

	pFnSpawnDeferredParts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDeferredParts, &SpawnDeferredParts_Parms, NULL );

	pFnSpawnDeferredParts->FunctionFlags |= 0x400;

	return SpawnDeferredParts_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
// [0x00420D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// TArray< int >                  IgnoreFrags                    ( CPF_Parm )
// struct FVector                 ChunkDir                       ( CPF_Parm )
// TArray< class AFracturedStaticMeshPart* > DisableCollWithPart            ( CPF_Parm )
// unsigned long                  bWantPhysChunks                ( CPF_Parm )
// TArray< unsigned char >        FragmentVis                    ( CPF_Parm | CPF_OutParm )

void AFracturedStaticMeshActor::eventBreakOffIsolatedIslands ( TArray< int > IgnoreFrags, struct FVector ChunkDir, TArray< class AFracturedStaticMeshPart* > DisableCollWithPart, unsigned long bWantPhysChunks, TArray< unsigned char >* FragmentVis )
{
	static UFunction* pFnBreakOffIsolatedIslands = NULL;

	if ( ! pFnBreakOffIsolatedIslands )
		pFnBreakOffIsolatedIslands = (UFunction*) UObject::GObjObjects()->Data[ 19839 ];

	AFracturedStaticMeshActor_eventBreakOffIsolatedIslands_Parms BreakOffIsolatedIslands_Parms;
	memcpy ( &BreakOffIsolatedIslands_Parms.IgnoreFrags, &IgnoreFrags, 0xC );
	memcpy ( &BreakOffIsolatedIslands_Parms.ChunkDir, &ChunkDir, 0xC );
	memcpy ( &BreakOffIsolatedIslands_Parms.DisableCollWithPart, &DisableCollWithPart, 0xC );
	BreakOffIsolatedIslands_Parms.bWantPhysChunks = bWantPhysChunks;

	pFnBreakOffIsolatedIslands->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakOffIsolatedIslands, &BreakOffIsolatedIslands_Parms, NULL );

	pFnBreakOffIsolatedIslands->FunctionFlags |= 0x400;

	if ( FragmentVis )
		memcpy ( FragmentVis, &BreakOffIsolatedIslands_Parms.FragmentVis, 0xC );
};

// Function Engine.FracturedStaticMeshActor.ResetHealth
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventResetHealth ( )
{
	static UFunction* pFnResetHealth = NULL;

	if ( ! pFnResetHealth )
		pFnResetHealth = (UFunction*) UObject::GObjObjects()->Data[ 19833 ];

	AFracturedStaticMeshActor_eventResetHealth_Parms ResetHealth_Parms;

	this->ProcessEvent ( pFnResetHealth, &ResetHealth_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19831 ];

	AFracturedStaticMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.GetFracturedMeshPhysMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* AFracturedStaticMeshActor::GetFracturedMeshPhysMaterial ( )
{
	static UFunction* pFnGetFracturedMeshPhysMaterial = NULL;

	if ( ! pFnGetFracturedMeshPhysMaterial )
		pFnGetFracturedMeshPhysMaterial = (UFunction*) UObject::GObjObjects()->Data[ 19829 ];

	AFracturedStaticMeshActor_execGetFracturedMeshPhysMaterial_Parms GetFracturedMeshPhysMaterial_Parms;

	pFnGetFracturedMeshPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFracturedMeshPhysMaterial, &GetFracturedMeshPhysMaterial_Parms, NULL );

	pFnGetFracturedMeshPhysMaterial->FunctionFlags |= 0x400;

	return GetFracturedMeshPhysMaterial_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.RecreatePhysState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AFracturedStaticMeshActor::RecreatePhysState ( )
{
	static UFunction* pFnRecreatePhysState = NULL;

	if ( ! pFnRecreatePhysState )
		pFnRecreatePhysState = (UFunction*) UObject::GObjObjects()->Data[ 19828 ];

	AFracturedStaticMeshActor_execRecreatePhysState_Parms RecreatePhysState_Parms;

	pFnRecreatePhysState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecreatePhysState, &RecreatePhysState_Parms, NULL );

	pFnRecreatePhysState->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.SpawnPartMulti
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< int >                  ChunkIndices                   ( CPF_Parm )
// struct FVector                 InitialVel                     ( CPF_Parm )
// struct FVector                 InitialAngVel                  ( CPF_Parm )
// float                          RelativeScale                  ( CPF_Parm )
// unsigned long                  bExplosion                     ( CPF_Parm )

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti ( TArray< int > ChunkIndices, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion )
{
	static UFunction* pFnSpawnPartMulti = NULL;

	if ( ! pFnSpawnPartMulti )
		pFnSpawnPartMulti = (UFunction*) UObject::GObjObjects()->Data[ 19820 ];

	AFracturedStaticMeshActor_execSpawnPartMulti_Parms SpawnPartMulti_Parms;
	memcpy ( &SpawnPartMulti_Parms.ChunkIndices, &ChunkIndices, 0xC );
	memcpy ( &SpawnPartMulti_Parms.InitialVel, &InitialVel, 0xC );
	memcpy ( &SpawnPartMulti_Parms.InitialAngVel, &InitialAngVel, 0xC );
	SpawnPartMulti_Parms.RelativeScale = RelativeScale;
	SpawnPartMulti_Parms.bExplosion = bExplosion;

	pFnSpawnPartMulti->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPartMulti, &SpawnPartMulti_Parms, NULL );

	pFnSpawnPartMulti->FunctionFlags |= 0x400;

	return SpawnPartMulti_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.SpawnPart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChunkIndex                     ( CPF_Parm )
// struct FVector                 InitialVel                     ( CPF_Parm )
// struct FVector                 InitialAngVel                  ( CPF_Parm )
// float                          RelativeScale                  ( CPF_Parm )
// unsigned long                  bExplosion                     ( CPF_Parm )

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart ( int ChunkIndex, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion )
{
	static UFunction* pFnSpawnPart = NULL;

	if ( ! pFnSpawnPart )
		pFnSpawnPart = (UFunction*) UObject::GObjObjects()->Data[ 19813 ];

	AFracturedStaticMeshActor_execSpawnPart_Parms SpawnPart_Parms;
	SpawnPart_Parms.ChunkIndex = ChunkIndex;
	memcpy ( &SpawnPart_Parms.InitialVel, &InitialVel, 0xC );
	memcpy ( &SpawnPart_Parms.InitialAngVel, &InitialAngVel, 0xC );
	SpawnPart_Parms.RelativeScale = RelativeScale;
	SpawnPart_Parms.bExplosion = bExplosion;

	pFnSpawnPart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPart, &SpawnPart_Parms, NULL );

	pFnSpawnPart->FunctionFlags |= 0x400;

	return SpawnPart_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// TArray< struct FFragmentGroup > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< int >                  IgnoreFragments                ( CPF_Parm )
// float                          MinConnectionArea              ( CPF_Parm )

TArray< struct FFragmentGroup > UFracturedStaticMeshComponent::GetFragmentGroups ( TArray< int > IgnoreFragments, float MinConnectionArea )
{
	static UFunction* pFnGetFragmentGroups = NULL;

	if ( ! pFnGetFragmentGroups )
		pFnGetFragmentGroups = (UFunction*) UObject::GObjObjects()->Data[ 19784 ];

	UFracturedStaticMeshComponent_execGetFragmentGroups_Parms GetFragmentGroups_Parms;
	memcpy ( &GetFragmentGroups_Parms.IgnoreFragments, &IgnoreFragments, 0xC );
	GetFragmentGroups_Parms.MinConnectionArea = MinConnectionArea;

	pFnGetFragmentGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentGroups, &GetFragmentGroups_Parms, NULL );

	pFnGetFragmentGroups->FunctionFlags |= 0x400;

	return GetFragmentGroups_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedStaticMeshComponent::GetCoreFragmentIndex ( )
{
	static UFunction* pFnGetCoreFragmentIndex = NULL;

	if ( ! pFnGetCoreFragmentIndex )
		pFnGetCoreFragmentIndex = (UFunction*) UObject::GObjObjects()->Data[ 19782 ];

	UFracturedStaticMeshComponent_execGetCoreFragmentIndex_Parms GetCoreFragmentIndex_Parms;

	pFnGetCoreFragmentIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCoreFragmentIndex, &GetCoreFragmentIndex_Parms, NULL );

	pFnGetCoreFragmentIndex->FunctionFlags |= 0x400;

	return GetCoreFragmentIndex_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal ( int FragmentIndex )
{
	static UFunction* pFnGetFragmentAverageExteriorNormal = NULL;

	if ( ! pFnGetFragmentAverageExteriorNormal )
		pFnGetFragmentAverageExteriorNormal = (UFunction*) UObject::GObjObjects()->Data[ 19779 ];

	UFracturedStaticMeshComponent_execGetFragmentAverageExteriorNormal_Parms GetFragmentAverageExteriorNormal_Parms;
	GetFragmentAverageExteriorNormal_Parms.FragmentIndex = FragmentIndex;

	pFnGetFragmentAverageExteriorNormal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentAverageExteriorNormal, &GetFragmentAverageExteriorNormal_Parms, NULL );

	pFnGetFragmentAverageExteriorNormal->FunctionFlags |= 0x400;

	return GetFragmentAverageExteriorNormal_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FBox                    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

struct FBox UFracturedStaticMeshComponent::GetFragmentBox ( int FragmentIndex )
{
	static UFunction* pFnGetFragmentBox = NULL;

	if ( ! pFnGetFragmentBox )
		pFnGetFragmentBox = (UFunction*) UObject::GObjObjects()->Data[ 19776 ];

	UFracturedStaticMeshComponent_execGetFragmentBox_Parms GetFragmentBox_Parms;
	GetFragmentBox_Parms.FragmentIndex = FragmentIndex;

	pFnGetFragmentBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentBox, &GetFragmentBox_Parms, NULL );

	pFnGetFragmentBox->FunctionFlags |= 0x400;

	return GetFragmentBox_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsNoPhysFragment ( int FragmentIndex )
{
	static UFunction* pFnIsNoPhysFragment = NULL;

	if ( ! pFnIsNoPhysFragment )
		pFnIsNoPhysFragment = (UFunction*) UObject::GObjObjects()->Data[ 19773 ];

	UFracturedStaticMeshComponent_execIsNoPhysFragment_Parms IsNoPhysFragment_Parms;
	IsNoPhysFragment_Parms.FragmentIndex = FragmentIndex;

	pFnIsNoPhysFragment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNoPhysFragment, &IsNoPhysFragment_Parms, NULL );

	pFnIsNoPhysFragment->FunctionFlags |= 0x400;

	return IsNoPhysFragment_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsRootFragment
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsRootFragment ( int FragmentIndex )
{
	static UFunction* pFnIsRootFragment = NULL;

	if ( ! pFnIsRootFragment )
		pFnIsRootFragment = (UFunction*) UObject::GObjObjects()->Data[ 19770 ];

	UFracturedStaticMeshComponent_execIsRootFragment_Parms IsRootFragment_Parms;
	IsRootFragment_Parms.FragmentIndex = FragmentIndex;

	pFnIsRootFragment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRootFragment, &IsRootFragment_Parms, NULL );

	pFnIsRootFragment->FunctionFlags |= 0x400;

	return IsRootFragment_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsFragmentDestroyable ( int FragmentIndex )
{
	static UFunction* pFnIsFragmentDestroyable = NULL;

	if ( ! pFnIsFragmentDestroyable )
		pFnIsFragmentDestroyable = (UFunction*) UObject::GObjObjects()->Data[ 19767 ];

	UFracturedStaticMeshComponent_execIsFragmentDestroyable_Parms IsFragmentDestroyable_Parms;
	IsFragmentDestroyable_Parms.FragmentIndex = FragmentIndex;

	pFnIsFragmentDestroyable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFragmentDestroyable, &IsFragmentDestroyable_Parms, NULL );

	pFnIsFragmentDestroyable->FunctionFlags |= 0x400;

	return IsFragmentDestroyable_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        VisibilityFactors              ( CPF_Parm )

void UFracturedStaticMeshComponent::SetVisibleFragments ( TArray< unsigned char > VisibilityFactors )
{
	static UFunction* pFnSetVisibleFragments = NULL;

	if ( ! pFnSetVisibleFragments )
		pFnSetVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 19764 ];

	UFracturedStaticMeshComponent_execSetVisibleFragments_Parms SetVisibleFragments_Parms;
	memcpy ( &SetVisibleFragments_Parms.VisibilityFactors, &VisibilityFactors, 0xC );

	pFnSetVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibleFragments, &SetVisibleFragments_Parms, NULL );

	pFnSetVisibleFragments->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshPart.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AFracturedStaticMeshPart::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 19929 ];

	AFracturedStaticMeshPart_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.TryToCleanUp
// [0x00020102] 
// Parameters infos:

void AFracturedStaticMeshPart::TryToCleanUp ( )
{
	static UFunction* pFnTryToCleanUp = NULL;

	if ( ! pFnTryToCleanUp )
		pFnTryToCleanUp = (UFunction*) UObject::GObjObjects()->Data[ 19928 ];

	AFracturedStaticMeshPart_execTryToCleanUp_Parms TryToCleanUp_Parms;

	this->ProcessEvent ( pFnTryToCleanUp, &TryToCleanUp_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFracturedStaticMeshPart::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 19920 ];

	AFracturedStaticMeshPart_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.RecyclePart
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAddToFreePool                 ( CPF_Parm )

void AFracturedStaticMeshPart::RecyclePart ( unsigned long bAddToFreePool )
{
	static UFunction* pFnRecyclePart = NULL;

	if ( ! pFnRecyclePart )
		pFnRecyclePart = (UFunction*) UObject::GObjObjects()->Data[ 19918 ];

	AFracturedStaticMeshPart_execRecyclePart_Parms RecyclePart_Parms;
	RecyclePart_Parms.bAddToFreePool = bAddToFreePool;

	pFnRecyclePart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecyclePart, &RecyclePart_Parms, NULL );

	pFnRecyclePart->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshPart.Initialize
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AFracturedStaticMeshPart::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 19917 ];

	AFracturedStaticMeshPart_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function Engine.FractureManager.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AFractureManager::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 19979 ];

	AFractureManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.FractureManager.SpawnDeferredParts
// [0x00020102] 
// Parameters infos:

void AFractureManager::SpawnDeferredParts ( )
{
	static UFunction* pFnSpawnDeferredParts = NULL;

	if ( ! pFnSpawnDeferredParts )
		pFnSpawnDeferredParts = (UFunction*) UObject::GObjObjects()->Data[ 19977 ];

	AFractureManager_execSpawnDeferredParts_Parms SpawnDeferredParts_Parms;

	this->ProcessEvent ( pFnSpawnDeferredParts, &SpawnDeferredParts_Parms, NULL );
};

// Function Engine.FractureManager.ReturnPartActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AFracturedStaticMeshPart* Part                           ( CPF_Parm )

void AFractureManager::eventReturnPartActor ( class AFracturedStaticMeshPart* Part )
{
	static UFunction* pFnReturnPartActor = NULL;

	if ( ! pFnReturnPartActor )
		pFnReturnPartActor = (UFunction*) UObject::GObjObjects()->Data[ 19975 ];

	AFractureManager_eventReturnPartActor_Parms ReturnPartActor_Parms;
	ReturnPartActor_Parms.Part = Part;

	this->ProcessEvent ( pFnReturnPartActor, &ReturnPartActor_Parms, NULL );
};

// Function Engine.FractureManager.SpawnPartActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AFracturedStaticMeshActor* Parent                         ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class AFracturedStaticMeshPart* AFractureManager::eventSpawnPartActor ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnSpawnPartActor = NULL;

	if ( ! pFnSpawnPartActor )
		pFnSpawnPartActor = (UFunction*) UObject::GObjObjects()->Data[ 19969 ];

	AFractureManager_eventSpawnPartActor_Parms SpawnPartActor_Parms;
	SpawnPartActor_Parms.Parent = Parent;
	memcpy ( &SpawnPartActor_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnPartActor_Parms.SpawnRotation, &SpawnRotation, 0xC );

	this->ProcessEvent ( pFnSpawnPartActor, &SpawnPartActor_Parms, NULL );

	return SpawnPartActor_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMPart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AFracturedStaticMeshActor* Parent                         ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class AFracturedStaticMeshPart* AFractureManager::GetFSMPart ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnGetFSMPart = NULL;

	if ( ! pFnGetFSMPart )
		pFnGetFSMPart = (UFunction*) UObject::GObjObjects()->Data[ 19964 ];

	AFractureManager_execGetFSMPart_Parms GetFSMPart_Parms;
	GetFSMPart_Parms.Parent = Parent;
	memcpy ( &GetFSMPart_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &GetFSMPart_Parms.SpawnRotation, &SpawnRotation, 0xC );

	pFnGetFSMPart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMPart, &GetFSMPart_Parms, NULL );

	pFnGetFSMPart->FunctionFlags |= 0x400;

	return GetFSMPart_Parms.ReturnValue;
};

// Function Engine.FractureManager.CreateFSMParts
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AFractureManager::CreateFSMParts ( )
{
	static UFunction* pFnCreateFSMParts = NULL;

	if ( ! pFnCreateFSMParts )
		pFnCreateFSMParts = (UFunction*) UObject::GObjObjects()->Data[ 19963 ];

	AFractureManager_execCreateFSMParts_Parms CreateFSMParts_Parms;

	pFnCreateFSMParts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateFSMParts, &CreateFSMParts_Parms, NULL );

	pFnCreateFSMParts->FunctionFlags |= 0x400;
};

// Function Engine.FractureManager.CleanUpFSMParts
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AFractureManager::CleanUpFSMParts ( )
{
	static UFunction* pFnCleanUpFSMParts = NULL;

	if ( ! pFnCleanUpFSMParts )
		pFnCleanUpFSMParts = (UFunction*) UObject::GObjObjects()->Data[ 19960 ];

	AFractureManager_execCleanUpFSMParts_Parms CleanUpFSMParts_Parms;

	this->ProcessEvent ( pFnCleanUpFSMParts, &CleanUpFSMParts_Parms, NULL );
};

// Function Engine.FractureManager.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFractureManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 19959 ];

	AFractureManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FractureManager.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFractureManager::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19958 ];

	AFractureManager_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.FractureManager.GetFSMFractureCullDistanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMFractureCullDistanceScale ( )
{
	static UFunction* pFnGetFSMFractureCullDistanceScale = NULL;

	if ( ! pFnGetFSMFractureCullDistanceScale )
		pFnGetFSMFractureCullDistanceScale = (UFunction*) UObject::GObjObjects()->Data[ 19956 ];

	AFractureManager_execGetFSMFractureCullDistanceScale_Parms GetFSMFractureCullDistanceScale_Parms;

	pFnGetFSMFractureCullDistanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMFractureCullDistanceScale, &GetFSMFractureCullDistanceScale_Parms, NULL );

	pFnGetFSMFractureCullDistanceScale->FunctionFlags |= 0x400;

	return GetFSMFractureCullDistanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMRadialSpawnChanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMRadialSpawnChanceScale ( )
{
	static UFunction* pFnGetFSMRadialSpawnChanceScale = NULL;

	if ( ! pFnGetFSMRadialSpawnChanceScale )
		pFnGetFSMRadialSpawnChanceScale = (UFunction*) UObject::GObjObjects()->Data[ 19954 ];

	AFractureManager_execGetFSMRadialSpawnChanceScale_Parms GetFSMRadialSpawnChanceScale_Parms;

	pFnGetFSMRadialSpawnChanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMRadialSpawnChanceScale, &GetFSMRadialSpawnChanceScale_Parms, NULL );

	pFnGetFSMRadialSpawnChanceScale->FunctionFlags |= 0x400;

	return GetFSMRadialSpawnChanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMDirectSpawnChanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMDirectSpawnChanceScale ( )
{
	static UFunction* pFnGetFSMDirectSpawnChanceScale = NULL;

	if ( ! pFnGetFSMDirectSpawnChanceScale )
		pFnGetFSMDirectSpawnChanceScale = (UFunction*) UObject::GObjObjects()->Data[ 19952 ];

	AFractureManager_execGetFSMDirectSpawnChanceScale_Parms GetFSMDirectSpawnChanceScale_Parms;

	pFnGetFSMDirectSpawnChanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMDirectSpawnChanceScale, &GetFSMDirectSpawnChanceScale_Parms, NULL );

	pFnGetFSMDirectSpawnChanceScale->FunctionFlags |= 0x400;

	return GetFSMDirectSpawnChanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetNumFSMPartsScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetNumFSMPartsScale ( )
{
	static UFunction* pFnGetNumFSMPartsScale = NULL;

	if ( ! pFnGetNumFSMPartsScale )
		pFnGetNumFSMPartsScale = (UFunction*) UObject::GObjObjects()->Data[ 19950 ];

	AFractureManager_execGetNumFSMPartsScale_Parms GetNumFSMPartsScale_Parms;

	pFnGetNumFSMPartsScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumFSMPartsScale, &GetNumFSMPartsScale_Parms, NULL );

	pFnGetNumFSMPartsScale->FunctionFlags |= 0x400;

	return GetNumFSMPartsScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.SpawnChunkDestroyEffect
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         Effect                         ( CPF_Parm )
// struct FBox                    ChunkBox                       ( CPF_Parm )
// struct FVector                 ChunkDir                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AFractureManager::eventSpawnChunkDestroyEffect ( class UParticleSystem* Effect, struct FBox ChunkBox, struct FVector ChunkDir, float Scale )
{
	static UFunction* pFnSpawnChunkDestroyEffect = NULL;

	if ( ! pFnSpawnChunkDestroyEffect )
		pFnSpawnChunkDestroyEffect = (UFunction*) UObject::GObjObjects()->Data[ 19943 ];

	AFractureManager_eventSpawnChunkDestroyEffect_Parms SpawnChunkDestroyEffect_Parms;
	SpawnChunkDestroyEffect_Parms.Effect = Effect;
	memcpy ( &SpawnChunkDestroyEffect_Parms.ChunkBox, &ChunkBox, 0x1C );
	memcpy ( &SpawnChunkDestroyEffect_Parms.ChunkDir, &ChunkDir, 0xC );
	SpawnChunkDestroyEffect_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSpawnChunkDestroyEffect, &SpawnChunkDestroyEffect_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.Explode
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APhysXDestructibleActor::eventExplode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 26691 ];

	APhysXDestructibleActor_eventExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.TakeRadiusDamage
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void APhysXDestructibleActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 26682 ];

	APhysXDestructibleActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	pFnTakeRadiusDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );

	pFnTakeRadiusDamage->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleActor.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void APhysXDestructibleActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 26673 ];

	APhysXDestructibleActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.NativeTakeDamage
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void APhysXDestructibleActor::NativeTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnNativeTakeDamage = NULL;

	if ( ! pFnNativeTakeDamage )
		pFnNativeTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 26665 ];

	APhysXDestructibleActor_execNativeTakeDamage_Parms NativeTakeDamage_Parms;
	NativeTakeDamage_Parms.Damage = Damage;
	NativeTakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &NativeTakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &NativeTakeDamage_Parms.Momentum, &Momentum, 0xC );
	NativeTakeDamage_Parms.DamageType = DamageType;
	memcpy ( &NativeTakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	NativeTakeDamage_Parms.DamageCauser = DamageCauser;

	pFnNativeTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeTakeDamage, &NativeTakeDamage_Parms, NULL );

	pFnNativeTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleActor.NativeSpawnEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXDestructibleActor::NativeSpawnEffects ( )
{
	static UFunction* pFnNativeSpawnEffects = NULL;

	if ( ! pFnNativeSpawnEffects )
		pFnNativeSpawnEffects = (UFunction*) UObject::GObjObjects()->Data[ 26664 ];

	APhysXDestructibleActor_execNativeSpawnEffects_Parms NativeSpawnEffects_Parms;

	pFnNativeSpawnEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeSpawnEffects, &NativeSpawnEffects_Parms, NULL );

	pFnNativeSpawnEffects->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleActor.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APhysXDestructibleActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 26663 ];

	APhysXDestructibleActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysXDestructibleActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26662 ];

	APhysXDestructibleActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.SpawnEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysXDestructibleActor::eventSpawnEffects ( )
{
	static UFunction* pFnSpawnEffects = NULL;

	if ( ! pFnSpawnEffects )
		pFnSpawnEffects = (UFunction*) UObject::GObjObjects()->Data[ 26657 ];

	APhysXDestructibleActor_eventSpawnEffects_Parms SpawnEffects_Parms;

	this->ProcessEvent ( pFnSpawnEffects, &SpawnEffects_Parms, NULL );
};

// Function Engine.PhysXDestructibleActor.Term
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXDestructibleActor::Term ( )
{
	static UFunction* pFnTerm = NULL;

	if ( ! pFnTerm )
		pFnTerm = (UFunction*) UObject::GObjObjects()->Data[ 26656 ];

	APhysXDestructibleActor_execTerm_Parms Term_Parms;

	pFnTerm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTerm, &Term_Parms, NULL );

	pFnTerm->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleActor.Init
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXDestructibleActor::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 26655 ];

	APhysXDestructibleActor_execInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructiblePart.TakeRadiusDamage
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void APhysXDestructiblePart::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 26741 ];

	APhysXDestructiblePart_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	pFnTakeRadiusDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );

	pFnTakeRadiusDamage->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructiblePart.TakeDamage
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void APhysXDestructiblePart::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 26733 ];

	APhysXDestructiblePart_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	pFnTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );

	pFnTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleStructure.GetChunkCentroid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChunkIndex                     ( CPF_Parm )

struct FVector UPhysXDestructibleStructure::GetChunkCentroid ( int ChunkIndex )
{
	static UFunction* pFnGetChunkCentroid = NULL;

	if ( ! pFnGetChunkCentroid )
		pFnGetChunkCentroid = (UFunction*) UObject::GObjObjects()->Data[ 26838 ];

	UPhysXDestructibleStructure_execGetChunkCentroid_Parms GetChunkCentroid_Parms;
	GetChunkCentroid_Parms.ChunkIndex = ChunkIndex;

	pFnGetChunkCentroid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetChunkCentroid, &GetChunkCentroid_Parms, NULL );

	pFnGetChunkCentroid->FunctionFlags |= 0x400;

	return GetChunkCentroid_Parms.ReturnValue;
};

// Function Engine.PhysXDestructibleStructure.GetChunkMatrix
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChunkIndex                     ( CPF_Parm )

struct FMatrix UPhysXDestructibleStructure::GetChunkMatrix ( int ChunkIndex )
{
	static UFunction* pFnGetChunkMatrix = NULL;

	if ( ! pFnGetChunkMatrix )
		pFnGetChunkMatrix = (UFunction*) UObject::GObjObjects()->Data[ 26835 ];

	UPhysXDestructibleStructure_execGetChunkMatrix_Parms GetChunkMatrix_Parms;
	GetChunkMatrix_Parms.ChunkIndex = ChunkIndex;

	pFnGetChunkMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetChunkMatrix, &GetChunkMatrix_Parms, NULL );

	pFnGetChunkMatrix->FunctionFlags |= 0x400;

	return GetChunkMatrix_Parms.ReturnValue;
};

// Function Engine.PhysXDestructibleStructure.CrumbleChunk
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChunkIndex                     ( CPF_Parm )

void UPhysXDestructibleStructure::CrumbleChunk ( int ChunkIndex )
{
	static UFunction* pFnCrumbleChunk = NULL;

	if ( ! pFnCrumbleChunk )
		pFnCrumbleChunk = (UFunction*) UObject::GObjObjects()->Data[ 26833 ];

	UPhysXDestructibleStructure_execCrumbleChunk_Parms CrumbleChunk_Parms;
	CrumbleChunk_Parms.ChunkIndex = ChunkIndex;

	pFnCrumbleChunk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCrumbleChunk, &CrumbleChunk_Parms, NULL );

	pFnCrumbleChunk->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleStructure.FractureChunk
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChunkIndex                     ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 Impulse                        ( CPF_Parm )
// unsigned long                  bInheritRootVel                ( CPF_Parm )

void UPhysXDestructibleStructure::FractureChunk ( int ChunkIndex, struct FVector Point, struct FVector Impulse, unsigned long bInheritRootVel )
{
	static UFunction* pFnFractureChunk = NULL;

	if ( ! pFnFractureChunk )
		pFnFractureChunk = (UFunction*) UObject::GObjObjects()->Data[ 26828 ];

	UPhysXDestructibleStructure_execFractureChunk_Parms FractureChunk_Parms;
	FractureChunk_Parms.ChunkIndex = ChunkIndex;
	memcpy ( &FractureChunk_Parms.Point, &Point, 0xC );
	memcpy ( &FractureChunk_Parms.Impulse, &Impulse, 0xC );
	FractureChunk_Parms.bInheritRootVel = bInheritRootVel;

	pFnFractureChunk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFractureChunk, &FractureChunk_Parms, NULL );

	pFnFractureChunk->FunctionFlags |= 0x400;
};

// Function Engine.PhysXDestructibleStructure.DamageChunk
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChunkIndex                     ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// TArray< int >                  Output                         ( CPF_Parm | CPF_OutParm )

bool UPhysXDestructibleStructure::DamageChunk ( int ChunkIndex, struct FVector Point, float BaseDamage, float Radius, unsigned long bFullDamage, TArray< int >* Output )
{
	static UFunction* pFnDamageChunk = NULL;

	if ( ! pFnDamageChunk )
		pFnDamageChunk = (UFunction*) UObject::GObjObjects()->Data[ 26819 ];

	UPhysXDestructibleStructure_execDamageChunk_Parms DamageChunk_Parms;
	DamageChunk_Parms.ChunkIndex = ChunkIndex;
	memcpy ( &DamageChunk_Parms.Point, &Point, 0xC );
	DamageChunk_Parms.BaseDamage = BaseDamage;
	DamageChunk_Parms.Radius = Radius;
	DamageChunk_Parms.bFullDamage = bFullDamage;

	pFnDamageChunk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDamageChunk, &DamageChunk_Parms, NULL );

	pFnDamageChunk->FunctionFlags |= 0x400;

	if ( Output )
		memcpy ( Output, &DamageChunk_Parms.Output, 0xC );

	return DamageChunk_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMaterialInstance::IsInMapOrTransientPackage ( )
{
	static UFunction* pFnIsInMapOrTransientPackage = NULL;

	if ( ! pFnIsInMapOrTransientPackage )
		pFnIsInMapOrTransientPackage = (UFunction*) UObject::GObjObjects()->Data[ 22514 ];

	UMaterialInstance_execIsInMapOrTransientPackage_Parms IsInMapOrTransientPackage_Parms;

	pFnIsInMapOrTransientPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInMapOrTransientPackage, &IsInMapOrTransientPackage_Parms, NULL );

	pFnIsInMapOrTransientPackage->FunctionFlags |= 0x400;

	return IsInMapOrTransientPackage_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstance::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 22513 ];

	UMaterialInstance_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstance::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22509 ];

	UMaterialInstance_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstance::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22506 ];

	UMaterialInstance_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Parm )

void UMaterialInstance::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22503 ];

	UMaterialInstance_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetScalarCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstance::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22500 ];

	UMaterialInstance_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstance::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22497 ];

	UMaterialInstance_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstance::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 22495 ];

	UMaterialInstance_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceConstant::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 22560 ];

	UMaterialInstanceConstant_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceConstant::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22556 ];

	UMaterialInstanceConstant_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetMaterialInstTagName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   TagName                        ( CPF_Parm )

void UMaterialInstanceConstant::SetMaterialInstTagName ( struct FName TagName )
{
	static UFunction* pFnSetMaterialInstTagName = NULL;

	if ( ! pFnSetMaterialInstTagName )
		pFnSetMaterialInstTagName = (UFunction*) UObject::GObjObjects()->Data[ 22554 ];

	UMaterialInstanceConstant_execSetMaterialInstTagName_Parms SetMaterialInstTagName_Parms;
	memcpy ( &SetMaterialInstTagName_Parms.TagName, &TagName, 0x8 );

	pFnSetMaterialInstTagName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialInstTagName, &SetMaterialInstTagName_Parms, NULL );

	pFnSetMaterialInstTagName->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22551 ];

	UMaterialInstanceConstant_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22548 ];

	UMaterialInstanceConstant_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22545 ];

	UMaterialInstanceConstant_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceConstant::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 22543 ];

	UMaterialInstanceConstant_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceTimeVarying::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 22621 ];

	UMaterialInstanceTimeVarying_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22617 ];

	UMaterialInstanceTimeVarying_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetVectorStartTime = NULL;

	if ( ! pFnSetVectorStartTime )
		pFnSetVectorStartTime = (UFunction*) UObject::GObjObjects()->Data[ 22614 ];

	UMaterialInstanceTimeVarying_execSetVectorStartTime_Parms SetVectorStartTime_Parms;
	memcpy ( &SetVectorStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetVectorStartTime_Parms.Value = Value;

	pFnSetVectorStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorStartTime, &SetVectorStartTime_Parms, NULL );

	pFnSetVectorStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector Value )
{
	static UFunction* pFnSetVectorCurveParameterValue = NULL;

	if ( ! pFnSetVectorCurveParameterValue )
		pFnSetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22611 ];

	UMaterialInstanceTimeVarying_execSetVectorCurveParameterValue_Parms SetVectorCurveParameterValue_Parms;
	memcpy ( &SetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorCurveParameterValue, &SetVectorCurveParameterValue_Parms, NULL );

	pFnSetVectorCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22608 ];

	UMaterialInstanceTimeVarying_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22605 ];

	UMaterialInstanceTimeVarying_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetDuration ( float Value )
{
	static UFunction* pFnSetDuration = NULL;

	if ( ! pFnSetDuration )
		pFnSetDuration = (UFunction*) UObject::GObjObjects()->Data[ 22603 ];

	UMaterialInstanceTimeVarying_execSetDuration_Parms SetDuration_Parms;
	SetDuration_Parms.Value = Value;

	pFnSetDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDuration, &SetDuration_Parms, NULL );

	pFnSetDuration->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarStartTime = NULL;

	if ( ! pFnSetScalarStartTime )
		pFnSetScalarStartTime = (UFunction*) UObject::GObjObjects()->Data[ 22600 ];

	UMaterialInstanceTimeVarying_execSetScalarStartTime_Parms SetScalarStartTime_Parms;
	memcpy ( &SetScalarStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarStartTime_Parms.Value = Value;

	pFnSetScalarStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarStartTime, &SetScalarStartTime_Parms, NULL );

	pFnSetScalarStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22597 ];

	UMaterialInstanceTimeVarying_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetScalarCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 22594 ];

	UMaterialInstanceTimeVarying_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 22592 ];

	UMaterialInstanceTimeVarying_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.Emitter.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AEmitter::ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18863 ];

	AEmitter_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AEmitter::CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18861 ];

	AEmitter_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AEmitter::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 18859 ];

	AEmitter_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.Emitter.OnSetParticleSysParam
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetParticleSysParam* Action                         ( CPF_Parm )

void AEmitter::OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action )
{
	static UFunction* pFnOnSetParticleSysParam = NULL;

	if ( ! pFnOnSetParticleSysParam )
		pFnOnSetParticleSysParam = (UFunction*) UObject::GObjObjects()->Data[ 18855 ];

	AEmitter_execOnSetParticleSysParam_Parms OnSetParticleSysParam_Parms;
	OnSetParticleSysParam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetParticleSysParam, &OnSetParticleSysParam_Parms, NULL );
};

// Function Engine.Emitter.SetActorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void AEmitter::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18852 ];

	AEmitter_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetExtColorParameter
// [0x00820102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  Red                            ( CPF_Parm )
// unsigned char                  Green                          ( CPF_Parm )
// unsigned char                  Blue                           ( CPF_Parm )
// unsigned char                  Alpha                          ( CPF_Parm )

void AEmitter::SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18845 ];

	AEmitter_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetColorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void AEmitter::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18842 ];

	AEmitter_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetVectorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void AEmitter::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18839 ];

	AEmitter_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetFloatParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void AEmitter::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 18836 ];

	AEmitter_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.Emitter.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AEmitter::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18834 ];

	AEmitter_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Emitter.OnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm )

void AEmitter::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 18832 ];

	AEmitter_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.Emitter.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitter::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18830 ];

	AEmitter_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Emitter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AEmitter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18829 ];

	AEmitter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.SetTemplate
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitter::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 18826 ];

	AEmitter_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 18817 ];

	UParticleSystemComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowActive                     ( CPF_Parm )

void UParticleSystemComponent::SetActive ( unsigned long bNowActive )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = (UFunction*) UObject::GObjObjects()->Data[ 18477 ];

	UParticleSystemComponent_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bNowActive = bNowActive;

	pFnSetActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );

	pFnSetActive->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearParameter
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  ParameterType                  ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ClearParameter ( struct FName ParameterName, unsigned char ParameterType )
{
	static UFunction* pFnClearParameter = NULL;

	if ( ! pFnClearParameter )
		pFnClearParameter = (UFunction*) UObject::GObjObjects()->Data[ 18813 ];

	UParticleSystemComponent_execClearParameter_Parms ClearParameter_Parms;
	memcpy ( &ClearParameter_Parms.ParameterName, &ParameterName, 0x8 );
	ClearParameter_Parms.ParameterType = ParameterType;

	pFnClearParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameter, &ClearParameter_Parms, NULL );

	pFnClearParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetMaterialParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class UMaterialInterface*      OutMaterial                    ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial )
{
	static UFunction* pFnGetMaterialParameter = NULL;

	if ( ! pFnGetMaterialParameter )
		pFnGetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 18809 ];

	UParticleSystemComponent_execGetMaterialParameter_Parms GetMaterialParameter_Parms;
	memcpy ( &GetMaterialParameter_Parms.InName, &InName, 0x8 );

	pFnGetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterialParameter, &GetMaterialParameter_Parms, NULL );

	pFnGetMaterialParameter->FunctionFlags |= 0x400;

	if ( OutMaterial )
		*OutMaterial = GetMaterialParameter_Parms.OutMaterial;

	return GetMaterialParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetActorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class AActor*                  OutActor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetActorParameter ( struct FName InName, class AActor** OutActor )
{
	static UFunction* pFnGetActorParameter = NULL;

	if ( ! pFnGetActorParameter )
		pFnGetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18805 ];

	UParticleSystemComponent_execGetActorParameter_Parms GetActorParameter_Parms;
	memcpy ( &GetActorParameter_Parms.InName, &InName, 0x8 );

	pFnGetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorParameter, &GetActorParameter_Parms, NULL );

	pFnGetActorParameter->FunctionFlags |= 0x400;

	if ( OutActor )
		*OutActor = GetActorParameter_Parms.OutActor;

	return GetActorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetColorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FColor                  OutColor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetColorParameter ( struct FName InName, struct FColor* OutColor )
{
	static UFunction* pFnGetColorParameter = NULL;

	if ( ! pFnGetColorParameter )
		pFnGetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18801 ];

	UParticleSystemComponent_execGetColorParameter_Parms GetColorParameter_Parms;
	memcpy ( &GetColorParameter_Parms.InName, &InName, 0x8 );

	pFnGetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColorParameter, &GetColorParameter_Parms, NULL );

	pFnGetColorParameter->FunctionFlags |= 0x400;

	if ( OutColor )
		memcpy ( OutColor, &GetColorParameter_Parms.OutColor, 0x4 );

	return GetColorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetVectorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FVector                 OutVector                      ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetVectorParameter ( struct FName InName, struct FVector* OutVector )
{
	static UFunction* pFnGetVectorParameter = NULL;

	if ( ! pFnGetVectorParameter )
		pFnGetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18797 ];

	UParticleSystemComponent_execGetVectorParameter_Parms GetVectorParameter_Parms;
	memcpy ( &GetVectorParameter_Parms.InName, &InName, 0x8 );

	pFnGetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameter, &GetVectorParameter_Parms, NULL );

	pFnGetVectorParameter->FunctionFlags |= 0x400;

	if ( OutVector )
		memcpy ( OutVector, &GetVectorParameter_Parms.OutVector, 0xC );

	return GetVectorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetFloatParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// float                          OutFloat                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetFloatParameter ( struct FName InName, float* OutFloat )
{
	static UFunction* pFnGetFloatParameter = NULL;

	if ( ! pFnGetFloatParameter )
		pFnGetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 18793 ];

	UParticleSystemComponent_execGetFloatParameter_Parms GetFloatParameter_Parms;
	memcpy ( &GetFloatParameter_Parms.InName, &InName, 0x8 );

	pFnGetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatParameter, &GetFloatParameter_Parms, NULL );

	pFnGetFloatParameter->FunctionFlags |= 0x400;

	if ( OutFloat )
		*OutFloat = GetFloatParameter_Parms.OutFloat;

	return GetFloatParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetMaterialParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UMaterialInterface*      Param                          ( CPF_Parm )

void UParticleSystemComponent::SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 18790 ];

	UParticleSystemComponent_execSetMaterialParameter_Parms SetMaterialParameter_Parms;
	memcpy ( &SetMaterialParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetMaterialParameter_Parms.Param = Param;

	pFnSetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );

	pFnSetMaterialParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18787 ];

	UParticleSystemComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18784 ];

	UParticleSystemComponent_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	pFnSetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );

	pFnSetColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void UParticleSystemComponent::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 18781 ];

	UParticleSystemComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void UParticleSystemComponent::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 18778 ];

	UParticleSystemComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetEditorLODLevel ( )
{
	static UFunction* pFnGetEditorLODLevel = NULL;

	if ( ! pFnGetEditorLODLevel )
		pFnGetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 18776 ];

	UParticleSystemComponent_execGetEditorLODLevel_Parms GetEditorLODLevel_Parms;

	pFnGetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEditorLODLevel, &GetEditorLODLevel_Parms, NULL );

	pFnGetEditorLODLevel->FunctionFlags |= 0x400;

	return GetEditorLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetLODLevel ( )
{
	static UFunction* pFnGetLODLevel = NULL;

	if ( ! pFnGetLODLevel )
		pFnGetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 18774 ];

	UParticleSystemComponent_execGetLODLevel_Parms GetLODLevel_Parms;

	pFnGetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevel, &GetLODLevel_Parms, NULL );

	pFnGetLODLevel->FunctionFlags |= 0x400;

	return GetLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetEditorLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetEditorLODLevel = NULL;

	if ( ! pFnSetEditorLODLevel )
		pFnSetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 18772 ];

	UParticleSystemComponent_execSetEditorLODLevel_Parms SetEditorLODLevel_Parms;
	SetEditorLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEditorLODLevel, &SetEditorLODLevel_Parms, NULL );

	pFnSetEditorLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetLODLevel = NULL;

	if ( ! pFnSetLODLevel )
		pFnSetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 18770 ];

	UParticleSystemComponent_execSetLODLevel_Parms SetLODLevel_Parms;
	SetLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODLevel, &SetLODLevel_Parms, NULL );

	pFnSetLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ForceFadeOut
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )

void UParticleSystemComponent::ForceFadeOut ( int EmitterIndex )
{
	static UFunction* pFnForceFadeOut = NULL;

	if ( ! pFnForceFadeOut )
		pFnForceFadeOut = (UFunction*) UObject::GObjObjects()->Data[ 18768 ];

	UParticleSystemComponent_execForceFadeOut_Parms ForceFadeOut_Parms;
	ForceFadeOut_Parms.EmitterIndex = EmitterIndex;

	pFnForceFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceFadeOut, &ForceFadeOut_Parms, NULL );

	pFnForceFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamDynamicLifeTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          InLifeTime                     ( CPF_Parm )

void UParticleSystemComponent::SetBeamDynamicLifeTime ( int EmitterIndex, float InLifeTime )
{
	static UFunction* pFnSetBeamDynamicLifeTime = NULL;

	if ( ! pFnSetBeamDynamicLifeTime )
		pFnSetBeamDynamicLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 18765 ];

	UParticleSystemComponent_execSetBeamDynamicLifeTime_Parms SetBeamDynamicLifeTime_Parms;
	SetBeamDynamicLifeTime_Parms.EmitterIndex = EmitterIndex;
	SetBeamDynamicLifeTime_Parms.InLifeTime = InLifeTime;

	pFnSetBeamDynamicLifeTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamDynamicLifeTime, &SetBeamDynamicLifeTime_Parms, NULL );

	pFnSetBeamDynamicLifeTime->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamFadeOut
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          InFadeOutTime                  ( CPF_Parm )

void UParticleSystemComponent::SetBeamFadeOut ( int EmitterIndex, float InFadeOutTime )
{
	static UFunction* pFnSetBeamFadeOut = NULL;

	if ( ! pFnSetBeamFadeOut )
		pFnSetBeamFadeOut = (UFunction*) UObject::GObjObjects()->Data[ 18762 ];

	UParticleSystemComponent_execSetBeamFadeOut_Parms SetBeamFadeOut_Parms;
	SetBeamFadeOut_Parms.EmitterIndex = EmitterIndex;
	SetBeamFadeOut_Parms.InFadeOutTime = InFadeOutTime;

	pFnSetBeamFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamFadeOut, &SetBeamFadeOut_Parms, NULL );

	pFnSetBeamFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamEmitterAlpha
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewEmitterAlpha                ( CPF_Parm )

void UParticleSystemComponent::SetBeamEmitterAlpha ( int EmitterIndex, float NewEmitterAlpha )
{
	static UFunction* pFnSetBeamEmitterAlpha = NULL;

	if ( ! pFnSetBeamEmitterAlpha )
		pFnSetBeamEmitterAlpha = (UFunction*) UObject::GObjObjects()->Data[ 18759 ];

	UParticleSystemComponent_execSetBeamEmitterAlpha_Parms SetBeamEmitterAlpha_Parms;
	SetBeamEmitterAlpha_Parms.EmitterIndex = EmitterIndex;
	SetBeamEmitterAlpha_Parms.NewEmitterAlpha = NewEmitterAlpha;

	pFnSetBeamEmitterAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamEmitterAlpha, &SetBeamEmitterAlpha_Parms, NULL );

	pFnSetBeamEmitterAlpha->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetPartialRenderingTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewPartialTime                 ( CPF_Parm )

void UParticleSystemComponent::SetPartialRenderingTime ( int EmitterIndex, float NewPartialTime )
{
	static UFunction* pFnSetPartialRenderingTime = NULL;

	if ( ! pFnSetPartialRenderingTime )
		pFnSetPartialRenderingTime = (UFunction*) UObject::GObjObjects()->Data[ 18756 ];

	UParticleSystemComponent_execSetPartialRenderingTime_Parms SetPartialRenderingTime_Parms;
	SetPartialRenderingTime_Parms.EmitterIndex = EmitterIndex;
	SetPartialRenderingTime_Parms.NewPartialTime = NewPartialTime;

	pFnSetPartialRenderingTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPartialRenderingTime, &SetPartialRenderingTime_Parms, NULL );

	pFnSetPartialRenderingTime->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SkillBeamRenderMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  inBeamSkill                    ( CPF_Parm )
// unsigned long                  inPartialRenderToggle          ( CPF_Parm )

void UParticleSystemComponent::SkillBeamRenderMode ( int EmitterIndex, unsigned long inBeamSkill, unsigned long inPartialRenderToggle )
{
	static UFunction* pFnSkillBeamRenderMode = NULL;

	if ( ! pFnSkillBeamRenderMode )
		pFnSkillBeamRenderMode = (UFunction*) UObject::GObjObjects()->Data[ 18752 ];

	UParticleSystemComponent_execSkillBeamRenderMode_Parms SkillBeamRenderMode_Parms;
	SkillBeamRenderMode_Parms.EmitterIndex = EmitterIndex;
	SkillBeamRenderMode_Parms.inBeamSkill = inBeamSkill;
	SkillBeamRenderMode_Parms.inPartialRenderToggle = inPartialRenderToggle;

	pFnSkillBeamRenderMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkillBeamRenderMode, &SkillBeamRenderMode_Parms, NULL );

	pFnSkillBeamRenderMode->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewTargetStrength              ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetStrength = NULL;

	if ( ! pFnSetBeamTargetStrength )
		pFnSetBeamTargetStrength = (UFunction*) UObject::GObjObjects()->Data[ 18748 ];

	UParticleSystemComponent_execSetBeamTargetStrength_Parms SetBeamTargetStrength_Parms;
	SetBeamTargetStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamTargetStrength_Parms.NewTargetStrength = NewTargetStrength;
	SetBeamTargetStrength_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetStrength, &SetBeamTargetStrength_Parms, NULL );

	pFnSetBeamTargetStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetTangent = NULL;

	if ( ! pFnSetBeamTargetTangent )
		pFnSetBeamTargetTangent = (UFunction*) UObject::GObjObjects()->Data[ 18744 ];

	UParticleSystemComponent_execSetBeamTargetTangent_Parms SetBeamTargetTangent_Parms;
	SetBeamTargetTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamTargetTangent_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetTangent, &SetBeamTargetTangent_Parms, NULL );

	pFnSetBeamTargetTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTargetPoint                 ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetPoint = NULL;

	if ( ! pFnSetBeamTargetPoint )
		pFnSetBeamTargetPoint = (UFunction*) UObject::GObjObjects()->Data[ 18740 ];

	UParticleSystemComponent_execSetBeamTargetPoint_Parms SetBeamTargetPoint_Parms;
	SetBeamTargetPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetPoint_Parms.NewTargetPoint, &NewTargetPoint, 0xC );
	SetBeamTargetPoint_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetPoint, &SetBeamTargetPoint_Parms, NULL );

	pFnSetBeamTargetPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewSourceStrength              ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceStrength = NULL;

	if ( ! pFnSetBeamSourceStrength )
		pFnSetBeamSourceStrength = (UFunction*) UObject::GObjObjects()->Data[ 18736 ];

	UParticleSystemComponent_execSetBeamSourceStrength_Parms SetBeamSourceStrength_Parms;
	SetBeamSourceStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamSourceStrength_Parms.NewSourceStrength = NewSourceStrength;
	SetBeamSourceStrength_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceStrength, &SetBeamSourceStrength_Parms, NULL );

	pFnSetBeamSourceStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceTangent = NULL;

	if ( ! pFnSetBeamSourceTangent )
		pFnSetBeamSourceTangent = (UFunction*) UObject::GObjObjects()->Data[ 18732 ];

	UParticleSystemComponent_execSetBeamSourceTangent_Parms SetBeamSourceTangent_Parms;
	SetBeamSourceTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourceTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamSourceTangent_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceTangent, &SetBeamSourceTangent_Parms, NULL );

	pFnSetBeamSourceTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewSourcePoint                 ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourcePoint = NULL;

	if ( ! pFnSetBeamSourcePoint )
		pFnSetBeamSourcePoint = (UFunction*) UObject::GObjObjects()->Data[ 18728 ];

	UParticleSystemComponent_execSetBeamSourcePoint_Parms SetBeamSourcePoint_Parms;
	SetBeamSourcePoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourcePoint_Parms.NewSourcePoint, &NewSourcePoint, 0xC );
	SetBeamSourcePoint_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourcePoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourcePoint, &SetBeamSourcePoint_Parms, NULL );

	pFnSetBeamSourcePoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          Distance                       ( CPF_Parm )

void UParticleSystemComponent::SetBeamDistance ( int EmitterIndex, float Distance )
{
	static UFunction* pFnSetBeamDistance = NULL;

	if ( ! pFnSetBeamDistance )
		pFnSetBeamDistance = (UFunction*) UObject::GObjObjects()->Data[ 18725 ];

	UParticleSystemComponent_execSetBeamDistance_Parms SetBeamDistance_Parms;
	SetBeamDistance_Parms.EmitterIndex = EmitterIndex;
	SetBeamDistance_Parms.Distance = Distance;

	pFnSetBeamDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamDistance, &SetBeamDistance_Parms, NULL );

	pFnSetBeamDistance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewEndPoint                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint )
{
	static UFunction* pFnSetBeamEndPoint = NULL;

	if ( ! pFnSetBeamEndPoint )
		pFnSetBeamEndPoint = (UFunction*) UObject::GObjObjects()->Data[ 18722 ];

	UParticleSystemComponent_execSetBeamEndPoint_Parms SetBeamEndPoint_Parms;
	SetBeamEndPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamEndPoint_Parms.NewEndPoint, &NewEndPoint, 0xC );

	pFnSetBeamEndPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamEndPoint, &SetBeamEndPoint_Parms, NULL );

	pFnSetBeamEndPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewFactor                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamTessellationFactor ( int EmitterIndex, float NewFactor )
{
	static UFunction* pFnSetBeamTessellationFactor = NULL;

	if ( ! pFnSetBeamTessellationFactor )
		pFnSetBeamTessellationFactor = (UFunction*) UObject::GObjObjects()->Data[ 18719 ];

	UParticleSystemComponent_execSetBeamTessellationFactor_Parms SetBeamTessellationFactor_Parms;
	SetBeamTessellationFactor_Parms.EmitterIndex = EmitterIndex;
	SetBeamTessellationFactor_Parms.NewFactor = NewFactor;

	pFnSetBeamTessellationFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTessellationFactor, &SetBeamTessellationFactor_Parms, NULL );

	pFnSetBeamTessellationFactor->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// int                            NewMethod                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamType ( int EmitterIndex, int NewMethod )
{
	static UFunction* pFnSetBeamType = NULL;

	if ( ! pFnSetBeamType )
		pFnSetBeamType = (UFunction*) UObject::GObjObjects()->Data[ 18716 ];

	UParticleSystemComponent_execSetBeamType_Parms SetBeamType_Parms;
	SetBeamType_Parms.EmitterIndex = EmitterIndex;
	SetBeamType_Parms.NewMethod = NewMethod;

	pFnSetBeamType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamType, &SetBeamType_Parms, NULL );

	pFnSetBeamType->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::RewindEmitterInstances ( )
{
	static UFunction* pFnRewindEmitterInstances = NULL;

	if ( ! pFnRewindEmitterInstances )
		pFnRewindEmitterInstances = (UFunction*) UObject::GObjObjects()->Data[ 18715 ];

	UParticleSystemComponent_execRewindEmitterInstances_Parms RewindEmitterInstances_Parms;

	pFnRewindEmitterInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstances, &RewindEmitterInstances_Parms, NULL );

	pFnRewindEmitterInstances->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )

void UParticleSystemComponent::RewindEmitterInstance ( int EmitterIndex )
{
	static UFunction* pFnRewindEmitterInstance = NULL;

	if ( ! pFnRewindEmitterInstance )
		pFnRewindEmitterInstance = (UFunction*) UObject::GObjObjects()->Data[ 18713 ];

	UParticleSystemComponent_execRewindEmitterInstance_Parms RewindEmitterInstance_Parms;
	RewindEmitterInstance_Parms.EmitterIndex = EmitterIndex;

	pFnRewindEmitterInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstance, &RewindEmitterInstance_Parms, NULL );

	pFnRewindEmitterInstance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnCompleted ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnCompleted = NULL;

	if ( ! pFnSetKillOnCompleted )
		pFnSetKillOnCompleted = (UFunction*) UObject::GObjObjects()->Data[ 18710 ];

	UParticleSystemComponent_execSetKillOnCompleted_Parms SetKillOnCompleted_Parms;
	SetKillOnCompleted_Parms.EmitterIndex = EmitterIndex;
	SetKillOnCompleted_Parms.bKill = bKill;

	pFnSetKillOnCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnCompleted, &SetKillOnCompleted_Parms, NULL );

	pFnSetKillOnCompleted->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnDeactivate = NULL;

	if ( ! pFnSetKillOnDeactivate )
		pFnSetKillOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 18707 ];

	UParticleSystemComponent_execSetKillOnDeactivate_Parms SetKillOnDeactivate_Parms;
	SetKillOnDeactivate_Parms.EmitterIndex = EmitterIndex;
	SetKillOnDeactivate_Parms.bKill = bKill;

	pFnSetKillOnDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnDeactivate, &SetKillOnDeactivate_Parms, NULL );

	pFnSetKillOnDeactivate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick ( )
{
	static UFunction* pFnGetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnGetSkipUpdateDynamicDataDuringTick )
		pFnGetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 18705 ];

	UParticleSystemComponent_execGetSkipUpdateDynamicDataDuringTick_Parms GetSkipUpdateDynamicDataDuringTick_Parms;

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkipUpdateDynamicDataDuringTick, &GetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;

	return GetSkipUpdateDynamicDataDuringTick_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInSkipUpdateDynamicDataDuringTick ( CPF_Parm )

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick )
{
	static UFunction* pFnSetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnSetSkipUpdateDynamicDataDuringTick )
		pFnSetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 18703 ];

	UParticleSystemComponent_execSetSkipUpdateDynamicDataDuringTick_Parms SetSkipUpdateDynamicDataDuringTick_Parms;
	SetSkipUpdateDynamicDataDuringTick_Parms.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkipUpdateDynamicDataDuringTick, &SetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.KillParticlesForced
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::KillParticlesForced ( )
{
	static UFunction* pFnKillParticlesForced = NULL;

	if ( ! pFnKillParticlesForced )
		pFnKillParticlesForced = (UFunction*) UObject::GObjObjects()->Data[ 18702 ];

	UParticleSystemComponent_execKillParticlesForced_Parms KillParticlesForced_Parms;

	pFnKillParticlesForced->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillParticlesForced, &KillParticlesForced_Parms, NULL );

	pFnKillParticlesForced->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.DeactivateSystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::DeactivateSystem ( )
{
	static UFunction* pFnDeactivateSystem = NULL;

	if ( ! pFnDeactivateSystem )
		pFnDeactivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 18701 ];

	UParticleSystemComponent_execDeactivateSystem_Parms DeactivateSystem_Parms;

	pFnDeactivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateSystem, &DeactivateSystem_Parms, NULL );

	pFnDeactivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ActivateSystem
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFlagAsJustAttached            ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ActivateSystem ( unsigned long bFlagAsJustAttached )
{
	static UFunction* pFnActivateSystem = NULL;

	if ( ! pFnActivateSystem )
		pFnActivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 18699 ];

	UParticleSystemComponent_execActivateSystem_Parms ActivateSystem_Parms;
	ActivateSystem_Parms.bFlagAsJustAttached = bFlagAsJustAttached;

	pFnActivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSystem, &ActivateSystem_Parms, NULL );

	pFnActivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )

void UParticleSystemComponent::SetTemplate ( class UParticleSystem* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 18697 ];

	UParticleSystemComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.OnSystemFinished
// [0x00120000] 
// Parameters infos:
// class UParticleSystemComponent* PSystem                        ( CPF_Parm )

void UParticleSystemComponent::OnSystemFinished ( class UParticleSystemComponent* PSystem )
{
	static UFunction* pFnOnSystemFinished = NULL;

	if ( ! pFnOnSystemFinished )
		pFnOnSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 18695 ];

	UParticleSystemComponent_execOnSystemFinished_Parms OnSystemFinished_Parms;
	OnSystemFinished_Parms.PSystem = PSystem;

	this->ProcessEvent ( pFnOnSystemFinished, &OnSystemFinished_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APhysXEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 26858 ];

	APhysXEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void APhysXEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 26855 ];

	APhysXEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APhysXEmitterSpawnable::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	APhysXEmitterSpawnable_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Term
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXEmitterSpawnable::Term ( )
{
	static UFunction* pFnTerm = NULL;

	if ( ! pFnTerm )
		pFnTerm = (UFunction*) UObject::GObjObjects()->Data[ 26853 ];

	APhysXEmitterSpawnable_execTerm_Parms Term_Parms;

	pFnTerm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTerm, &Term_Parms, NULL );

	pFnTerm->FunctionFlags |= 0x400;
};

// Function Engine.KActor.Reset
// [0x00020102] 
// Parameters infos:

void AKActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 21874 ];

	AKActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.KActor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKActor::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 21868 ];

	AKActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 21866 ];

	AKActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KActor.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AKActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 21855 ];

	AKActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActor.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AKActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 21846 ];

	AKActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KActor.ApplyImpulse
// [0x00824002] 
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void AKActor::ApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = (UFunction*) UObject::GObjObjects()->Data[ 21840 ];

	AKActor_execApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActor.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 21837 ];

	AKActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KActor.SetPhysicalCollisionProperties
// [0x00020102] 
// Parameters infos:

void AKActor::SetPhysicalCollisionProperties ( )
{
	static UFunction* pFnSetPhysicalCollisionProperties = NULL;

	if ( ! pFnSetPhysicalCollisionProperties )
		pFnSetPhysicalCollisionProperties = (UFunction*) UObject::GObjObjects()->Data[ 21835 ];

	AKActor_execSetPhysicalCollisionProperties_Parms SetPhysicalCollisionProperties_Parms;

	this->ProcessEvent ( pFnSetPhysicalCollisionProperties, &SetPhysicalCollisionProperties_Parms, NULL );
};

// Function Engine.KActor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AKActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 21833 ];

	AKActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.KActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21832 ];

	AKActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.KActor.ResolveRBState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActor::ResolveRBState ( )
{
	static UFunction* pFnResolveRBState = NULL;

	if ( ! pFnResolveRBState )
		pFnResolveRBState = (UFunction*) UObject::GObjObjects()->Data[ 21831 ];

	AKActor_execResolveRBState_Parms ResolveRBState_Parms;

	pFnResolveRBState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRBState, &ResolveRBState_Parms, NULL );

	pFnResolveRBState->FunctionFlags |= 0x400;
};

// Function Engine.KActor.GetKActorPhysMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial ( )
{
	static UFunction* pFnGetKActorPhysMaterial = NULL;

	if ( ! pFnGetKActorPhysMaterial )
		pFnGetKActorPhysMaterial = (UFunction*) UObject::GObjObjects()->Data[ 21829 ];

	AKActor_execGetKActorPhysMaterial_Parms GetKActorPhysMaterial_Parms;

	pFnGetKActorPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKActorPhysMaterial, &GetKActorPhysMaterial_Parms, NULL );

	pFnGetKActorPhysMaterial->FunctionFlags |= 0x400;

	return GetKActorPhysMaterial_Parms.ReturnValue;
};

// Function Engine.KActorSpawnable.ResetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKActorSpawnable::ResetComponents ( )
{
	static UFunction* pFnResetComponents = NULL;

	if ( ! pFnResetComponents )
		pFnResetComponents = (UFunction*) UObject::GObjObjects()->Data[ 21884 ];

	AKActorSpawnable_execResetComponents_Parms ResetComponents_Parms;

	pFnResetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetComponents, &ResetComponents_Parms, NULL );

	pFnResetComponents->FunctionFlags |= 0x400;
};

// Function Engine.KActorSpawnable.RecycleInternal
// [0x00080102] 
// Parameters infos:

void AKActorSpawnable::RecycleInternal ( )
{
	static UFunction* pFnRecycleInternal = NULL;

	if ( ! pFnRecycleInternal )
		pFnRecycleInternal = (UFunction*) UObject::GObjObjects()->Data[ 21883 ];

	AKActorSpawnable_execRecycleInternal_Parms RecycleInternal_Parms;

	this->ProcessEvent ( pFnRecycleInternal, &RecycleInternal_Parms, NULL );
};

// Function Engine.KActorSpawnable.Recycle
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 21882 ];

	AKActorSpawnable_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.KActorSpawnable.Initialize
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 21881 ];

	AKActorSpawnable_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function Engine.KActorSpawnable.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AKActorSpawnable::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 21879 ];

	AKActorSpawnable_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.KAsset.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AKAsset::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 21919 ];

	AKAsset_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.KAsset.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKAsset::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 21916 ];

	AKAsset_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KAsset.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKAsset::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 21914 ];

	AKAsset_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KAsset.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AKAsset::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 21905 ];

	AKAsset_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KAsset.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AKAsset::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 21896 ];

	AKAsset_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KAsset.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKAsset::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 21894 ];

	AKAsset_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KAsset.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKAsset::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21893 ];

	AKAsset_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// [0x00020102] 
// Parameters infos:
// class UPhysicalMaterialPropertyBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty ( class UClass* DesiredClass )
{
	static UFunction* pFnGetPhysicalMaterialProperty = NULL;

	if ( ! pFnGetPhysicalMaterialProperty )
		pFnGetPhysicalMaterialProperty = (UFunction*) UObject::GObjObjects()->Data[ 26487 ];

	UPhysicalMaterial_execGetPhysicalMaterialProperty_Parms GetPhysicalMaterialProperty_Parms;
	GetPhysicalMaterialProperty_Parms.DesiredClass = DesiredClass;

	this->ProcessEvent ( pFnGetPhysicalMaterialProperty, &GetPhysicalMaterialProperty_Parms, NULL );

	return GetPhysicalMaterialProperty_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterial.FindFractureSounds
// [0x00420102] 
// Parameters infos:
// class USoundCue*               OutSoundExplosion              ( CPF_Parm | CPF_OutParm )
// class USoundCue*               OutSoundSingle                 ( CPF_Parm | CPF_OutParm )

void UPhysicalMaterial::FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle )
{
	static UFunction* pFnFindFractureSounds = NULL;

	if ( ! pFnFindFractureSounds )
		pFnFindFractureSounds = (UFunction*) UObject::GObjObjects()->Data[ 26483 ];

	UPhysicalMaterial_execFindFractureSounds_Parms FindFractureSounds_Parms;

	this->ProcessEvent ( pFnFindFractureSounds, &FindFractureSounds_Parms, NULL );

	if ( OutSoundExplosion )
		*OutSoundExplosion = FindFractureSounds_Parms.OutSoundExplosion;

	if ( OutSoundSingle )
		*OutSoundSingle = FindFractureSounds_Parms.OutSoundSingle;
};

// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPhysEffectInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo ( unsigned char Type )
{
	static UFunction* pFnFindPhysEffectInfo = NULL;

	if ( ! pFnFindPhysEffectInfo )
		pFnFindPhysEffectInfo = (UFunction*) UObject::GObjObjects()->Data[ 26480 ];

	UPhysicalMaterial_execFindPhysEffectInfo_Parms FindPhysEffectInfo_Parms;
	FindPhysEffectInfo_Parms.Type = Type;

	pFnFindPhysEffectInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPhysEffectInfo, &FindPhysEffectInfo_Parms, NULL );

	pFnFindPhysEffectInfo->FunctionFlags |= 0x400;

	return FindPhysEffectInfo_Parms.ReturnValue;
};

// Function Engine.PhysicsAsset.FindBodyIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )

int UPhysicsAsset::FindBodyIndex ( struct FName BodyName )
{
	static UFunction* pFnFindBodyIndex = NULL;

	if ( ! pFnFindBodyIndex )
		pFnFindBodyIndex = (UFunction*) UObject::GObjObjects()->Data[ 26509 ];

	UPhysicsAsset_execFindBodyIndex_Parms FindBodyIndex_Parms;
	memcpy ( &FindBodyIndex_Parms.BodyName, &BodyName, 0x8 );

	pFnFindBodyIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyIndex, &FindBodyIndex_Parms, NULL );

	pFnFindBodyIndex->FunctionFlags |= 0x400;

	return FindBodyIndex_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_ConstraintInstance*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConName                        ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindConstraintInstance = NULL;

	if ( ! pFnFindConstraintInstance )
		pFnFindConstraintInstance = (UFunction*) UObject::GObjObjects()->Data[ 26599 ];

	UPhysicsAssetInstance_execFindConstraintInstance_Parms FindConstraintInstance_Parms;
	memcpy ( &FindConstraintInstance_Parms.ConName, &ConName, 0x8 );
	FindConstraintInstance_Parms.InAsset = InAsset;

	pFnFindConstraintInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintInstance, &FindConstraintInstance_Parms, NULL );

	pFnFindConstraintInstance->FunctionFlags |= 0x400;

	return FindConstraintInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindBodyInstance = NULL;

	if ( ! pFnFindBodyInstance )
		pFnFindBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 26595 ];

	UPhysicsAssetInstance_execFindBodyInstance_Parms FindBodyInstance_Parms;
	memcpy ( &FindBodyInstance_Parms.BodyName, &BodyName, 0x8 );
	FindBodyInstance_Parms.InAsset = InAsset;

	pFnFindBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstance, &FindBodyInstance_Parms, NULL );

	pFnFindBodyInstance->FunctionFlags |= 0x400;

	return FindBodyInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm )

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBonesFixed = NULL;

	if ( ! pFnSetFullAnimWeightBonesFixed )
		pFnSetFullAnimWeightBonesFixed = (UFunction*) UObject::GObjObjects()->Data[ 9689 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBonesFixed_Parms SetFullAnimWeightBonesFixed_Parms;
	SetFullAnimWeightBonesFixed_Parms.bNewFixed = bNewFixed;
	SetFullAnimWeightBonesFixed_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBonesFixed, &SetFullAnimWeightBonesFixed_Parms, NULL );

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm )

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBlockRigidBody = NULL;

	if ( ! pFnSetFullAnimWeightBlockRigidBody )
		pFnSetFullAnimWeightBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 26590 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBlockRigidBody_Parms SetFullAnimWeightBlockRigidBody_Parms;
	SetFullAnimWeightBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	SetFullAnimWeightBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBlockRigidBody, &SetFullAnimWeightBlockRigidBody_Parms, NULL );

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm )

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetNamedBodiesBlockRigidBody = NULL;

	if ( ! pFnSetNamedBodiesBlockRigidBody )
		pFnSetNamedBodiesBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 26585 ];

	UPhysicsAssetInstance_execSetNamedBodiesBlockRigidBody_Parms SetNamedBodiesBlockRigidBody_Parms;
	SetNamedBodiesBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	memcpy ( &SetNamedBodiesBlockRigidBody_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesBlockRigidBody, &SetNamedBodiesBlockRigidBody_Parms, NULL );

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm )
// float                          InBoneLinearSpring             ( CPF_Parm )
// float                          InBoneAngularSpring            ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm )

void UPhysicsAssetInstance::SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetNamedRBBoneSprings = NULL;

	if ( ! pFnSetNamedRBBoneSprings )
		pFnSetNamedRBBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 26578 ];

	UPhysicsAssetInstance_execSetNamedRBBoneSprings_Parms SetNamedRBBoneSprings_Parms;
	SetNamedRBBoneSprings_Parms.bEnable = bEnable;
	memcpy ( &SetNamedRBBoneSprings_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedRBBoneSprings_Parms.InBoneLinearSpring = InBoneLinearSpring;
	SetNamedRBBoneSprings_Parms.InBoneAngularSpring = InBoneAngularSpring;
	SetNamedRBBoneSprings_Parms.SkelMeshComp = SkelMeshComp;

	pFnSetNamedRBBoneSprings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedRBBoneSprings, &SetNamedRBBoneSprings_Parms, NULL );

	pFnSetNamedRBBoneSprings->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularVelocityDrive )
		pFnSetNamedMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 26571 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularVelocityDrive_Parms SetNamedMotorsAngularVelocityDrive_Parms;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularVelocityDrive_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularVelocityDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularVelocityDrive, &SetNamedMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularPositionDrive )
		pFnSetNamedMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 26564 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularPositionDrive_Parms SetNamedMotorsAngularPositionDrive_Parms;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularPositionDrive_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedMotorsAngularPositionDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularPositionDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularPositionDrive, &SetNamedMotorsAngularPositionDrive_Parms, NULL );

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularDriveParams = NULL;

	if ( ! pFnSetAllMotorsAngularDriveParams )
		pFnSetAllMotorsAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 26558 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveParams_Parms SetAllMotorsAngularDriveParams_Parms;
	SetAllMotorsAngularDriveParams_Parms.InSpring = InSpring;
	SetAllMotorsAngularDriveParams_Parms.InDamping = InDamping;
	SetAllMotorsAngularDriveParams_Parms.InForceLimit = InForceLimit;
	SetAllMotorsAngularDriveParams_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularDriveParams_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveParams, &SetAllMotorsAngularDriveParams_Parms, NULL );

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetAllMotorsAngularVelocityDrive )
		pFnSetAllMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 26553 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularVelocityDrive_Parms SetAllMotorsAngularVelocityDrive_Parms;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetAllMotorsAngularVelocityDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularVelocityDrive, &SetAllMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetAllMotorsAngularPositionDrive )
		pFnSetAllMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 26548 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularPositionDrive_Parms SetAllMotorsAngularPositionDrive_Parms;
	SetAllMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularPositionDrive_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularPositionDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularPositionDrive, &SetAllMotorsAngularPositionDrive_Parms, NULL );

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetNamedBodiesFixed = NULL;

	if ( ! pFnSetNamedBodiesFixed )
		pFnSetNamedBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 26541 ];

	UPhysicsAssetInstance_execSetNamedBodiesFixed_Parms SetNamedBodiesFixed_Parms;
	SetNamedBodiesFixed_Parms.bNewFixed = bNewFixed;
	memcpy ( &SetNamedBodiesFixed_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesFixed_Parms.SkelMesh = SkelMesh;
	SetNamedBodiesFixed_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	SetNamedBodiesFixed_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetNamedBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesFixed, &SetNamedBodiesFixed_Parms, NULL );

	pFnSetNamedBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void UPhysicsAssetInstance::SetAllBodiesFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetAllBodiesFixed = NULL;

	if ( ! pFnSetAllBodiesFixed )
		pFnSetAllBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 26539 ];

	UPhysicsAssetInstance_execSetAllBodiesFixed_Parms SetAllBodiesFixed_Parms;
	SetAllBodiesFixed_Parms.bNewFixed = bNewFixed;

	pFnSetAllBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllBodiesFixed, &SetAllBodiesFixed_Parms, NULL );

	pFnSetAllBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InBoneName                     ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMesh*           InSkelMesh                     ( CPF_Parm )

float UPhysicsAssetInstance::GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh )
{
	static UFunction* pFnGetTotalMassBelowBone = NULL;

	if ( ! pFnGetTotalMassBelowBone )
		pFnGetTotalMassBelowBone = (UFunction*) UObject::GObjObjects()->Data[ 26534 ];

	UPhysicsAssetInstance_execGetTotalMassBelowBone_Parms GetTotalMassBelowBone_Parms;
	memcpy ( &GetTotalMassBelowBone_Parms.InBoneName, &InBoneName, 0x8 );
	GetTotalMassBelowBone_Parms.InAsset = InAsset;
	GetTotalMassBelowBone_Parms.InSkelMesh = InSkelMesh;

	pFnGetTotalMassBelowBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalMassBelowBone, &GetTotalMassBelowBone_Parms, NULL );

	pFnGetTotalMassBelowBone->FunctionFlags |= 0x400;

	return GetTotalMassBelowBone_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InAngularSpringScale           ( CPF_Parm )
// float                          InAngularDampingScale          ( CPF_Parm )
// float                          InAngularForceLimitScale       ( CPF_Parm )

void UPhysicsAssetInstance::SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale )
{
	static UFunction* pFnSetAngularDriveScale = NULL;

	if ( ! pFnSetAngularDriveScale )
		pFnSetAngularDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 26530 ];

	UPhysicsAssetInstance_execSetAngularDriveScale_Parms SetAngularDriveScale_Parms;
	SetAngularDriveScale_Parms.InAngularSpringScale = InAngularSpringScale;
	SetAngularDriveScale_Parms.InAngularDampingScale = InAngularDampingScale;
	SetAngularDriveScale_Parms.InAngularForceLimitScale = InAngularForceLimitScale;

	pFnSetAngularDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveScale, &SetAngularDriveScale_Parms, NULL );

	pFnSetAngularDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpringScale            ( CPF_Parm )
// float                          InLinearDampingScale           ( CPF_Parm )
// float                          InLinearForceLimitScale        ( CPF_Parm )

void UPhysicsAssetInstance::SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale )
{
	static UFunction* pFnSetLinearDriveScale = NULL;

	if ( ! pFnSetLinearDriveScale )
		pFnSetLinearDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 26526 ];

	UPhysicsAssetInstance_execSetLinearDriveScale_Parms SetLinearDriveScale_Parms;
	SetLinearDriveScale_Parms.InLinearSpringScale = InLinearSpringScale;
	SetLinearDriveScale_Parms.InLinearDampingScale = InLinearDampingScale;
	SetLinearDriveScale_Parms.InLinearForceLimitScale = InLinearForceLimitScale;

	pFnSetLinearDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveScale, &SetLinearDriveScale_Parms, NULL );

	pFnSetLinearDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Threshold                      ( CPF_Parm )

void URB_BodyInstance::SetContactReportForceThreshold ( float Threshold )
{
	static UFunction* pFnSetContactReportForceThreshold = NULL;

	if ( ! pFnSetContactReportForceThreshold )
		pFnSetContactReportForceThreshold = (UFunction*) UObject::GObjObjects()->Data[ 27595 ];

	URB_BodyInstance_execSetContactReportForceThreshold_Parms SetContactReportForceThreshold_Parms;
	SetContactReportForceThreshold_Parms.Threshold = Threshold;

	pFnSetContactReportForceThreshold->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContactReportForceThreshold, &SetContactReportForceThreshold_Parms, NULL );

	pFnSetContactReportForceThreshold->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableCollisionResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableResponse                ( CPF_Parm )

void URB_BodyInstance::EnableCollisionResponse ( unsigned long bEnableResponse )
{
	static UFunction* pFnEnableCollisionResponse = NULL;

	if ( ! pFnEnableCollisionResponse )
		pFnEnableCollisionResponse = (UFunction*) UObject::GObjObjects()->Data[ 27593 ];

	URB_BodyInstance_execEnableCollisionResponse_Parms EnableCollisionResponse_Parms;
	EnableCollisionResponse_Parms.bEnableResponse = bEnableResponse;

	pFnEnableCollisionResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCollisionResponse, &EnableCollisionResponse_Parms, NULL );

	pFnEnableCollisionResponse->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void URB_BodyInstance::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 27591 ];

	URB_BodyInstance_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void URB_BodyInstance::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 27589 ];

	URB_BodyInstance_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTeleport                      ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnSetBoneSpringTarget = NULL;

	if ( ! pFnSetBoneSpringTarget )
		pFnSetBoneSpringTarget = (UFunction*) UObject::GObjObjects()->Data[ 27586 ];

	URB_BodyInstance_execSetBoneSpringTarget_Parms SetBoneSpringTarget_Parms;
	SetBoneSpringTarget_Parms.bTeleport = bTeleport;

	pFnSetBoneSpringTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringTarget, &SetBoneSpringTarget_Parms, NULL );

	pFnSetBoneSpringTarget->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &SetBoneSpringTarget_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.SetBoneSpringParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpring                 ( CPF_Parm )
// float                          InLinearDamping                ( CPF_Parm )
// float                          InAngularSpring                ( CPF_Parm )
// float                          InAngularDamping               ( CPF_Parm )

void URB_BodyInstance::SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping )
{
	static UFunction* pFnSetBoneSpringParams = NULL;

	if ( ! pFnSetBoneSpringParams )
		pFnSetBoneSpringParams = (UFunction*) UObject::GObjObjects()->Data[ 27581 ];

	URB_BodyInstance_execSetBoneSpringParams_Parms SetBoneSpringParams_Parms;
	SetBoneSpringParams_Parms.InLinearSpring = InLinearSpring;
	SetBoneSpringParams_Parms.InLinearDamping = InLinearDamping;
	SetBoneSpringParams_Parms.InAngularSpring = InAngularSpring;
	SetBoneSpringParams_Parms.InAngularDamping = InAngularDamping;

	pFnSetBoneSpringParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringParams, &SetBoneSpringParams_Parms, NULL );

	pFnSetBoneSpringParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableBoneSpring
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnableLinear                ( CPF_Parm )
// unsigned long                  bInEnableAngular               ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnEnableBoneSpring = NULL;

	if ( ! pFnEnableBoneSpring )
		pFnEnableBoneSpring = (UFunction*) UObject::GObjObjects()->Data[ 27577 ];

	URB_BodyInstance_execEnableBoneSpring_Parms EnableBoneSpring_Parms;
	EnableBoneSpring_Parms.bInEnableLinear = bInEnableLinear;
	EnableBoneSpring_Parms.bInEnableAngular = bInEnableAngular;

	pFnEnableBoneSpring->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableBoneSpring, &EnableBoneSpring_Parms, NULL );

	pFnEnableBoneSpring->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &EnableBoneSpring_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity ( )
{
	static UFunction* pFnGetUnrealWorldAngularVelocity = NULL;

	if ( ! pFnGetUnrealWorldAngularVelocity )
		pFnGetUnrealWorldAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 27575 ];

	URB_BodyInstance_execGetUnrealWorldAngularVelocity_Parms GetUnrealWorldAngularVelocity_Parms;

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldAngularVelocity, &GetUnrealWorldAngularVelocity_Parms, NULL );

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldAngularVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocity ( )
{
	static UFunction* pFnGetUnrealWorldVelocity = NULL;

	if ( ! pFnGetUnrealWorldVelocity )
		pFnGetUnrealWorldVelocity = (UFunction*) UObject::GObjObjects()->Data[ 27573 ];

	URB_BodyInstance_execGetUnrealWorldVelocity_Parms GetUnrealWorldVelocity_Parms;

	pFnGetUnrealWorldVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocity, &GetUnrealWorldVelocity_Parms, NULL );

	pFnGetUnrealWorldVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix URB_BodyInstance::GetUnrealWorldTM ( )
{
	static UFunction* pFnGetUnrealWorldTM = NULL;

	if ( ! pFnGetUnrealWorldTM )
		pFnGetUnrealWorldTM = (UFunction*) UObject::GObjObjects()->Data[ 27571 ];

	URB_BodyInstance_execGetUnrealWorldTM_Parms GetUnrealWorldTM_Parms;

	pFnGetUnrealWorldTM->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldTM, &GetUnrealWorldTM_Parms, NULL );

	pFnGetUnrealWorldTM->FunctionFlags |= 0x400;

	return GetUnrealWorldTM_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 27569 ];

	URB_BodyInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsValidBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsValidBodyInstance ( )
{
	static UFunction* pFnIsValidBodyInstance = NULL;

	if ( ! pFnIsValidBodyInstance )
		pFnIsValidBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 27567 ];

	URB_BodyInstance_execIsValidBodyInstance_Parms IsValidBodyInstance_Parms;

	pFnIsValidBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidBodyInstance, &IsValidBodyInstance_Parms, NULL );

	pFnIsValidBodyInstance->FunctionFlags |= 0x400;

	return IsValidBodyInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsFixed ( )
{
	static UFunction* pFnIsFixed = NULL;

	if ( ! pFnIsFixed )
		pFnIsFixed = (UFunction*) UObject::GObjObjects()->Data[ 27565 ];

	URB_BodyInstance_execIsFixed_Parms IsFixed_Parms;

	pFnIsFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFixed, &IsFixed_Parms, NULL );

	pFnIsFixed->FunctionFlags |= 0x400;

	return IsFixed_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.SetFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void URB_BodyInstance::SetFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetFixed = NULL;

	if ( ! pFnSetFixed )
		pFnSetFixed = (UFunction*) UObject::GObjObjects()->Data[ 27563 ];

	URB_BodyInstance_execSetFixed_Parms SetFixed_Parms;
	SetFixed_Parms.bNewFixed = bNewFixed;

	pFnSetFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFixed, &SetFixed_Parms, NULL );

	pFnSetFixed->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 27732 ];

	ARB_ConstraintActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_ConstraintActor::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 27731 ];

	ARB_ConstraintActor_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.InitConstraint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Actor1                         ( CPF_Parm )
// class AActor*                  Actor2                         ( CPF_Parm )
// struct FName                   Actor1Bone                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   Actor2Bone                     ( CPF_OptionalParm | CPF_Parm )
// float                          BreakThreshold                 ( CPF_OptionalParm | CPF_Parm )

void ARB_ConstraintActor::InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 27725 ];

	ARB_ConstraintActor_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.Actor1 = Actor1;
	InitConstraint_Parms.Actor2 = Actor2;
	memcpy ( &InitConstraint_Parms.Actor1Bone, &Actor1Bone, 0x8 );
	memcpy ( &InitConstraint_Parms.Actor2Bone, &Actor2Bone, 0x8 );
	InitConstraint_Parms.BreakThreshold = BreakThreshold;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.SetDisableCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewDisableCollision            ( CPF_Parm )

void ARB_ConstraintActor::SetDisableCollision ( unsigned long NewDisableCollision )
{
	static UFunction* pFnSetDisableCollision = NULL;

	if ( ! pFnSetDisableCollision )
		pFnSetDisableCollision = (UFunction*) UObject::GObjObjects()->Data[ 27723 ];

	ARB_ConstraintActor_execSetDisableCollision_Parms SetDisableCollision_Parms;
	SetDisableCollision_Parms.NewDisableCollision = NewDisableCollision;

	pFnSetDisableCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisableCollision, &SetDisableCollision_Parms, NULL );

	pFnSetDisableCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 NewTM                          ( CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::MoveKinActorTransform ( struct FMatrix* NewTM )
{
	static UFunction* pFnMoveKinActorTransform = NULL;

	if ( ! pFnMoveKinActorTransform )
		pFnMoveKinActorTransform = (UFunction*) UObject::GObjObjects()->Data[ 27712 ];

	URB_ConstraintInstance_execMoveKinActorTransform_Parms MoveKinActorTransform_Parms;

	pFnMoveKinActorTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveKinActorTransform, &MoveKinActorTransform_Parms, NULL );

	pFnMoveKinActorTransform->FunctionFlags |= 0x400;

	if ( NewTM )
		memcpy ( NewTM, &MoveKinActorTransform_Parms.NewTM, 0x40 );
};

// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewLimitSize                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearLimitSize ( float NewLimitSize )
{
	static UFunction* pFnSetLinearLimitSize = NULL;

	if ( ! pFnSetLinearLimitSize )
		pFnSetLinearLimitSize = (UFunction*) UObject::GObjObjects()->Data[ 27710 ];

	URB_ConstraintInstance_execSetLinearLimitSize_Parms SetLinearLimitSize_Parms;
	SetLinearLimitSize_Parms.NewLimitSize = NewLimitSize;

	pFnSetLinearLimitSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearLimitSize, &SetLinearLimitSize_Parms, NULL );

	pFnSetLinearLimitSize->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSwing1LimitScale             ( CPF_Parm )
// float                          InSwing2LimitScale             ( CPF_Parm )
// float                          InTwistLimitScale              ( CPF_Parm )
// class URB_ConstraintSetup*     InSetup                        ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup )
{
	static UFunction* pFnSetAngularDOFLimitScale = NULL;

	if ( ! pFnSetAngularDOFLimitScale )
		pFnSetAngularDOFLimitScale = (UFunction*) UObject::GObjObjects()->Data[ 27705 ];

	URB_ConstraintInstance_execSetAngularDOFLimitScale_Parms SetAngularDOFLimitScale_Parms;
	SetAngularDOFLimitScale_Parms.InSwing1LimitScale = InSwing1LimitScale;
	SetAngularDOFLimitScale_Parms.InSwing2LimitScale = InSwing2LimitScale;
	SetAngularDOFLimitScale_Parms.InTwistLimitScale = InTwistLimitScale;
	SetAngularDOFLimitScale_Parms.InSetup = InSetup;

	pFnSetAngularDOFLimitScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDOFLimitScale, &SetAngularDOFLimitScale_Parms, NULL );

	pFnSetAngularDOFLimitScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetAngularDriveParams = NULL;

	if ( ! pFnSetAngularDriveParams )
		pFnSetAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 27701 ];

	URB_ConstraintInstance_execSetAngularDriveParams_Parms SetAngularDriveParams_Parms;
	SetAngularDriveParams_Parms.InSpring = InSpring;
	SetAngularDriveParams_Parms.InDamping = InDamping;
	SetAngularDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveParams, &SetAngularDriveParams_Parms, NULL );

	pFnSetAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetAngularVelocityTarget = NULL;

	if ( ! pFnSetAngularVelocityTarget )
		pFnSetAngularVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 27699 ];

	URB_ConstraintInstance_execSetAngularVelocityTarget_Parms SetAngularVelocityTarget_Parms;
	memcpy ( &SetAngularVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetAngularVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityTarget, &SetAngularVelocityTarget_Parms, NULL );

	pFnSetAngularVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionTarget ( struct FQuat InPosTarget )
{
	static UFunction* pFnSetAngularPositionTarget = NULL;

	if ( ! pFnSetAngularPositionTarget )
		pFnSetAngularPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 27697 ];

	URB_ConstraintInstance_execSetAngularPositionTarget_Parms SetAngularPositionTarget_Parms;
	memcpy ( &SetAngularPositionTarget_Parms.InPosTarget, &InPosTarget, 0x10 );

	pFnSetAngularPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionTarget, &SetAngularPositionTarget_Parms, NULL );

	pFnSetAngularPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetLinearDriveParams = NULL;

	if ( ! pFnSetLinearDriveParams )
		pFnSetLinearDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 27693 ];

	URB_ConstraintInstance_execSetLinearDriveParams_Parms SetLinearDriveParams_Parms;
	SetLinearDriveParams_Parms.InSpring = InSpring;
	SetLinearDriveParams_Parms.InDamping = InDamping;
	SetLinearDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetLinearDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveParams, &SetLinearDriveParams_Parms, NULL );

	pFnSetLinearDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetLinearVelocityTarget = NULL;

	if ( ! pFnSetLinearVelocityTarget )
		pFnSetLinearVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 27691 ];

	URB_ConstraintInstance_execSetLinearVelocityTarget_Parms SetLinearVelocityTarget_Parms;
	memcpy ( &SetLinearVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetLinearVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityTarget, &SetLinearVelocityTarget_Parms, NULL );

	pFnSetLinearVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionTarget ( struct FVector InPosTarget )
{
	static UFunction* pFnSetLinearPositionTarget = NULL;

	if ( ! pFnSetLinearPositionTarget )
		pFnSetLinearPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 27689 ];

	URB_ConstraintInstance_execSetLinearPositionTarget_Parms SetLinearPositionTarget_Parms;
	memcpy ( &SetLinearPositionTarget_Parms.InPosTarget, &InPosTarget, 0xC );

	pFnSetLinearPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionTarget, &SetLinearPositionTarget_Parms, NULL );

	pFnSetLinearPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularVelocityDrive = NULL;

	if ( ! pFnSetAngularVelocityDrive )
		pFnSetAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 27686 ];

	URB_ConstraintInstance_execSetAngularVelocityDrive_Parms SetAngularVelocityDrive_Parms;
	SetAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityDrive, &SetAngularVelocityDrive_Parms, NULL );

	pFnSetAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularPositionDrive = NULL;

	if ( ! pFnSetAngularPositionDrive )
		pFnSetAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 27683 ];

	URB_ConstraintInstance_execSetAngularPositionDrive_Parms SetAngularPositionDrive_Parms;
	SetAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionDrive, &SetAngularPositionDrive_Parms, NULL );

	pFnSetAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearVelocityDrive = NULL;

	if ( ! pFnSetLinearVelocityDrive )
		pFnSetLinearVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 27679 ];

	URB_ConstraintInstance_execSetLinearVelocityDrive_Parms SetLinearVelocityDrive_Parms;
	SetLinearVelocityDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearVelocityDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearVelocityDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityDrive, &SetLinearVelocityDrive_Parms, NULL );

	pFnSetLinearVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearPositionDrive = NULL;

	if ( ! pFnSetLinearPositionDrive )
		pFnSetLinearPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 27675 ];

	URB_ConstraintInstance_execSetLinearPositionDrive_Parms SetLinearPositionDrive_Parms;
	SetLinearPositionDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearPositionDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearPositionDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionDrive, &SetLinearPositionDrive_Parms, NULL );

	pFnSetLinearPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_ConstraintInstance::GetConstraintLocation ( )
{
	static UFunction* pFnGetConstraintLocation = NULL;

	if ( ! pFnGetConstraintLocation )
		pFnGetConstraintLocation = (UFunction*) UObject::GObjObjects()->Data[ 27673 ];

	URB_ConstraintInstance_execGetConstraintLocation_Parms GetConstraintLocation_Parms;

	pFnGetConstraintLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConstraintLocation, &GetConstraintLocation_Parms, NULL );

	pFnGetConstraintLocation->FunctionFlags |= 0x400;

	return GetConstraintLocation_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 27671 ];

	URB_ConstraintInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_ConstraintInstance::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 27670 ];

	URB_ConstraintInstance_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.InitConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     PrimComp1                      ( CPF_Parm )
// class UPrimitiveComponent*     PrimComp2                      ( CPF_Parm )
// class URB_ConstraintSetup*     Setup                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// class AActor*                  InOwner                        ( CPF_Parm )
// class UPrimitiveComponent*     InPrimComp                     ( CPF_Parm )
// unsigned long                  bMakeKinForBody1               ( CPF_Parm )

void URB_ConstraintInstance::InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 27662 ];

	URB_ConstraintInstance_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.PrimComp1 = PrimComp1;
	InitConstraint_Parms.PrimComp2 = PrimComp2;
	InitConstraint_Parms.Setup = Setup;
	InitConstraint_Parms.Scale = Scale;
	InitConstraint_Parms.InOwner = InOwner;
	InitConstraint_Parms.InPrimComp = InPrimComp;
	InitConstraint_Parms.bMakeKinForBody1 = bMakeKinForBody1;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FQuat URB_Handle::GetOrientation ( )
{
	static UFunction* pFnGetOrientation = NULL;

	if ( ! pFnGetOrientation )
		pFnGetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 27837 ];

	URB_Handle_execGetOrientation_Parms GetOrientation_Parms;

	pFnGetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrientation, &GetOrientation_Parms, NULL );

	pFnGetOrientation->FunctionFlags |= 0x400;

	return GetOrientation_Parms.ReturnValue;
};

// Function Engine.RB_Handle.SetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   NewOrientation                 ( CPF_Parm )

void URB_Handle::SetOrientation ( struct FQuat NewOrientation )
{
	static UFunction* pFnSetOrientation = NULL;

	if ( ! pFnSetOrientation )
		pFnSetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 27835 ];

	URB_Handle_execSetOrientation_Parms SetOrientation_Parms;
	memcpy ( &SetOrientation_Parms.NewOrientation, &NewOrientation, 0x10 );

	pFnSetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOrientation, &SetOrientation_Parms, NULL );

	pFnSetOrientation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.UpdateSmoothLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::UpdateSmoothLocation ( struct FVector* NewLocation )
{
	static UFunction* pFnUpdateSmoothLocation = NULL;

	if ( ! pFnUpdateSmoothLocation )
		pFnUpdateSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 27833 ];

	URB_Handle_execUpdateSmoothLocation_Parms UpdateSmoothLocation_Parms;

	pFnUpdateSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSmoothLocation, &UpdateSmoothLocation_Parms, NULL );

	pFnUpdateSmoothLocation->FunctionFlags |= 0x400;

	if ( NewLocation )
		memcpy ( NewLocation, &UpdateSmoothLocation_Parms.NewLocation, 0xC );
};

// Function Engine.RB_Handle.SetSmoothLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// float                          MoveTime                       ( CPF_Parm )

void URB_Handle::SetSmoothLocation ( struct FVector NewLocation, float MoveTime )
{
	static UFunction* pFnSetSmoothLocation = NULL;

	if ( ! pFnSetSmoothLocation )
		pFnSetSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 27830 ];

	URB_Handle_execSetSmoothLocation_Parms SetSmoothLocation_Parms;
	memcpy ( &SetSmoothLocation_Parms.NewLocation, &NewLocation, 0xC );
	SetSmoothLocation_Parms.MoveTime = MoveTime;

	pFnSetSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSmoothLocation, &SetSmoothLocation_Parms, NULL );

	pFnSetSmoothLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.SetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void URB_Handle::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 27828 ];

	URB_Handle_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.ReleaseComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Handle::ReleaseComponent ( )
{
	static UFunction* pFnReleaseComponent = NULL;

	if ( ! pFnReleaseComponent )
		pFnReleaseComponent = (UFunction*) UObject::GObjObjects()->Data[ 27827 ];

	URB_Handle_execReleaseComponent_Parms ReleaseComponent_Parms;

	pFnReleaseComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseComponent, &ReleaseComponent_Parms, NULL );

	pFnReleaseComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GrabComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     Component                      ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Parm )
// struct FVector                 GrabLocation                   ( CPF_Parm )
// unsigned long                  bConstrainRotation             ( CPF_Parm )

void URB_Handle::GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation )
{
	static UFunction* pFnGrabComponent = NULL;

	if ( ! pFnGrabComponent )
		pFnGrabComponent = (UFunction*) UObject::GObjObjects()->Data[ 27822 ];

	URB_Handle_execGrabComponent_Parms GrabComponent_Parms;
	GrabComponent_Parms.Component = Component;
	memcpy ( &GrabComponent_Parms.InBoneName, &InBoneName, 0x8 );
	memcpy ( &GrabComponent_Parms.GrabLocation, &GrabLocation, 0xC );
	GrabComponent_Parms.bConstrainRotation = bConstrainRotation;

	pFnGrabComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGrabComponent, &GrabComponent_Parms, NULL );

	pFnGrabComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_LineImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 27854 ];

	ARB_LineImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_LineImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27852 ];

	ARB_LineImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.FireLineImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_LineImpulseActor::FireLineImpulse ( )
{
	static UFunction* pFnFireLineImpulse = NULL;

	if ( ! pFnFireLineImpulse )
		pFnFireLineImpulse = (UFunction*) UObject::GObjObjects()->Data[ 27851 ];

	ARB_LineImpulseActor_execFireLineImpulse_Parms FireLineImpulse_Parms;

	pFnFireLineImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireLineImpulse, &FireLineImpulse_Parms, NULL );

	pFnFireLineImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_RadialImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 27895 ];

	ARB_RadialImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_RadialImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27893 ];

	ARB_RadialImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialImpulseComponent.FireImpulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )

void URB_RadialImpulseComponent::FireImpulse ( struct FVector Origin )
{
	static UFunction* pFnFireImpulse = NULL;

	if ( ! pFnFireImpulse )
		pFnFireImpulse = (UFunction*) UObject::GObjObjects()->Data[ 27888 ];

	URB_RadialImpulseComponent_execFireImpulse_Parms FireImpulse_Parms;
	memcpy ( &FireImpulse_Parms.Origin, &Origin, 0xC );

	pFnFireImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireImpulse, &FireImpulse_Parms, NULL );

	pFnFireImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Spring::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 27922 ];

	URB_Spring_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.SetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     InComponent1                   ( CPF_Parm )
// struct FName                   InBoneName1                    ( CPF_Parm )
// struct FVector                 Position1                      ( CPF_Parm )
// class UPrimitiveComponent*     InComponent2                   ( CPF_Parm )
// struct FName                   InBoneName2                    ( CPF_Parm )
// struct FVector                 Position2                      ( CPF_Parm )

void URB_Spring::SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 )
{
	static UFunction* pFnSetComponents = NULL;

	if ( ! pFnSetComponents )
		pFnSetComponents = (UFunction*) UObject::GObjObjects()->Data[ 27915 ];

	URB_Spring_execSetComponents_Parms SetComponents_Parms;
	SetComponents_Parms.InComponent1 = InComponent1;
	memcpy ( &SetComponents_Parms.InBoneName1, &InBoneName1, 0x8 );
	memcpy ( &SetComponents_Parms.Position1, &Position1, 0xC );
	SetComponents_Parms.InComponent2 = InComponent2;
	memcpy ( &SetComponents_Parms.InBoneName2, &InBoneName2, 0x8 );
	memcpy ( &SetComponents_Parms.Position2, &Position2, 0xC );

	pFnSetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponents, &SetComponents_Parms, NULL );

	pFnSetComponents->FunctionFlags |= 0x400;
};

// Function Engine.RB_Thruster.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_Thruster::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27925 ];

	ARB_Thruster_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SVehicle.SetAllWheelParticleSystem
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         NewSystem                      ( CPF_Parm )

void ASVehicle::SetAllWheelParticleSystem ( class UParticleSystem* NewSystem )
{
	static UFunction* pFnSetAllWheelParticleSystem = NULL;

	if ( ! pFnSetAllWheelParticleSystem )
		pFnSetAllWheelParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 30847 ];

	ASVehicle_execSetAllWheelParticleSystem_Parms SetAllWheelParticleSystem_Parms;
	SetAllWheelParticleSystem_Parms.NewSystem = NewSystem;

	this->ProcessEvent ( pFnSetAllWheelParticleSystem, &SetAllWheelParticleSystem_Parms, NULL );
};

// Function Engine.SVehicle.GetSVehicleDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm )

void ASVehicle::GetSVehicleDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetSVehicleDebug = NULL;

	if ( ! pFnGetSVehicleDebug )
		pFnGetSVehicleDebug = (UFunction*) UObject::GObjObjects()->Data[ 30844 ];

	ASVehicle_execGetSVehicleDebug_Parms GetSVehicleDebug_Parms;

	this->ProcessEvent ( pFnGetSVehicleDebug, &GetSVehicleDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetSVehicleDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.SVehicle.HermiteEval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Slip                           ( CPF_Parm )

float ASVehicle::HermiteEval ( float Slip )
{
	static UFunction* pFnHermiteEval = NULL;

	if ( ! pFnHermiteEval )
		pFnHermiteEval = (UFunction*) UObject::GObjObjects()->Data[ 30832 ];

	ASVehicle_execHermiteEval_Parms HermiteEval_Parms;
	HermiteEval_Parms.Slip = Slip;

	this->ProcessEvent ( pFnHermiteEval, &HermiteEval_Parms, NULL );

	return HermiteEval_Parms.ReturnValue;
};

// Function Engine.SVehicle.DisplayWheelsDebug
// [0x00820102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void ASVehicle::DisplayWheelsDebug ( class AHUD* HUD, float YL )
{
	static UFunction* pFnDisplayWheelsDebug = NULL;

	if ( ! pFnDisplayWheelsDebug )
		pFnDisplayWheelsDebug = (UFunction*) UObject::GObjObjects()->Data[ 30817 ];

	ASVehicle_execDisplayWheelsDebug_Parms DisplayWheelsDebug_Parms;
	DisplayWheelsDebug_Parms.HUD = HUD;
	DisplayWheelsDebug_Parms.YL = YL;

	this->ProcessEvent ( pFnDisplayWheelsDebug, &DisplayWheelsDebug_Parms, NULL );
};

// Function Engine.SVehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 30810 ];

	ASVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.SVehicle.PostTeleport
// [0x00020002] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void ASVehicle::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 30808 ];

	ASVehicle_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.SVehicle.SuspensionHeavyShift
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASVehicle::eventSuspensionHeavyShift ( float Delta )
{
	static UFunction* pFnSuspensionHeavyShift = NULL;

	if ( ! pFnSuspensionHeavyShift )
		pFnSuspensionHeavyShift = (UFunction*) UObject::GObjObjects()->Data[ 30806 ];

	ASVehicle_eventSuspensionHeavyShift_Parms SuspensionHeavyShift_Parms;
	SuspensionHeavyShift_Parms.Delta = Delta;

	this->ProcessEvent ( pFnSuspensionHeavyShift, &SuspensionHeavyShift_Parms, NULL );
};

// Function Engine.SVehicle.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASVehicle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 30801 ];

	ASVehicle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.SVehicle.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void ASVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 30800 ];

	ASVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayExitSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayExitSound ( )
{
	static UFunction* pFnVehiclePlayExitSound = NULL;

	if ( ! pFnVehiclePlayExitSound )
		pFnVehiclePlayExitSound = (UFunction*) UObject::GObjObjects()->Data[ 30799 ];

	ASVehicle_execVehiclePlayExitSound_Parms VehiclePlayExitSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayExitSound, &VehiclePlayExitSound_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayEnterSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayEnterSound ( )
{
	static UFunction* pFnVehiclePlayEnterSound = NULL;

	if ( ! pFnVehiclePlayEnterSound )
		pFnVehiclePlayEnterSound = (UFunction*) UObject::GObjObjects()->Data[ 30798 ];

	ASVehicle_execVehiclePlayEnterSound_Parms VehiclePlayEnterSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayEnterSound, &VehiclePlayEnterSound_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSoundTimed ( )
{
	static UFunction* pFnStopEngineSoundTimed = NULL;

	if ( ! pFnStopEngineSoundTimed )
		pFnStopEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 30797 ];

	ASVehicle_execStopEngineSoundTimed_Parms StopEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStopEngineSoundTimed, &StopEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSound ( )
{
	static UFunction* pFnStopEngineSound = NULL;

	if ( ! pFnStopEngineSound )
		pFnStopEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 30796 ];

	ASVehicle_execStopEngineSound_Parms StopEngineSound_Parms;

	this->ProcessEvent ( pFnStopEngineSound, &StopEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSoundTimed ( )
{
	static UFunction* pFnStartEngineSoundTimed = NULL;

	if ( ! pFnStartEngineSoundTimed )
		pFnStartEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 30795 ];

	ASVehicle_execStartEngineSoundTimed_Parms StartEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStartEngineSoundTimed, &StartEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSound ( )
{
	static UFunction* pFnStartEngineSound = NULL;

	if ( ! pFnStartEngineSound )
		pFnStartEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 30794 ];

	ASVehicle_execStartEngineSound_Parms StartEngineSound_Parms;

	this->ProcessEvent ( pFnStartEngineSound, &StartEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.HasWheelsOnGround
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASVehicle::HasWheelsOnGround ( )
{
	static UFunction* pFnHasWheelsOnGround = NULL;

	if ( ! pFnHasWheelsOnGround )
		pFnHasWheelsOnGround = (UFunction*) UObject::GObjObjects()->Data[ 30792 ];

	ASVehicle_execHasWheelsOnGround_Parms HasWheelsOnGround_Parms;

	pFnHasWheelsOnGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasWheelsOnGround, &HasWheelsOnGround_Parms, NULL );

	pFnHasWheelsOnGround->FunctionFlags |= 0x400;

	return HasWheelsOnGround_Parms.ReturnValue;
};

// Function Engine.SVehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ASVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 30789 ];

	ASVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.SVehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName ASVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 30786 ];

	ASVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.SVehicle.CalcCamera
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASVehicle::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 30777 ];

	ASVehicle_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.SVehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 30772 ];

	ASVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.SVehicle.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 30767 ];

	ASVehicle_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.SVehicle.InitVehicleRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           RagdollMesh                    ( CPF_Parm )
// class UPhysicsAsset*           RagdollPhysAsset               ( CPF_Parm )
// struct FVector                 ActorMove                      ( CPF_Parm )

void ASVehicle::InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove )
{
	static UFunction* pFnInitVehicleRagdoll = NULL;

	if ( ! pFnInitVehicleRagdoll )
		pFnInitVehicleRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 30763 ];

	ASVehicle_execInitVehicleRagdoll_Parms InitVehicleRagdoll_Parms;
	InitVehicleRagdoll_Parms.RagdollMesh = RagdollMesh;
	InitVehicleRagdoll_Parms.RagdollPhysAsset = RagdollPhysAsset;
	memcpy ( &InitVehicleRagdoll_Parms.ActorMove, &ActorMove, 0xC );

	pFnInitVehicleRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitVehicleRagdoll, &InitVehicleRagdoll_Parms, NULL );

	pFnInitVehicleRagdoll->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.TakeRadiusDamage
// [0x00820102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void ASVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 30748 ];

	ASVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.SVehicle.StopVehicleSounds
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopVehicleSounds ( )
{
	static UFunction* pFnStopVehicleSounds = NULL;

	if ( ! pFnStopVehicleSounds )
		pFnStopVehicleSounds = (UFunction*) UObject::GObjObjects()->Data[ 30747 ];

	ASVehicle_execStopVehicleSounds_Parms StopVehicleSounds_Parms;

	this->ProcessEvent ( pFnStopVehicleSounds, &StopVehicleSounds_Parms, NULL );
};

// Function Engine.SVehicle.TurnOff
// [0x00020102] 
// Parameters infos:

void ASVehicle::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 30746 ];

	ASVehicle_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.SVehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 30745 ];

	ASVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SVehicle.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm )

void ASVehicle::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 30741 ];

	ASVehicle_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.SVehicle.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30740 ];

	ASVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SVehicle.SetWheelCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            WheelNum                       ( CPF_Parm )
// unsigned long                  bCollision                     ( CPF_Parm )

void ASVehicle::SetWheelCollision ( int WheelNum, unsigned long bCollision )
{
	static UFunction* pFnSetWheelCollision = NULL;

	if ( ! pFnSetWheelCollision )
		pFnSetWheelCollision = (UFunction*) UObject::GObjObjects()->Data[ 30737 ];

	ASVehicle_execSetWheelCollision_Parms SetWheelCollision_Parms;
	SetWheelCollision_Parms.WheelNum = WheelNum;
	SetWheelCollision_Parms.bCollision = bCollision;

	pFnSetWheelCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelCollision, &SetWheelCollision_Parms, NULL );

	pFnSetWheelCollision->FunctionFlags |= 0x400;
};

// Function Engine.ForceFieldShape.GetDrawComponent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPrimitiveComponent* UForceFieldShape::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 19655 ];

	UForceFieldShape_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShape.FillByCylinder
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShape::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 19650 ];

	UForceFieldShape_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByCapsule
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 19647 ];

	UForceFieldShape_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByBox
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Dimension                      ( CPF_Parm )

void UForceFieldShape::eventFillByBox ( struct FVector Dimension )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 19645 ];

	UForceFieldShape_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Dimension, &Dimension, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillBySphere
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 19643 ];

	UForceFieldShape_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPrimitiveComponent* UForceFieldShapeBox::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 19672 ];

	UForceFieldShapeBox_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeBox.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 19667 ];

	UForceFieldShapeBox_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 19664 ];

	UForceFieldShapeBox_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 19662 ];

	UForceFieldShapeBox_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 19660 ];

	UForceFieldShapeBox_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetRadii
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UForceFieldShapeBox::eventGetRadii ( )
{
	static UFunction* pFnGetRadii = NULL;

	if ( ! pFnGetRadii )
		pFnGetRadii = (UFunction*) UObject::GObjObjects()->Data[ 19658 ];

	UForceFieldShapeBox_eventGetRadii_Parms GetRadii_Parms;

	this->ProcessEvent ( pFnGetRadii, &GetRadii_Parms, NULL );

	return GetRadii_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPrimitiveComponent* UForceFieldShapeCapsule::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 19692 ];

	UForceFieldShapeCapsule_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 19687 ];

	UForceFieldShapeCapsule_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 19684 ];

	UForceFieldShapeCapsule_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 19682 ];

	UForceFieldShapeCapsule_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 19680 ];

	UForceFieldShapeCapsule_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 19678 ];

	UForceFieldShapeCapsule_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetHeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetHeight ( )
{
	static UFunction* pFnGetHeight = NULL;

	if ( ! pFnGetHeight )
		pFnGetHeight = (UFunction*) UObject::GObjObjects()->Data[ 19676 ];

	UForceFieldShapeCapsule_eventGetHeight_Parms GetHeight_Parms;

	this->ProcessEvent ( pFnGetHeight, &GetHeight_Parms, NULL );

	return GetHeight_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPrimitiveComponent* UForceFieldShapeSphere::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 19714 ];

	UForceFieldShapeSphere_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 19705 ];

	UForceFieldShapeSphere_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 19702 ];

	UForceFieldShapeSphere_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 19700 ];

	UForceFieldShapeSphere_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 19698 ];

	UForceFieldShapeSphere_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeSphere::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 19696 ];

	UForceFieldShapeSphere_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.NxForceField.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANxForceField::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 22810 ];

	ANxForceField_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ANxGenericForceFieldBrush::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 22913 ];

	ANxGenericForceFieldBrush_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANxGenericForceFieldBrush::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22912 ];

	ANxGenericForceFieldBrush_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.RB_CylindricalForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_CylindricalForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27802 ];

	ARB_CylindricalForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 27879 ];

	ARB_RadialForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SequenceObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USequenceObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 14360 ];

	USequenceObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 14358 ];

	USequenceObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 14355 ];

	USequenceObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoLevelSequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoLevelSequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoLevelSequenceAllowed )
		pFnIsPastingIntoLevelSequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 14353 ];

	USequenceObject_eventIsPastingIntoLevelSequenceAllowed_Parms IsPastingIntoLevelSequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoLevelSequenceAllowed, &IsPastingIntoLevelSequenceAllowed_Parms, NULL );

	return IsPastingIntoLevelSequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 14351 ];

	USequenceObject_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetWorldInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* USequenceObject::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 14349 ];

	USequenceObject_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.SequenceObject.ScriptLog
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 LogText                        ( CPF_Parm )
// unsigned long                  bWarning                       ( CPF_OptionalParm | CPF_Parm )

void USequenceObject::ScriptLog ( struct FString LogText, unsigned long bWarning )
{
	static UFunction* pFnScriptLog = NULL;

	if ( ! pFnScriptLog )
		pFnScriptLog = (UFunction*) UObject::GObjObjects()->Data[ 8442 ];

	USequenceObject_execScriptLog_Parms ScriptLog_Parms;
	memcpy ( &ScriptLog_Parms.LogText, &LogText, 0xC );
	ScriptLog_Parms.bWarning = bWarning;

	pFnScriptLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptLog, &ScriptLog_Parms, NULL );

	pFnScriptLog->FunctionFlags |= 0x400;
};

// Function Engine.SequenceVariable.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 21449 ];

	USequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class AController* USequenceOp::GetController ( class AActor* TheActor )
{
	static UFunction* pFnGetController = NULL;

	if ( ! pFnGetController )
		pFnGetController = (UFunction*) UObject::GObjObjects()->Data[ 14403 ];

	USequenceOp_execGetController_Parms GetController_Parms;
	GetController_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetController, &GetController_Parms, NULL );

	return GetController_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetPawn
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class APawn* USequenceOp::GetPawn ( class AActor* TheActor )
{
	static UFunction* pFnGetPawn = NULL;

	if ( ! pFnGetPawn )
		pFnGetPawn = (UFunction*) UObject::GObjObjects()->Data[ 14398 ];

	USequenceOp_execGetPawn_Parms GetPawn_Parms;
	GetPawn_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetPawn, &GetPawn_Parms, NULL );

	return GetPawn_Parms.ReturnValue;
};

// Function Engine.SequenceOp.Reset
// [0x00020000] 
// Parameters infos:

void USequenceOp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 14397 ];

	USequenceOp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceOp.PublishLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PublishLinkedVariableValues ( )
{
	static UFunction* pFnPublishLinkedVariableValues = NULL;

	if ( ! pFnPublishLinkedVariableValues )
		pFnPublishLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 14396 ];

	USequenceOp_execPublishLinkedVariableValues_Parms PublishLinkedVariableValues_Parms;

	pFnPublishLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPublishLinkedVariableValues, &PublishLinkedVariableValues_Parms, NULL );

	pFnPublishLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.PopulateLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PopulateLinkedVariableValues ( )
{
	static UFunction* pFnPopulateLinkedVariableValues = NULL;

	if ( ! pFnPopulateLinkedVariableValues )
		pFnPopulateLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 14395 ];

	USequenceOp_execPopulateLinkedVariableValues_Parms PopulateLinkedVariableValues_Parms;

	pFnPopulateLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateLinkedVariableValues, &PopulateLinkedVariableValues_Parms, NULL );

	pFnPopulateLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.VersionUpdated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USequenceOp::eventVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 14392 ];

	USequenceOp_eventVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SequenceOp.Deactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 14391 ];

	USequenceOp_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.SequenceOp.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 14390 ];

	USequenceOp_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SequenceOp.ActivateNamedOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 LinkDesc                       ( CPF_Parm )

bool USequenceOp::ActivateNamedOutputLink ( struct FString LinkDesc )
{
	static UFunction* pFnActivateNamedOutputLink = NULL;

	if ( ! pFnActivateNamedOutputLink )
		pFnActivateNamedOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 14387 ];

	USequenceOp_execActivateNamedOutputLink_Parms ActivateNamedOutputLink_Parms;
	memcpy ( &ActivateNamedOutputLink_Parms.LinkDesc, &LinkDesc, 0xC );

	pFnActivateNamedOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateNamedOutputLink, &ActivateNamedOutputLink_Parms, NULL );

	pFnActivateNamedOutputLink->FunctionFlags |= 0x400;

	return ActivateNamedOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.ActivateOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OutputIdx                      ( CPF_Parm )

bool USequenceOp::ActivateOutputLink ( int OutputIdx )
{
	static UFunction* pFnActivateOutputLink = NULL;

	if ( ! pFnActivateOutputLink )
		pFnActivateOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 14384 ];

	USequenceOp_execActivateOutputLink_Parms ActivateOutputLink_Parms;
	ActivateOutputLink_Parms.OutputIdx = OutputIdx;

	pFnActivateOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOutputLink, &ActivateOutputLink_Parms, NULL );

	pFnActivateOutputLink->FunctionFlags |= 0x400;

	return ActivateOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.LinkedVariables
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  VarClass                       ( CPF_Parm )
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm )
// class USequenceVariable*       OutVariable                    ( CPF_Parm | CPF_OutParm )

void USequenceOp::LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable )
{
	static UFunction* pFnLinkedVariables = NULL;

	if ( ! pFnLinkedVariables )
		pFnLinkedVariables = (UFunction*) UObject::GObjObjects()->Data[ 8664 ];

	USequenceOp_execLinkedVariables_Parms LinkedVariables_Parms;
	LinkedVariables_Parms.VarClass = VarClass;
	memcpy ( &LinkedVariables_Parms.inDesc, &inDesc, 0xC );

	pFnLinkedVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkedVariables, &LinkedVariables_Parms, NULL );

	pFnLinkedVariables->FunctionFlags |= 0x400;

	if ( OutVariable )
		*OutVariable = LinkedVariables_Parms.OutVariable;
};

// Function Engine.SequenceOp.GetBoolVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm )
// TArray< unsigned char >        boolVars                       ( CPF_Parm | CPF_OutParm )

void USequenceOp::GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars )
{
	static UFunction* pFnGetBoolVars = NULL;

	if ( ! pFnGetBoolVars )
		pFnGetBoolVars = (UFunction*) UObject::GObjObjects()->Data[ 14377 ];

	USequenceOp_execGetBoolVars_Parms GetBoolVars_Parms;
	memcpy ( &GetBoolVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetBoolVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoolVars, &GetBoolVars_Parms, NULL );

	pFnGetBoolVars->FunctionFlags |= 0x400;

	if ( boolVars )
		memcpy ( boolVars, &GetBoolVars_Parms.boolVars, 0xC );
};

// Function Engine.SequenceOp.GetInterpDataVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm )
// TArray< class UInterpData* >   outIData                       ( CPF_Parm | CPF_OutParm )

void USequenceOp::GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData )
{
	static UFunction* pFnGetInterpDataVars = NULL;

	if ( ! pFnGetInterpDataVars )
		pFnGetInterpDataVars = (UFunction*) UObject::GObjObjects()->Data[ 14373 ];

	USequenceOp_execGetInterpDataVars_Parms GetInterpDataVars_Parms;
	memcpy ( &GetInterpDataVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetInterpDataVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInterpDataVars, &GetInterpDataVars_Parms, NULL );

	pFnGetInterpDataVars->FunctionFlags |= 0x400;

	if ( outIData )
		memcpy ( outIData, &GetInterpDataVars_Parms.outIData, 0xC );
};

// Function Engine.SequenceOp.GetObjectVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm )
// TArray< class UObject* >       objVars                        ( CPF_Parm | CPF_OutParm )

void USequenceOp::GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars )
{
	static UFunction* pFnGetObjectVars = NULL;

	if ( ! pFnGetObjectVars )
		pFnGetObjectVars = (UFunction*) UObject::GObjObjects()->Data[ 5951 ];

	USequenceOp_execGetObjectVars_Parms GetObjectVars_Parms;
	memcpy ( &GetObjectVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetObjectVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectVars, &GetObjectVars_Parms, NULL );

	pFnGetObjectVars->FunctionFlags |= 0x400;

	if ( objVars )
		memcpy ( objVars, &GetObjectVars_Parms.objVars, 0xC );
};

// Function Engine.SequenceOp.GetLinkedObjects
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  ObjectType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceObject* > out_Objects                    ( CPF_Parm | CPF_OutParm )

void USequenceOp::GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects )
{
	static UFunction* pFnGetLinkedObjects = NULL;

	if ( ! pFnGetLinkedObjects )
		pFnGetLinkedObjects = (UFunction*) UObject::GObjObjects()->Data[ 14365 ];

	USequenceOp_execGetLinkedObjects_Parms GetLinkedObjects_Parms;
	GetLinkedObjects_Parms.ObjectType = ObjectType;
	GetLinkedObjects_Parms.bRecurse = bRecurse;

	pFnGetLinkedObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinkedObjects, &GetLinkedObjects_Parms, NULL );

	pFnGetLinkedObjects->FunctionFlags |= 0x400;

	if ( out_Objects )
		memcpy ( out_Objects, &GetLinkedObjects_Parms.out_Objects, 0xC );
};

// Function Engine.SequenceOp.HasLinkedOps
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bConsiderInputLinks            ( CPF_OptionalParm | CPF_Parm )

bool USequenceOp::HasLinkedOps ( unsigned long bConsiderInputLinks )
{
	static UFunction* pFnHasLinkedOps = NULL;

	if ( ! pFnHasLinkedOps )
		pFnHasLinkedOps = (UFunction*) UObject::GObjObjects()->Data[ 14362 ];

	USequenceOp_execHasLinkedOps_Parms HasLinkedOps_Parms;
	HasLinkedOps_Parms.bConsiderInputLinks = bConsiderInputLinks;

	pFnHasLinkedOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasLinkedOps, &HasLinkedOps_Parms, NULL );

	pFnHasLinkedOps->FunctionFlags |= 0x400;

	return HasLinkedOps_Parms.ReturnValue;
};

// Function Engine.Sequence.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void USequence::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 27358 ];

	USequence_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.Reset
// [0x00020002] 
// Parameters infos:

void USequence::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 27355 ];

	USequence_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Sequence.FindSeqObjectsByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_Parm )
// TArray< class USequenceObject* > OutputObjects                  ( CPF_Parm | CPF_OutParm )

void USequence::FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByClass = NULL;

	if ( ! pFnFindSeqObjectsByClass )
		pFnFindSeqObjectsByClass = (UFunction*) UObject::GObjObjects()->Data[ 8467 ];

	USequence_execFindSeqObjectsByClass_Parms FindSeqObjectsByClass_Parms;
	FindSeqObjectsByClass_Parms.DesiredClass = DesiredClass;
	FindSeqObjectsByClass_Parms.bRecursive = bRecursive;

	pFnFindSeqObjectsByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByClass, &FindSeqObjectsByClass_Parms, NULL );

	pFnFindSeqObjectsByClass->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByClass_Parms.OutputObjects, 0xC );
};

// Function Engine.PrefabSequence.GetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APrefabInstance* UPrefabSequence::GetOwnerPrefab ( )
{
	static UFunction* pFnGetOwnerPrefab = NULL;

	if ( ! pFnGetOwnerPrefab )
		pFnGetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 27363 ];

	UPrefabSequence_execGetOwnerPrefab_Parms GetOwnerPrefab_Parms;

	pFnGetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerPrefab, &GetOwnerPrefab_Parms, NULL );

	pFnGetOwnerPrefab->FunctionFlags |= 0x400;

	return GetOwnerPrefab_Parms.ReturnValue;
};

// Function Engine.PrefabSequence.SetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         InOwner                        ( CPF_Parm )

void UPrefabSequence::SetOwnerPrefab ( class APrefabInstance* InOwner )
{
	static UFunction* pFnSetOwnerPrefab = NULL;

	if ( ! pFnSetOwnerPrefab )
		pFnSetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 27361 ];

	UPrefabSequence_execSetOwnerPrefab_Parms SetOwnerPrefab_Parms;
	SetOwnerPrefab_Parms.InOwner = InOwner;

	pFnSetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerPrefab, &SetOwnerPrefab_Parms, NULL );

	pFnSetOwnerPrefab->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActivateRemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28102 ];

	USeqAct_ActivateRemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USeqAct_Latent::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 28109 ];

	USeqAct_Latent_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.AbortFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  latentActor                    ( CPF_Parm )

void USeqAct_Latent::AbortFor ( class AActor* latentActor )
{
	static UFunction* pFnAbortFor = NULL;

	if ( ! pFnAbortFor )
		pFnAbortFor = (UFunction*) UObject::GObjObjects()->Data[ 28107 ];

	USeqAct_Latent_execAbortFor_Parms AbortFor_Parms;
	AbortFor_Parms.latentActor = latentActor;

	pFnAbortFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbortFor, &AbortFor_Parms, NULL );

	pFnAbortFor->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActorFactory::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28129 ];

	USeqAct_ActorFactory_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_SetSequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28131 ];

	USeqAct_SetSequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AIMoveToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28145 ];

	USeqAct_AIMoveToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraLookAt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28179 ];

	USeqAct_CameraLookAt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CauseDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CauseDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28186 ];

	USeqAct_CauseDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CauseDamageRadial.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CauseDamageRadial::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28194 ];

	USeqAct_CauseDamageRadial_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ChangeCollision::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28196 ];

	USeqAct_ChangeCollision_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConsoleCommand::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28203 ];

	USeqAct_ConsoleCommand_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// [0x00020002] 
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqAct_ConsoleCommand::VersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 28200 ];

	USeqAct_ConsoleCommand_execVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SeqAct_CrowdSpawner.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CrowdSpawner::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28326 ];

	USeqAct_CrowdSpawner_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrowdSpawner.SpawnAgent
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class ACrowdAgent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SpawnLoc                       ( CPF_Parm )

class ACrowdAgent* USeqAct_CrowdSpawner::eventSpawnAgent ( class AActor* SpawnLoc )
{
	static UFunction* pFnSpawnAgent = NULL;

	if ( ! pFnSpawnAgent )
		pFnSpawnAgent = (UFunction*) UObject::GObjObjects()->Data[ 28317 ];

	USeqAct_CrowdSpawner_eventSpawnAgent_Parms SpawnAgent_Parms;
	SpawnAgent_Parms.SpawnLoc = SpawnLoc;

	this->ProcessEvent ( pFnSpawnAgent, &SpawnAgent_Parms, NULL );

	return SpawnAgent_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrowdSpawner.CreateAttachments
// [0x00020102] 
// Parameters infos:
// class ACrowdAgent*             Agent                          ( CPF_Parm )

void USeqAct_CrowdSpawner::CreateAttachments ( class ACrowdAgent* Agent )
{
	static UFunction* pFnCreateAttachments = NULL;

	if ( ! pFnCreateAttachments )
		pFnCreateAttachments = (UFunction*) UObject::GObjObjects()->Data[ 28307 ];

	USeqAct_CrowdSpawner_execCreateAttachments_Parms CreateAttachments_Parms;
	CreateAttachments_Parms.Agent = Agent;

	this->ProcessEvent ( pFnCreateAttachments, &CreateAttachments_Parms, NULL );
};

// Function Engine.SeqAct_CrowdSpawner.UpdateSpawning
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USeqAct_CrowdSpawner::UpdateSpawning ( float DeltaSeconds )
{
	static UFunction* pFnUpdateSpawning = NULL;

	if ( ! pFnUpdateSpawning )
		pFnUpdateSpawning = (UFunction*) UObject::GObjObjects()->Data[ 28305 ];

	USeqAct_CrowdSpawner_execUpdateSpawning_Parms UpdateSpawning_Parms;
	UpdateSpawning_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateSpawning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpawning, &UpdateSpawning_Parms, NULL );

	pFnUpdateSpawning->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_CrowdSpawner.KillAgents
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void USeqAct_CrowdSpawner::KillAgents ( )
{
	static UFunction* pFnKillAgents = NULL;

	if ( ! pFnKillAgents )
		pFnKillAgents = (UFunction*) UObject::GObjObjects()->Data[ 28304 ];

	USeqAct_CrowdSpawner_execKillAgents_Parms KillAgents_Parms;

	pFnKillAgents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillAgents, &KillAgents_Parms, NULL );

	pFnKillAgents->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_CrowdSpawner.CacheSpawnerVars
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void USeqAct_CrowdSpawner::CacheSpawnerVars ( )
{
	static UFunction* pFnCacheSpawnerVars = NULL;

	if ( ! pFnCacheSpawnerVars )
		pFnCacheSpawnerVars = (UFunction*) UObject::GObjObjects()->Data[ 28303 ];

	USeqAct_CrowdSpawner_execCacheSpawnerVars_Parms CacheSpawnerVars_Parms;

	pFnCacheSpawnerVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheSpawnerVars, &CacheSpawnerVars_Parms, NULL );

	pFnCacheSpawnerVars->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Delay.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Delay::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28336 ];

	USeqAct_Delay_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Gate.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Gate::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28364 ];

	USeqAct_Gate_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Interp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 28411 ];

	USeqAct_Interp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void USeqAct_Interp::AddPlayerToDirectorTracks ( class APlayerController* PC )
{
	static UFunction* pFnAddPlayerToDirectorTracks = NULL;

	if ( ! pFnAddPlayerToDirectorTracks )
		pFnAddPlayerToDirectorTracks = (UFunction*) UObject::GObjObjects()->Data[ 8549 ];

	USeqAct_Interp_execAddPlayerToDirectorTracks_Parms AddPlayerToDirectorTracks_Parms;
	AddPlayerToDirectorTracks_Parms.PC = PC;

	pFnAddPlayerToDirectorTracks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayerToDirectorTracks, &AddPlayerToDirectorTracks_Parms, NULL );

	pFnAddPlayerToDirectorTracks->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqAct_Interp::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 28409 ];

	USeqAct_Interp_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.SetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewPosition                    ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_OptionalParm | CPF_Parm )

void USeqAct_Interp::SetPosition ( float NewPosition, unsigned long bJump )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 28406 ];

	USeqAct_Interp_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewPosition = NewPosition;
	SetPosition_Parms.bJump = bJump;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_IsInObjectList::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28414 ];

	USeqAct_IsInObjectList_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Log::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28432 ];

	USeqAct_Log_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Log::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28429 ];

	USeqAct_Log_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ParticleEventGenerator::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28465 ];

	USeqAct_ParticleEventGenerator_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlayCameraAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28476 ];

	USeqAct_PlayCameraAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlaySound::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28489 ];

	USeqAct_PlaySound_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Switch.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Switch::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28502 ];

	USeqAct_Switch_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetCameraTarget::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28515 ];

	USeqAct_SetCameraTarget_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetFloat::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28538 ];

	USeqAct_SetFloat_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetInt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetInt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28542 ];

	USeqAct_SetInt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28559 ];

	USeqAct_SetObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28567 ];

	USeqAct_SetString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Timer.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Timer::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28588 ];

	USeqAct_Timer_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Toggle.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Toggle::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28591 ];

	USeqAct_Toggle_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceCondition.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceCondition::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28641 ];

	USequenceCondition_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqCond_IsLoggedIn::eventCheckLogins ( )
{
	static UFunction* pFnCheckLogins = NULL;

	if ( ! pFnCheckLogins )
		pFnCheckLogins = (UFunction*) UObject::GObjObjects()->Data[ 28655 ];

	USeqCond_IsLoggedIn_eventCheckLogins_Parms CheckLogins_Parms;

	this->ProcessEvent ( pFnCheckLogins, &CheckLogins_Parms, NULL );

	return CheckLogins_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28667 ];

	USeqCond_SwitchBase_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28665 ];

	USeqCond_SwitchBase_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchBase::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28662 ];

	USeqCond_SwitchBase_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchBase::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 28661 ];

	USeqCond_SwitchBase_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28680 ];

	USeqCond_SwitchClass_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28678 ];

	USeqCond_SwitchClass_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchClass::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28675 ];

	USeqCond_SwitchClass_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchClass::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 28674 ];

	USeqCond_SwitchClass_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchName::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28693 ];

	USeqCond_SwitchName_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchName::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28691 ];

	USeqCond_SwitchName_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchName::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28688 ];

	USeqCond_SwitchName_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchName.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchName::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 28687 ];

	USeqCond_SwitchName_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28709 ];

	USeqCond_SwitchObject_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 28707 ];

	USeqCond_SwitchObject_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchObject::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28704 ];

	USeqCond_SwitchObject_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchObject::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 28702 ];

	USeqCond_SwitchObject_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 14435 ];

	USequenceEvent_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USequenceEvent::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 14434 ];

	USequenceEvent_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USequenceEvent::CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 5984 ];

	USequenceEvent_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.InOriginator = InOriginator;
	CheckActivate_Parms.InInstigator = InInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 14426 ];

	USequenceEvent_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// [0x00020002] 
// Parameters infos:

void USeqEvent_Mover::NotifyFinishedOpen ( )
{
	static UFunction* pFnNotifyFinishedOpen = NULL;

	if ( ! pFnNotifyFinishedOpen )
		pFnNotifyFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 28738 ];

	USeqEvent_Mover_execNotifyFinishedOpen_Parms NotifyFinishedOpen_Parms;

	this->ProcessEvent ( pFnNotifyFinishedOpen, &NotifyFinishedOpen_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyDetached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyDetached ( class AActor* Other )
{
	static UFunction* pFnNotifyDetached = NULL;

	if ( ! pFnNotifyDetached )
		pFnNotifyDetached = (UFunction*) UObject::GObjObjects()->Data[ 28733 ];

	USeqEvent_Mover_execNotifyDetached_Parms NotifyDetached_Parms;
	NotifyDetached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyDetached, &NotifyDetached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyAttached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyAttached ( class AActor* Other )
{
	static UFunction* pFnNotifyAttached = NULL;

	if ( ! pFnNotifyAttached )
		pFnNotifyAttached = (UFunction*) UObject::GObjObjects()->Data[ 28729 ];

	USeqEvent_Mover_execNotifyAttached_Parms NotifyAttached_Parms;
	NotifyAttached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyAttached, &NotifyAttached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// [0x00020002] 
// Parameters infos:
// class AActor*                  Hit                            ( CPF_Parm )

void USeqEvent_Mover::NotifyEncroachingOn ( class AActor* Hit )
{
	static UFunction* pFnNotifyEncroachingOn = NULL;

	if ( ! pFnNotifyEncroachingOn )
		pFnNotifyEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 28724 ];

	USeqEvent_Mover_execNotifyEncroachingOn_Parms NotifyEncroachingOn_Parms;
	NotifyEncroachingOn_Parms.Hit = Hit;

	this->ProcessEvent ( pFnNotifyEncroachingOn, &NotifyEncroachingOn_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Mover::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 28722 ];

	USeqEvent_Mover_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_ParticleEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28749 ];

	USeqEvent_ParticleEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_TakeDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28777 ];

	USeqEvent_TakeDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Reset
// [0x00020002] 
// Parameters infos:

void USeqEvent_TakeDamage::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 28776 ];

	USeqEvent_TakeDamage_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.HandleDamage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  inDamageType                   ( CPF_Parm )
// int                            inAmount                       ( CPF_Parm )

void USeqEvent_TakeDamage::HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount )
{
	static UFunction* pFnHandleDamage = NULL;

	if ( ! pFnHandleDamage )
		pFnHandleDamage = (UFunction*) UObject::GObjObjects()->Data[ 6003 ];

	USeqEvent_TakeDamage_execHandleDamage_Parms HandleDamage_Parms;
	HandleDamage_Parms.InOriginator = InOriginator;
	HandleDamage_Parms.InInstigator = InInstigator;
	HandleDamage_Parms.inDamageType = inDamageType;
	HandleDamage_Parms.inAmount = inAmount;

	this->ProcessEvent ( pFnHandleDamage, &HandleDamage_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  inDamageType                   ( CPF_Parm )

bool USeqEvent_TakeDamage::IsValidDamageType ( class UClass* inDamageType )
{
	static UFunction* pFnIsValidDamageType = NULL;

	if ( ! pFnIsValidDamageType )
		pFnIsValidDamageType = (UFunction*) UObject::GObjObjects()->Data[ 28765 ];

	USeqEvent_TakeDamage_execIsValidDamageType_Parms IsValidDamageType_Parms;
	IsValidDamageType_Parms.inDamageType = inDamageType;

	this->ProcessEvent ( pFnIsValidDamageType, &IsValidDamageType_Parms, NULL );

	return IsValidDamageType_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_Touch::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28802 ];

	USeqEvent_Touch_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USeqEvent_Touch::NotifyTouchingPawnDied ( class APawn* P )
{
	static UFunction* pFnNotifyTouchingPawnDied = NULL;

	if ( ! pFnNotifyTouchingPawnDied )
		pFnNotifyTouchingPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 28800 ];

	USeqEvent_Touch_execNotifyTouchingPawnDied_Parms NotifyTouchingPawnDied_Parms;
	NotifyTouchingPawnDied_Parms.P = P;

	this->ProcessEvent ( pFnNotifyTouchingPawnDied, &NotifyTouchingPawnDied_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Touch::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 28798 ];

	USeqEvent_Touch_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckUnTouchActivate = NULL;

	if ( ! pFnCheckUnTouchActivate )
		pFnCheckUnTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 28793 ];

	USeqEvent_Touch_execCheckUnTouchActivate_Parms CheckUnTouchActivate_Parms;
	CheckUnTouchActivate_Parms.InOriginator = InOriginator;
	CheckUnTouchActivate_Parms.InInstigator = InInstigator;
	CheckUnTouchActivate_Parms.bTest = bTest;

	pFnCheckUnTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUnTouchActivate, &CheckUnTouchActivate_Parms, NULL );

	pFnCheckUnTouchActivate->FunctionFlags |= 0x400;

	return CheckUnTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.CheckTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckTouchActivate = NULL;

	if ( ! pFnCheckTouchActivate )
		pFnCheckTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 8478 ];

	USeqEvent_Touch_execCheckTouchActivate_Parms CheckTouchActivate_Parms;
	CheckTouchActivate_Parms.InOriginator = InOriginator;
	CheckTouchActivate_Parms.InInstigator = InInstigator;
	CheckTouchActivate_Parms.bTest = bTest;

	pFnCheckTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTouchActivate, &CheckTouchActivate_Parms, NULL );

	pFnCheckTouchActivate->FunctionFlags |= 0x400;

	return CheckTouchActivate_Parms.ReturnValue;
};

// Function Engine.SequenceFrame.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceFrame::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28822 ];

	USequenceFrame_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqVar_Object.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_Object::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 28842 ];

	USeqVar_Object_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_Object.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Object::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 28840 ];

	USeqVar_Object_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_ObjectList.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_ObjectList::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 28857 ];

	USeqVar_ObjectList_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_ObjectList.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_ObjectList::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 28855 ];

	USeqVar_ObjectList_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Player::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 28869 ];

	USeqVar_Player_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.AudioTrack.OnStopVoiceTrackAC
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm )

void UAudioTrack::OnStopVoiceTrackAC ( class UAudioComponent* AC )
{
	static UFunction* pFnOnStopVoiceTrackAC = NULL;

	if ( ! pFnOnStopVoiceTrackAC )
		pFnOnStopVoiceTrackAC = (UFunction*) UObject::GObjObjects()->Data[ 11357 ];

	UAudioTrack_execOnStopVoiceTrackAC_Parms OnStopVoiceTrackAC_Parms;
	OnStopVoiceTrackAC_Parms.AC = AC;

	pFnOnStopVoiceTrackAC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStopVoiceTrackAC, &OnStopVoiceTrackAC_Parms, NULL );

	pFnOnStopVoiceTrackAC->FunctionFlags |= 0x400;
};

// Function Engine.Terrain.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATerrain::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31149 ];

	ATerrain_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Terrain.CalcLayerBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATerrain::CalcLayerBounds ( )
{
	static UFunction* pFnCalcLayerBounds = NULL;

	if ( ! pFnCalcLayerBounds )
		pFnCalcLayerBounds = (UFunction*) UObject::GObjObjects()->Data[ 31148 ];

	ATerrain_execCalcLayerBounds_Parms CalcLayerBounds_Parms;

	pFnCalcLayerBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcLayerBounds, &CalcLayerBounds_Parms, NULL );

	pFnCalcLayerBounds->FunctionFlags |= 0x400;
};

// Function Engine.TerrainLayerSetup.PostBeginPlay
// [0x00020100] 
// Parameters infos:

void UTerrainLayerSetup::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31209 ];

	UTerrainLayerSetup_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.TerrainLayerSetup.SetMaterials
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FTerrainFilteredMaterial > NewMaterials                   ( CPF_Parm )

void UTerrainLayerSetup::SetMaterials ( TArray< struct FTerrainFilteredMaterial > NewMaterials )
{
	static UFunction* pFnSetMaterials = NULL;

	if ( ! pFnSetMaterials )
		pFnSetMaterials = (UFunction*) UObject::GObjObjects()->Data[ 31206 ];

	UTerrainLayerSetup_execSetMaterials_Parms SetMaterials_Parms;
	memcpy ( &SetMaterials_Parms.NewMaterials, &NewMaterials, 0xC );

	pFnSetMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterials, &SetMaterials_Parms, NULL );

	pFnSetMaterials->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.NotifyPlayerRemoved
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 13690 ];

	UInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.Interaction.NotifyPlayerAdded
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 13687 ];

	UInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.Interaction.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:

void UInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 13686 ];

	UInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.Interaction.Initialized
// [0x00020000] 
// Parameters infos:

void UInteraction::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 13685 ];

	UInteraction_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Interaction.OnInitialize
// [0x00120000] 
// Parameters infos:

void UInteraction::OnInitialize ( )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 13684 ];

	UInteraction_execOnInitialize_Parms OnInitialize_Parms;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );
};

// Function Engine.Interaction.Init
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UInteraction::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 13683 ];

	UInteraction_execInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UInteraction::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 13681 ];

	UInteraction_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Interaction.OnReceivedNativeInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm )

bool UInteraction::OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnOnReceivedNativeInputChar = NULL;

	if ( ! pFnOnReceivedNativeInputChar )
		pFnOnReceivedNativeInputChar = (UFunction*) UObject::GObjObjects()->Data[ 13677 ];

	UInteraction_execOnReceivedNativeInputChar_Parms OnReceivedNativeInputChar_Parms;
	OnReceivedNativeInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnOnReceivedNativeInputChar, &OnReceivedNativeInputChar_Parms, NULL );

	return OnReceivedNativeInputChar_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputAxis
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputAxis = NULL;

	if ( ! pFnOnReceivedNativeInputAxis )
		pFnOnReceivedNativeInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 13670 ];

	UInteraction_execOnReceivedNativeInputAxis_Parms OnReceivedNativeInputAxis_Parms;
	OnReceivedNativeInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputAxis_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputAxis_Parms.Delta = Delta;
	OnReceivedNativeInputAxis_Parms.DeltaTime = DeltaTime;
	OnReceivedNativeInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputAxis, &OnReceivedNativeInputAxis_Parms, NULL );

	return OnReceivedNativeInputAxis_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputKey = NULL;

	if ( ! pFnOnReceivedNativeInputKey )
		pFnOnReceivedNativeInputKey = (UFunction*) UObject::GObjObjects()->Data[ 13659 ];

	UInteraction_execOnReceivedNativeInputKey_Parms OnReceivedNativeInputKey_Parms;
	OnReceivedNativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputKey_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputKey_Parms.EventType = EventType;
	OnReceivedNativeInputKey_Parms.AmountDepressed = AmountDepressed;
	OnReceivedNativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputKey, &OnReceivedNativeInputKey_Parms, NULL );

	return OnReceivedNativeInputKey_Parms.ReturnValue;
};

// Function Engine.Console.AppendInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm )

void UConsole::AppendInputText ( struct FString Text )
{
	static UFunction* pFnAppendInputText = NULL;

	if ( ! pFnAppendInputText )
		pFnAppendInputText = (UFunction*) UObject::GObjObjects()->Data[ 13764 ];

	UConsole_execAppendInputText_Parms AppendInputText_Parms;
	memcpy ( &AppendInputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnAppendInputText, &AppendInputText_Parms, NULL );
};

// Function Engine.Console.ProcessControlKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )

bool UConsole::ProcessControlKey ( struct FName Key, unsigned char Event )
{
	static UFunction* pFnProcessControlKey = NULL;

	if ( ! pFnProcessControlKey )
		pFnProcessControlKey = (UFunction*) UObject::GObjObjects()->Data[ 13760 ];

	UConsole_execProcessControlKey_Parms ProcessControlKey_Parms;
	memcpy ( &ProcessControlKey_Parms.Key, &Key, 0x8 );
	ProcessControlKey_Parms.Event = Event;

	this->ProcessEvent ( pFnProcessControlKey, &ProcessControlKey_Parms, NULL );

	return ProcessControlKey_Parms.ReturnValue;
};

// Function Engine.Console.FlushPlayerInput
// [0x00020002] 
// Parameters infos:

void UConsole::FlushPlayerInput ( )
{
	static UFunction* pFnFlushPlayerInput = NULL;

	if ( ! pFnFlushPlayerInput )
		pFnFlushPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 13758 ];

	UConsole_execFlushPlayerInput_Parms FlushPlayerInput_Parms;

	this->ProcessEvent ( pFnFlushPlayerInput, &FlushPlayerInput_Parms, NULL );
};

// Function Engine.Console.IsUIMiniConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIMiniConsoleOpen ( )
{
	static UFunction* pFnIsUIMiniConsoleOpen = NULL;

	if ( ! pFnIsUIMiniConsoleOpen )
		pFnIsUIMiniConsoleOpen = (UFunction*) UObject::GObjObjects()->Data[ 13756 ];

	UConsole_execIsUIMiniConsoleOpen_Parms IsUIMiniConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIMiniConsoleOpen, &IsUIMiniConsoleOpen_Parms, NULL );

	return IsUIMiniConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.IsUIConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIConsoleOpen ( )
{
	static UFunction* pFnIsUIConsoleOpen = NULL;

	if ( ! pFnIsUIConsoleOpen )
		pFnIsUIConsoleOpen = (UFunction*) UObject::GObjObjects()->Data[ 13754 ];

	UConsole_execIsUIConsoleOpen_Parms IsUIConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIConsoleOpen, &IsUIConsoleOpen_Parms, NULL );

	return IsUIConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.InputChar
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm )

bool UConsole::InputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnInputChar = NULL;

	if ( ! pFnInputChar )
		pFnInputChar = (UFunction*) UObject::GObjObjects()->Data[ 13750 ];

	UConsole_execInputChar_Parms InputChar_Parms;
	InputChar_Parms.ControllerId = ControllerId;
	memcpy ( &InputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnInputChar, &InputChar_Parms, NULL );

	return InputChar_Parms.ReturnValue;
};

// Function Engine.Console.InputKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UConsole::InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = (UFunction*) UObject::GObjObjects()->Data[ 13743 ];

	UConsole_execInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.Console.PostRender_Console
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UConsole::PostRender_Console ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender_Console = NULL;

	if ( ! pFnPostRender_Console )
		pFnPostRender_Console = (UFunction*) UObject::GObjObjects()->Data[ 13741 ];

	UConsole_execPostRender_Console_Parms PostRender_Console_Parms;
	PostRender_Console_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender_Console, &PostRender_Console_Parms, NULL );
};

// Function Engine.Console.StartTyping
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )

void UConsole::StartTyping ( struct FString Text )
{
	static UFunction* pFnStartTyping = NULL;

	if ( ! pFnStartTyping )
		pFnStartTyping = (UFunction*) UObject::GObjObjects()->Data[ 13739 ];

	UConsole_execStartTyping_Parms StartTyping_Parms;
	memcpy ( &StartTyping_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnStartTyping, &StartTyping_Parms, NULL );
};

// Function Engine.Console.OutputText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )

void UConsole::eventOutputText ( struct FString Text )
{
	static UFunction* pFnOutputText = NULL;

	if ( ! pFnOutputText )
		pFnOutputText = (UFunction*) UObject::GObjObjects()->Data[ 13734 ];

	UConsole_eventOutputText_Parms OutputText_Parms;
	memcpy ( &OutputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnOutputText, &OutputText_Parms, NULL );
};

// Function Engine.Console.OutputTextLine
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm )

void UConsole::OutputTextLine ( struct FString Text )
{
	static UFunction* pFnOutputTextLine = NULL;

	if ( ! pFnOutputTextLine )
		pFnOutputTextLine = (UFunction*) UObject::GObjObjects()->Data[ 13732 ];

	UConsole_execOutputTextLine_Parms OutputTextLine_Parms;
	memcpy ( &OutputTextLine_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnOutputTextLine, &OutputTextLine_Parms, NULL );
};

// Function Engine.Console.ClearOutput
// [0x00020002] 
// Parameters infos:

void UConsole::ClearOutput ( )
{
	static UFunction* pFnClearOutput = NULL;

	if ( ! pFnClearOutput )
		pFnClearOutput = (UFunction*) UObject::GObjObjects()->Data[ 13731 ];

	UConsole_execClearOutput_Parms ClearOutput_Parms;

	this->ProcessEvent ( pFnClearOutput, &ClearOutput_Parms, NULL );
};

// Function Engine.Console.ConsoleCommand
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm )

void UConsole::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 13729 ];

	UConsole_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );
};

// Function Engine.Console.PurgeCommandFromHistory
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm )

void UConsole::PurgeCommandFromHistory ( struct FString Command )
{
	static UFunction* pFnPurgeCommandFromHistory = NULL;

	if ( ! pFnPurgeCommandFromHistory )
		pFnPurgeCommandFromHistory = (UFunction*) UObject::GObjObjects()->Data[ 13724 ];

	UConsole_execPurgeCommandFromHistory_Parms PurgeCommandFromHistory_Parms;
	memcpy ( &PurgeCommandFromHistory_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnPurgeCommandFromHistory, &PurgeCommandFromHistory_Parms, NULL );
};

// Function Engine.Console.SetCursorPos
// [0x00020002] 
// Parameters infos:
// int                            Position                       ( CPF_Parm )

void UConsole::SetCursorPos ( int Position )
{
	static UFunction* pFnSetCursorPos = NULL;

	if ( ! pFnSetCursorPos )
		pFnSetCursorPos = (UFunction*) UObject::GObjObjects()->Data[ 13722 ];

	UConsole_execSetCursorPos_Parms SetCursorPos_Parms;
	SetCursorPos_Parms.Position = Position;

	this->ProcessEvent ( pFnSetCursorPos, &SetCursorPos_Parms, NULL );
};

// Function Engine.Console.SetInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm )

void UConsole::SetInputText ( struct FString Text )
{
	static UFunction* pFnSetInputText = NULL;

	if ( ! pFnSetInputText )
		pFnSetInputText = (UFunction*) UObject::GObjObjects()->Data[ 13720 ];

	UConsole_execSetInputText_Parms SetInputText_Parms;
	memcpy ( &SetInputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetInputText, &SetInputText_Parms, NULL );
};

// Function Engine.Console.Initialized
// [0x00020002] 
// Parameters infos:

void UConsole::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 13719 ];

	UConsole_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Console.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UConsole::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 13718 ];

	UConsole_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_Parm )

void UDataStoreClient::DebugDumpDataStoreInfo ( unsigned long bVerbose )
{
	static UFunction* pFnDebugDumpDataStoreInfo = NULL;

	if ( ! pFnDebugDumpDataStoreInfo )
		pFnDebugDumpDataStoreInfo = (UFunction*) UObject::GObjObjects()->Data[ 17689 ];

	UDataStoreClient_execDebugDumpDataStoreInfo_Parms DebugDumpDataStoreInfo_Parms;
	DebugDumpDataStoreInfo_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnDebugDumpDataStoreInfo, &DebugDumpDataStoreInfo_Parms, NULL );
};

// Function Engine.DataStoreClient.NotifyGameSessionEnded
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UDataStoreClient::eventNotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 16552 ];

	UDataStoreClient_eventNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.DataStoreClient.FindDataStoreClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  RequiredMetaClass              ( CPF_Parm )

class UClass* UDataStoreClient::FindDataStoreClass ( class UClass* RequiredMetaClass )
{
	static UFunction* pFnFindDataStoreClass = NULL;

	if ( ! pFnFindDataStoreClass )
		pFnFindDataStoreClass = (UFunction*) UObject::GObjObjects()->Data[ 17680 ];

	UDataStoreClient_execFindDataStoreClass_Parms FindDataStoreClass_Parms;
	FindDataStoreClass_Parms.RequiredMetaClass = RequiredMetaClass;

	this->ProcessEvent ( pFnFindDataStoreClass, &FindDataStoreClass_Parms, NULL );

	return FindDataStoreClass_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// TArray< class UClass* >        out_DataStoreClasses           ( CPF_Parm | CPF_OutParm )

void UDataStoreClient::GetPlayerDataStoreClasses ( TArray< class UClass* >* out_DataStoreClasses )
{
	static UFunction* pFnGetPlayerDataStoreClasses = NULL;

	if ( ! pFnGetPlayerDataStoreClasses )
		pFnGetPlayerDataStoreClasses = (UFunction*) UObject::GObjObjects()->Data[ 17677 ];

	UDataStoreClient_execGetPlayerDataStoreClasses_Parms GetPlayerDataStoreClasses_Parms;

	this->ProcessEvent ( pFnGetPlayerDataStoreClasses, &GetPlayerDataStoreClasses_Parms, NULL );

	if ( out_DataStoreClasses )
		memcpy ( out_DataStoreClasses, &GetPlayerDataStoreClasses_Parms.out_DataStoreClasses, 0xC );
};

// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

int UDataStoreClient::FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindPlayerDataStoreIndex = NULL;

	if ( ! pFnFindPlayerDataStoreIndex )
		pFnFindPlayerDataStoreIndex = (UFunction*) UObject::GObjObjects()->Data[ 17674 ];

	UDataStoreClient_execFindPlayerDataStoreIndex_Parms FindPlayerDataStoreIndex_Parms;
	FindPlayerDataStoreIndex_Parms.PlayerOwner = PlayerOwner;

	pFnFindPlayerDataStoreIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerDataStoreIndex, &FindPlayerDataStoreIndex_Parms, NULL );

	pFnFindPlayerDataStoreIndex->FunctionFlags |= 0x400;

	return FindPlayerDataStoreIndex_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetAvailableDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                CurrentScene                   ( CPF_Parm )
// TArray< class UUIDataStore* >  out_DataStores                 ( CPF_Parm | CPF_OutParm )

void UDataStoreClient::GetAvailableDataStores ( class UUIScene* CurrentScene, TArray< class UUIDataStore* >* out_DataStores )
{
	static UFunction* pFnGetAvailableDataStores = NULL;

	if ( ! pFnGetAvailableDataStores )
		pFnGetAvailableDataStores = (UFunction*) UObject::GObjObjects()->Data[ 17670 ];

	UDataStoreClient_execGetAvailableDataStores_Parms GetAvailableDataStores_Parms;
	GetAvailableDataStores_Parms.CurrentScene = CurrentScene;

	pFnGetAvailableDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableDataStores, &GetAvailableDataStores_Parms, NULL );

	pFnGetAvailableDataStores->FunctionFlags |= 0x400;

	if ( out_DataStores )
		memcpy ( out_DataStores, &GetAvailableDataStores_Parms.out_DataStores, 0xC );
};

// Function Engine.DataStoreClient.UnregisterDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )

bool UDataStoreClient::UnregisterDataStore ( class UUIDataStore* DataStore )
{
	static UFunction* pFnUnregisterDataStore = NULL;

	if ( ! pFnUnregisterDataStore )
		pFnUnregisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17667 ];

	UDataStoreClient_execUnregisterDataStore_Parms UnregisterDataStore_Parms;
	UnregisterDataStore_Parms.DataStore = DataStore;

	pFnUnregisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterDataStore, &UnregisterDataStore_Parms, NULL );

	pFnUnregisterDataStore->FunctionFlags |= 0x400;

	return UnregisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.RegisterDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

bool UDataStoreClient::RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegisterDataStore = NULL;

	if ( ! pFnRegisterDataStore )
		pFnRegisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17663 ];

	UDataStoreClient_execRegisterDataStore_Parms RegisterDataStore_Parms;
	RegisterDataStore_Parms.DataStore = DataStore;
	RegisterDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnRegisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterDataStore, &RegisterDataStore_Parms, NULL );

	pFnRegisterDataStore->FunctionFlags |= 0x400;

	return RegisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.CreateDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  DataStoreClass                 ( CPF_Parm )

class UUIDataStore* UDataStoreClient::CreateDataStore ( class UClass* DataStoreClass )
{
	static UFunction* pFnCreateDataStore = NULL;

	if ( ! pFnCreateDataStore )
		pFnCreateDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17660 ];

	UDataStoreClient_execCreateDataStore_Parms CreateDataStore_Parms;
	CreateDataStore_Parms.DataStoreClass = DataStoreClass;

	pFnCreateDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDataStore, &CreateDataStore_Parms, NULL );

	pFnCreateDataStore->FunctionFlags |= 0x400;

	return CreateDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.FindDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UDataStoreClient::FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindDataStore = NULL;

	if ( ! pFnFindDataStore )
		pFnFindDataStore = (UFunction*) UObject::GObjObjects()->Data[ 13658 ];

	UDataStoreClient_execFindDataStore_Parms FindDataStore_Parms;
	memcpy ( &FindDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	FindDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnFindDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDataStore, &FindDataStore_Parms, NULL );

	pFnFindDataStore->FunctionFlags |= 0x400;

	return FindDataStore_Parms.ReturnValue;
};

// Function Engine.Input.SetEnableDisableBindCmd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void UInput::eventSetEnableDisableBindCmd ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command, unsigned long bEnable )
{
	static UFunction* pFnSetEnableDisableBindCmd = NULL;

	if ( ! pFnSetEnableDisableBindCmd )
		pFnSetEnableDisableBindCmd = (UFunction*) UObject::GObjObjects()->Data[ 18015 ];

	UInput_eventSetEnableDisableBindCmd_Parms SetEnableDisableBindCmd_Parms;
	memcpy ( &SetEnableDisableBindCmd_Parms.BindName, &BindName, 0x8 );
	SetEnableDisableBindCmd_Parms.Ctrl = Ctrl;
	SetEnableDisableBindCmd_Parms.Shift = Shift;
	SetEnableDisableBindCmd_Parms.Alt = Alt;
	memcpy ( &SetEnableDisableBindCmd_Parms.Command, &Command, 0xC );
	SetEnableDisableBindCmd_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetEnableDisableBindCmd, &SetEnableDisableBindCmd_Parms, NULL );
};

// Function Engine.Input.SetUnBindCommand
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )

void UInput::eventSetUnBindCommand ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt )
{
	static UFunction* pFnSetUnBindCommand = NULL;

	if ( ! pFnSetUnBindCommand )
		pFnSetUnBindCommand = (UFunction*) UObject::GObjObjects()->Data[ 18010 ];

	UInput_eventSetUnBindCommand_Parms SetUnBindCommand_Parms;
	memcpy ( &SetUnBindCommand_Parms.BindName, &BindName, 0x8 );
	SetUnBindCommand_Parms.Ctrl = Ctrl;
	SetUnBindCommand_Parms.Shift = Shift;
	SetUnBindCommand_Parms.Alt = Alt;

	this->ProcessEvent ( pFnSetUnBindCommand, &SetUnBindCommand_Parms, NULL );
};

// Function Engine.Input.SetBindCommand
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm )

void UInput::eventSetBindCommand ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command )
{
	static UFunction* pFnSetBindCommand = NULL;

	if ( ! pFnSetBindCommand )
		pFnSetBindCommand = (UFunction*) UObject::GObjObjects()->Data[ 18004 ];

	UInput_eventSetBindCommand_Parms SetBindCommand_Parms;
	memcpy ( &SetBindCommand_Parms.BindName, &BindName, 0x8 );
	SetBindCommand_Parms.Ctrl = Ctrl;
	SetBindCommand_Parms.Shift = Shift;
	SetBindCommand_Parms.Alt = Alt;
	memcpy ( &SetBindCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSetBindCommand, &SetBindCommand_Parms, NULL );
};

// Function Engine.Input.SetUnBindByCmd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm )

void UInput::eventSetUnBindByCmd ( struct FString Command )
{
	static UFunction* pFnSetUnBindByCmd = NULL;

	if ( ! pFnSetUnBindByCmd )
		pFnSetUnBindByCmd = (UFunction*) UObject::GObjObjects()->Data[ 18002 ];

	UInput_eventSetUnBindByCmd_Parms SetUnBindByCmd_Parms;
	memcpy ( &SetUnBindByCmd_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSetUnBindByCmd, &SetUnBindByCmd_Parms, NULL );
};

// Function Engine.Input.SetUnBindByCommand
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 InCommand                      ( CPF_Parm )

void UInput::SetUnBindByCommand ( struct FString InCommand )
{
	static UFunction* pFnSetUnBindByCommand = NULL;

	if ( ! pFnSetUnBindByCommand )
		pFnSetUnBindByCommand = (UFunction*) UObject::GObjObjects()->Data[ 17995 ];

	UInput_execSetUnBindByCommand_Parms SetUnBindByCommand_Parms;
	memcpy ( &SetUnBindByCommand_Parms.InCommand, &InCommand, 0xC );

	this->ProcessEvent ( pFnSetUnBindByCommand, &SetUnBindByCommand_Parms, NULL );
};

// Function Engine.Input.SetUnBind
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )

void UInput::SetUnBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt )
{
	static UFunction* pFnSetUnBind = NULL;

	if ( ! pFnSetUnBind )
		pFnSetUnBind = (UFunction*) UObject::GObjObjects()->Data[ 17989 ];

	UInput_execSetUnBind_Parms SetUnBind_Parms;
	memcpy ( &SetUnBind_Parms.BindName, &BindName, 0x8 );
	SetUnBind_Parms.Ctrl = Ctrl;
	SetUnBind_Parms.Shift = Shift;
	SetUnBind_Parms.Alt = Alt;

	this->ProcessEvent ( pFnSetUnBind, &SetUnBind_Parms, NULL );
};

// Function Engine.Input.SetEnableDisableBind
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void UInput::SetEnableDisableBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command, unsigned long bEnable )
{
	static UFunction* pFnSetEnableDisableBind = NULL;

	if ( ! pFnSetEnableDisableBind )
		pFnSetEnableDisableBind = (UFunction*) UObject::GObjObjects()->Data[ 17979 ];

	UInput_execSetEnableDisableBind_Parms SetEnableDisableBind_Parms;
	memcpy ( &SetEnableDisableBind_Parms.BindName, &BindName, 0x8 );
	SetEnableDisableBind_Parms.Ctrl = Ctrl;
	SetEnableDisableBind_Parms.Shift = Shift;
	SetEnableDisableBind_Parms.Alt = Alt;
	memcpy ( &SetEnableDisableBind_Parms.Command, &Command, 0xC );
	SetEnableDisableBind_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetEnableDisableBind, &SetEnableDisableBind_Parms, NULL );
};

// Function Engine.Input.SetBind
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   BindName                       ( CPF_Parm )
// unsigned long                  Ctrl                           ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm )

void UInput::SetBind ( struct FName BindName, unsigned long Ctrl, unsigned long Shift, unsigned long Alt, struct FString Command )
{
	static UFunction* pFnSetBind = NULL;

	if ( ! pFnSetBind )
		pFnSetBind = (UFunction*) UObject::GObjObjects()->Data[ 17971 ];

	UInput_execSetBind_Parms SetBind_Parms;
	memcpy ( &SetBind_Parms.BindName, &BindName, 0x8 );
	SetBind_Parms.Ctrl = Ctrl;
	SetBind_Parms.Shift = Shift;
	SetBind_Parms.Alt = Alt;
	memcpy ( &SetBind_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSetBind, &SetBind_Parms, NULL );
};

// Function Engine.Input.GetBind
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

struct FString UInput::GetBind ( struct FName Key, unsigned long bGamepad )
{
	static UFunction* pFnGetBind = NULL;

	if ( ! pFnGetBind )
		pFnGetBind = (UFunction*) UObject::GObjObjects()->Data[ 17967 ];

	UInput_execGetBind_Parms GetBind_Parms;
	memcpy ( &GetBind_Parms.Key, &Key, 0x8 );
	GetBind_Parms.bGamepad = bGamepad;

	pFnGetBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBind, &GetBind_Parms, NULL );

	pFnGetBind->FunctionFlags |= 0x400;

	return GetBind_Parms.ReturnValue;
};

// Function Engine.Input.ResetInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInput::ResetInput ( )
{
	static UFunction* pFnResetInput = NULL;

	if ( ! pFnResetInput )
		pFnResetInput = (UFunction*) UObject::GObjObjects()->Data[ 17966 ];

	UInput_execResetInput_Parms ResetInput_Parms;

	pFnResetInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetInput, &ResetInput_Parms, NULL );

	pFnResetInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.ShowMouseCursor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UPlayerInput::ShowMouseCursor ( unsigned long bShow )
{
	static UFunction* pFnShowMouseCursor = NULL;

	if ( ! pFnShowMouseCursor )
		pFnShowMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 18107 ];

	UPlayerInput_execShowMouseCursor_Parms ShowMouseCursor_Parms;
	ShowMouseCursor_Parms.bShow = bShow;

	pFnShowMouseCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMouseCursor, &ShowMouseCursor_Parms, NULL );

	pFnShowMouseCursor->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.SmoothMouse
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          aMouse                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// unsigned char                  SampleCount                    ( CPF_Parm | CPF_OutParm )

float UPlayerInput::SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount )
{
	static UFunction* pFnSmoothMouse = NULL;

	if ( ! pFnSmoothMouse )
		pFnSmoothMouse = (UFunction*) UObject::GObjObjects()->Data[ 18100 ];

	UPlayerInput_execSmoothMouse_Parms SmoothMouse_Parms;
	SmoothMouse_Parms.aMouse = aMouse;
	SmoothMouse_Parms.DeltaTime = DeltaTime;
	SmoothMouse_Parms.Index = Index;

	this->ProcessEvent ( pFnSmoothMouse, &SmoothMouse_Parms, NULL );

	if ( SampleCount )
		*SampleCount = SmoothMouse_Parms.SampleCount;

	return SmoothMouse_Parms.ReturnValue;
};

// Function Engine.PlayerInput.ClearSmoothing
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::ClearSmoothing ( )
{
	static UFunction* pFnClearSmoothing = NULL;

	if ( ! pFnClearSmoothing )
		pFnClearSmoothing = (UFunction*) UObject::GObjObjects()->Data[ 18098 ];

	UPlayerInput_execClearSmoothing_Parms ClearSmoothing_Parms;

	this->ProcessEvent ( pFnClearSmoothing, &ClearSmoothing_Parms, NULL );
};

// Function Engine.PlayerInput.SmartJump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::SmartJump ( )
{
	static UFunction* pFnSmartJump = NULL;

	if ( ! pFnSmartJump )
		pFnSmartJump = (UFunction*) UObject::GObjObjects()->Data[ 18097 ];

	UPlayerInput_execSmartJump_Parms SmartJump_Parms;

	this->ProcessEvent ( pFnSmartJump, &SmartJump_Parms, NULL );
};

// Function Engine.PlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = (UFunction*) UObject::GObjObjects()->Data[ 18096 ];

	UPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function Engine.PlayerInput.ProcessInputMatching
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::ProcessInputMatching ( float DeltaTime )
{
	static UFunction* pFnProcessInputMatching = NULL;

	if ( ! pFnProcessInputMatching )
		pFnProcessInputMatching = (UFunction*) UObject::GObjObjects()->Data[ 18090 ];

	UPlayerInput_execProcessInputMatching_Parms ProcessInputMatching_Parms;
	ProcessInputMatching_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessInputMatching, &ProcessInputMatching_Parms, NULL );
};

// Function Engine.PlayerInput.CheckForDoubleClickMove
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

unsigned char UPlayerInput::CheckForDoubleClickMove ( float DeltaTime )
{
	static UFunction* pFnCheckForDoubleClickMove = NULL;

	if ( ! pFnCheckForDoubleClickMove )
		pFnCheckForDoubleClickMove = (UFunction*) UObject::GObjObjects()->Data[ 18085 ];

	UPlayerInput_execCheckForDoubleClickMove_Parms CheckForDoubleClickMove_Parms;
	CheckForDoubleClickMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Parms, NULL );

	return CheckForDoubleClickMove_Parms.ReturnValue;
};

// Function Engine.PlayerInput.CatchDoubleClickInput
// [0x00020002] 
// Parameters infos:

void UPlayerInput::CatchDoubleClickInput ( )
{
	static UFunction* pFnCatchDoubleClickInput = NULL;

	if ( ! pFnCatchDoubleClickInput )
		pFnCatchDoubleClickInput = (UFunction*) UObject::GObjObjects()->Data[ 18084 ];

	UPlayerInput_execCatchDoubleClickInput_Parms CatchDoubleClickInput_Parms;

	this->ProcessEvent ( pFnCatchDoubleClickInput, &CatchDoubleClickInput_Parms, NULL );
};

// Function Engine.PlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 18080 ];

	UPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function Engine.PlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:
// float                          FOVScale                       ( CPF_Parm )

void UPlayerInput::AdjustMouseSensitivity ( float FOVScale )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 18078 ];

	UPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;
	AdjustMouseSensitivity_Parms.FOVScale = FOVScale;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.PostProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PostProcessInput ( float DeltaTime )
{
	static UFunction* pFnPostProcessInput = NULL;

	if ( ! pFnPostProcessInput )
		pFnPostProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 18076 ];

	UPlayerInput_execPostProcessInput_Parms PostProcessInput_Parms;
	PostProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPostProcessInput, &PostProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.PreProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PreProcessInput ( float DeltaTime )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 18074 ];

	UPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;
	PreProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.DrawHUD
// [0x00020000] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void UPlayerInput::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 18072 ];

	UPlayerInput_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerInput.SetSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          SensitivityX                   ( CPF_Parm )
// float                          SensitivityY                   ( CPF_Parm )

void UPlayerInput::SetSensitivity ( float SensitivityX, float SensitivityY )
{
	static UFunction* pFnSetSensitivity = NULL;

	if ( ! pFnSetSensitivity )
		pFnSetSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 18069 ];

	UPlayerInput_execSetSensitivity_Parms SetSensitivity_Parms;
	SetSensitivity_Parms.SensitivityX = SensitivityX;
	SetSensitivity_Parms.SensitivityY = SensitivityY;

	this->ProcessEvent ( pFnSetSensitivity, &SetSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.InvertTurn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertTurn ( )
{
	static UFunction* pFnInvertTurn = NULL;

	if ( ! pFnInvertTurn )
		pFnInvertTurn = (UFunction*) UObject::GObjObjects()->Data[ 18067 ];

	UPlayerInput_execInvertTurn_Parms InvertTurn_Parms;

	this->ProcessEvent ( pFnInvertTurn, &InvertTurn_Parms, NULL );

	return InvertTurn_Parms.ReturnValue;
};

// Function Engine.PlayerInput.InvertMouse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertMouse ( )
{
	static UFunction* pFnInvertMouse = NULL;

	if ( ! pFnInvertMouse )
		pFnInvertMouse = (UFunction*) UObject::GObjObjects()->Data[ 18065 ];

	UPlayerInput_execInvertMouse_Parms InvertMouse_Parms;

	this->ProcessEvent ( pFnInvertMouse, &InvertMouse_Parms, NULL );

	return InvertMouse_Parms.ReturnValue;
};

// Function Engine.UIComp_Event.UnregisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnUnregisterInputEvents = NULL;

	if ( ! pFnUnregisterInputEvents )
		pFnUnregisterInputEvents = (UFunction*) UObject::GObjObjects()->Data[ 14211 ];

	UUIComp_Event_execUnregisterInputEvents_Parms UnregisterInputEvents_Parms;
	UnregisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	UnregisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnUnregisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterInputEvents, &UnregisterInputEvents_Parms, NULL );

	pFnUnregisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_Event.RegisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnRegisterInputEvents = NULL;

	if ( ! pFnRegisterInputEvents )
		pFnRegisterInputEvents = (UFunction*) UObject::GObjObjects()->Data[ 14208 ];

	UUIComp_Event_execRegisterInputEvents_Parms RegisterInputEvents_Parms;
	RegisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	RegisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnRegisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterInputEvents, &RegisterInputEvents_Parms, NULL );

	pFnRegisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObjects
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Parm )

void UUIEventContainer::RemoveSequenceObjects ( TArray< class USequenceObject* > ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 32336 ];

	UUIEventContainer_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;
	memcpy ( &RemoveSequenceObjects_Parms.ObjectsToRemove, &ObjectsToRemove, 0xC );

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIEventContainer::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32334 ];

	UUIEventContainer_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIEventContainer::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32330 ];

	UUIEventContainer_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEventContainer.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm )

void UUIEventContainer::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 32326 ];

	UUIEventContainer_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UIInputConfiguration.NotifyGameSessionEnded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIInputConfiguration::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 32344 ];

	UUIInputConfiguration_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	pFnNotifyGameSessionEnded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	pFnNotifyGameSessionEnded->FunctionFlags |= 0x400;
};

// Function Engine.UIInputConfiguration.LoadInputAliasClasses
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIInputConfiguration::LoadInputAliasClasses ( )
{
	static UFunction* pFnLoadInputAliasClasses = NULL;

	if ( ! pFnLoadInputAliasClasses )
		pFnLoadInputAliasClasses = (UFunction*) UObject::GObjObjects()->Data[ 32343 ];

	UUIInputConfiguration_execLoadInputAliasClasses_Parms LoadInputAliasClasses_Parms;

	pFnLoadInputAliasClasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadInputAliasClasses, &LoadInputAliasClasses_Parms, NULL );

	pFnLoadInputAliasClasses->FunctionFlags |= 0x400;
};

// Function Engine.UIInteraction.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 16551 ];

	UUIInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIInteraction.GetNATType
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::eventGetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 14195 ];

	UUIInteraction_eventGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CanPlayOnline
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::eventCanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 14196 ];

	UUIInteraction_eventCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetConnectedGamepadCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< unsigned long >        ControllerConnectionStatusOverrides ( CPF_OptionalParm | CPF_Parm )

int UUIInteraction::GetConnectedGamepadCount ( TArray< unsigned long > ControllerConnectionStatusOverrides )
{
	static UFunction* pFnGetConnectedGamepadCount = NULL;

	if ( ! pFnGetConnectedGamepadCount )
		pFnGetConnectedGamepadCount = (UFunction*) UObject::GObjObjects()->Data[ 16536 ];

	UUIInteraction_execGetConnectedGamepadCount_Parms GetConnectedGamepadCount_Parms;
	memcpy ( &GetConnectedGamepadCount_Parms.ControllerConnectionStatusOverrides, &ControllerConnectionStatusOverrides, 0xC );

	this->ProcessEvent ( pFnGetConnectedGamepadCount, &GetConnectedGamepadCount_Parms, NULL );

	return GetConnectedGamepadCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsGamepadConnected
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::IsGamepadConnected ( int ControllerId )
{
	static UFunction* pFnIsGamepadConnected = NULL;

	if ( ! pFnIsGamepadConnected )
		pFnIsGamepadConnected = (UFunction*) UObject::GObjObjects()->Data[ 14200 ];

	UUIInteraction_execIsGamepadConnected_Parms IsGamepadConnected_Parms;
	IsGamepadConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsGamepadConnected, &IsGamepadConnected_Parms, NULL );

	return IsGamepadConnected_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoggedInPlayerCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

int UUIInteraction::GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnGetLoggedInPlayerCount = NULL;

	if ( ! pFnGetLoggedInPlayerCount )
		pFnGetLoggedInPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 16525 ];

	UUIInteraction_execGetLoggedInPlayerCount_Parms GetLoggedInPlayerCount_Parms;
	GetLoggedInPlayerCount_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Parms, NULL );

	return GetLoggedInPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsLoggedIn
// [0x00026803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 14201 ];

	UUIInteraction_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.HasLinkConnection
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIInteraction::eventHasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 14197 ];

	UUIInteraction_eventHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoginStatus
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

unsigned char UUIInteraction::eventGetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 14198 ];

	UUIInteraction_eventGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIInteraction.FindSceneByTag
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIInteraction::FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneByTag = NULL;

	if ( ! pFnFindSceneByTag )
		pFnFindSceneByTag = (UFunction*) UObject::GObjObjects()->Data[ 16507 ];

	UUIInteraction_execFindSceneByTag_Parms FindSceneByTag_Parms;
	memcpy ( &FindSceneByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneByTag_Parms.SceneOwner = SceneOwner;

	this->ProcessEvent ( pFnFindSceneByTag, &FindSceneByTag_Parms, NULL );

	return FindSceneByTag_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CloseScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUIInteraction::CloseScene ( class UUIScene* Scene )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = (UFunction*) UObject::GObjObjects()->Data[ 13819 ];

	UUIInteraction_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.Scene = Scene;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.MergeScene
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SourceScene                    ( CPF_Parm )
// class UUIScene*                SceneTarget                    ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::MergeScene ( class UUIScene* SourceScene, class UUIScene* SceneTarget )
{
	static UFunction* pFnMergeScene = NULL;

	if ( ! pFnMergeScene )
		pFnMergeScene = (UFunction*) UObject::GObjObjects()->Data[ 16501 ];

	UUIInteraction_execMergeScene_Parms MergeScene_Parms;
	MergeScene_Parms.SourceScene = SourceScene;
	MergeScene_Parms.SceneTarget = SceneTarget;

	this->ProcessEvent ( pFnMergeScene, &MergeScene_Parms, NULL );

	return MergeScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.OpenScene
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIInteraction::OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = (UFunction*) UObject::GObjObjects()->Data[ 13820 ];

	UUIInteraction_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.Scene = Scene;
	OpenScene_Parms.SceneOwner = SceneOwner;

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	if ( OpenedScene )
		*OpenedScene = OpenScene_Parms.OpenedScene;

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CreateScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIInteraction::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = (UFunction*) UObject::GObjObjects()->Data[ 16492 ];

	UUIInteraction_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetTransientScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIInteraction::GetTransientScene ( )
{
	static UFunction* pFnGetTransientScene = NULL;

	if ( ! pFnGetTransientScene )
		pFnGetTransientScene = (UFunction*) UObject::GObjObjects()->Data[ 16490 ];

	UUIInteraction_execGetTransientScene_Parms GetTransientScene_Parms;

	this->ProcessEvent ( pFnGetTransientScene, &GetTransientScene_Parms, NULL );

	return GetTransientScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.SetMousePosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUIInteraction::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = (UFunction*) UObject::GObjObjects()->Data[ 16487 ];

	UUIInteraction_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );
};

// Function Engine.UIInteraction.CreateTransientWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIInteraction::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = (UFunction*) UObject::GObjObjects()->Data[ 16482 ];

	UUIInteraction_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.UIInteraction.NotifyPlayerRemoved
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 16475 ];

	UUIInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIInteraction.NotifyPlayerAdded
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 16471 ];

	UUIInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIInteraction.PlayUISound
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::PlayUISound ( struct FName SoundCueName, int PlayerIndex )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = (UFunction*) UObject::GObjObjects()->Data[ 16467 ];

	UUIInteraction_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x8 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsMenuLevel
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::IsMenuLevel ( struct FString MapName )
{
	static UFunction* pFnIsMenuLevel = NULL;

	if ( ! pFnIsMenuLevel )
		pFnIsMenuLevel = (UFunction*) UObject::GObjObjects()->Data[ 16464 ];

	UUIInteraction_execIsMenuLevel_Parms IsMenuLevel_Parms;
	memcpy ( &IsMenuLevel_Parms.MapName, &MapName, 0xC );

	pFnIsMenuLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMenuLevel, &IsMenuLevel_Parms, NULL );

	pFnIsMenuLevel->FunctionFlags |= 0x400;

	return IsMenuLevel_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetDataStoreClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIInteraction::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 13657 ];

	UUIInteraction_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	pFnGetDataStoreClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	pFnGetDataStoreClient->FunctionFlags |= 0x400;

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerControllerId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

int UUIInteraction::GetPlayerControllerId ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerControllerId = NULL;

	if ( ! pFnGetPlayerControllerId )
		pFnGetPlayerControllerId = (UFunction*) UObject::GObjObjects()->Data[ 14199 ];

	UUIInteraction_execGetPlayerControllerId_Parms GetPlayerControllerId_Parms;
	GetPlayerControllerId_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerControllerId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerId, &GetPlayerControllerId_Parms, NULL );

	pFnGetPlayerControllerId->FunctionFlags |= 0x400;

	return GetPlayerControllerId_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

int UUIInteraction::GetPlayerIndex ( int ControllerId )
{
	static UFunction* pFnGetPlayerIndex = NULL;

	if ( ! pFnGetPlayerIndex )
		pFnGetPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 16458 ];

	UUIInteraction_execGetPlayerIndex_Parms GetPlayerIndex_Parms;
	GetPlayerIndex_Parms.ControllerId = ControllerId;

	pFnGetPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerIndex, &GetPlayerIndex_Parms, NULL );

	pFnGetPlayerIndex->FunctionFlags |= 0x400;

	return GetPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 16456 ];

	UUIInteraction_execGetPlayerCount_Parms GetPlayerCount_Parms;

	pFnGetPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	pFnGetPlayerCount->FunctionFlags |= 0x400;

	return GetPlayerCount_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetActiveScene
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUISceneClient::GetActiveScene ( )
{
	static UFunction* pFnGetActiveScene = NULL;

	if ( ! pFnGetActiveScene )
		pFnGetActiveScene = (UFunction*) UObject::GObjObjects()->Data[ 20996 ];

	UUISceneClient_execGetActiveScene_Parms GetActiveScene_Parms;

	this->ProcessEvent ( pFnGetActiveScene, &GetActiveScene_Parms, NULL );

	return GetActiveScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InitializeSceneClient
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUISceneClient::eventInitializeSceneClient ( )
{
	static UFunction* pFnInitializeSceneClient = NULL;

	if ( ! pFnInitializeSceneClient )
		pFnInitializeSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 20995 ];

	UUISceneClient_eventInitializeSceneClient_Parms InitializeSceneClient_Parms;

	this->ProcessEvent ( pFnInitializeSceneClient, &InitializeSceneClient_Parms, NULL );
};

// Function Engine.UISceneClient.GetInverseCanvasToScreen
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetInverseCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 20992 ];

	UUISceneClient_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;
	GetInverseCanvasToScreen_Parms.Widget = Widget;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetCanvasToScreen
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 20989 ];

	UUISceneClient_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;
	GetCanvasToScreen_Parms.Widget = Widget;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.UpdateCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUISceneClient::UpdateCanvasToScreen ( )
{
	static UFunction* pFnUpdateCanvasToScreen = NULL;

	if ( ! pFnUpdateCanvasToScreen )
		pFnUpdateCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 20988 ];

	UUISceneClient_execUpdateCanvasToScreen_Parms UpdateCanvasToScreen_Parms;

	pFnUpdateCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCanvasToScreen, &UpdateCanvasToScreen_Parms, NULL );

	pFnUpdateCanvasToScreen->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.ChangeMouseCursor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

bool UUISceneClient::ChangeMouseCursor ( struct FName CursorName )
{
	static UFunction* pFnChangeMouseCursor = NULL;

	if ( ! pFnChangeMouseCursor )
		pFnChangeMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 20985 ];

	UUISceneClient_execChangeMouseCursor_Parms ChangeMouseCursor_Parms;
	memcpy ( &ChangeMouseCursor_Parms.CursorName, &CursorName, 0x8 );

	pFnChangeMouseCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeMouseCursor, &ChangeMouseCursor_Parms, NULL );

	pFnChangeMouseCursor->FunctionFlags |= 0x400;

	return ChangeMouseCursor_Parms.ReturnValue;
};

// Function Engine.UISceneClient.SetMousePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUISceneClient::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = (UFunction*) UObject::GObjObjects()->Data[ 16556 ];

	UUISceneClient_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	pFnSetMousePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );

	pFnSetMousePosition->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.CloseSceneAtIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SceneStackIndex                ( CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::CloseSceneAtIndex ( int SceneStackIndex, unsigned long bCloseChildScenes )
{
	static UFunction* pFnCloseSceneAtIndex = NULL;

	if ( ! pFnCloseSceneAtIndex )
		pFnCloseSceneAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 20979 ];

	UUISceneClient_execCloseSceneAtIndex_Parms CloseSceneAtIndex_Parms;
	CloseSceneAtIndex_Parms.SceneStackIndex = SceneStackIndex;
	CloseSceneAtIndex_Parms.bCloseChildScenes = bCloseChildScenes;

	pFnCloseSceneAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseSceneAtIndex, &CloseSceneAtIndex_Parms, NULL );

	pFnCloseSceneAtIndex->FunctionFlags |= 0x400;

	return CloseSceneAtIndex_Parms.ReturnValue;
};

// Function Engine.UISceneClient.CloseScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::CloseScene ( class UUIScene* Scene, unsigned long bCloseChildScenes )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = (UFunction*) UObject::GObjObjects()->Data[ 15720 ];

	UUISceneClient_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.Scene = Scene;
	CloseScene_Parms.bCloseChildScenes = bCloseChildScenes;

	pFnCloseScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	pFnCloseScene->FunctionFlags |= 0x400;

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ReplaceSceneAtIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            IndexOfSceneToReplace          ( CPF_Parm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::ReplaceSceneAtIndex ( int IndexOfSceneToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnReplaceSceneAtIndex = NULL;

	if ( ! pFnReplaceSceneAtIndex )
		pFnReplaceSceneAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 20969 ];

	UUISceneClient_execReplaceSceneAtIndex_Parms ReplaceSceneAtIndex_Parms;
	ReplaceSceneAtIndex_Parms.IndexOfSceneToReplace = IndexOfSceneToReplace;
	ReplaceSceneAtIndex_Parms.SceneToOpen = SceneToOpen;
	ReplaceSceneAtIndex_Parms.SceneOwner = SceneOwner;
	ReplaceSceneAtIndex_Parms.ForcedPriority = ForcedPriority;

	pFnReplaceSceneAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceSceneAtIndex, &ReplaceSceneAtIndex_Parms, NULL );

	pFnReplaceSceneAtIndex->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = ReplaceSceneAtIndex_Parms.OpenedScene;

	return ReplaceSceneAtIndex_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ReplaceScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneInstanceToReplace         ( CPF_Parm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::ReplaceScene ( class UUIScene* SceneInstanceToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnReplaceScene = NULL;

	if ( ! pFnReplaceScene )
		pFnReplaceScene = (UFunction*) UObject::GObjObjects()->Data[ 20962 ];

	UUISceneClient_execReplaceScene_Parms ReplaceScene_Parms;
	ReplaceScene_Parms.SceneInstanceToReplace = SceneInstanceToReplace;
	ReplaceScene_Parms.SceneToOpen = SceneToOpen;
	ReplaceScene_Parms.SceneOwner = SceneOwner;
	ReplaceScene_Parms.ForcedPriority = ForcedPriority;

	pFnReplaceScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceScene, &ReplaceScene_Parms, NULL );

	pFnReplaceScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = ReplaceScene_Parms.OpenedScene;

	return ReplaceScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InsertScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DesiredInsertIndex             ( CPF_Parm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            ActualInsertIndex              ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::InsertScene ( int DesiredInsertIndex, class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene, int* ActualInsertIndex )
{
	static UFunction* pFnInsertScene = NULL;

	if ( ! pFnInsertScene )
		pFnInsertScene = (UFunction*) UObject::GObjObjects()->Data[ 20954 ];

	UUISceneClient_execInsertScene_Parms InsertScene_Parms;
	InsertScene_Parms.DesiredInsertIndex = DesiredInsertIndex;
	InsertScene_Parms.Scene = Scene;
	InsertScene_Parms.SceneOwner = SceneOwner;
	InsertScene_Parms.ForcedPriority = ForcedPriority;

	pFnInsertScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertScene, &InsertScene_Parms, NULL );

	pFnInsertScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = InsertScene_Parms.OpenedScene;

	if ( ActualInsertIndex )
		*ActualInsertIndex = InsertScene_Parms.ActualInsertIndex;

	return InsertScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.OpenScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = (UFunction*) UObject::GObjObjects()->Data[ 15721 ];

	UUISceneClient_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.Scene = Scene;
	OpenScene_Parms.SceneOwner = SceneOwner;
	OpenScene_Parms.ForcedPriority = ForcedPriority;

	pFnOpenScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	pFnOpenScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = OpenScene_Parms.OpenedScene;

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InitializeScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                InitializedScene               ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene )
{
	static UFunction* pFnInitializeScene = NULL;

	if ( ! pFnInitializeScene )
		pFnInitializeScene = (UFunction*) UObject::GObjObjects()->Data[ 13829 ];

	UUISceneClient_execInitializeScene_Parms InitializeScene_Parms;
	InitializeScene_Parms.Scene = Scene;
	InitializeScene_Parms.SceneOwner = SceneOwner;

	pFnInitializeScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeScene, &InitializeScene_Parms, NULL );

	pFnInitializeScene->FunctionFlags |= 0x400;

	if ( InitializedScene )
		*InitializedScene = InitializeScene_Parms.InitializedScene;

	return InitializeScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsSceneInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUISceneClient::IsSceneInitialized ( class UUIScene* Scene )
{
	static UFunction* pFnIsSceneInitialized = NULL;

	if ( ! pFnIsSceneInitialized )
		pFnIsSceneInitialized = (UFunction*) UObject::GObjObjects()->Data[ 20942 ];

	UUISceneClient_execIsSceneInitialized_Parms IsSceneInitialized_Parms;
	IsSceneInitialized_Parms.Scene = Scene;

	pFnIsSceneInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneInitialized, &IsSceneInitialized_Parms, NULL );

	pFnIsSceneInitialized->FunctionFlags |= 0x400;

	return IsSceneInitialized_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsUIActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::IsUIActive ( int Flags )
{
	static UFunction* pFnIsUIActive = NULL;

	if ( ! pFnIsUIActive )
		pFnIsUIActive = (UFunction*) UObject::GObjObjects()->Data[ 20939 ];

	UUISceneClient_execIsUIActive_Parms IsUIActive_Parms;
	IsUIActive_Parms.Flags = Flags;

	pFnIsUIActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUIActive, &IsUIActive_Parms, NULL );

	pFnIsUIActive->FunctionFlags |= 0x400;

	return IsUIActive_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ChangeActiveSkin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 NewActiveSkin                  ( CPF_Parm )

bool UUISceneClient::ChangeActiveSkin ( class UUISkin* NewActiveSkin )
{
	static UFunction* pFnChangeActiveSkin = NULL;

	if ( ! pFnChangeActiveSkin )
		pFnChangeActiveSkin = (UFunction*) UObject::GObjObjects()->Data[ 20936 ];

	UUISceneClient_execChangeActiveSkin_Parms ChangeActiveSkin_Parms;
	ChangeActiveSkin_Parms.NewActiveSkin = NewActiveSkin;

	pFnChangeActiveSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeActiveSkin, &ChangeActiveSkin_Parms, NULL );

	pFnChangeActiveSkin->FunctionFlags |= 0x400;

	return ChangeActiveSkin_Parms.ReturnValue;
};

// Function Engine.UIState.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm )

void UUIState::RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 32504 ];

	UUIState_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0xC );
};

// Function Engine.UIState.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIState::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32502 ];

	UUIState_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIState.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIState::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32498 ];

	UUIState_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIState.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm )

void UUIState::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 32494 ];

	UUIState_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UIState.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = (UFunction*) UObject::GObjObjects()->Data[ 32489 ];

	UUIState_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState.OnDeactivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPoppedState                   ( CPF_Parm )

void UUIState::eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 32485 ];

	UUIState_eventOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.Target = Target;
	OnDeactivate_Parms.PlayerIndex = PlayerIndex;
	OnDeactivate_Parms.bPoppedState = bPoppedState;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.UIState.OnActivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPushedState                   ( CPF_Parm )

void UUIState::eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = (UFunction*) UObject::GObjObjects()->Data[ 32481 ];

	UUIState_eventOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.Target = Target;
	OnActivate_Parms.PlayerIndex = PlayerIndex;
	OnActivate_Parms.bPushedState = bPushedState;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.UIState.DeactivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = (UFunction*) UObject::GObjObjects()->Data[ 32477 ];

	UUIState_eventDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.Target = Target;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIState.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 32473 ];

	UUIState_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIState.IsActiveForPlayer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::IsActiveForPlayer ( int PlayerIndex )
{
	static UFunction* pFnIsActiveForPlayer = NULL;

	if ( ! pFnIsActiveForPlayer )
		pFnIsActiveForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 32470 ];

	UUIState_execIsActiveForPlayer_Parms IsActiveForPlayer_Parms;
	IsActiveForPlayer_Parms.PlayerIndex = PlayerIndex;

	pFnIsActiveForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveForPlayer, &IsActiveForPlayer_Parms, NULL );

	pFnIsActiveForPlayer->FunctionFlags |= 0x400;

	return IsActiveForPlayer_Parms.ReturnValue;
};

// Function Engine.UIState.IsWidgetClassSupported
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )

bool UUIState::eventIsWidgetClassSupported ( class UClass* WidgetClass )
{
	static UFunction* pFnIsWidgetClassSupported = NULL;

	if ( ! pFnIsWidgetClassSupported )
		pFnIsWidgetClassSupported = (UFunction*) UObject::GObjObjects()->Data[ 32467 ];

	UUIState_eventIsWidgetClassSupported_Parms IsWidgetClassSupported_Parms;
	IsWidgetClassSupported_Parms.WidgetClass = WidgetClass;

	this->ProcessEvent ( pFnIsWidgetClassSupported, &IsWidgetClassSupported_Parms, NULL );

	return IsWidgetClassSupported_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = (UFunction*) UObject::GObjObjects()->Data[ 32514 ];

	UUIState_Disabled_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 32507 ];

	UUIState_Disabled_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIString.ContainsMarkup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIString::ContainsMarkup ( )
{
	static UFunction* pFnContainsMarkup = NULL;

	if ( ! pFnContainsMarkup )
		pFnContainsMarkup = (UFunction*) UObject::GObjObjects()->Data[ 32285 ];

	UUIString_execContainsMarkup_Parms ContainsMarkup_Parms;

	pFnContainsMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsMarkup, &ContainsMarkup_Parms, NULL );

	pFnContainsMarkup->FunctionFlags |= 0x400;

	return ContainsMarkup_Parms.ReturnValue;
};

// Function Engine.UIString.GetAutoScaleValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               BoundingRegionSize             ( CPF_Parm )
// struct FVector2D               StringSize                     ( CPF_Parm )
// struct FVector2D               out_AutoScalePercent           ( CPF_Parm | CPF_OutParm )

void UUIString::GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent )
{
	static UFunction* pFnGetAutoScaleValue = NULL;

	if ( ! pFnGetAutoScaleValue )
		pFnGetAutoScaleValue = (UFunction*) UObject::GObjObjects()->Data[ 32281 ];

	UUIString_execGetAutoScaleValue_Parms GetAutoScaleValue_Parms;
	memcpy ( &GetAutoScaleValue_Parms.BoundingRegionSize, &BoundingRegionSize, 0x8 );
	memcpy ( &GetAutoScaleValue_Parms.StringSize, &StringSize, 0x8 );

	pFnGetAutoScaleValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAutoScaleValue, &GetAutoScaleValue_Parms, NULL );

	pFnGetAutoScaleValue->FunctionFlags |= 0x400;

	if ( out_AutoScalePercent )
		memcpy ( out_AutoScalePercent, &GetAutoScaleValue_Parms.out_AutoScalePercent, 0x8 );
};

// Function Engine.UIString.GetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 32278 ];

	UUIString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InputString                    ( CPF_Parm )
// unsigned long                  bIgnoreMarkup                  ( CPF_Parm )

bool UUIString::SetValue ( struct FString InputString, unsigned long bIgnoreMarkup )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 32274 ];

	UUIString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.InputString, &InputString, 0xC );
	SetValue_Parms.bIgnoreMarkup = bIgnoreMarkup;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.ParseTagArrayDelimiter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm | CPF_OutParm )

int UUIDataProvider::ParseTagArrayDelimiter ( struct FName* FieldName )
{
	static UFunction* pFnParseTagArrayDelimiter = NULL;

	if ( ! pFnParseTagArrayDelimiter )
		pFnParseTagArrayDelimiter = (UFunction*) UObject::GObjObjects()->Data[ 31970 ];

	UUIDataProvider_execParseTagArrayDelimiter_Parms ParseTagArrayDelimiter_Parms;

	this->ProcessEvent ( pFnParseTagArrayDelimiter, &ParseTagArrayDelimiter_Parms, NULL );

	if ( FieldName )
		memcpy ( FieldName, &ParseTagArrayDelimiter_Parms.FieldName, 0x8 );

	return ParseTagArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm )

bool UUIDataProvider::RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnRemovePropertyNotificationChangeRequest = NULL;

	if ( ! pFnRemovePropertyNotificationChangeRequest )
		pFnRemovePropertyNotificationChangeRequest = (UFunction*) UObject::GObjObjects()->Data[ 31965 ];

	UUIDataProvider_execRemovePropertyNotificationChangeRequest_Parms RemovePropertyNotificationChangeRequest_Parms;
	memcpy ( &RemovePropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0xC );

	this->ProcessEvent ( pFnRemovePropertyNotificationChangeRequest, &RemovePropertyNotificationChangeRequest_Parms, NULL );

	return RemovePropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm )
// unsigned long                  bAllowDuplicates               ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates )
{
	static UFunction* pFnAddPropertyNotificationChangeRequest = NULL;

	if ( ! pFnAddPropertyNotificationChangeRequest )
		pFnAddPropertyNotificationChangeRequest = (UFunction*) UObject::GObjObjects()->Data[ 31959 ];

	UUIDataProvider_execAddPropertyNotificationChangeRequest_Parms AddPropertyNotificationChangeRequest_Parms;
	memcpy ( &AddPropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0xC );
	AddPropertyNotificationChangeRequest_Parms.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent ( pFnAddPropertyNotificationChangeRequest, &AddPropertyNotificationChangeRequest_Parms, NULL );

	return AddPropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.NotifyPropertyChanged
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::eventNotifyPropertyChanged ( struct FName PropTag )
{
	static UFunction* pFnNotifyPropertyChanged = NULL;

	if ( ! pFnNotifyPropertyChanged )
		pFnNotifyPropertyChanged = (UFunction*) UObject::GObjObjects()->Data[ 31955 ];

	UUIDataProvider_eventNotifyPropertyChanged_Parms NotifyPropertyChanged_Parms;
	memcpy ( &NotifyPropertyChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnNotifyPropertyChanged, &NotifyPropertyChanged_Parms, NULL );
};

// Function Engine.UIDataProvider.IsCollectionDataType
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FieldType                      ( CPF_Parm )

bool UUIDataProvider::eventIsCollectionDataType ( unsigned char FieldType )
{
	static UFunction* pFnIsCollectionDataType = NULL;

	if ( ! pFnIsCollectionDataType )
		pFnIsCollectionDataType = (UFunction*) UObject::GObjObjects()->Data[ 31952 ];

	UUIDataProvider_eventIsCollectionDataType_Parms IsCollectionDataType_Parms;
	IsCollectionDataType_Parms.FieldType = FieldType;

	this->ProcessEvent ( pFnIsCollectionDataType, &IsCollectionDataType_Parms, NULL );

	return IsCollectionDataType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.IsProviderDisabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = (UFunction*) UObject::GObjObjects()->Data[ 31950 ];

	UUIDataProvider_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateFillerData
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm )

struct FString UUIDataProvider::eventGenerateFillerData ( struct FString DataTag )
{
	static UFunction* pFnGenerateFillerData = NULL;

	if ( ! pFnGenerateFillerData )
		pFnGenerateFillerData = (UFunction*) UObject::GObjObjects()->Data[ 31947 ];

	UUIDataProvider_eventGenerateFillerData_Parms GenerateFillerData_Parms;
	memcpy ( &GenerateFillerData_Parms.DataTag, &DataTag, 0xC );

	this->ProcessEvent ( pFnGenerateFillerData, &GenerateFillerData_Parms, NULL );

	return GenerateFillerData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateScriptMarkupString
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataTag                        ( CPF_Parm )

struct FString UUIDataProvider::eventGenerateScriptMarkupString ( struct FName DataTag )
{
	static UFunction* pFnGenerateScriptMarkupString = NULL;

	if ( ! pFnGenerateScriptMarkupString )
		pFnGenerateScriptMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 31944 ];

	UUIDataProvider_eventGenerateScriptMarkupString_Parms GenerateScriptMarkupString_Parms;
	memcpy ( &GenerateScriptMarkupString_Parms.DataTag, &DataTag, 0x8 );

	this->ProcessEvent ( pFnGenerateScriptMarkupString, &GenerateScriptMarkupString_Parms, NULL );

	return GenerateScriptMarkupString_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.SetFieldValue
// [0x00424800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDataProvider::eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetFieldValue = NULL;

	if ( ! pFnSetFieldValue )
		pFnSetFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 31939 ];

	UUIDataProvider_eventSetFieldValue_Parms SetFieldValue_Parms;
	memcpy ( &SetFieldValue_Parms.FieldName, &FieldName, 0xC );
	SetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnSetFieldValue, &SetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &SetFieldValue_Parms.FieldValue, 0x54 );

	return SetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetFieldValue
// [0x00424800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Parm | CPF_OutParm )

bool UUIDataProvider::eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnGetFieldValue = NULL;

	if ( ! pFnGetFieldValue )
		pFnGetFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 31934 ];

	UUIDataProvider_eventGetFieldValue_Parms GetFieldValue_Parms;
	memcpy ( &GetFieldValue_Parms.FieldName, &FieldName, 0xC );
	GetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetFieldValue, &GetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &GetFieldValue_Parms.FieldValue, 0x54 );

	return GetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AllowPublishingToField
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex )
{
	static UFunction* pFnAllowPublishingToField = NULL;

	if ( ! pFnAllowPublishingToField )
		pFnAllowPublishingToField = (UFunction*) UObject::GObjObjects()->Data[ 31930 ];

	UUIDataProvider_eventAllowPublishingToField_Parms AllowPublishingToField_Parms;
	memcpy ( &AllowPublishingToField_Parms.FieldName, &FieldName, 0xC );
	AllowPublishingToField_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnAllowPublishingToField, &AllowPublishingToField_Parms, NULL );

	return AllowPublishingToField_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetSupportedScriptFields
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FUIDataProviderField > out_Fields                     ( CPF_Parm | CPF_OutParm )

void UUIDataProvider::eventGetSupportedScriptFields ( TArray< struct FUIDataProviderField >* out_Fields )
{
	static UFunction* pFnGetSupportedScriptFields = NULL;

	if ( ! pFnGetSupportedScriptFields )
		pFnGetSupportedScriptFields = (UFunction*) UObject::GObjObjects()->Data[ 31927 ];

	UUIDataProvider_eventGetSupportedScriptFields_Parms GetSupportedScriptFields_Parms;

	this->ProcessEvent ( pFnGetSupportedScriptFields, &GetSupportedScriptFields_Parms, NULL );

	if ( out_Fields )
		memcpy ( out_Fields, &GetSupportedScriptFields_Parms.out_Fields, 0xC );
};

// Function Engine.UIDataProvider.ParseArrayDelimiter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_OutParm )

int UUIDataProvider::ParseArrayDelimiter ( struct FString* DataTag )
{
	static UFunction* pFnParseArrayDelimiter = NULL;

	if ( ! pFnParseArrayDelimiter )
		pFnParseArrayDelimiter = (UFunction*) UObject::GObjObjects()->Data[ 31924 ];

	UUIDataProvider_execParseArrayDelimiter_Parms ParseArrayDelimiter_Parms;

	pFnParseArrayDelimiter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseArrayDelimiter, &ParseArrayDelimiter_Parms, NULL );

	pFnParseArrayDelimiter->FunctionFlags |= 0x400;

	if ( DataTag )
		memcpy ( DataTag, &ParseArrayDelimiter_Parms.DataTag, 0xC );

	return ParseArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetProviderFieldType
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_CoerceParm )
// unsigned char                  out_ProviderFieldType          ( CPF_Parm | CPF_OutParm )

bool UUIDataProvider::GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType )
{
	static UFunction* pFnGetProviderFieldType = NULL;

	if ( ! pFnGetProviderFieldType )
		pFnGetProviderFieldType = (UFunction*) UObject::GObjObjects()->Data[ 31920 ];

	UUIDataProvider_execGetProviderFieldType_Parms GetProviderFieldType_Parms;
	memcpy ( &GetProviderFieldType_Parms.DataTag, &DataTag, 0xC );

	pFnGetProviderFieldType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldType, &GetProviderFieldType_Parms, NULL );

	pFnGetProviderFieldType->FunctionFlags |= 0x400;

	if ( out_ProviderFieldType )
		*out_ProviderFieldType = GetProviderFieldType_Parms.out_ProviderFieldType;

	return GetProviderFieldType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// [0x00124000] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnDataProviderPropertyChange = NULL;

	if ( ! pFnOnDataProviderPropertyChange )
		pFnOnDataProviderPropertyChange = (UFunction*) UObject::GObjObjects()->Data[ 31917 ];

	UUIDataProvider_execOnDataProviderPropertyChange_Parms OnDataProviderPropertyChange_Parms;
	OnDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnDataProviderPropertyChange, &OnDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.UIDataStore.GetDataStoreClient
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIDataStore::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 32011 ];

	UUIDataStore_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIDataStore.OnCommit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore::OnCommit ( )
{
	static UFunction* pFnOnCommit = NULL;

	if ( ! pFnOnCommit )
		pFnOnCommit = (UFunction*) UObject::GObjObjects()->Data[ 32010 ];

	UUIDataStore_execOnCommit_Parms OnCommit_Parms;

	pFnOnCommit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCommit, &OnCommit_Parms, NULL );

	pFnOnCommit->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore.RefreshSubscribers
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FName                   PropertyTag                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInvalidateValues              ( CPF_OptionalParm | CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_OptionalParm | CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore::eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnRefreshSubscribers = NULL;

	if ( ! pFnRefreshSubscribers )
		pFnRefreshSubscribers = (UFunction*) UObject::GObjObjects()->Data[ 32001 ];

	UUIDataStore_eventRefreshSubscribers_Parms RefreshSubscribers_Parms;
	memcpy ( &RefreshSubscribers_Parms.PropertyTag, &PropertyTag, 0x8 );
	RefreshSubscribers_Parms.bInvalidateValues = bInvalidateValues;
	RefreshSubscribers_Parms.SourceProvider = SourceProvider;
	RefreshSubscribers_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnRefreshSubscribers, &RefreshSubscribers_Parms, NULL );
};

// Function Engine.UIDataStore.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 31999 ];

	UUIDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore.SubscriberDetached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = (UFunction*) UObject::GObjObjects()->Data[ 31996 ];

	UUIDataStore_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UIDataStore.SubscriberAttached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = (UFunction*) UObject::GObjObjects()->Data[ 31993 ];

	UUIDataStore_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UIDataStore.Unregistered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 31991 ];

	UUIDataStore_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore.Registered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 31989 ];

	UUIDataStore_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore.OnDataStoreValueUpdated
// [0x00120000] 
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStore::OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnOnDataStoreValueUpdated = NULL;

	if ( ! pFnOnDataStoreValueUpdated )
		pFnOnDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 31983 ];

	UUIDataStore_execOnDataStoreValueUpdated_Parms OnDataStoreValueUpdated_Parms;
	OnDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	OnDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &OnDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	OnDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	OnDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnOnDataStoreValueUpdated, &OnDataStoreValueUpdated_Parms, NULL );
};

// Function Engine.UISkin.SubscriberDetached
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUISkin::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = (UFunction*) UObject::GObjObjects()->Data[ 32073 ];

	UUISkin_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UISkin.SubscriberAttached
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUISkin::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = (UFunction*) UObject::GObjObjects()->Data[ 32071 ];

	UUISkin_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UISkin.GetStyleGroups
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedGroups        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       StyleGroupArray                ( CPF_Parm | CPF_OutParm )

void UUISkin::GetStyleGroups ( unsigned long bIncludeInheritedGroups, TArray< struct FString >* StyleGroupArray )
{
	static UFunction* pFnGetStyleGroups = NULL;

	if ( ! pFnGetStyleGroups )
		pFnGetStyleGroups = (UFunction*) UObject::GObjObjects()->Data[ 32067 ];

	UUISkin_execGetStyleGroups_Parms GetStyleGroups_Parms;
	GetStyleGroups_Parms.bIncludeInheritedGroups = bIncludeInheritedGroups;

	pFnGetStyleGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleGroups, &GetStyleGroups_Parms, NULL );

	pFnGetStyleGroups->FunctionFlags |= 0x400;

	if ( StyleGroupArray )
		memcpy ( StyleGroupArray, &GetStyleGroups_Parms.StyleGroupArray, 0xC );
};

// Function Engine.UISkin.FindStyleGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm )

int UUISkin::FindStyleGroupIndex ( struct FString StyleGroupName )
{
	static UFunction* pFnFindStyleGroupIndex = NULL;

	if ( ! pFnFindStyleGroupIndex )
		pFnFindStyleGroupIndex = (UFunction*) UObject::GObjObjects()->Data[ 32064 ];

	UUISkin_execFindStyleGroupIndex_Parms FindStyleGroupIndex_Parms;
	memcpy ( &FindStyleGroupIndex_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnFindStyleGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleGroupIndex, &FindStyleGroupIndex_Parms, NULL );

	pFnFindStyleGroupIndex->FunctionFlags |= 0x400;

	return FindStyleGroupIndex_Parms.ReturnValue;
};

// Function Engine.UISkin.GetStyleGroupAtIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

struct FString UUISkin::GetStyleGroupAtIndex ( int Index )
{
	static UFunction* pFnGetStyleGroupAtIndex = NULL;

	if ( ! pFnGetStyleGroupAtIndex )
		pFnGetStyleGroupAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 32061 ];

	UUISkin_execGetStyleGroupAtIndex_Parms GetStyleGroupAtIndex_Parms;
	GetStyleGroupAtIndex_Parms.Index = Index;

	pFnGetStyleGroupAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleGroupAtIndex, &GetStyleGroupAtIndex_Parms, NULL );

	pFnGetStyleGroupAtIndex->FunctionFlags |= 0x400;

	return GetStyleGroupAtIndex_Parms.ReturnValue;
};

// Function Engine.UISkin.RenameStyleGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OldStyleGroupName              ( CPF_Parm )
// struct FString                 NewStyleGroupName              ( CPF_Parm )

bool UUISkin::RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName )
{
	static UFunction* pFnRenameStyleGroup = NULL;

	if ( ! pFnRenameStyleGroup )
		pFnRenameStyleGroup = (UFunction*) UObject::GObjObjects()->Data[ 32057 ];

	UUISkin_execRenameStyleGroup_Parms RenameStyleGroup_Parms;
	memcpy ( &RenameStyleGroup_Parms.OldStyleGroupName, &OldStyleGroupName, 0xC );
	memcpy ( &RenameStyleGroup_Parms.NewStyleGroupName, &NewStyleGroupName, 0xC );

	pFnRenameStyleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRenameStyleGroup, &RenameStyleGroup_Parms, NULL );

	pFnRenameStyleGroup->FunctionFlags |= 0x400;

	return RenameStyleGroup_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm )

bool UUISkin::RemoveStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnRemoveStyleGroupName = NULL;

	if ( ! pFnRemoveStyleGroupName )
		pFnRemoveStyleGroupName = (UFunction*) UObject::GObjObjects()->Data[ 32054 ];

	UUISkin_execRemoveStyleGroupName_Parms RemoveStyleGroupName_Parms;
	memcpy ( &RemoveStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnRemoveStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleGroupName, &RemoveStyleGroupName_Parms, NULL );

	pFnRemoveStyleGroupName->FunctionFlags |= 0x400;

	return RemoveStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.AddStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm )

bool UUISkin::AddStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnAddStyleGroupName = NULL;

	if ( ! pFnAddStyleGroupName )
		pFnAddStyleGroupName = (UFunction*) UObject::GObjObjects()->Data[ 32051 ];

	UUISkin_execAddStyleGroupName_Parms AddStyleGroupName_Parms;
	memcpy ( &AddStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnAddStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleGroupName, &AddStyleGroupName_Parms, NULL );

	pFnAddStyleGroupName->FunctionFlags |= 0x400;

	return AddStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.IsInheritedGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm )

bool UUISkin::IsInheritedGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnIsInheritedGroupName = NULL;

	if ( ! pFnIsInheritedGroupName )
		pFnIsInheritedGroupName = (UFunction*) UObject::GObjObjects()->Data[ 32048 ];

	UUISkin_execIsInheritedGroupName_Parms IsInheritedGroupName_Parms;
	memcpy ( &IsInheritedGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnIsInheritedGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInheritedGroupName, &IsInheritedGroupName_Parms, NULL );

	pFnIsInheritedGroupName->FunctionFlags |= 0x400;

	return IsInheritedGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.GetSkinSoundCues
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FUISoundCue >   out_SoundCues                  ( CPF_Parm | CPF_OutParm )

void UUISkin::GetSkinSoundCues ( TArray< struct FUISoundCue >* out_SoundCues )
{
	static UFunction* pFnGetSkinSoundCues = NULL;

	if ( ! pFnGetSkinSoundCues )
		pFnGetSkinSoundCues = (UFunction*) UObject::GObjObjects()->Data[ 32045 ];

	UUISkin_execGetSkinSoundCues_Parms GetSkinSoundCues_Parms;

	pFnGetSkinSoundCues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinSoundCues, &GetSkinSoundCues_Parms, NULL );

	pFnGetSkinSoundCues->FunctionFlags |= 0x400;

	if ( out_SoundCues )
		memcpy ( out_SoundCues, &GetSkinSoundCues_Parms.out_SoundCues, 0xC );
};

// Function Engine.UISkin.GetUISoundCue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               out_UISoundCue                 ( CPF_Parm | CPF_OutParm )

bool UUISkin::GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue )
{
	static UFunction* pFnGetUISoundCue = NULL;

	if ( ! pFnGetUISoundCue )
		pFnGetUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 32041 ];

	UUISkin_execGetUISoundCue_Parms GetUISoundCue_Parms;
	memcpy ( &GetUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnGetUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUISoundCue, &GetUISoundCue_Parms, NULL );

	pFnGetUISoundCue->FunctionFlags |= 0x400;

	if ( out_UISoundCue )
		*out_UISoundCue = GetUISoundCue_Parms.out_UISoundCue;

	return GetUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )

bool UUISkin::RemoveUISoundCue ( struct FName SoundCueName )
{
	static UFunction* pFnRemoveUISoundCue = NULL;

	if ( ! pFnRemoveUISoundCue )
		pFnRemoveUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 32038 ];

	UUISkin_execRemoveUISoundCue_Parms RemoveUISoundCue_Parms;
	memcpy ( &RemoveUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnRemoveUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveUISoundCue, &RemoveUISoundCue_Parms, NULL );

	pFnRemoveUISoundCue->FunctionFlags |= 0x400;

	return RemoveUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.AddUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               SoundToPlay                    ( CPF_Parm )

bool UUISkin::AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay )
{
	static UFunction* pFnAddUISoundCue = NULL;

	if ( ! pFnAddUISoundCue )
		pFnAddUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 32034 ];

	UUISkin_execAddUISoundCue_Parms AddUISoundCue_Parms;
	memcpy ( &AddUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );
	AddUISoundCue_Parms.SoundToPlay = SoundToPlay;

	pFnAddUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddUISoundCue, &AddUISoundCue_Parms, NULL );

	pFnAddUISoundCue->FunctionFlags |= 0x400;

	return AddUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.GetCursorResource
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITexture*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

class UUITexture* UUISkin::GetCursorResource ( struct FName CursorName )
{
	static UFunction* pFnGetCursorResource = NULL;

	if ( ! pFnGetCursorResource )
		pFnGetCursorResource = (UFunction*) UObject::GObjObjects()->Data[ 32031 ];

	UUISkin_execGetCursorResource_Parms GetCursorResource_Parms;
	memcpy ( &GetCursorResource_Parms.CursorName, &CursorName, 0x8 );

	pFnGetCursorResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorResource, &GetCursorResource_Parms, NULL );

	pFnGetCursorResource->FunctionFlags |= 0x400;

	return GetCursorResource_Parms.ReturnValue;
};

// Function Engine.UISkin.GetAvailableStyles
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedStyles        ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIStyle* >      out_Styles                     ( CPF_Parm | CPF_OutParm )

void UUISkin::GetAvailableStyles ( unsigned long bIncludeInheritedStyles, TArray< class UUIStyle* >* out_Styles )
{
	static UFunction* pFnGetAvailableStyles = NULL;

	if ( ! pFnGetAvailableStyles )
		pFnGetAvailableStyles = (UFunction*) UObject::GObjObjects()->Data[ 32027 ];

	UUISkin_execGetAvailableStyles_Parms GetAvailableStyles_Parms;
	GetAvailableStyles_Parms.bIncludeInheritedStyles = bIncludeInheritedStyles;

	pFnGetAvailableStyles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableStyles, &GetAvailableStyles_Parms, NULL );

	pFnGetAvailableStyles->FunctionFlags |= 0x400;

	if ( out_Styles )
		memcpy ( out_Styles, &GetAvailableStyles_Parms.out_Styles, 0xC );
};

// Function Engine.UIStyle.GetDefaultStyle
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIStyle_Data* UUIStyle::eventGetDefaultStyle ( )
{
	static UFunction* pFnGetDefaultStyle = NULL;

	if ( ! pFnGetDefaultStyle )
		pFnGetDefaultStyle = (UFunction*) UObject::GObjObjects()->Data[ 32541 ];

	UUIStyle_eventGetDefaultStyle_Parms GetDefaultStyle_Parms;

	this->ProcessEvent ( pFnGetDefaultStyle, &GetDefaultStyle_Parms, NULL );

	return GetDefaultStyle_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForStateByClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForStateByClass ( class UClass* StateClass )
{
	static UFunction* pFnGetStyleForStateByClass = NULL;

	if ( ! pFnGetStyleForStateByClass )
		pFnGetStyleForStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 32538 ];

	UUIStyle_execGetStyleForStateByClass_Parms GetStyleForStateByClass_Parms;
	GetStyleForStateByClass_Parms.StateClass = StateClass;

	pFnGetStyleForStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForStateByClass, &GetStyleForStateByClass_Parms, NULL );

	pFnGetStyleForStateByClass->FunctionFlags |= 0x400;

	return GetStyleForStateByClass_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateObject                    ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForState ( class UUIState* StateObject )
{
	static UFunction* pFnGetStyleForState = NULL;

	if ( ! pFnGetStyleForState )
		pFnGetStyleForState = (UFunction*) UObject::GObjObjects()->Data[ 32535 ];

	UUIStyle_execGetStyleForState_Parms GetStyleForState_Parms;
	GetStyleForState_Parms.StateObject = StateObject;

	pFnGetStyleForState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForState, &GetStyleForState_Parms, NULL );

	pFnGetStyleForState->FunctionFlags |= 0x400;

	return GetStyleForState_Parms.ReturnValue;
};

// Function Engine.ConsoleEntry.SetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 NewValue                       ( CPF_Parm )

void UConsoleEntry::SetValue ( struct FString NewValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 14841 ];

	UConsoleEntry_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewValue, &NewValue, 0xC );

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.ConsoleEntry.SetupDockingLinks
// [0x00020002] 
// Parameters infos:

void UConsoleEntry::SetupDockingLinks ( )
{
	static UFunction* pFnSetupDockingLinks = NULL;

	if ( ! pFnSetupDockingLinks )
		pFnSetupDockingLinks = (UFunction*) UObject::GObjObjects()->Data[ 14840 ];

	UConsoleEntry_execSetupDockingLinks_Parms SetupDockingLinks_Parms;

	this->ProcessEvent ( pFnSetupDockingLinks, &SetupDockingLinks_Parms, NULL );
};

// Function Engine.ConsoleEntry.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UConsoleEntry::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 14839 ];

	UConsoleEntry_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.ConsoleEntry.RemovedChild
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

void UConsoleEntry::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 14834 ];

	UConsoleEntry_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.ConsoleEntry.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UConsoleEntry::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 14831 ];

	UConsoleEntry_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.GameUISceneClient.AnimUnSubscribe
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Target                         ( CPF_Parm )

void UGameUISceneClient::AnimUnSubscribe ( class UUIObject* Target )
{
	static UFunction* pFnAnimUnSubscribe = NULL;

	if ( ! pFnAnimUnSubscribe )
		pFnAnimUnSubscribe = (UFunction*) UObject::GObjObjects()->Data[ 21256 ];

	UGameUISceneClient_execAnimUnSubscribe_Parms AnimUnSubscribe_Parms;
	AnimUnSubscribe_Parms.Target = Target;

	this->ProcessEvent ( pFnAnimUnSubscribe, &AnimUnSubscribe_Parms, NULL );
};

// Function Engine.GameUISceneClient.AnimSubscribe
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Target                         ( CPF_Parm )

void UGameUISceneClient::AnimSubscribe ( class UUIObject* Target )
{
	static UFunction* pFnAnimSubscribe = NULL;

	if ( ! pFnAnimSubscribe )
		pFnAnimSubscribe = (UFunction*) UObject::GObjObjects()->Data[ 21253 ];

	UGameUISceneClient_execAnimSubscribe_Parms AnimSubscribe_Parms;
	AnimSubscribe_Parms.Target = Target;

	this->ProcessEvent ( pFnAnimSubscribe, &AnimSubscribe_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowMenuProgression
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuProgression ( )
{
	static UFunction* pFnShowMenuProgression = NULL;

	if ( ! pFnShowMenuProgression )
		pFnShowMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21243 ];

	UGameUISceneClient_execShowMenuProgression_Parms ShowMenuProgression_Parms;

	this->ProcessEvent ( pFnShowMenuProgression, &ShowMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.DebugShowMessage
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm )
// struct FString                 Aliases                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Question                       ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::DebugShowMessage ( struct FString Message, struct FString Aliases, struct FString Title, struct FString Question )
{
	static UFunction* pFnDebugShowMessage = NULL;

	if ( ! pFnDebugShowMessage )
		pFnDebugShowMessage = (UFunction*) UObject::GObjObjects()->Data[ 21238 ];

	UGameUISceneClient_execDebugShowMessage_Parms DebugShowMessage_Parms;
	memcpy ( &DebugShowMessage_Parms.Message, &Message, 0xC );
	memcpy ( &DebugShowMessage_Parms.Aliases, &Aliases, 0xC );
	memcpy ( &DebugShowMessage_Parms.Title, &Title, 0xC );
	memcpy ( &DebugShowMessage_Parms.Question, &Question, 0xC );

	this->ProcessEvent ( pFnDebugShowMessage, &DebugShowMessage_Parms, NULL );
};

// Function Engine.GameUISceneClient.DebugMessageOptionSelected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIMessageBoxBase*       Sender                         ( CPF_Parm )
// struct FName                   SelectedInputAlias             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UGameUISceneClient::DebugMessageOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex )
{
	static UFunction* pFnDebugMessageOptionSelected = NULL;

	if ( ! pFnDebugMessageOptionSelected )
		pFnDebugMessageOptionSelected = (UFunction*) UObject::GObjObjects()->Data[ 21233 ];

	UGameUISceneClient_execDebugMessageOptionSelected_Parms DebugMessageOptionSelected_Parms;
	DebugMessageOptionSelected_Parms.Sender = Sender;
	memcpy ( &DebugMessageOptionSelected_Parms.SelectedInputAlias, &SelectedInputAlias, 0x8 );
	DebugMessageOptionSelected_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDebugMessageOptionSelected, &DebugMessageOptionSelected_Parms, NULL );

	return DebugMessageOptionSelected_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.ShowDataStores
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ShowDataStores ( unsigned long bVerbose )
{
	static UFunction* pFnShowDataStores = NULL;

	if ( ! pFnShowDataStores )
		pFnShowDataStores = (UFunction*) UObject::GObjObjects()->Data[ 21231 ];

	UGameUISceneClient_execShowDataStores_Parms ShowDataStores_Parms;
	ShowDataStores_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnShowDataStores, &ShowDataStores_Parms, NULL );
};

// Function Engine.GameUISceneClient.RefreshFormatting
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::RefreshFormatting ( )
{
	static UFunction* pFnRefreshFormatting = NULL;

	if ( ! pFnRefreshFormatting )
		pFnRefreshFormatting = (UFunction*) UObject::GObjObjects()->Data[ 21229 ];

	UGameUISceneClient_execRefreshFormatting_Parms RefreshFormatting_Parms;

	this->ProcessEvent ( pFnRefreshFormatting, &RefreshFormatting_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDataStoreField
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 DataStoreMarkup                ( CPF_Parm )

void UGameUISceneClient::ShowDataStoreField ( struct FString DataStoreMarkup )
{
	static UFunction* pFnShowDataStoreField = NULL;

	if ( ! pFnShowDataStoreField )
		pFnShowDataStoreField = (UFunction*) UObject::GObjObjects()->Data[ 21226 ];

	UGameUISceneClient_execShowDataStoreField_Parms ShowDataStoreField_Parms;
	memcpy ( &ShowDataStoreField_Parms.DataStoreMarkup, &DataStoreMarkup, 0xC );

	this->ProcessEvent ( pFnShowDataStoreField, &ShowDataStoreField_Parms, NULL );
};

// Function Engine.GameUISceneClient.CloseMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   SceneName                      ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::CloseMenu ( struct FName SceneName )
{
	static UFunction* pFnCloseMenu = NULL;

	if ( ! pFnCloseMenu )
		pFnCloseMenu = (UFunction*) UObject::GObjObjects()->Data[ 21222 ];

	UGameUISceneClient_execCloseMenu_Parms CloseMenu_Parms;
	memcpy ( &CloseMenu_Parms.SceneName, &SceneName, 0x8 );

	this->ProcessEvent ( pFnCloseMenu, &CloseMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.OpenMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MenuPath                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::OpenMenu ( struct FString MenuPath, int PlayerIndex )
{
	static UFunction* pFnOpenMenu = NULL;

	if ( ! pFnOpenMenu )
		pFnOpenMenu = (UFunction*) UObject::GObjObjects()->Data[ 21217 ];

	UGameUISceneClient_execOpenMenu_Parms OpenMenu_Parms;
	memcpy ( &OpenMenu_Parms.MenuPath, &MenuPath, 0xC );
	OpenMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOpenMenu, &OpenMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.CreateMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  SceneClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::CreateMenu ( class UClass* SceneClass, int PlayerIndex )
{
	static UFunction* pFnCreateMenu = NULL;

	if ( ! pFnCreateMenu )
		pFnCreateMenu = (UFunction*) UObject::GObjObjects()->Data[ 21212 ];

	UGameUISceneClient_execCreateMenu_Parms CreateMenu_Parms;
	CreateMenu_Parms.SceneClass = SceneClass;
	CreateMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCreateMenu, &CreateMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.ToggleDebugInput
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ToggleDebugInput ( unsigned long bEnable )
{
	static UFunction* pFnToggleDebugInput = NULL;

	if ( ! pFnToggleDebugInput )
		pFnToggleDebugInput = (UFunction*) UObject::GObjObjects()->Data[ 21210 ];

	UGameUISceneClient_execToggleDebugInput_Parms ToggleDebugInput_Parms;
	ToggleDebugInput_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnToggleDebugInput, &ToggleDebugInput_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowMenuStates
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuStates ( )
{
	static UFunction* pFnShowMenuStates = NULL;

	if ( ! pFnShowMenuStates )
		pFnShowMenuStates = (UFunction*) UObject::GObjObjects()->Data[ 21208 ];

	UGameUISceneClient_execShowMenuStates_Parms ShowMenuStates_Parms;

	this->ProcessEvent ( pFnShowMenuStates, &ShowMenuStates_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowRenderBounds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowRenderBounds ( )
{
	static UFunction* pFnShowRenderBounds = NULL;

	if ( ! pFnShowRenderBounds )
		pFnShowRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 21206 ];

	UGameUISceneClient_execShowRenderBounds_Parms ShowRenderBounds_Parms;

	this->ProcessEvent ( pFnShowRenderBounds, &ShowRenderBounds_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDockingStacks
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowDockingStacks ( )
{
	static UFunction* pFnShowDockingStacks = NULL;

	if ( ! pFnShowDockingStacks )
		pFnShowDockingStacks = (UFunction*) UObject::GObjObjects()->Data[ 21204 ];

	UGameUISceneClient_execShowDockingStacks_Parms ShowDockingStacks_Parms;

	this->ProcessEvent ( pFnShowDockingStacks, &ShowDockingStacks_Parms, NULL );
};

// Function Engine.GameUISceneClient.ClearUIMessageScene
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            ScenePlayerOwner               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )

bool UGameUISceneClient::ClearUIMessageScene ( struct FName SceneTag, class ULocalPlayer* ScenePlayerOwner, unsigned long bCloseChildScenes )
{
	static UFunction* pFnClearUIMessageScene = NULL;

	if ( ! pFnClearUIMessageScene )
		pFnClearUIMessageScene = (UFunction*) UObject::GObjObjects()->Data[ 21196 ];

	UGameUISceneClient_execClearUIMessageScene_Parms ClearUIMessageScene_Parms;
	memcpy ( &ClearUIMessageScene_Parms.SceneTag, &SceneTag, 0x8 );
	ClearUIMessageScene_Parms.ScenePlayerOwner = ScenePlayerOwner;
	ClearUIMessageScene_Parms.bCloseChildScenes = bCloseChildScenes;

	this->ProcessEvent ( pFnClearUIMessageScene, &ClearUIMessageScene_Parms, NULL );

	return ClearUIMessageScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateUIMessageBox
// [0x00026002] 
// Parameters infos:
// class UUIMessageBoxBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class UClass*                  CustomMessageBoxClass          ( CPF_OptionalParm | CPF_Parm )
// class UUIMessageBoxBase*       SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIMessageBoxBase* UGameUISceneClient::CreateUIMessageBox ( struct FName SceneTag, class UClass* CustomMessageBoxClass, class UUIMessageBoxBase* SceneTemplate )
{
	static UFunction* pFnCreateUIMessageBox = NULL;

	if ( ! pFnCreateUIMessageBox )
		pFnCreateUIMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 21189 ];

	UGameUISceneClient_execCreateUIMessageBox_Parms CreateUIMessageBox_Parms;
	memcpy ( &CreateUIMessageBox_Parms.SceneTag, &SceneTag, 0x8 );
	CreateUIMessageBox_Parms.CustomMessageBoxClass = CustomMessageBoxClass;
	CreateUIMessageBox_Parms.SceneTemplate = SceneTemplate;

	this->ProcessEvent ( pFnCreateUIMessageBox, &CreateUIMessageBox_Parms, NULL );

	return CreateUIMessageBox_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RestoreMenuProgression
// [0x00024002] 
// Parameters infos:
// class UUIScene*                BaseScene                      ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::RestoreMenuProgression ( class UUIScene* BaseScene )
{
	static UFunction* pFnRestoreMenuProgression = NULL;

	if ( ! pFnRestoreMenuProgression )
		pFnRestoreMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21179 ];

	UGameUISceneClient_execRestoreMenuProgression_Parms RestoreMenuProgression_Parms;
	RestoreMenuProgression_Parms.BaseScene = BaseScene;

	this->ProcessEvent ( pFnRestoreMenuProgression, &RestoreMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.ClearMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::ClearMenuProgression ( )
{
	static UFunction* pFnClearMenuProgression = NULL;

	if ( ! pFnClearMenuProgression )
		pFnClearMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21175 ];

	UGameUISceneClient_execClearMenuProgression_Parms ClearMenuProgression_Parms;

	this->ProcessEvent ( pFnClearMenuProgression, &ClearMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.SaveMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::SaveMenuProgression ( )
{
	static UFunction* pFnSaveMenuProgression = NULL;

	if ( ! pFnSaveMenuProgression )
		pFnSaveMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21166 ];

	UGameUISceneClient_execSaveMenuProgression_Parms SaveMenuProgression_Parms;

	this->ProcessEvent ( pFnSaveMenuProgression, &SaveMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.GetActiveScene
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UGameUISceneClient::GetActiveScene ( )
{
	static UFunction* pFnGetActiveScene = NULL;

	if ( ! pFnGetActiveScene )
		pFnGetActiveScene = (UFunction*) UObject::GObjObjects()->Data[ 21163 ];

	UGameUISceneClient_execGetActiveScene_Parms GetActiveScene_Parms;

	this->ProcessEvent ( pFnGetActiveScene, &GetActiveScene_Parms, NULL );

	return GetActiveScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 21159 ];

	UGameUISceneClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 21155 ];

	UGameUISceneClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UGameUISceneClient::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21152 ];

	UGameUISceneClient_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UGameUISceneClient::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21149 ];

	UGameUISceneClient_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bConnected                     ( CPF_Parm )

void UGameUISceneClient::NotifyControllerChanged ( int ControllerId, unsigned long bConnected )
{
	static UFunction* pFnNotifyControllerChanged = NULL;

	if ( ! pFnNotifyControllerChanged )
		pFnNotifyControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 21145 ];

	UGameUISceneClient_execNotifyControllerChanged_Parms NotifyControllerChanged_Parms;
	NotifyControllerChanged_Parms.ControllerId = ControllerId;
	NotifyControllerChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyControllerChanged, &NotifyControllerChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLoginStatusChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned char                  Status                         ( CPF_Parm )

void UGameUISceneClient::NotifyLoginStatusChanged ( int ControllerId, unsigned char Status )
{
	static UFunction* pFnNotifyLoginStatusChanged = NULL;

	if ( ! pFnNotifyLoginStatusChanged )
		pFnNotifyLoginStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21141 ];

	UGameUISceneClient_execNotifyLoginStatusChanged_Parms NotifyLoginStatusChanged_Parms;
	NotifyLoginStatusChanged_Parms.ControllerId = ControllerId;
	NotifyLoginStatusChanged_Parms.Status = Status;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged, &NotifyLoginStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLoginStatusChanged3
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyLoginStatusChanged3 ( )
{
	static UFunction* pFnNotifyLoginStatusChanged3 = NULL;

	if ( ! pFnNotifyLoginStatusChanged3 )
		pFnNotifyLoginStatusChanged3 = (UFunction*) UObject::GObjObjects()->Data[ 21140 ];

	UGameUISceneClient_execNotifyLoginStatusChanged3_Parms NotifyLoginStatusChanged3_Parms;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged3, &NotifyLoginStatusChanged3_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLoginStatusChanged2
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyLoginStatusChanged2 ( )
{
	static UFunction* pFnNotifyLoginStatusChanged2 = NULL;

	if ( ! pFnNotifyLoginStatusChanged2 )
		pFnNotifyLoginStatusChanged2 = (UFunction*) UObject::GObjObjects()->Data[ 21139 ];

	UGameUISceneClient_execNotifyLoginStatusChanged2_Parms NotifyLoginStatusChanged2_Parms;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged2, &NotifyLoginStatusChanged2_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLoginStatusChanged1
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyLoginStatusChanged1 ( )
{
	static UFunction* pFnNotifyLoginStatusChanged1 = NULL;

	if ( ! pFnNotifyLoginStatusChanged1 )
		pFnNotifyLoginStatusChanged1 = (UFunction*) UObject::GObjObjects()->Data[ 21138 ];

	UGameUISceneClient_execNotifyLoginStatusChanged1_Parms NotifyLoginStatusChanged1_Parms;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged1, &NotifyLoginStatusChanged1_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLoginStatusChanged0
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyLoginStatusChanged0 ( )
{
	static UFunction* pFnNotifyLoginStatusChanged0 = NULL;

	if ( ! pFnNotifyLoginStatusChanged0 )
		pFnNotifyLoginStatusChanged0 = (UFunction*) UObject::GObjObjects()->Data[ 21137 ];

	UGameUISceneClient_execNotifyLoginStatusChanged0_Parms NotifyLoginStatusChanged0_Parms;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged0, &NotifyLoginStatusChanged0_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyGlobalLoginStatusChanged
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyGlobalLoginStatusChanged ( )
{
	static UFunction* pFnNotifyGlobalLoginStatusChanged = NULL;

	if ( ! pFnNotifyGlobalLoginStatusChanged )
		pFnNotifyGlobalLoginStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21134 ];

	UGameUISceneClient_execNotifyGlobalLoginStatusChanged_Parms NotifyGlobalLoginStatusChanged_Parms;

	this->ProcessEvent ( pFnNotifyGlobalLoginStatusChanged, &NotifyGlobalLoginStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 21130 ];

	UGameUISceneClient_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyClientTravel
// [0x00020002] 
// Parameters infos:
// class APlayerController*       TravellingPlayer               ( CPF_Parm )
// struct FString                 TravelURL                      ( CPF_Parm )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void UGameUISceneClient::NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnNotifyClientTravel = NULL;

	if ( ! pFnNotifyClientTravel )
		pFnNotifyClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 21120 ];

	UGameUISceneClient_execNotifyClientTravel_Parms NotifyClientTravel_Parms;
	NotifyClientTravel_Parms.TravellingPlayer = TravellingPlayer;
	memcpy ( &NotifyClientTravel_Parms.TravelURL, &TravelURL, 0xC );
	NotifyClientTravel_Parms.TravelType = TravelType;
	NotifyClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnNotifyClientTravel, &NotifyClientTravel_Parms, NULL );
};

// Function Engine.GameUISceneClient.SynchronizePlayers
// [0x00424802] ( FUNC_Event )
// Parameters infos:
// int                            MaxPlayersAllowed              ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  out_OrphanControllerIds        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// TArray< int >                  out_OrphanPlayerIndexes        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void UGameUISceneClient::eventSynchronizePlayers ( int MaxPlayersAllowed, TArray< int >* out_OrphanControllerIds, TArray< int >* out_OrphanPlayerIndexes )
{
	static UFunction* pFnSynchronizePlayers = NULL;

	if ( ! pFnSynchronizePlayers )
		pFnSynchronizePlayers = (UFunction*) UObject::GObjObjects()->Data[ 21110 ];

	UGameUISceneClient_eventSynchronizePlayers_Parms SynchronizePlayers_Parms;
	SynchronizePlayers_Parms.MaxPlayersAllowed = MaxPlayersAllowed;

	this->ProcessEvent ( pFnSynchronizePlayers, &SynchronizePlayers_Parms, NULL );

	if ( out_OrphanControllerIds )
		memcpy ( out_OrphanControllerIds, &SynchronizePlayers_Parms.out_OrphanControllerIds, 0xC );

	if ( out_OrphanPlayerIndexes )
		memcpy ( out_OrphanPlayerIndexes, &SynchronizePlayers_Parms.out_OrphanPlayerIndexes, 0xC );
};

// Function Engine.GameUISceneClient.InitializeSceneClient
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameUISceneClient::eventInitializeSceneClient ( )
{
	static UFunction* pFnInitializeSceneClient = NULL;

	if ( ! pFnInitializeSceneClient )
		pFnInitializeSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 21108 ];

	UGameUISceneClient_eventInitializeSceneClient_Parms InitializeSceneClient_Parms;

	this->ProcessEvent ( pFnInitializeSceneClient, &InitializeSceneClient_Parms, NULL );
};

// Function Engine.GameUISceneClient.CanShowToolTips
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::eventCanShowToolTips ( )
{
	static UFunction* pFnCanShowToolTips = NULL;

	if ( ! pFnCanShowToolTips )
		pFnCanShowToolTips = (UFunction*) UObject::GObjObjects()->Data[ 21106 ];

	UGameUISceneClient_eventCanShowToolTips_Parms CanShowToolTips_Parms;

	this->ProcessEvent ( pFnCanShowToolTips, &CanShowToolTips_Parms, NULL );

	return CanShowToolTips_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.PauseGame
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex )
{
	static UFunction* pFnPauseGame = NULL;

	if ( ! pFnPauseGame )
		pFnPauseGame = (UFunction*) UObject::GObjObjects()->Data[ 21102 ];

	UGameUISceneClient_eventPauseGame_Parms PauseGame_Parms;
	PauseGame_Parms.bDesiredPauseState = bDesiredPauseState;
	PauseGame_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnPauseGame, &PauseGame_Parms, NULL );
};

// Function Engine.GameUISceneClient.SetFocusControl
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewFocusControl                ( CPF_Parm )
// unsigned long                  bEvent                         ( CPF_OptionalParm | CPF_Parm )

bool UGameUISceneClient::SetFocusControl ( class UUIObject* NewFocusControl, unsigned long bEvent )
{
	static UFunction* pFnSetFocusControl = NULL;

	if ( ! pFnSetFocusControl )
		pFnSetFocusControl = (UFunction*) UObject::GObjObjects()->Data[ 21098 ];

	UGameUISceneClient_execSetFocusControl_Parms SetFocusControl_Parms;
	SetFocusControl_Parms.NewFocusControl = NewFocusControl;
	SetFocusControl_Parms.bEvent = bEvent;

	pFnSetFocusControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocusControl, &SetFocusControl_Parms, NULL );

	pFnSetFocusControl->FunctionFlags |= 0x400;

	return SetFocusControl_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.SetActiveControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewActiveControl               ( CPF_Parm )

bool UGameUISceneClient::SetActiveControl ( class UUIObject* NewActiveControl )
{
	static UFunction* pFnSetActiveControl = NULL;

	if ( ! pFnSetActiveControl )
		pFnSetActiveControl = (UFunction*) UObject::GObjObjects()->Data[ 21095 ];

	UGameUISceneClient_execSetActiveControl_Parms SetActiveControl_Parms;
	SetActiveControl_Parms.NewActiveControl = NewActiveControl;

	pFnSetActiveControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveControl, &SetActiveControl_Parms, NULL );

	pFnSetActiveControl->FunctionFlags |= 0x400;

	return SetActiveControl_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::CanUnpauseInternalUI ( )
{
	static UFunction* pFnCanUnpauseInternalUI = NULL;

	if ( ! pFnCanUnpauseInternalUI )
		pFnCanUnpauseInternalUI = (UFunction*) UObject::GObjObjects()->Data[ 21093 ];

	UGameUISceneClient_execCanUnpauseInternalUI_Parms CanUnpauseInternalUI_Parms;

	pFnCanUnpauseInternalUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Parms, NULL );

	pFnCanUnpauseInternalUI->FunctionFlags |= 0x400;

	return CanUnpauseInternalUI_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RequestCursorRenderUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestCursorRenderUpdate ( )
{
	static UFunction* pFnRequestCursorRenderUpdate = NULL;

	if ( ! pFnRequestCursorRenderUpdate )
		pFnRequestCursorRenderUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15722 ];

	UGameUISceneClient_execRequestCursorRenderUpdate_Parms RequestCursorRenderUpdate_Parms;

	pFnRequestCursorRenderUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestCursorRenderUpdate, &RequestCursorRenderUpdate_Parms, NULL );

	pFnRequestCursorRenderUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestInputProcessingUpdate ( )
{
	static UFunction* pFnRequestInputProcessingUpdate = NULL;

	if ( ! pFnRequestInputProcessingUpdate )
		pFnRequestInputProcessingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15723 ];

	UGameUISceneClient_execRequestInputProcessingUpdate_Parms RequestInputProcessingUpdate_Parms;

	pFnRequestInputProcessingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestInputProcessingUpdate, &RequestInputProcessingUpdate_Parms, NULL );

	pFnRequestInputProcessingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.FindSceneIndexByTag
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

int UGameUISceneClient::FindSceneIndexByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneIndexByTag = NULL;

	if ( ! pFnFindSceneIndexByTag )
		pFnFindSceneIndexByTag = (UFunction*) UObject::GObjObjects()->Data[ 21089 ];

	UGameUISceneClient_execFindSceneIndexByTag_Parms FindSceneIndexByTag_Parms;
	memcpy ( &FindSceneIndexByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneIndexByTag_Parms.SceneOwner = SceneOwner;

	pFnFindSceneIndexByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneIndexByTag, &FindSceneIndexByTag_Parms, NULL );

	pFnFindSceneIndexByTag->FunctionFlags |= 0x400;

	return FindSceneIndexByTag_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.FindSceneIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToFind                    ( CPF_Parm )

int UGameUISceneClient::FindSceneIndex ( class UUIScene* SceneToFind )
{
	static UFunction* pFnFindSceneIndex = NULL;

	if ( ! pFnFindSceneIndex )
		pFnFindSceneIndex = (UFunction*) UObject::GObjObjects()->Data[ 21086 ];

	UGameUISceneClient_execFindSceneIndex_Parms FindSceneIndex_Parms;
	FindSceneIndex_Parms.SceneToFind = SceneToFind;

	pFnFindSceneIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneIndex, &FindSceneIndex_Parms, NULL );

	pFnFindSceneIndex->FunctionFlags |= 0x400;

	return FindSceneIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.FindSceneByTag
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneByTag = NULL;

	if ( ! pFnFindSceneByTag )
		pFnFindSceneByTag = (UFunction*) UObject::GObjObjects()->Data[ 16554 ];

	UGameUISceneClient_execFindSceneByTag_Parms FindSceneByTag_Parms;
	memcpy ( &FindSceneByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneByTag_Parms.SceneOwner = SceneOwner;

	pFnFindSceneByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneByTag, &FindSceneByTag_Parms, NULL );

	pFnFindSceneByTag->FunctionFlags |= 0x400;

	return FindSceneByTag_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateTransientWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UGameUISceneClient::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = (UFunction*) UObject::GObjObjects()->Data[ 21078 ];

	UGameUISceneClient_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = (UFunction*) UObject::GObjObjects()->Data[ 21073 ];

	UGameUISceneClient_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetTransientScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UGameUISceneClient::GetTransientScene ( )
{
	static UFunction* pFnGetTransientScene = NULL;

	if ( ! pFnGetTransientScene )
		pFnGetTransientScene = (UFunction*) UObject::GObjObjects()->Data[ 16555 ];

	UGameUISceneClient_execGetTransientScene_Parms GetTransientScene_Parms;

	pFnGetTransientScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTransientScene, &GetTransientScene_Parms, NULL );

	pFnGetTransientScene->FunctionFlags |= 0x400;

	return GetTransientScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetCurrentNetMode
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameUISceneClient::GetCurrentNetMode ( )
{
	static UFunction* pFnGetCurrentNetMode = NULL;

	if ( ! pFnGetCurrentNetMode )
		pFnGetCurrentNetMode = (UFunction*) UObject::GObjObjects()->Data[ 21070 ];

	UGameUISceneClient_execGetCurrentNetMode_Parms GetCurrentNetMode_Parms;

	pFnGetCurrentNetMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentNetMode, &GetCurrentNetMode_Parms, NULL );

	pFnGetCurrentNetMode->FunctionFlags |= 0x400;

	return GetCurrentNetMode_Parms.ReturnValue;
};

// Function Engine.UIButton.SetImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIButton::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = (UFunction*) UObject::GObjObjects()->Data[ 31672 ];

	UUIButton_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );
};

// Function Engine.UILabelButton.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

bool UUILabelButton::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 31705 ];

	UUILabelButton_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUILabelButton::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 31704 ];

	UUILabelButton_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

void UUILabelButton::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 31701 ];

	UUILabelButton_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UILabelButton.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabelButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 31695 ];

	UUILabelButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabelButton::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 31692 ];

	UUILabelButton_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabelButton::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 31689 ];

	UUILabelButton_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabelButton::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 31686 ];

	UUILabelButton_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabelButton::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 31683 ];

	UUILabelButton_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.GetCaption
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UUILabelButton::eventGetCaption ( )
{
	static UFunction* pFnGetCaption = NULL;

	if ( ! pFnGetCaption )
		pFnGetCaption = (UFunction*) UObject::GObjObjects()->Data[ 31681 ];

	UUILabelButton_eventGetCaption_Parms GetCaption_Parms;

	this->ProcessEvent ( pFnGetCaption, &GetCaption_Parms, NULL );

	return GetCaption_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetCaption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm )

void UUILabelButton::SetCaption ( struct FString NewText )
{
	static UFunction* pFnSetCaption = NULL;

	if ( ! pFnSetCaption )
		pFnSetCaption = (UFunction*) UObject::GObjObjects()->Data[ 31679 ];

	UUILabelButton_execSetCaption_Parms SetCaption_Parms;
	memcpy ( &SetCaption_Parms.NewText, &NewText, 0xC );

	pFnSetCaption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaption, &SetCaption_Parms, NULL );

	pFnSetCaption->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutInputProxy
// [0x00024002] 
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButton::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 31763 ];

	UUICalloutButton_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.VerifyDefaultMarkupString
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICalloutButton::VerifyDefaultMarkupString ( )
{
	static UFunction* pFnVerifyDefaultMarkupString = NULL;

	if ( ! pFnVerifyDefaultMarkupString )
		pFnVerifyDefaultMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 31760 ];

	UUICalloutButton_execVerifyDefaultMarkupString_Parms VerifyDefaultMarkupString_Parms;

	this->ProcessEvent ( pFnVerifyDefaultMarkupString, &VerifyDefaultMarkupString_Parms, NULL );

	return VerifyDefaultMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetPanelOwner
// [0x00020002] 
// Parameters infos:
// class UUICalloutButtonPanel*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUICalloutButtonPanel* UUICalloutButton::GetPanelOwner ( )
{
	static UFunction* pFnGetPanelOwner = NULL;

	if ( ! pFnGetPanelOwner )
		pFnGetPanelOwner = (UFunction*) UObject::GObjObjects()->Data[ 31758 ];

	UUICalloutButton_execGetPanelOwner_Parms GetPanelOwner_Parms;

	this->ProcessEvent ( pFnGetPanelOwner, &GetPanelOwner_Parms, NULL );

	return GetPanelOwner_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButton::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 31755 ];

	UUICalloutButton_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButton.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButton::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 31752 ];

	UUICalloutButton_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButton.GenerateCompleteCaptionMarkup
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InputAlias                     ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGenerateCompleteCaptionMarkup ( struct FName InputAlias )
{
	static UFunction* pFnGenerateCompleteCaptionMarkup = NULL;

	if ( ! pFnGenerateCompleteCaptionMarkup )
		pFnGenerateCompleteCaptionMarkup = (UFunction*) UObject::GObjObjects()->Data[ 31745 ];

	UUICalloutButton_eventGenerateCompleteCaptionMarkup_Parms GenerateCompleteCaptionMarkup_Parms;
	memcpy ( &GenerateCompleteCaptionMarkup_Parms.InputAlias, &InputAlias, 0x8 );

	this->ProcessEvent ( pFnGenerateCompleteCaptionMarkup, &GenerateCompleteCaptionMarkup_Parms, NULL );

	return GenerateCompleteCaptionMarkup_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutMarkupString
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AlternateInputAlias            ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGetCalloutMarkupString ( struct FName AlternateInputAlias )
{
	static UFunction* pFnGetCalloutMarkupString = NULL;

	if ( ! pFnGetCalloutMarkupString )
		pFnGetCalloutMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 31741 ];

	UUICalloutButton_eventGetCalloutMarkupString_Parms GetCalloutMarkupString_Parms;
	memcpy ( &GetCalloutMarkupString_Parms.AlternateInputAlias, &AlternateInputAlias, 0x8 );

	this->ProcessEvent ( pFnGetCalloutMarkupString, &GetCalloutMarkupString_Parms, NULL );

	return GetCalloutMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutDataStoreName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUICalloutButton::eventGetCalloutDataStoreName ( )
{
	static UFunction* pFnGetCalloutDataStoreName = NULL;

	if ( ! pFnGetCalloutDataStoreName )
		pFnGetCalloutDataStoreName = (UFunction*) UObject::GObjObjects()->Data[ 31739 ];

	UUICalloutButton_eventGetCalloutDataStoreName_Parms GetCalloutDataStoreName_Parms;

	this->ProcessEvent ( pFnGetCalloutDataStoreName, &GetCalloutDataStoreName_Parms, NULL );

	return GetCalloutDataStoreName_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewInputAlias                  ( CPF_Parm )

bool UUICalloutButton::eventSetInputAlias ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputAlias = NULL;

	if ( ! pFnSetInputAlias )
		pFnSetInputAlias = (UFunction*) UObject::GObjObjects()->Data[ 31733 ];

	UUICalloutButton_eventSetInputAlias_Parms SetInputAlias_Parms;
	memcpy ( &SetInputAlias_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetInputAlias, &SetInputAlias_Parms, NULL );

	return SetInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.OnReceivedInputKey
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUICalloutButton::OnReceivedInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnReceivedInputKey = NULL;

	if ( ! pFnOnReceivedInputKey )
		pFnOnReceivedInputKey = (UFunction*) UObject::GObjObjects()->Data[ 31730 ];

	UUICalloutButton_execOnReceivedInputKey_Parms OnReceivedInputKey_Parms;

	pFnOnReceivedInputKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnReceivedInputKey, &OnReceivedInputKey_Parms, NULL );

	pFnOnReceivedInputKey->FunctionFlags |= 0x400;

	if ( EventParms )
		memcpy ( EventParms, &OnReceivedInputKey_Parms.EventParms, 0x20 );

	return OnReceivedInputKey_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.UnsubscribeFromInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )
// unsigned long                  bUpdateProxyOutputLinks        ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButton::UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks )
{
	static UFunction* pFnUnsubscribeFromInputProxy = NULL;

	if ( ! pFnUnsubscribeFromInputProxy )
		pFnUnsubscribeFromInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 31726 ];

	UUICalloutButton_execUnsubscribeFromInputProxy_Parms UnsubscribeFromInputProxy_Parms;
	UnsubscribeFromInputProxy_Parms.InputProxy = InputProxy;
	UnsubscribeFromInputProxy_Parms.bUpdateProxyOutputLinks = bUpdateProxyOutputLinks;

	pFnUnsubscribeFromInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnsubscribeFromInputProxy, &UnsubscribeFromInputProxy_Parms, NULL );

	pFnUnsubscribeFromInputProxy->FunctionFlags |= 0x400;

	return UnsubscribeFromInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SubscribeToInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )
// unsigned long                  bUpdateProxyOutputLinks        ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButton::SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks )
{
	static UFunction* pFnSubscribeToInputProxy = NULL;

	if ( ! pFnSubscribeToInputProxy )
		pFnSubscribeToInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 31722 ];

	UUICalloutButton_execSubscribeToInputProxy_Parms SubscribeToInputProxy_Parms;
	SubscribeToInputProxy_Parms.InputProxy = InputProxy;
	SubscribeToInputProxy_Parms.bUpdateProxyOutputLinks = bUpdateProxyOutputLinks;

	pFnSubscribeToInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubscribeToInputProxy, &SubscribeToInputProxy_Parms, NULL );

	pFnSubscribeToInputProxy->FunctionFlags |= 0x400;

	return SubscribeToInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputTag
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NewInputAlias                  ( CPF_Parm )

void UUICalloutButton::SetInputTag ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputTag = NULL;

	if ( ! pFnSetInputTag )
		pFnSetInputTag = (UFunction*) UObject::GObjObjects()->Data[ 31720 ];

	UUICalloutButton_execSetInputTag_Parms SetInputTag_Parms;
	memcpy ( &SetInputTag_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	pFnSetInputTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputTag, &SetInputTag_Parms, NULL );

	pFnSetInputTag->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore_InputAlias* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            AlternatePlayer                ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore_InputAlias* UUICalloutButton::GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer )
{
	static UFunction* pFnGetCalloutDataStore = NULL;

	if ( ! pFnGetCalloutDataStore )
		pFnGetCalloutDataStore = (UFunction*) UObject::GObjObjects()->Data[ 31717 ];

	UUICalloutButton_execGetCalloutDataStore_Parms GetCalloutDataStore_Parms;
	GetCalloutDataStore_Parms.AlternatePlayer = AlternatePlayer;

	pFnGetCalloutDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutDataStore, &GetCalloutDataStore_Parms, NULL );

	pFnGetCalloutDataStore->FunctionFlags |= 0x400;

	return GetCalloutDataStore_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.InitializeInputProxy
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::InitializeInputProxy ( )
{
	static UFunction* pFnInitializeInputProxy = NULL;

	if ( ! pFnInitializeInputProxy )
		pFnInitializeInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 31892 ];

	UUICalloutButtonPanel_execInitializeInputProxy_Parms InitializeInputProxy_Parms;

	this->ProcessEvent ( pFnInitializeInputProxy, &InitializeInputProxy_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.ConfigureChildButton
// [0x00020002] 
// Parameters infos:
// class UUICalloutButton*        ChildButton                    ( CPF_Parm )

void UUICalloutButtonPanel::ConfigureChildButton ( class UUICalloutButton* ChildButton )
{
	static UFunction* pFnConfigureChildButton = NULL;

	if ( ! pFnConfigureChildButton )
		pFnConfigureChildButton = (UFunction*) UObject::GObjObjects()->Data[ 31890 ];

	UUICalloutButtonPanel_execConfigureChildButton_Parms ConfigureChildButton_Parms;
	ConfigureChildButton_Parms.ChildButton = ChildButton;

	this->ProcessEvent ( pFnConfigureChildButton, &ConfigureChildButton_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButtonPanel::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 31885 ];

	UUICalloutButtonPanel_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 31884 ];

	UUICalloutButtonPanel_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.CanButtonAcceptFocus
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InputAliasTag                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex )
{
	static UFunction* pFnCanButtonAcceptFocus = NULL;

	if ( ! pFnCanButtonAcceptFocus )
		pFnCanButtonAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 31878 ];

	UUICalloutButtonPanel_eventCanButtonAcceptFocus_Parms CanButtonAcceptFocus_Parms;
	memcpy ( &CanButtonAcceptFocus_Parms.InputAliasTag, &InputAliasTag, 0x8 );
	CanButtonAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCanButtonAcceptFocus, &CanButtonAcceptFocus_Parms, NULL );

	return CanButtonAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ContainsButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventContainsButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnContainsButton = NULL;

	if ( ! pFnContainsButton )
		pFnContainsButton = (UFunction*) UObject::GObjObjects()->Data[ 31874 ];

	UUICalloutButtonPanel_eventContainsButton_Parms ContainsButton_Parms;
	memcpy ( &ContainsButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnContainsButton, &ContainsButton_Parms, NULL );

	return ContainsButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButtonIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

int UUICalloutButtonPanel::eventFindButtonIndex ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButtonIndex = NULL;

	if ( ! pFnFindButtonIndex )
		pFnFindButtonIndex = (UFunction*) UObject::GObjObjects()->Data[ 31869 ];

	UUICalloutButtonPanel_eventFindButtonIndex_Parms FindButtonIndex_Parms;
	memcpy ( &FindButtonIndex_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButtonIndex, &FindButtonIndex_Parms, NULL );

	return FindButtonIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::eventFindButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButton = NULL;

	if ( ! pFnFindButton )
		pFnFindButton = (UFunction*) UObject::GObjObjects()->Data[ 31864 ];

	UUICalloutButtonPanel_eventFindButton_Parms FindButton_Parms;
	memcpy ( &FindButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButton, &FindButton_Parms, NULL );

	return FindButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.EnableButton
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableButton                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateButtonVisibility        ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility )
{
	static UFunction* pFnEnableButton = NULL;

	if ( ! pFnEnableButton )
		pFnEnableButton = (UFunction*) UObject::GObjObjects()->Data[ 31856 ];

	UUICalloutButtonPanel_eventEnableButton_Parms EnableButton_Parms;
	memcpy ( &EnableButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	EnableButton_Parms.PlayerIndex = PlayerIndex;
	EnableButton_Parms.bEnableButton = bEnableButton;
	EnableButton_Parms.bUpdateButtonVisibility = bUpdateButtonVisibility;

	this->ProcessEvent ( pFnEnableButton, &EnableButton_Parms, NULL );

	return EnableButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ShowButton
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// unsigned long                  bShowButton                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton )
{
	static UFunction* pFnShowButton = NULL;

	if ( ! pFnShowButton )
		pFnShowButton = (UFunction*) UObject::GObjObjects()->Data[ 31849 ];

	UUICalloutButtonPanel_eventShowButton_Parms ShowButton_Parms;
	memcpy ( &ShowButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	ShowButton_Parms.bShowButton = bShowButton;

	this->ProcessEvent ( pFnShowButton, &ShowButton_Parms, NULL );

	return ShowButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   NewButtonInputAlias            ( CPF_Parm | CPF_CoerceParm )

bool UUICalloutButtonPanel::eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias )
{
	static UFunction* pFnSetButtonInputAlias = NULL;

	if ( ! pFnSetButtonInputAlias )
		pFnSetButtonInputAlias = (UFunction*) UObject::GObjObjects()->Data[ 31843 ];

	UUICalloutButtonPanel_eventSetButtonInputAlias_Parms SetButtonInputAlias_Parms;
	memcpy ( &SetButtonInputAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonInputAlias_Parms.NewButtonInputAlias, &NewButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetButtonInputAlias, &SetButtonInputAlias_Parms, NULL );

	return SetButtonInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonCaption
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FString                 NewButtonCaption               ( CPF_Parm )

bool UUICalloutButtonPanel::eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption )
{
	static UFunction* pFnSetButtonCaption = NULL;

	if ( ! pFnSetButtonCaption )
		pFnSetButtonCaption = (UFunction*) UObject::GObjObjects()->Data[ 31837 ];

	UUICalloutButtonPanel_eventSetButtonCaption_Parms SetButtonCaption_Parms;
	memcpy ( &SetButtonCaption_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonCaption_Parms.NewButtonCaption, &NewButtonCaption, 0xC );

	this->ProcessEvent ( pFnSetButtonCaption, &SetButtonCaption_Parms, NULL );

	return SetButtonCaption_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveAllButtons
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICalloutButtonPanel::eventRemoveAllButtons ( )
{
	static UFunction* pFnRemoveAllButtons = NULL;

	if ( ! pFnRemoveAllButtons )
		pFnRemoveAllButtons = (UFunction*) UObject::GObjObjects()->Data[ 31835 ];

	UUICalloutButtonPanel_eventRemoveAllButtons_Parms RemoveAllButtons_Parms;

	this->ProcessEvent ( pFnRemoveAllButtons, &RemoveAllButtons_Parms, NULL );

	return RemoveAllButtons_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButtonByAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButtonByAlias ( struct FName ButtonInputAlias )
{
	static UFunction* pFnRemoveButtonByAlias = NULL;

	if ( ! pFnRemoveButtonByAlias )
		pFnRemoveButtonByAlias = (UFunction*) UObject::GObjObjects()->Data[ 31830 ];

	UUICalloutButtonPanel_eventRemoveButtonByAlias_Parms RemoveButtonByAlias_Parms;
	memcpy ( &RemoveButtonByAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnRemoveButtonByAlias, &RemoveButtonByAlias_Parms, NULL );

	return RemoveButtonByAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToRemove                 ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButton ( class UUICalloutButton* ButtonToRemove )
{
	static UFunction* pFnRemoveButton = NULL;

	if ( ! pFnRemoveButton )
		pFnRemoveButton = (UFunction*) UObject::GObjObjects()->Data[ 31826 ];

	UUICalloutButtonPanel_eventRemoveButton_Parms RemoveButton_Parms;
	RemoveButton_Parms.ButtonToRemove = ButtonToRemove;

	this->ProcessEvent ( pFnRemoveButton, &RemoveButton_Parms, NULL );

	return RemoveButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.InsertButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        NewButton                      ( CPF_Parm )

int UUICalloutButtonPanel::eventInsertButton ( class UUICalloutButton* NewButton )
{
	static UFunction* pFnInsertButton = NULL;

	if ( ! pFnInsertButton )
		pFnInsertButton = (UFunction*) UObject::GObjObjects()->Data[ 31821 ];

	UUICalloutButtonPanel_eventInsertButton_Parms InsertButton_Parms;
	InsertButton_Parms.NewButton = NewButton;

	this->ProcessEvent ( pFnInsertButton, &InsertButton_Parms, NULL );

	return InsertButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RequestButtonDockingUpdate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediately                   ( CPF_OptionalParm | CPF_Parm )

void UUICalloutButtonPanel::RequestButtonDockingUpdate ( unsigned long bImmediately )
{
	static UFunction* pFnRequestButtonDockingUpdate = NULL;

	if ( ! pFnRequestButtonDockingUpdate )
		pFnRequestButtonDockingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 31819 ];

	UUICalloutButtonPanel_execRequestButtonDockingUpdate_Parms RequestButtonDockingUpdate_Parms;
	RequestButtonDockingUpdate_Parms.bImmediately = bImmediately;

	pFnRequestButtonDockingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestButtonDockingUpdate, &RequestButtonDockingUpdate_Parms, NULL );

	pFnRequestButtonDockingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButtonPanel.FindBestInsertionIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToInsert                 ( CPF_Parm )
// unsigned long                  bSearchChildrenArray           ( CPF_OptionalParm | CPF_Parm )

int UUICalloutButtonPanel::FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray )
{
	static UFunction* pFnFindBestInsertionIndex = NULL;

	if ( ! pFnFindBestInsertionIndex )
		pFnFindBestInsertionIndex = (UFunction*) UObject::GObjObjects()->Data[ 31815 ];

	UUICalloutButtonPanel_execFindBestInsertionIndex_Parms FindBestInsertionIndex_Parms;
	FindBestInsertionIndex_Parms.ButtonToInsert = ButtonToInsert;
	FindBestInsertionIndex_Parms.bSearchChildrenArray = bSearchChildrenArray;

	pFnFindBestInsertionIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBestInsertionIndex, &FindBestInsertionIndex_Parms, NULL );

	pFnFindBestInsertionIndex->FunctionFlags |= 0x400;

	return FindBestInsertionIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetCalloutInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButtonPanel::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 31768 ];

	UUICalloutButtonPanel_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	pFnGetCalloutInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	pFnGetCalloutInputProxy->FunctionFlags |= 0x400;

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.CreateCalloutButton
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   ButtonName                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInsertChild                   ( CPF_OptionalParm | CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild )
{
	static UFunction* pFnCreateCalloutButton = NULL;

	if ( ! pFnCreateCalloutButton )
		pFnCreateCalloutButton = (UFunction*) UObject::GObjObjects()->Data[ 31808 ];

	UUICalloutButtonPanel_execCreateCalloutButton_Parms CreateCalloutButton_Parms;
	memcpy ( &CreateCalloutButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &CreateCalloutButton_Parms.ButtonName, &ButtonName, 0x8 );
	CreateCalloutButton_Parms.bInsertChild = bInsertChild;

	pFnCreateCalloutButton->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCalloutButton, &CreateCalloutButton_Parms, NULL );

	pFnCreateCalloutButton->FunctionFlags |= 0x400;

	return CreateCalloutButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetAvailableCalloutButtonAliases
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FName >         AvailableAliases               ( CPF_Parm | CPF_OutParm )

void UUICalloutButtonPanel::GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, TArray< struct FName >* AvailableAliases )
{
	static UFunction* pFnGetAvailableCalloutButtonAliases = NULL;

	if ( ! pFnGetAvailableCalloutButtonAliases )
		pFnGetAvailableCalloutButtonAliases = (UFunction*) UObject::GObjObjects()->Data[ 31804 ];

	UUICalloutButtonPanel_execGetAvailableCalloutButtonAliases_Parms GetAvailableCalloutButtonAliases_Parms;
	GetAvailableCalloutButtonAliases_Parms.PlayerOwner = PlayerOwner;

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableCalloutButtonAliases, &GetAvailableCalloutButtonAliases_Parms, NULL );

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= 0x400;

	if ( AvailableAliases )
		memcpy ( AvailableAliases, &GetAvailableCalloutButtonAliases_Parms.AvailableAliases, 0xC );
};

// Function Engine.UICalloutButtonPanel.RemovedChild
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

void UUICalloutButtonPanel::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 31798 ];

	UUICalloutButtonPanel_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUICalloutButtonPanel::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 31793 ];

	UUICalloutButtonPanel_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.SynchronizeInputAliases
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventSynchronizeInputAliases ( )
{
	static UFunction* pFnSynchronizeInputAliases = NULL;

	if ( ! pFnSynchronizeInputAliases )
		pFnSynchronizeInputAliases = (UFunction*) UObject::GObjObjects()->Data[ 31791 ];

	UUICalloutButtonPanel_eventSynchronizeInputAliases_Parms SynchronizeInputAliases_Parms;

	this->ProcessEvent ( pFnSynchronizeInputAliases, &SynchronizeInputAliases_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PopulateCalloutButtonArray
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::PopulateCalloutButtonArray ( )
{
	static UFunction* pFnPopulateCalloutButtonArray = NULL;

	if ( ! pFnPopulateCalloutButtonArray )
		pFnPopulateCalloutButtonArray = (UFunction*) UObject::GObjObjects()->Data[ 31784 ];

	UUICalloutButtonPanel_execPopulateCalloutButtonArray_Parms PopulateCalloutButtonArray_Parms;

	this->ProcessEvent ( pFnPopulateCalloutButtonArray, &PopulateCalloutButtonArray_Parms, NULL );
};

// Function Engine.UIComp_DrawImage.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawImage::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 14692 ];

	UUIComp_DrawImage_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawImage::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 14689 ];

	UUIComp_DrawImage_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawImage::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 14687 ];

	UUIComp_DrawImage_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUIComp_DrawImage::GetImage ( )
{
	static UFunction* pFnGetImage = NULL;

	if ( ! pFnGetImage )
		pFnGetImage = (UFunction*) UObject::GObjObjects()->Data[ 14685 ];

	UUIComp_DrawImage_execGetImage_Parms GetImage_Parms;

	pFnGetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImage, &GetImage_Parms, NULL );

	pFnGetImage->FunctionFlags |= 0x400;

	return GetImage_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.DisableCustomScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomScale ( )
{
	static UFunction* pFnDisableCustomScale = NULL;

	if ( ! pFnDisableCustomScale )
		pFnDisableCustomScale = (UFunction*) UObject::GObjObjects()->Data[ 14684 ];

	UUIComp_DrawImage_execDisableCustomScale_Parms DisableCustomScale_Parms;

	pFnDisableCustomScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomScale, &DisableCustomScale_Parms, NULL );

	pFnDisableCustomScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomFormatting ( )
{
	static UFunction* pFnDisableCustomFormatting = NULL;

	if ( ! pFnDisableCustomFormatting )
		pFnDisableCustomFormatting = (UFunction*) UObject::GObjObjects()->Data[ 14683 ];

	UUIComp_DrawImage_execDisableCustomFormatting_Parms DisableCustomFormatting_Parms;

	pFnDisableCustomFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomFormatting, &DisableCustomFormatting_Parms, NULL );

	pFnDisableCustomFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = (UFunction*) UObject::GObjObjects()->Data[ 14682 ];

	UUIComp_DrawImage_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = (UFunction*) UObject::GObjObjects()->Data[ 14681 ];

	UUIComp_DrawImage_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomColor ( )
{
	static UFunction* pFnDisableCustomColor = NULL;

	if ( ! pFnDisableCustomColor )
		pFnDisableCustomColor = (UFunction*) UObject::GObjObjects()->Data[ 14680 ];

	UUIComp_DrawImage_execDisableCustomColor_Parms DisableCustomColor_Parms;

	pFnDisableCustomColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomColor, &DisableCustomColor_Parms, NULL );

	pFnDisableCustomColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomCoordinates ( )
{
	static UFunction* pFnDisableCustomCoordinates = NULL;

	if ( ! pFnDisableCustomCoordinates )
		pFnDisableCustomCoordinates = (UFunction*) UObject::GObjObjects()->Data[ 14679 ];

	UUIComp_DrawImage_execDisableCustomCoordinates_Parms DisableCustomCoordinates_Parms;

	pFnDisableCustomCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomCoordinates, &DisableCustomCoordinates_Parms, NULL );

	pFnDisableCustomCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )

void UUIComp_DrawImage::SetScale ( unsigned char Orientation, float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 14676 ];

	UUIComp_DrawImage_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.Orientation = Orientation;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// struct FUIImageAdjustmentData  NewFormattingData              ( CPF_Parm )

void UUIComp_DrawImage::SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData )
{
	static UFunction* pFnSetFormatting = NULL;

	if ( ! pFnSetFormatting )
		pFnSetFormatting = (UFunction*) UObject::GObjObjects()->Data[ 14673 ];

	UUIComp_DrawImage_execSetFormatting_Parms SetFormatting_Parms;
	SetFormatting_Parms.Orientation = Orientation;
	memcpy ( &SetFormatting_Parms.NewFormattingData, &NewFormattingData, 0x14 );

	pFnSetFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFormatting, &SetFormatting_Parms, NULL );

	pFnSetFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawImage::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = (UFunction*) UObject::GObjObjects()->Data[ 14670 ];

	UUIComp_DrawImage_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawImage::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = (UFunction*) UObject::GObjObjects()->Data[ 14668 ];

	UUIComp_DrawImage_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIComp_DrawImage::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 14666 ];

	UUIComp_DrawImage_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FTextureCoordinates     NewCoordinates                 ( CPF_Parm )

void UUIComp_DrawImage::SetCoordinates ( struct FTextureCoordinates NewCoordinates )
{
	static UFunction* pFnSetCoordinates = NULL;

	if ( ! pFnSetCoordinates )
		pFnSetCoordinates = (UFunction*) UObject::GObjObjects()->Data[ 14664 ];

	UUIComp_DrawImage_execSetCoordinates_Parms SetCoordinates_Parms;
	memcpy ( &SetCoordinates_Parms.NewCoordinates, &NewCoordinates, 0x10 );

	pFnSetCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCoordinates, &SetCoordinates_Parms, NULL );

	pFnSetCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIComp_DrawImage::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = (UFunction*) UObject::GObjObjects()->Data[ 14662 ];

	UUIComp_DrawImage_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	pFnSetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );

	pFnSetImage->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.GetAppliedImageStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Image* UUIComp_DrawImage::GetAppliedImageStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedImageStyle = NULL;

	if ( ! pFnGetAppliedImageStyle )
		pFnGetAppliedImageStyle = (UFunction*) UObject::GObjObjects()->Data[ 14659 ];

	UUIComp_DrawImage_execGetAppliedImageStyle_Parms GetAppliedImageStyle_Parms;
	GetAppliedImageStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedImageStyle, &GetAppliedImageStyle_Parms, NULL );

	pFnGetAppliedImageStyle->FunctionFlags |= 0x400;

	return GetAppliedImageStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetAutoSizePadding
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NearValue                      ( CPF_Parm )
// float                          FarValue                       ( CPF_Parm )
// unsigned char                  NearScaleType                  ( CPF_Parm )
// unsigned char                  FarScaleType                   ( CPF_Parm )

void UUIComp_DrawString::eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType )
{
	static UFunction* pFnSetAutoSizePadding = NULL;

	if ( ! pFnSetAutoSizePadding )
		pFnSetAutoSizePadding = (UFunction*) UObject::GObjObjects()->Data[ 14609 ];

	UUIComp_DrawString_eventSetAutoSizePadding_Parms SetAutoSizePadding_Parms;
	SetAutoSizePadding_Parms.Orientation = Orientation;
	SetAutoSizePadding_Parms.NearValue = NearValue;
	SetAutoSizePadding_Parms.FarValue = FarValue;
	SetAutoSizePadding_Parms.NearScaleType = NearScaleType;
	SetAutoSizePadding_Parms.FarScaleType = FarScaleType;

	this->ProcessEvent ( pFnSetAutoSizePadding, &SetAutoSizePadding_Parms, NULL );
};

// Function Engine.UIComp_DrawString.EnableAutoSizing
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableAutoSizing = NULL;

	if ( ! pFnEnableAutoSizing )
		pFnEnableAutoSizing = (UFunction*) UObject::GObjObjects()->Data[ 14605 ];

	UUIComp_DrawString_eventEnableAutoSizing_Parms EnableAutoSizing_Parms;
	EnableAutoSizing_Parms.Orientation = Orientation;
	EnableAutoSizing_Parms.bShouldEnable = bShouldEnable;

	this->ProcessEvent ( pFnEnableAutoSizing, &EnableAutoSizing_Parms, NULL );
};

// Function Engine.UIComp_DrawString.IsAutoSizeEnabled
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsAutoSizeEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsAutoSizeEnabled = NULL;

	if ( ! pFnIsAutoSizeEnabled )
		pFnIsAutoSizeEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14602 ];

	UUIComp_DrawString_execIsAutoSizeEnabled_Parms IsAutoSizeEnabled_Parms;
	IsAutoSizeEnabled_Parms.Orientation = Orientation;

	this->ProcessEvent ( pFnIsAutoSizeEnabled, &IsAutoSizeEnabled_Parms, NULL );

	return IsAutoSizeEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetAutoSizeExtent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          MinValue                       ( CPF_Parm )
// float                          MaxValue                       ( CPF_Parm )
// unsigned char                  MinScaleType                   ( CPF_Parm )
// unsigned char                  MaxScaleType                   ( CPF_Parm )

void UUIComp_DrawString::SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType )
{
	static UFunction* pFnSetAutoSizeExtent = NULL;

	if ( ! pFnSetAutoSizeExtent )
		pFnSetAutoSizeExtent = (UFunction*) UObject::GObjObjects()->Data[ 14596 ];

	UUIComp_DrawString_execSetAutoSizeExtent_Parms SetAutoSizeExtent_Parms;
	SetAutoSizeExtent_Parms.Orientation = Orientation;
	SetAutoSizeExtent_Parms.MinValue = MinValue;
	SetAutoSizeExtent_Parms.MaxValue = MaxValue;
	SetAutoSizeExtent_Parms.MinScaleType = MinScaleType;
	SetAutoSizeExtent_Parms.MaxScaleType = MaxScaleType;

	pFnSetAutoSizeExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoSizeExtent, &SetAutoSizeExtent_Parms, NULL );

	pFnSetAutoSizeExtent->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawString::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 14590 ];

	UUIComp_DrawString_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawString::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 14587 ];

	UUIComp_DrawString_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawString::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 14585 ];

	UUIComp_DrawString_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetFinalStringStyle
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUICombinedStyleData    FinalStyleData                 ( CPF_Parm | CPF_OutParm )

bool UUIComp_DrawString::GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData )
{
	static UFunction* pFnGetFinalStringStyle = NULL;

	if ( ! pFnGetFinalStringStyle )
		pFnGetFinalStringStyle = (UFunction*) UObject::GObjObjects()->Data[ 14582 ];

	UUIComp_DrawString_execGetFinalStringStyle_Parms GetFinalStringStyle_Parms;

	pFnGetFinalStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFinalStringStyle, &GetFinalStringStyle_Parms, NULL );

	pFnGetFinalStringStyle->FunctionFlags |= 0x400;

	if ( FinalStyleData )
		memcpy ( FinalStyleData, &GetFinalStringStyle_Parms.FinalStyleData, 0x40 );

	return GetFinalStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetAppliedStringStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Combo*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Combo* UUIComp_DrawString::GetAppliedStringStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedStringStyle = NULL;

	if ( ! pFnGetAppliedStringStyle )
		pFnGetAppliedStringStyle = (UFunction*) UObject::GObjObjects()->Data[ 14579 ];

	UUIComp_DrawString_execGetAppliedStringStyle_Parms GetAppliedStringStyle_Parms;
	GetAppliedStringStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedStringStyle, &GetAppliedStringStyle_Parms, NULL );

	pFnGetAppliedStringStyle->FunctionFlags |= 0x400;

	return GetAppliedStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIComp_DrawString::GetWrapMode ( )
{
	static UFunction* pFnGetWrapMode = NULL;

	if ( ! pFnGetWrapMode )
		pFnGetWrapMode = (UFunction*) UObject::GObjObjects()->Data[ 14577 ];

	UUIComp_DrawString_execGetWrapMode_Parms GetWrapMode_Parms;

	pFnGetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWrapMode, &GetWrapMode_Parms, NULL );

	pFnGetWrapMode->FunctionFlags |= 0x400;

	return GetWrapMode_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomSpacingAdjust ( )
{
	static UFunction* pFnDisableCustomSpacingAdjust = NULL;

	if ( ! pFnDisableCustomSpacingAdjust )
		pFnDisableCustomSpacingAdjust = (UFunction*) UObject::GObjObjects()->Data[ 14576 ];

	UUIComp_DrawString_execDisableCustomSpacingAdjust_Parms DisableCustomSpacingAdjust_Parms;

	pFnDisableCustomSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomSpacingAdjust, &DisableCustomSpacingAdjust_Parms, NULL );

	pFnDisableCustomSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomScale ( )
{
	static UFunction* pFnDisableCustomScale = NULL;

	if ( ! pFnDisableCustomScale )
		pFnDisableCustomScale = (UFunction*) UObject::GObjObjects()->Data[ 14575 ];

	UUIComp_DrawString_execDisableCustomScale_Parms DisableCustomScale_Parms;

	pFnDisableCustomScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomScale, &DisableCustomScale_Parms, NULL );

	pFnDisableCustomScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAutoScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAutoScaling ( )
{
	static UFunction* pFnDisableCustomAutoScaling = NULL;

	if ( ! pFnDisableCustomAutoScaling )
		pFnDisableCustomAutoScaling = (UFunction*) UObject::GObjObjects()->Data[ 14574 ];

	UUIComp_DrawString_execDisableCustomAutoScaling_Parms DisableCustomAutoScaling_Parms;

	pFnDisableCustomAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAutoScaling, &DisableCustomAutoScaling_Parms, NULL );

	pFnDisableCustomAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipAlignment ( )
{
	static UFunction* pFnDisableCustomClipAlignment = NULL;

	if ( ! pFnDisableCustomClipAlignment )
		pFnDisableCustomClipAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14573 ];

	UUIComp_DrawString_execDisableCustomClipAlignment_Parms DisableCustomClipAlignment_Parms;

	pFnDisableCustomClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipAlignment, &DisableCustomClipAlignment_Parms, NULL );

	pFnDisableCustomClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipMode ( )
{
	static UFunction* pFnDisableCustomClipMode = NULL;

	if ( ! pFnDisableCustomClipMode )
		pFnDisableCustomClipMode = (UFunction*) UObject::GObjObjects()->Data[ 14572 ];

	UUIComp_DrawString_execDisableCustomClipMode_Parms DisableCustomClipMode_Parms;

	pFnDisableCustomClipMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipMode, &DisableCustomClipMode_Parms, NULL );

	pFnDisableCustomClipMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAlignment ( )
{
	static UFunction* pFnDisableCustomAlignment = NULL;

	if ( ! pFnDisableCustomAlignment )
		pFnDisableCustomAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14571 ];

	UUIComp_DrawString_execDisableCustomAlignment_Parms DisableCustomAlignment_Parms;

	pFnDisableCustomAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAlignment, &DisableCustomAlignment_Parms, NULL );

	pFnDisableCustomAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = (UFunction*) UObject::GObjObjects()->Data[ 14570 ];

	UUIComp_DrawString_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = (UFunction*) UObject::GObjObjects()->Data[ 14569 ];

	UUIComp_DrawString_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewSpacingAdjust               ( CPF_Parm )

void UUIComp_DrawString::SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust )
{
	static UFunction* pFnSetSpacingAdjust = NULL;

	if ( ! pFnSetSpacingAdjust )
		pFnSetSpacingAdjust = (UFunction*) UObject::GObjObjects()->Data[ 14566 ];

	UUIComp_DrawString_execSetSpacingAdjust_Parms SetSpacingAdjust_Parms;
	SetSpacingAdjust_Parms.Orientation = Orientation;
	SetSpacingAdjust_Parms.NewSpacingAdjust = NewSpacingAdjust;

	pFnSetSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpacingAdjust, &SetSpacingAdjust_Parms, NULL );

	pFnSetSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )

void UUIComp_DrawString::SetScale ( unsigned char Orientation, float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 14563 ];

	UUIComp_DrawString_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.Orientation = Orientation;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAutoScaling
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewAutoScaleMode               ( CPF_Parm )
// float                          NewMinScaleValue               ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue )
{
	static UFunction* pFnSetAutoScaling = NULL;

	if ( ! pFnSetAutoScaling )
		pFnSetAutoScaling = (UFunction*) UObject::GObjObjects()->Data[ 14560 ];

	UUIComp_DrawString_execSetAutoScaling_Parms SetAutoScaling_Parms;
	SetAutoScaling_Parms.NewAutoScaleMode = NewAutoScaleMode;
	SetAutoScaling_Parms.NewMinScaleValue = NewMinScaleValue;

	pFnSetAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoScaling, &SetAutoScaling_Parms, NULL );

	pFnSetAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipAlignment               ( CPF_Parm )

void UUIComp_DrawString::SetClipAlignment ( unsigned char NewClipAlignment )
{
	static UFunction* pFnSetClipAlignment = NULL;

	if ( ! pFnSetClipAlignment )
		pFnSetClipAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14558 ];

	UUIComp_DrawString_execSetClipAlignment_Parms SetClipAlignment_Parms;
	SetClipAlignment_Parms.NewClipAlignment = NewClipAlignment;

	pFnSetClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipAlignment, &SetClipAlignment_Parms, NULL );

	pFnSetClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipMode                    ( CPF_Parm )

void UUIComp_DrawString::SetWrapMode ( unsigned char NewClipMode )
{
	static UFunction* pFnSetWrapMode = NULL;

	if ( ! pFnSetWrapMode )
		pFnSetWrapMode = (UFunction*) UObject::GObjObjects()->Data[ 14556 ];

	UUIComp_DrawString_execSetWrapMode_Parms SetWrapMode_Parms;
	SetWrapMode_Parms.NewClipMode = NewClipMode;

	pFnSetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWrapMode, &SetWrapMode_Parms, NULL );

	pFnSetWrapMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewAlignment                   ( CPF_Parm )

void UUIComp_DrawString::SetAlignment ( unsigned char Orientation, unsigned char NewAlignment )
{
	static UFunction* pFnSetAlignment = NULL;

	if ( ! pFnSetAlignment )
		pFnSetAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14553 ];

	UUIComp_DrawString_execSetAlignment_Parms SetAlignment_Parms;
	SetAlignment_Parms.Orientation = Orientation;
	SetAlignment_Parms.NewAlignment = NewAlignment;

	pFnSetAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAlignment, &SetAlignment_Parms, NULL );

	pFnSetAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetFontSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFontSet*                NewFontSet                     ( CPF_Parm )

void UUIComp_DrawString::SetFontSet ( class UFontSet* NewFontSet )
{
	static UFunction* pFnSetFontSet = NULL;

	if ( ! pFnSetFontSet )
		pFnSetFontSet = (UFunction*) UObject::GObjObjects()->Data[ 14551 ];

	UUIComp_DrawString_execSetFontSet_Parms SetFontSet_Parms;
	SetFontSet_Parms.NewFontSet = NewFontSet;

	pFnSetFontSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontSet, &SetFontSet_Parms, NULL );

	pFnSetFontSet->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawString::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = (UFunction*) UObject::GObjObjects()->Data[ 14548 ];

	UUIComp_DrawString_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawString::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = (UFunction*) UObject::GObjObjects()->Data[ 14546 ];

	UUIComp_DrawString_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewValue                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue )
{
	static UFunction* pFnSetSubregionAlignment = NULL;

	if ( ! pFnSetSubregionAlignment )
		pFnSetSubregionAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14543 ];

	UUIComp_DrawString_execSetSubregionAlignment_Parms SetSubregionAlignment_Parms;
	SetSubregionAlignment_Parms.Orientation = Orientation;
	SetSubregionAlignment_Parms.NewValue = NewValue;

	pFnSetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionAlignment, &SetSubregionAlignment_Parms, NULL );

	pFnSetSubregionAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionOffset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionOffset = NULL;

	if ( ! pFnSetSubregionOffset )
		pFnSetSubregionOffset = (UFunction*) UObject::GObjObjects()->Data[ 14539 ];

	UUIComp_DrawString_execSetSubregionOffset_Parms SetSubregionOffset_Parms;
	SetSubregionOffset_Parms.Orientation = Orientation;
	SetSubregionOffset_Parms.NewValue = NewValue;
	SetSubregionOffset_Parms.EvalType = EvalType;

	pFnSetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionOffset, &SetSubregionOffset_Parms, NULL );

	pFnSetSubregionOffset->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionSize = NULL;

	if ( ! pFnSetSubregionSize )
		pFnSetSubregionSize = (UFunction*) UObject::GObjObjects()->Data[ 14535 ];

	UUIComp_DrawString_execSetSubregionSize_Parms SetSubregionSize_Parms;
	SetSubregionSize_Parms.Orientation = Orientation;
	SetSubregionSize_Parms.NewValue = NewValue;
	SetSubregionSize_Parms.EvalType = EvalType;

	pFnSetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionSize, &SetSubregionSize_Parms, NULL );

	pFnSetSubregionSize->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.EnableSubregion
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableSubregion = NULL;

	if ( ! pFnEnableSubregion )
		pFnEnableSubregion = (UFunction*) UObject::GObjObjects()->Data[ 14532 ];

	UUIComp_DrawString_execEnableSubregion_Parms EnableSubregion_Parms;
	EnableSubregion_Parms.Orientation = Orientation;
	EnableSubregion_Parms.bShouldEnable = bShouldEnable;

	pFnEnableSubregion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableSubregion, &EnableSubregion_Parms, NULL );

	pFnEnableSubregion->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

unsigned char UUIComp_DrawString::GetSubregionAlignment ( unsigned char Orientation )
{
	static UFunction* pFnGetSubregionAlignment = NULL;

	if ( ! pFnGetSubregionAlignment )
		pFnGetSubregionAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14529 ];

	UUIComp_DrawString_execGetSubregionAlignment_Parms GetSubregionAlignment_Parms;
	GetSubregionAlignment_Parms.Orientation = Orientation;

	pFnGetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionAlignment, &GetSubregionAlignment_Parms, NULL );

	pFnGetSubregionAlignment->FunctionFlags |= 0x400;

	return GetSubregionAlignment_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionOffset
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionOffset = NULL;

	if ( ! pFnGetSubregionOffset )
		pFnGetSubregionOffset = (UFunction*) UObject::GObjObjects()->Data[ 14525 ];

	UUIComp_DrawString_execGetSubregionOffset_Parms GetSubregionOffset_Parms;
	GetSubregionOffset_Parms.Orientation = Orientation;
	GetSubregionOffset_Parms.OutputType = OutputType;

	pFnGetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionOffset, &GetSubregionOffset_Parms, NULL );

	pFnGetSubregionOffset->FunctionFlags |= 0x400;

	return GetSubregionOffset_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionSize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionSize ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionSize = NULL;

	if ( ! pFnGetSubregionSize )
		pFnGetSubregionSize = (UFunction*) UObject::GObjObjects()->Data[ 14521 ];

	UUIComp_DrawString_execGetSubregionSize_Parms GetSubregionSize_Parms;
	GetSubregionSize_Parms.Orientation = Orientation;
	GetSubregionSize_Parms.OutputType = OutputType;

	pFnGetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionSize, &GetSubregionSize_Parms, NULL );

	pFnGetSubregionSize->FunctionFlags |= 0x400;

	return GetSubregionSize_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.IsSubregionEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsSubregionEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsSubregionEnabled = NULL;

	if ( ! pFnIsSubregionEnabled )
		pFnIsSubregionEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14518 ];

	UUIComp_DrawString_execIsSubregionEnabled_Parms IsSubregionEnabled_Parms;
	IsSubregionEnabled_Parms.Orientation = Orientation;

	pFnIsSubregionEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSubregionEnabled, &IsSubregionEnabled_Parms, NULL );

	pFnIsSubregionEnabled->FunctionFlags |= 0x400;

	return IsSubregionEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.RefreshValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::RefreshValue ( )
{
	static UFunction* pFnRefreshValue = NULL;

	if ( ! pFnRefreshValue )
		pFnRefreshValue = (UFunction*) UObject::GObjObjects()->Data[ 14517 ];

	UUIComp_DrawString_execRefreshValue_Parms RefreshValue_Parms;

	pFnRefreshValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshValue, &RefreshValue_Parms, NULL );

	pFnRefreshValue->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComp_DrawString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 14514 ];

	UUIComp_DrawString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm )

void UUIComp_DrawString::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 14512 ];

	UUIComp_DrawString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.IgnoreMarkup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldIgnoreMarkup            ( CPF_Parm )

void UUIEditBox::IgnoreMarkup ( unsigned long bShouldIgnoreMarkup )
{
	static UFunction* pFnIgnoreMarkup = NULL;

	if ( ! pFnIgnoreMarkup )
		pFnIgnoreMarkup = (UFunction*) UObject::GObjObjects()->Data[ 14819 ];

	UUIEditBox_execIgnoreMarkup_Parms IgnoreMarkup_Parms;
	IgnoreMarkup_Parms.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	this->ProcessEvent ( pFnIgnoreMarkup, &IgnoreMarkup_Parms, NULL );
};

// Function Engine.UIEditBox.SetReadOnly
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShouldBeReadOnly              ( CPF_Parm )

void UUIEditBox::SetReadOnly ( unsigned long bShouldBeReadOnly )
{
	static UFunction* pFnSetReadOnly = NULL;

	if ( ! pFnSetReadOnly )
		pFnSetReadOnly = (UFunction*) UObject::GObjObjects()->Data[ 14817 ];

	UUIEditBox_execSetReadOnly_Parms SetReadOnly_Parms;
	SetReadOnly_Parms.bShouldBeReadOnly = bShouldBeReadOnly;

	this->ProcessEvent ( pFnSetReadOnly, &SetReadOnly_Parms, NULL );
};

// Function Engine.UIEditBox.IsReadOnly
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEditBox::IsReadOnly ( )
{
	static UFunction* pFnIsReadOnly = NULL;

	if ( ! pFnIsReadOnly )
		pFnIsReadOnly = (UFunction*) UObject::GObjObjects()->Data[ 14815 ];

	UUIEditBox_execIsReadOnly_Parms IsReadOnly_Parms;

	this->ProcessEvent ( pFnIsReadOnly, &IsReadOnly_Parms, NULL );

	return IsReadOnly_Parms.ReturnValue;
};

// Function Engine.UIEditBox.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIEditBox::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 14814 ];

	UUIEditBox_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIEditBox.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

bool UUIEditBox::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 14809 ];

	UUIEditBox_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIEditBox::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14808 ];

	UUIEditBox_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

void UUIEditBox::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14805 ];

	UUIEditBox_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIEditBox.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIEditBox::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 14799 ];

	UUIEditBox_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEditBox::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 14796 ];

	UUIEditBox_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIEditBox::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14793 ];

	UUIEditBox_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIEditBox.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIEditBox::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14790 ];

	UUIEditBox_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.CalculateCaretPositionFromCursorLocation
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

int UUIEditBox::CalculateCaretPositionFromCursorLocation ( int PlayerIndex )
{
	static UFunction* pFnCalculateCaretPositionFromCursorLocation = NULL;

	if ( ! pFnCalculateCaretPositionFromCursorLocation )
		pFnCalculateCaretPositionFromCursorLocation = (UFunction*) UObject::GObjObjects()->Data[ 14787 ];

	UUIEditBox_execCalculateCaretPositionFromCursorLocation_Parms CalculateCaretPositionFromCursorLocation_Parms;
	CalculateCaretPositionFromCursorLocation_Parms.PlayerIndex = PlayerIndex;

	pFnCalculateCaretPositionFromCursorLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateCaretPositionFromCursorLocation, &CalculateCaretPositionFromCursorLocation_Parms, NULL );

	pFnCalculateCaretPositionFromCursorLocation->FunctionFlags |= 0x400;

	return CalculateCaretPositionFromCursorLocation_Parms.ReturnValue;
};

// Function Engine.UIEditBox.GetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReturnUserText                ( CPF_OptionalParm | CPF_Parm )

struct FString UUIEditBox::GetValue ( unsigned long bReturnUserText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 14784 ];

	UUIEditBox_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnUserText = bReturnUserText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.SetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipNotification              ( CPF_OptionalParm | CPF_Parm )

void UUIEditBox::SetValue ( struct FString NewText, int PlayerIndex, unsigned long bSkipNotification )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 14780 ];

	UUIEditBox_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );
	SetValue_Parms.PlayerIndex = PlayerIndex;
	SetValue_Parms.bSkipNotification = bSkipNotification;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIEditBox::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = (UFunction*) UObject::GObjObjects()->Data[ 14778 ];

	UUIEditBox_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIEditBox.OnSubmitText
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEditBox*              Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIEditBox::OnSubmitText ( class UUIEditBox* Sender, int PlayerIndex )
{
	static UFunction* pFnOnSubmitText = NULL;

	if ( ! pFnOnSubmitText )
		pFnOnSubmitText = (UFunction*) UObject::GObjObjects()->Data[ 14774 ];

	UUIEditBox_execOnSubmitText_Parms OnSubmitText_Parms;
	OnSubmitText_Parms.Sender = Sender;
	OnSubmitText_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnSubmitText, &OnSubmitText_Parms, NULL );

	return OnSubmitText_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetSelectedText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UUIComp_DrawStringEditbox::GetSelectedText ( )
{
	static UFunction* pFnGetSelectedText = NULL;

	if ( ! pFnGetSelectedText )
		pFnGetSelectedText = (UFunction*) UObject::GObjObjects()->Data[ 14762 ];

	UUIComp_DrawStringEditbox_execGetSelectedText_Parms GetSelectedText_Parms;

	pFnGetSelectedText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedText, &GetSelectedText_Parms, NULL );

	pFnGetSelectedText->FunctionFlags |= 0x400;

	return GetSelectedText_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetSelectionRange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            out_StartIndex                 ( CPF_Parm | CPF_OutParm )
// int                            out_EndIndex                   ( CPF_Parm | CPF_OutParm )

bool UUIComp_DrawStringEditbox::GetSelectionRange ( int* out_StartIndex, int* out_EndIndex )
{
	static UFunction* pFnGetSelectionRange = NULL;

	if ( ! pFnGetSelectionRange )
		pFnGetSelectionRange = (UFunction*) UObject::GObjObjects()->Data[ 14758 ];

	UUIComp_DrawStringEditbox_execGetSelectionRange_Parms GetSelectionRange_Parms;

	pFnGetSelectionRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectionRange, &GetSelectionRange_Parms, NULL );

	pFnGetSelectionRange->FunctionFlags |= 0x400;

	if ( out_StartIndex )
		*out_StartIndex = GetSelectionRange_Parms.out_StartIndex;

	if ( out_EndIndex )
		*out_EndIndex = GetSelectionRange_Parms.out_EndIndex;

	return GetSelectionRange_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.ClearSelection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIComp_DrawStringEditbox::ClearSelection ( )
{
	static UFunction* pFnClearSelection = NULL;

	if ( ! pFnClearSelection )
		pFnClearSelection = (UFunction*) UObject::GObjObjects()->Data[ 14756 ];

	UUIComp_DrawStringEditbox_execClearSelection_Parms ClearSelection_Parms;

	pFnClearSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSelection, &ClearSelection_Parms, NULL );

	pFnClearSelection->FunctionFlags |= 0x400;

	return ClearSelection_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EndIndex                       ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionEnd ( int EndIndex )
{
	static UFunction* pFnSetSelectionEnd = NULL;

	if ( ! pFnSetSelectionEnd )
		pFnSetSelectionEnd = (UFunction*) UObject::GObjObjects()->Data[ 14753 ];

	UUIComp_DrawStringEditbox_execSetSelectionEnd_Parms SetSelectionEnd_Parms;
	SetSelectionEnd_Parms.EndIndex = EndIndex;

	pFnSetSelectionEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionEnd, &SetSelectionEnd_Parms, NULL );

	pFnSetSelectionEnd->FunctionFlags |= 0x400;

	return SetSelectionEnd_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionStart
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartIndex                     ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionStart ( int StartIndex )
{
	static UFunction* pFnSetSelectionStart = NULL;

	if ( ! pFnSetSelectionStart )
		pFnSetSelectionStart = (UFunction*) UObject::GObjObjects()->Data[ 14750 ];

	UUIComp_DrawStringEditbox_execSetSelectionStart_Parms SetSelectionStart_Parms;
	SetSelectionStart_Parms.StartIndex = StartIndex;

	pFnSetSelectionStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionStart, &SetSelectionStart_Parms, NULL );

	pFnSetSelectionStart->FunctionFlags |= 0x400;

	return SetSelectionStart_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionRange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartIndex                     ( CPF_Parm )
// int                            EndIndex                       ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionRange ( int StartIndex, int EndIndex )
{
	static UFunction* pFnSetSelectionRange = NULL;

	if ( ! pFnSetSelectionRange )
		pFnSetSelectionRange = (UFunction*) UObject::GObjObjects()->Data[ 14746 ];

	UUIComp_DrawStringEditbox_execSetSelectionRange_Parms SetSelectionRange_Parms;
	SetSelectionRange_Parms.StartIndex = StartIndex;
	SetSelectionRange_Parms.EndIndex = EndIndex;

	pFnSetSelectionRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionRange, &SetSelectionRange_Parms, NULL );

	pFnSetSelectionRange->FunctionFlags |= 0x400;

	return SetSelectionRange_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetUserTextLength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIComp_DrawStringEditbox::GetUserTextLength ( )
{
	static UFunction* pFnGetUserTextLength = NULL;

	if ( ! pFnGetUserTextLength )
		pFnGetUserTextLength = (UFunction*) UObject::GObjObjects()->Data[ 14744 ];

	UUIComp_DrawStringEditbox_execGetUserTextLength_Parms GetUserTextLength_Parms;

	pFnGetUserTextLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUserTextLength, &GetUserTextLength_Parms, NULL );

	pFnGetUserTextLength->FunctionFlags |= 0x400;

	return GetUserTextLength_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetUserText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewValue                       ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetUserText ( struct FString NewValue )
{
	static UFunction* pFnSetUserText = NULL;

	if ( ! pFnSetUserText )
		pFnSetUserText = (UFunction*) UObject::GObjObjects()->Data[ 14741 ];

	UUIComp_DrawStringEditbox_execSetUserText_Parms SetUserText_Parms;
	memcpy ( &SetUserText_Parms.NewValue, &NewValue, 0xC );

	pFnSetUserText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUserText, &SetUserText_Parms, NULL );

	pFnSetUserText->FunctionFlags |= 0x400;

	return SetUserText_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_GameState::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 32078 ];

	UUIDataStore_GameState_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// [0x00120000] 
// Parameters infos:

void UUIDataStore_GameState::OnRefreshDataFieldValue ( )
{
	static UFunction* pFnOnRefreshDataFieldValue = NULL;

	if ( ! pFnOnRefreshDataFieldValue )
		pFnOnRefreshDataFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 32076 ];

	UUIDataStore_GameState_execOnRefreshDataFieldValue_Parms OnRefreshDataFieldValue_Parms;

	this->ProcessEvent ( pFnOnRefreshDataFieldValue, &OnRefreshDataFieldValue_Parms, NULL );
};

// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  DesiredPlatform                ( CPF_Parm )

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform )
{
	static UFunction* pFnHasAliasMappingForPlatform = NULL;

	if ( ! pFnHasAliasMappingForPlatform )
		pFnHasAliasMappingForPlatform = (UFunction*) UObject::GObjObjects()->Data[ 32118 ];

	UUIDataStore_InputAlias_execHasAliasMappingForPlatform_Parms HasAliasMappingForPlatform_Parms;
	memcpy ( &HasAliasMappingForPlatform_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	HasAliasMappingForPlatform_Parms.DesiredPlatform = DesiredPlatform;

	pFnHasAliasMappingForPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAliasMappingForPlatform, &HasAliasMappingForPlatform_Parms, NULL );

	pFnHasAliasMappingForPlatform->FunctionFlags |= 0x400;

	return HasAliasMappingForPlatform_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )

int UUIDataStore_InputAlias::FindInputAliasIndex ( struct FName DesiredAlias )
{
	static UFunction* pFnFindInputAliasIndex = NULL;

	if ( ! pFnFindInputAliasIndex )
		pFnFindInputAliasIndex = (UFunction*) UObject::GObjObjects()->Data[ 32115 ];

	UUIDataStore_InputAlias_execFindInputAliasIndex_Parms FindInputAliasIndex_Parms;
	memcpy ( &FindInputAliasIndex_Parms.DesiredAlias, &DesiredAlias, 0x8 );

	pFnFindInputAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInputAliasIndex, &FindInputAliasIndex_Parms, NULL );

	pFnFindInputAliasIndex->FunctionFlags |= 0x400;

	return FindInputAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyDataByIndex = NULL;

	if ( ! pFnGetAliasInputKeyDataByIndex )
		pFnGetAliasInputKeyDataByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32110 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyDataByIndex_Parms GetAliasInputKeyDataByIndex_Parms;
	GetAliasInputKeyDataByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyDataByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyDataByIndex, &GetAliasInputKeyDataByIndex_Parms, NULL );

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyDataByIndex_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyDataByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyData = NULL;

	if ( ! pFnGetAliasInputKeyData )
		pFnGetAliasInputKeyData = (UFunction*) UObject::GObjObjects()->Data[ 32105 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyData_Parms GetAliasInputKeyData_Parms;
	memcpy ( &GetAliasInputKeyData_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyData_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyData, &GetAliasInputKeyData_Parms, NULL );

	pFnGetAliasInputKeyData->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyData_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyNameByIndex = NULL;

	if ( ! pFnGetAliasInputKeyNameByIndex )
		pFnGetAliasInputKeyNameByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32101 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyNameByIndex_Parms GetAliasInputKeyNameByIndex_Parms;
	GetAliasInputKeyNameByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyNameByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyNameByIndex, &GetAliasInputKeyNameByIndex_Parms, NULL );

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= 0x400;

	return GetAliasInputKeyNameByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyName = NULL;

	if ( ! pFnGetAliasInputKeyName )
		pFnGetAliasInputKeyName = (UFunction*) UObject::GObjObjects()->Data[ 32097 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyName_Parms GetAliasInputKeyName_Parms;
	memcpy ( &GetAliasInputKeyName_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyName_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyName, &GetAliasInputKeyName_Parms, NULL );

	pFnGetAliasInputKeyName->FunctionFlags |= 0x400;

	return GetAliasInputKeyName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkupByIndex = NULL;

	if ( ! pFnGetAliasFontMarkupByIndex )
		pFnGetAliasFontMarkupByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32093 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkupByIndex_Parms GetAliasFontMarkupByIndex_Parms;
	GetAliasFontMarkupByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasFontMarkupByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkupByIndex, &GetAliasFontMarkupByIndex_Parms, NULL );

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= 0x400;

	return GetAliasFontMarkupByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkup = NULL;

	if ( ! pFnGetAliasFontMarkup )
		pFnGetAliasFontMarkup = (UFunction*) UObject::GObjObjects()->Data[ 32089 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkup_Parms GetAliasFontMarkup_Parms;
	memcpy ( &GetAliasFontMarkup_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasFontMarkup_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkup, &GetAliasFontMarkup_Parms, NULL );

	pFnGetAliasFontMarkup->FunctionFlags |= 0x400;

	return GetAliasFontMarkup_Parms.ReturnValue;
};

// Function Engine.UIDataStore_Registry.GetDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIDynamicFieldProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider ( )
{
	static UFunction* pFnGetDataProvider = NULL;

	if ( ! pFnGetDataProvider )
		pFnGetDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 21259 ];

	UUIDataStore_Registry_execGetDataProvider_Parms GetDataProvider_Parms;

	this->ProcessEvent ( pFnGetDataProvider, &GetDataProvider_Parms, NULL );

	return GetDataProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm )
// struct FString                 MappedString                   ( CPF_Parm | CPF_OutParm )

int UUIDataStore_StringAliasMap::GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString )
{
	static UFunction* pFnGetStringWithFieldName = NULL;

	if ( ! pFnGetStringWithFieldName )
		pFnGetStringWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 32138 ];

	UUIDataStore_StringAliasMap_execGetStringWithFieldName_Parms GetStringWithFieldName_Parms;
	memcpy ( &GetStringWithFieldName_Parms.FieldName, &FieldName, 0xC );

	pFnGetStringWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringWithFieldName, &GetStringWithFieldName_Parms, NULL );

	pFnGetStringWithFieldName->FunctionFlags |= 0x400;

	if ( MappedString )
		memcpy ( MappedString, &GetStringWithFieldName_Parms.MappedString, 0xC );

	return GetStringWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 SetName                        ( CPF_OptionalParm | CPF_Parm )

int UUIDataStore_StringAliasMap::FindMappingWithFieldName ( struct FString FieldName, struct FString SetName )
{
	static UFunction* pFnFindMappingWithFieldName = NULL;

	if ( ! pFnFindMappingWithFieldName )
		pFnFindMappingWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 32134 ];

	UUIDataStore_StringAliasMap_execFindMappingWithFieldName_Parms FindMappingWithFieldName_Parms;
	memcpy ( &FindMappingWithFieldName_Parms.FieldName, &FieldName, 0xC );
	memcpy ( &FindMappingWithFieldName_Parms.SetName, &SetName, 0xC );

	pFnFindMappingWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMappingWithFieldName, &FindMappingWithFieldName_Parms, NULL );

	pFnFindMappingWithFieldName->FunctionFlags |= 0x400;

	return FindMappingWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner ( )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 32132 ];

	UUIDataStore_StringAliasMap_execGetPlayerOwner_Parms GetPlayerOwner_Parms;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStoreSubscriber::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 32162 ];

	UUIDataStoreSubscriber_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

void UUIDataStoreSubscriber::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 32159 ];

	UUIDataStoreSubscriber_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 32153 ];

	UUIDataStoreSubscriber_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStoreSubscriber::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 32150 ];

	UUIDataStoreSubscriber_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStoreSubscriber::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 32147 ];

	UUIDataStoreSubscriber_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStoreSubscriber::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 32144 ];

	UUIDataStoreSubscriber_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

bool UUIDataStorePublisher::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 32163 ];

	UUIDataStorePublisher_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToFind                    ( CPF_Const | CPF_Parm | CPF_OutParm )

int UUIDynamicFieldProvider::FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind )
{
	static UFunction* pFnFindCollectionValueIndex = NULL;

	if ( ! pFnFindCollectionValueIndex )
		pFnFindCollectionValueIndex = (UFunction*) UObject::GObjObjects()->Data[ 32264 ];

	UUIDynamicFieldProvider_execFindCollectionValueIndex_Parms FindCollectionValueIndex_Parms;
	memcpy ( &FindCollectionValueIndex_Parms.FieldName, &FieldName, 0x8 );
	FindCollectionValueIndex_Parms.bPersistent = bPersistent;
	memcpy ( &FindCollectionValueIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnFindCollectionValueIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCollectionValueIndex, &FindCollectionValueIndex_Parms, NULL );

	pFnFindCollectionValueIndex->FunctionFlags |= 0x400;

	if ( ValueToFind )
		memcpy ( ValueToFind, &FindCollectionValueIndex_Parms.ValueToFind, 0xC );

	return FindCollectionValueIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value )
{
	static UFunction* pFnGetCollectionValue = NULL;

	if ( ! pFnGetCollectionValue )
		pFnGetCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 21263 ];

	UUIDynamicFieldProvider_execGetCollectionValue_Parms GetCollectionValue_Parms;
	memcpy ( &GetCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValue_Parms.ValueIndex = ValueIndex;
	GetCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValue, &GetCollectionValue_Parms, NULL );

	pFnGetCollectionValue->FunctionFlags |= 0x400;

	if ( out_Value )
		memcpy ( out_Value, &GetCollectionValue_Parms.out_Value, 0xC );

	return GetCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnClearCollectionValueArray = NULL;

	if ( ! pFnClearCollectionValueArray )
		pFnClearCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 21264 ];

	UUIDynamicFieldProvider_execClearCollectionValueArray_Parms ClearCollectionValueArray_Parms;
	memcpy ( &ClearCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	ClearCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &ClearCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnClearCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCollectionValueArray, &ClearCollectionValueArray_Parms, NULL );

	pFnClearCollectionValueArray->FunctionFlags |= 0x400;

	return ClearCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValueByIndex = NULL;

	if ( ! pFnReplaceCollectionValueByIndex )
		pFnReplaceCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32247 ];

	UUIDynamicFieldProvider_execReplaceCollectionValueByIndex_Parms ReplaceCollectionValueByIndex_Parms;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	ReplaceCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Parms, NULL );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValueByIndex_Parms.NewValue, 0xC );

	return ReplaceCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CurrentValue                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValue = NULL;

	if ( ! pFnReplaceCollectionValue )
		pFnReplaceCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 32240 ];

	UUIDynamicFieldProvider_execReplaceCollectionValue_Parms ReplaceCollectionValue_Parms;
	memcpy ( &ReplaceCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValue, &ReplaceCollectionValue_Parms, NULL );

	pFnReplaceCollectionValue->FunctionFlags |= 0x400;

	if ( CurrentValue )
		memcpy ( CurrentValue, &ReplaceCollectionValue_Parms.CurrentValue, 0xC );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValue_Parms.NewValue, 0xC );

	return ReplaceCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnRemoveCollectionValueByIndex = NULL;

	if ( ! pFnRemoveCollectionValueByIndex )
		pFnRemoveCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32234 ];

	UUIDynamicFieldProvider_execRemoveCollectionValueByIndex_Parms RemoveCollectionValueByIndex_Parms;
	memcpy ( &RemoveCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	RemoveCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Parms, NULL );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= 0x400;

	return RemoveCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToRemove                  ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove )
{
	static UFunction* pFnRemoveCollectionValue = NULL;

	if ( ! pFnRemoveCollectionValue )
		pFnRemoveCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 32228 ];

	UUIDynamicFieldProvider_execRemoveCollectionValue_Parms RemoveCollectionValue_Parms;
	memcpy ( &RemoveCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValue, &RemoveCollectionValue_Parms, NULL );

	pFnRemoveCollectionValue->FunctionFlags |= 0x400;

	if ( ValueToRemove )
		memcpy ( ValueToRemove, &RemoveCollectionValue_Parms.ValueToRemove, 0xC );

	return RemoveCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicateValues          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnInsertCollectionValue = NULL;

	if ( ! pFnInsertCollectionValue )
		pFnInsertCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 21265 ];

	UUIDynamicFieldProvider_execInsertCollectionValue_Parms InsertCollectionValue_Parms;
	memcpy ( &InsertCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	InsertCollectionValue_Parms.InsertIndex = InsertIndex;
	InsertCollectionValue_Parms.bPersistent = bPersistent;
	InsertCollectionValue_Parms.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy ( &InsertCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnInsertCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertCollectionValue, &InsertCollectionValue_Parms, NULL );

	pFnInsertCollectionValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &InsertCollectionValue_Parms.NewValue, 0xC );

	return InsertCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       CollectionValues               ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues )
{
	static UFunction* pFnSetCollectionValueArray = NULL;

	if ( ! pFnSetCollectionValueArray )
		pFnSetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 32212 ];

	UUIDynamicFieldProvider_execSetCollectionValueArray_Parms SetCollectionValueArray_Parms;
	memcpy ( &SetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	SetCollectionValueArray_Parms.bClearExisting = bClearExisting;
	SetCollectionValueArray_Parms.InsertIndex = InsertIndex;
	SetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &SetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnSetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollectionValueArray, &SetCollectionValueArray_Parms, NULL );

	pFnSetCollectionValueArray->FunctionFlags |= 0x400;

	if ( CollectionValues )
		memcpy ( CollectionValues, &SetCollectionValueArray_Parms.CollectionValues, 0xC );

	return SetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       out_DataValueArray             ( CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray )
{
	static UFunction* pFnGetCollectionValueArray = NULL;

	if ( ! pFnGetCollectionValueArray )
		pFnGetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 21261 ];

	UUIDynamicFieldProvider_execGetCollectionValueArray_Parms GetCollectionValueArray_Parms;
	memcpy ( &GetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueArray, &GetCollectionValueArray_Parms, NULL );

	pFnGetCollectionValueArray->FunctionFlags |= 0x400;

	if ( out_DataValueArray )
		memcpy ( out_DataValueArray, &GetCollectionValueArray_Parms.out_DataValueArray, 0xC );

	return GetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FName >         out_CellTagArray               ( CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, TArray< struct FName >* out_CellTagArray )
{
	static UFunction* pFnGetCollectionValueSchema = NULL;

	if ( ! pFnGetCollectionValueSchema )
		pFnGetCollectionValueSchema = (UFunction*) UObject::GObjObjects()->Data[ 21260 ];

	UUIDynamicFieldProvider_execGetCollectionValueSchema_Parms GetCollectionValueSchema_Parms;
	memcpy ( &GetCollectionValueSchema_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueSchema_Parms.bPersistent = bPersistent;

	pFnGetCollectionValueSchema->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueSchema, &GetCollectionValueSchema_Parms, NULL );

	pFnGetCollectionValueSchema->FunctionFlags |= 0x400;

	if ( out_CellTagArray )
		memcpy ( out_CellTagArray, &GetCollectionValueSchema_Parms.out_CellTagArray, 0xC );

	return GetCollectionValueSchema_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::SavePersistentProviderData ( )
{
	static UFunction* pFnSavePersistentProviderData = NULL;

	if ( ! pFnSavePersistentProviderData )
		pFnSavePersistentProviderData = (UFunction*) UObject::GObjObjects()->Data[ 32200 ];

	UUIDynamicFieldProvider_execSavePersistentProviderData_Parms SavePersistentProviderData_Parms;

	pFnSavePersistentProviderData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePersistentProviderData, &SavePersistentProviderData_Parms, NULL );

	pFnSavePersistentProviderData->FunctionFlags |= 0x400;
};

// Function Engine.UIDynamicFieldProvider.SetField
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bChangeExistingOnly            ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetField = NULL;

	if ( ! pFnSetField )
		pFnSetField = (UFunction*) UObject::GObjObjects()->Data[ 32195 ];

	UUIDynamicFieldProvider_execSetField_Parms SetField_Parms;
	memcpy ( &SetField_Parms.FieldName, &FieldName, 0x8 );
	SetField_Parms.bChangeExistingOnly = bChangeExistingOnly;

	pFnSetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetField, &SetField_Parms, NULL );

	pFnSetField->FunctionFlags |= 0x400;

	if ( FieldValue )
		memcpy ( FieldValue, &SetField_Parms.FieldValue, 0x54 );

	return SetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetField
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_Field                      ( CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field )
{
	static UFunction* pFnGetField = NULL;

	if ( ! pFnGetField )
		pFnGetField = (UFunction*) UObject::GObjObjects()->Data[ 32191 ];

	UUIDynamicFieldProvider_execGetField_Parms GetField_Parms;
	memcpy ( &GetField_Parms.FieldName, &FieldName, 0x8 );

	pFnGetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetField, &GetField_Parms, NULL );

	pFnGetField->FunctionFlags |= 0x400;

	if ( out_Field )
		memcpy ( out_Field, &GetField_Parms.out_Field, 0x54 );

	return GetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearFields
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReinitializeRuntimeFields     ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearFields ( unsigned long bReinitializeRuntimeFields )
{
	static UFunction* pFnClearFields = NULL;

	if ( ! pFnClearFields )
		pFnClearFields = (UFunction*) UObject::GObjObjects()->Data[ 32188 ];

	UUIDynamicFieldProvider_execClearFields_Parms ClearFields_Parms;
	ClearFields_Parms.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	pFnClearFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearFields, &ClearFields_Parms, NULL );

	pFnClearFields->FunctionFlags |= 0x400;

	return ClearFields_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bSearchPersistentFields        ( CPF_OptionalParm | CPF_Parm )

int UUIDynamicFieldProvider::FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields )
{
	static UFunction* pFnFindFieldIndex = NULL;

	if ( ! pFnFindFieldIndex )
		pFnFindFieldIndex = (UFunction*) UObject::GObjObjects()->Data[ 32184 ];

	UUIDynamicFieldProvider_execFindFieldIndex_Parms FindFieldIndex_Parms;
	memcpy ( &FindFieldIndex_Parms.FieldName, &FieldName, 0x8 );
	FindFieldIndex_Parms.bSearchPersistentFields = bSearchPersistentFields;

	pFnFindFieldIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindFieldIndex, &FindFieldIndex_Parms, NULL );

	pFnFindFieldIndex->FunctionFlags |= 0x400;

	return FindFieldIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveField
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

bool UUIDynamicFieldProvider::RemoveField ( struct FName FieldName )
{
	static UFunction* pFnRemoveField = NULL;

	if ( ! pFnRemoveField )
		pFnRemoveField = (UFunction*) UObject::GObjObjects()->Data[ 32181 ];

	UUIDynamicFieldProvider_execRemoveField_Parms RemoveField_Parms;
	memcpy ( &RemoveField_Parms.FieldName, &FieldName, 0x8 );

	pFnRemoveField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveField, &RemoveField_Parms, NULL );

	pFnRemoveField->FunctionFlags |= 0x400;

	return RemoveField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.AddField
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// int                            out_InsertPosition             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition )
{
	static UFunction* pFnAddField = NULL;

	if ( ! pFnAddField )
		pFnAddField = (UFunction*) UObject::GObjObjects()->Data[ 32175 ];

	UUIDynamicFieldProvider_execAddField_Parms AddField_Parms;
	memcpy ( &AddField_Parms.FieldName, &FieldName, 0x8 );
	AddField_Parms.FieldType = FieldType;
	AddField_Parms.bPersistent = bPersistent;

	pFnAddField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddField, &AddField_Parms, NULL );

	pFnAddField->FunctionFlags |= 0x400;

	if ( out_InsertPosition )
		*out_InsertPosition = AddField_Parms.out_InsertPosition;

	return AddField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::InitializeRuntimeFields ( )
{
	static UFunction* pFnInitializeRuntimeFields = NULL;

	if ( ! pFnInitializeRuntimeFields )
		pFnInitializeRuntimeFields = (UFunction*) UObject::GObjObjects()->Data[ 32174 ];

	UUIDynamicFieldProvider_execInitializeRuntimeFields_Parms InitializeRuntimeFields_Parms;

	pFnInitializeRuntimeFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeRuntimeFields, &InitializeRuntimeFields_Parms, NULL );

	pFnInitializeRuntimeFields->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.SaveSubscriberValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

bool UUIImage::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 14722 ];

	UUIImage_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIImage::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14721 ];

	UUIImage_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

void UUIImage::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14718 ];

	UUIImage_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIImage.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIImage::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 14712 ];

	UUIImage_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIImage::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 14709 ];

	UUIImage_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIImage::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14706 ];

	UUIImage_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIImage.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIImage::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14703 ];

	UUIImage_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.SetValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIImage::SetValue ( class USurface* NewImage )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 14701 ];

	UUIImage_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.UILabel.IgnoreMarkup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldIgnoreMarkup            ( CPF_Parm )

void UUILabel::IgnoreMarkup ( unsigned long bShouldIgnoreMarkup )
{
	static UFunction* pFnIgnoreMarkup = NULL;

	if ( ! pFnIgnoreMarkup )
		pFnIgnoreMarkup = (UFunction*) UObject::GObjObjects()->Data[ 14649 ];

	UUILabel_execIgnoreMarkup_Parms IgnoreMarkup_Parms;
	IgnoreMarkup_Parms.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	this->ProcessEvent ( pFnIgnoreMarkup, &IgnoreMarkup_Parms, NULL );
};

// Function Engine.UILabel.GetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UUILabel::GetValue ( )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 14647 ];

	UUILabel_execGetValue_Parms GetValue_Parms;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UILabel.SetArrayValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FString >       ValueArray                     ( CPF_Parm )

void UUILabel::SetArrayValue ( TArray< struct FString > ValueArray )
{
	static UFunction* pFnSetArrayValue = NULL;

	if ( ! pFnSetArrayValue )
		pFnSetArrayValue = (UFunction*) UObject::GObjObjects()->Data[ 13824 ];

	UUILabel_execSetArrayValue_Parms SetArrayValue_Parms;
	memcpy ( &SetArrayValue_Parms.ValueArray, &ValueArray, 0xC );

	this->ProcessEvent ( pFnSetArrayValue, &SetArrayValue_Parms, NULL );
};

// Function Engine.UILabel.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUILabel::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14643 ];

	UUILabel_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm )

void UUILabel::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 14640 ];

	UUILabel_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UILabel.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabel::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 14634 ];

	UUILabel_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabel::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 14631 ];

	UUILabel_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabel.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabel::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14628 ];

	UUILabel_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabel.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabel::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 14625 ];

	UUILabel_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabel::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 14622 ];

	UUILabel_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm )

void UUILabel::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 13825 ];

	UUILabel_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIPanel.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIPanel::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = (UFunction*) UObject::GObjObjects()->Data[ 28053 ];

	UUIPanel_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIScene.LogCurrentState
// [0x00020000] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 15718 ];

	UUIScene_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScene.LogRenderBounds
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 15715 ];

	UUIScene_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIScene.CloseScene
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToClose                   ( CPF_Parm )
// unsigned long                  bSkipKismetNotify              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::CloseScene ( class UUIScene* SceneToClose, unsigned long bSkipKismetNotify, unsigned long bSkipAnimation )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = (UFunction*) UObject::GObjObjects()->Data[ 15709 ];

	UUIScene_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.SceneToClose = SceneToClose;
	CloseScene_Parms.bSkipKismetNotify = bSkipKismetNotify;
	CloseScene_Parms.bSkipAnimation = bSkipAnimation;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UIScene.OpenScene
// [0x00024002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         SceneDelegate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIScene::OpenScene ( class UUIScene* SceneToOpen, unsigned long bSkipAnimation, struct FScriptDelegate SceneDelegate )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = (UFunction*) UObject::GObjObjects()->Data[ 15702 ];

	UUIScene_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.SceneToOpen = SceneToOpen;
	OpenScene_Parms.bSkipAnimation = bSkipAnimation;
	memcpy ( &OpenScene_Parms.SceneDelegate, &SceneDelegate, 0xC );

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UIScene.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UUIScene::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 15699 ];

	UUIScene_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UUIScene::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 15696 ];

	UUIScene_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyControllerStatusChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bConnected                     ( CPF_Parm )

void UUIScene::NotifyControllerStatusChanged ( int ControllerId, unsigned long bConnected )
{
	static UFunction* pFnNotifyControllerStatusChanged = NULL;

	if ( ! pFnNotifyControllerStatusChanged )
		pFnNotifyControllerStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 15692 ];

	UUIScene_execNotifyControllerStatusChanged_Parms NotifyControllerStatusChanged_Parms;
	NotifyControllerStatusChanged_Parms.ControllerId = ControllerId;
	NotifyControllerStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyControllerStatusChanged, &NotifyControllerStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyLoginStatusChanged
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned char                  NewStatus                      ( CPF_Parm )

bool UUIScene::NotifyLoginStatusChanged ( int ControllerId, unsigned char NewStatus )
{
	static UFunction* pFnNotifyLoginStatusChanged = NULL;

	if ( ! pFnNotifyLoginStatusChanged )
		pFnNotifyLoginStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 15686 ];

	UUIScene_execNotifyLoginStatusChanged_Parms NotifyLoginStatusChanged_Parms;
	NotifyLoginStatusChanged_Parms.ControllerId = ControllerId;
	NotifyLoginStatusChanged_Parms.NewStatus = NewStatus;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged, &NotifyLoginStatusChanged_Parms, NULL );

	return NotifyLoginStatusChanged_Parms.ReturnValue;
};

// Function Engine.UIScene.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIScene::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 15685 ];

	UUIScene_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIScene.NotifyPreClientTravel
// [0x00020000] 
// Parameters infos:
// struct FString                 TravelURL                      ( CPF_Parm )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamless                    ( CPF_Parm )

void UUIScene::NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless )
{
	static UFunction* pFnNotifyPreClientTravel = NULL;

	if ( ! pFnNotifyPreClientTravel )
		pFnNotifyPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 15681 ];

	UUIScene_execNotifyPreClientTravel_Parms NotifyPreClientTravel_Parms;
	memcpy ( &NotifyPreClientTravel_Parms.TravelURL, &TravelURL, 0xC );
	NotifyPreClientTravel_Parms.TravelType = TravelType;
	NotifyPreClientTravel_Parms.bIsSeamless = bIsSeamless;

	this->ProcessEvent ( pFnNotifyPreClientTravel, &NotifyPreClientTravel_Parms, NULL );
};

// Function Engine.UIScene.SceneCreated
// [0x00020000] 
// Parameters infos:
// class UUIScene*                CreatedScene                   ( CPF_Parm )

void UUIScene::SceneCreated ( class UUIScene* CreatedScene )
{
	static UFunction* pFnSceneCreated = NULL;

	if ( ! pFnSceneCreated )
		pFnSceneCreated = (UFunction*) UObject::GObjObjects()->Data[ 15679 ];

	UUIScene_execSceneCreated_Parms SceneCreated_Parms;
	SceneCreated_Parms.CreatedScene = CreatedScene;

	this->ProcessEvent ( pFnSceneCreated, &SceneCreated_Parms, NULL );
};

// Function Engine.UIScene.SetVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScene::eventSetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 15676 ];

	UUIScene_eventSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );
};

// Function Engine.UIScene.RemovedChild
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm )

void UUIScene::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 15671 ];

	UUIScene_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScene.SetInputMask
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewInputMask                   ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScene::eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse )
{
	static UFunction* pFnSetInputMask = NULL;

	if ( ! pFnSetInputMask )
		pFnSetInputMask = (UFunction*) UObject::GObjObjects()->Data[ 15667 ];

	UUIScene_eventSetInputMask_Parms SetInputMask_Parms;
	SetInputMask_Parms.NewInputMask = NewInputMask;
	SetInputMask_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnSetInputMask, &SetInputMask_Parms, NULL );
};

// Function Engine.UIScene.CalculateInputMask
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIScene::eventCalculateInputMask ( )
{
	static UFunction* pFnCalculateInputMask = NULL;

	if ( ! pFnCalculateInputMask )
		pFnCalculateInputMask = (UFunction*) UObject::GObjObjects()->Data[ 15661 ];

	UUIScene_eventCalculateInputMask_Parms CalculateInputMask_Parms;

	this->ProcessEvent ( pFnCalculateInputMask, &CalculateInputMask_Parms, NULL );
};

// Function Engine.UIScene.SceneDeactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScene::eventSceneDeactivated ( )
{
	static UFunction* pFnSceneDeactivated = NULL;

	if ( ! pFnSceneDeactivated )
		pFnSceneDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 15660 ];

	UUIScene_eventSceneDeactivated_Parms SceneDeactivated_Parms;

	this->ProcessEvent ( pFnSceneDeactivated, &SceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.SceneActivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::eventSceneActivated ( unsigned long bInitialActivation )
{
	static UFunction* pFnSceneActivated = NULL;

	if ( ! pFnSceneActivated )
		pFnSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 15658 ];

	UUIScene_eventSceneActivated_Parms SceneActivated_Parms;
	SceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnSceneActivated, &SceneActivated_Parms, NULL );
};

// Function Engine.UIScene.GetFocusHint
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIObject* UUIScene::eventGetFocusHint ( )
{
	static UFunction* pFnGetFocusHint = NULL;

	if ( ! pFnGetFocusHint )
		pFnGetFocusHint = (UFunction*) UObject::GObjObjects()->Data[ 15656 ];

	UUIScene_eventGetFocusHint_Parms GetFocusHint_Parms;

	this->ProcessEvent ( pFnGetFocusHint, &GetFocusHint_Parms, NULL );

	return GetFocusHint_Parms.ReturnValue;
};

// Function Engine.UIScene.LogDockingStack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::LogDockingStack ( )
{
	static UFunction* pFnLogDockingStack = NULL;

	if ( ! pFnLogDockingStack )
		pFnLogDockingStack = (UFunction*) UObject::GObjObjects()->Data[ 15655 ];

	UUIScene_execLogDockingStack_Parms LogDockingStack_Parms;

	pFnLogDockingStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDockingStack, &LogDockingStack_Parms, NULL );

	pFnLogDockingStack->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.IsSceneActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bTopmostScene                  ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::IsSceneActive ( unsigned long bTopmostScene )
{
	static UFunction* pFnIsSceneActive = NULL;

	if ( ! pFnIsSceneActive )
		pFnIsSceneActive = (UFunction*) UObject::GObjObjects()->Data[ 15652 ];

	UUIScene_execIsSceneActive_Parms IsSceneActive_Parms;
	IsSceneActive_Parms.bTopmostScene = bTopmostScene;

	pFnIsSceneActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneActive, &IsSceneActive_Parms, NULL );

	pFnIsSceneActive->FunctionFlags |= 0x400;

	return IsSceneActive_Parms.ReturnValue;
};

// Function Engine.UIScene.GetWorldInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UUIScene::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 15650 ];

	UUIScene_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.UIScene.SetSceneInputMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewInputMode                   ( CPF_Parm )

void UUIScene::SetSceneInputMode ( unsigned char NewInputMode )
{
	static UFunction* pFnSetSceneInputMode = NULL;

	if ( ! pFnSetSceneInputMode )
		pFnSetSceneInputMode = (UFunction*) UObject::GObjObjects()->Data[ 15648 ];

	UUIScene_execSetSceneInputMode_Parms SetSceneInputMode_Parms;
	SetSceneInputMode_Parms.NewInputMode = NewInputMode;

	pFnSetSceneInputMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSceneInputMode, &SetSceneInputMode_Parms, NULL );

	pFnSetSceneInputMode->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetPreviousScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIScene::GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner )
{
	static UFunction* pFnGetPreviousScene = NULL;

	if ( ! pFnGetPreviousScene )
		pFnGetPreviousScene = (UFunction*) UObject::GObjObjects()->Data[ 15645 ];

	UUIScene_execGetPreviousScene_Parms GetPreviousScene_Parms;
	GetPreviousScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;

	pFnGetPreviousScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousScene, &GetPreviousScene_Parms, NULL );

	pFnGetPreviousScene->FunctionFlags |= 0x400;

	return GetPreviousScene_Parms.ReturnValue;
};

// Function Engine.UIScene.ResolveDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIScene::ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnResolveDataStore = NULL;

	if ( ! pFnResolveDataStore )
		pFnResolveDataStore = (UFunction*) UObject::GObjObjects()->Data[ 13656 ];

	UUIScene_execResolveDataStore_Parms ResolveDataStore_Parms;
	memcpy ( &ResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	ResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	pFnResolveDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDataStore, &ResolveDataStore_Parms, NULL );

	pFnResolveDataStore->FunctionFlags |= 0x400;

	return ResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIScene.UnbindSubscribers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::UnbindSubscribers ( )
{
	static UFunction* pFnUnbindSubscribers = NULL;

	if ( ! pFnUnbindSubscribers )
		pFnUnbindSubscribers = (UFunction*) UObject::GObjObjects()->Data[ 15641 ];

	UUIScene_execUnbindSubscribers_Parms UnbindSubscribers_Parms;

	pFnUnbindSubscribers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindSubscribers, &UnbindSubscribers_Parms, NULL );

	pFnUnbindSubscribers->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ResolveScenePositions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ResolveScenePositions ( )
{
	static UFunction* pFnResolveScenePositions = NULL;

	if ( ! pFnResolveScenePositions )
		pFnResolveScenePositions = (UFunction*) UObject::GObjObjects()->Data[ 15640 ];

	UUIScene_execResolveScenePositions_Parms ResolveScenePositions_Parms;

	pFnResolveScenePositions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveScenePositions, &ResolveScenePositions_Parms, NULL );

	pFnResolveScenePositions->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.RebuildDockingStack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::RebuildDockingStack ( )
{
	static UFunction* pFnRebuildDockingStack = NULL;

	if ( ! pFnRebuildDockingStack )
		pFnRebuildDockingStack = (UFunction*) UObject::GObjObjects()->Data[ 15639 ];

	UUIScene_execRebuildDockingStack_Parms RebuildDockingStack_Parms;

	pFnRebuildDockingStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildDockingStack, &RebuildDockingStack_Parms, NULL );

	pFnRebuildDockingStack->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ForceImmediateSceneUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ForceImmediateSceneUpdate ( )
{
	static UFunction* pFnForceImmediateSceneUpdate = NULL;

	if ( ! pFnForceImmediateSceneUpdate )
		pFnForceImmediateSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15638 ];

	UUIScene_execForceImmediateSceneUpdate_Parms ForceImmediateSceneUpdate_Parms;

	pFnForceImmediateSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceImmediateSceneUpdate, &ForceImmediateSceneUpdate_Parms, NULL );

	pFnForceImmediateSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ShouldModulateBackgroundAlpha
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AlphaModulationPercent         ( CPF_Parm | CPF_OutParm )

bool UUIScene::ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent )
{
	static UFunction* pFnShouldModulateBackgroundAlpha = NULL;

	if ( ! pFnShouldModulateBackgroundAlpha )
		pFnShouldModulateBackgroundAlpha = (UFunction*) UObject::GObjObjects()->Data[ 15635 ];

	UUIScene_execShouldModulateBackgroundAlpha_Parms ShouldModulateBackgroundAlpha_Parms;

	this->ProcessEvent ( pFnShouldModulateBackgroundAlpha, &ShouldModulateBackgroundAlpha_Parms, NULL );

	if ( AlphaModulationPercent )
		*AlphaModulationPercent = ShouldModulateBackgroundAlpha_Parms.AlphaModulationPercent;

	return ShouldModulateBackgroundAlpha_Parms.ReturnValue;
};

// Function Engine.UIScene.OnTopSceneChanged
// [0x00120000] 
// Parameters infos:
// class UUIScene*                NewTopScene                    ( CPF_Parm )

void UUIScene::OnTopSceneChanged ( class UUIScene* NewTopScene )
{
	static UFunction* pFnOnTopSceneChanged = NULL;

	if ( ! pFnOnTopSceneChanged )
		pFnOnTopSceneChanged = (UFunction*) UObject::GObjObjects()->Data[ 15633 ];

	UUIScene_execOnTopSceneChanged_Parms OnTopSceneChanged_Parms;
	OnTopSceneChanged_Parms.NewTopScene = NewTopScene;

	this->ProcessEvent ( pFnOnTopSceneChanged, &OnTopSceneChanged_Parms, NULL );
};

// Function Engine.UIScene.OnSceneDeactivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                DeactivatedScene               ( CPF_Parm )

void UUIScene::OnSceneDeactivated ( class UUIScene* DeactivatedScene )
{
	static UFunction* pFnOnSceneDeactivated = NULL;

	if ( ! pFnOnSceneDeactivated )
		pFnOnSceneDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 15631 ];

	UUIScene_execOnSceneDeactivated_Parms OnSceneDeactivated_Parms;
	OnSceneDeactivated_Parms.DeactivatedScene = DeactivatedScene;

	this->ProcessEvent ( pFnOnSceneDeactivated, &OnSceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.OnSceneActivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                ActivatedScene                 ( CPF_Parm )
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation )
{
	static UFunction* pFnOnSceneActivated = NULL;

	if ( ! pFnOnSceneActivated )
		pFnOnSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 15628 ];

	UUIScene_execOnSceneActivated_Parms OnSceneActivated_Parms;
	OnSceneActivated_Parms.ActivatedScene = ActivatedScene;
	OnSceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnOnSceneActivated, &OnSceneActivated_Parms, NULL );
};

// Function Engine.UIScene.GetSceneInputMode
// [0x00120002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScene::GetSceneInputMode ( )
{
	static UFunction* pFnGetSceneInputMode = NULL;

	if ( ! pFnGetSceneInputMode )
		pFnGetSceneInputMode = (UFunction*) UObject::GObjObjects()->Data[ 15626 ];

	UUIScene_execGetSceneInputMode_Parms GetSceneInputMode_Parms;

	this->ProcessEvent ( pFnGetSceneInputMode, &GetSceneInputMode_Parms, NULL );

	return GetSceneInputMode_Parms.ReturnValue;
};

// Function Engine.UIState_Focused.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Focused::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 32519 ];

	UUIState_Focused_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIStringRenderer.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUIStringRenderer::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 32526 ];

	UUIStringRenderer_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIStyle_Data.MatchesStyleData
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIStyle_Data*           OtherStyle                     ( CPF_Const | CPF_Parm )

bool UUIStyle_Data::MatchesStyleData ( class UUIStyle_Data* OtherStyle )
{
	static UFunction* pFnMatchesStyleData = NULL;

	if ( ! pFnMatchesStyleData )
		pFnMatchesStyleData = (UFunction*) UObject::GObjObjects()->Data[ 32549 ];

	UUIStyle_Data_execMatchesStyleData_Parms MatchesStyleData_Parms;
	MatchesStyleData_Parms.OtherStyle = OtherStyle;

	this->ProcessEvent ( pFnMatchesStyleData, &MatchesStyleData_Parms, NULL );

	return MatchesStyleData_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.NotifyResolveStyle
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIStyleResolver::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 32576 ];

	UUIStyleResolver_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.SetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIStyleResolver::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 32573 ];

	UUIStyleResolver_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.GetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIStyleResolver::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 32571 ];

	UUIStyleResolver_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UITexture.GetSurface
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUITexture::GetSurface ( )
{
	static UFunction* pFnGetSurface = NULL;

	if ( ! pFnGetSurface )
		pFnGetSurface = (UFunction*) UObject::GObjObjects()->Data[ 32587 ];

	UUITexture_execGetSurface_Parms GetSurface_Parms;

	this->ProcessEvent ( pFnGetSurface, &GetSurface_Parms, NULL );

	return GetSurface_Parms.ReturnValue;
};

// Function Engine.UITexture.HasValidStyleData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUITexture::HasValidStyleData ( )
{
	static UFunction* pFnHasValidStyleData = NULL;

	if ( ! pFnHasValidStyleData )
		pFnHasValidStyleData = (UFunction*) UObject::GObjObjects()->Data[ 32585 ];

	UUITexture_execHasValidStyleData_Parms HasValidStyleData_Parms;

	pFnHasValidStyleData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidStyleData, &HasValidStyleData_Parms, NULL );

	pFnHasValidStyleData->FunctionFlags |= 0x400;

	return HasValidStyleData_Parms.ReturnValue;
};

// Function Engine.UITexture.SetImageStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          NewImageStyle                  ( CPF_Parm )

void UUITexture::SetImageStyle ( class UUIStyle_Image* NewImageStyle )
{
	static UFunction* pFnSetImageStyle = NULL;

	if ( ! pFnSetImageStyle )
		pFnSetImageStyle = (UFunction*) UObject::GObjObjects()->Data[ 32583 ];

	UUITexture_execSetImageStyle_Parms SetImageStyle_Parms;
	SetImageStyle_Parms.NewImageStyle = NewImageStyle;

	pFnSetImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImageStyle, &SetImageStyle_Parms, NULL );

	pFnSetImageStyle->FunctionFlags |= 0x400;
};

// Function Engine.SeqVar_UIRange.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqVar_UIRange::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28878 ];

	USeqVar_UIRange_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqVar_UniqueNetId.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqVar_UniqueNetId::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28890 ];

	USeqVar_UniqueNetId_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UICond_IsFocused.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICond_IsFocused::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 31901 ];

	UUICond_IsFocused_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 14486 ];

	UUIEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent.ShouldAlwaysInstance
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventShouldAlwaysInstance ( )
{
	static UFunction* pFnShouldAlwaysInstance = NULL;

	if ( ! pFnShouldAlwaysInstance )
		pFnShouldAlwaysInstance = (UFunction*) UObject::GObjObjects()->Data[ 14484 ];

	UUIEvent_eventShouldAlwaysInstance_Parms ShouldAlwaysInstance_Parms;

	this->ProcessEvent ( pFnShouldAlwaysInstance, &ShouldAlwaysInstance_Parms, NULL );

	return ShouldAlwaysInstance_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 14481 ];

	UUIEvent_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 14479 ];

	UUIEvent_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.ActivateUIEvent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIEvent::ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnActivateUIEvent = NULL;

	if ( ! pFnActivateUIEvent )
		pFnActivateUIEvent = (UFunction*) UObject::GObjObjects()->Data[ 14471 ];

	UUIEvent_execActivateUIEvent_Parms ActivateUIEvent_Parms;
	ActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateUIEvent, &ActivateUIEvent_Parms, NULL );

	pFnActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ActivateUIEvent_Parms.IndicesToActivate, 0xC );

	return ActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.ConditionalActivateUIEvent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIEvent::ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnConditionalActivateUIEvent = NULL;

	if ( ! pFnConditionalActivateUIEvent )
		pFnConditionalActivateUIEvent = (UFunction*) UObject::GObjObjects()->Data[ 14463 ];

	UUIEvent_execConditionalActivateUIEvent_Parms ConditionalActivateUIEvent_Parms;
	ConditionalActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ConditionalActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ConditionalActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ConditionalActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnConditionalActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalActivateUIEvent, &ConditionalActivateUIEvent_Parms, NULL );

	pFnConditionalActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ConditionalActivateUIEvent_Parms.IndicesToActivate, 0xC );

	return ConditionalActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.CanBeActivated
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIEvent::CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = (UFunction*) UObject::GObjObjects()->Data[ 14455 ];

	UUIEvent_execCanBeActivated_Parms CanBeActivated_Parms;
	CanBeActivated_Parms.ControllerIndex = ControllerIndex;
	CanBeActivated_Parms.InEventOwner = InEventOwner;
	CanBeActivated_Parms.InEventActivator = InEventActivator;
	CanBeActivated_Parms.bActivateImmediately = bActivateImmediately;

	pFnCanBeActivated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );

	pFnCanBeActivated->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &CanBeActivated_Parms.IndicesToActivate, 0xC );

	return CanBeActivated_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwnerScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIEvent::GetOwnerScene ( )
{
	static UFunction* pFnGetOwnerScene = NULL;

	if ( ! pFnGetOwnerScene )
		pFnGetOwnerScene = (UFunction*) UObject::GObjObjects()->Data[ 14453 ];

	UUIEvent_execGetOwnerScene_Parms GetOwnerScene_Parms;

	pFnGetOwnerScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerScene, &GetOwnerScene_Parms, NULL );

	pFnGetOwnerScene->FunctionFlags |= 0x400;

	return GetOwnerScene_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIEvent::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 14451 ];

	UUIEvent_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIEvent.AllowEventActivation
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIEvent::AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnAllowEventActivation = NULL;

	if ( ! pFnAllowEventActivation )
		pFnAllowEventActivation = (UFunction*) UObject::GObjObjects()->Data[ 14443 ];

	UUIEvent_execAllowEventActivation_Parms AllowEventActivation_Parms;
	AllowEventActivation_Parms.ControllerIndex = ControllerIndex;
	AllowEventActivation_Parms.InEventOwner = InEventOwner;
	AllowEventActivation_Parms.InEventActivator = InEventActivator;
	AllowEventActivation_Parms.bActivateImmediately = bActivateImmediately;

	this->ProcessEvent ( pFnAllowEventActivation, &AllowEventActivation_Parms, NULL );

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &AllowEventActivation_Parms.IndicesToActivate, 0xC );

	return AllowEventActivation_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_CalloutButtonInputProxy::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32306 ];

	UUIEvent_CalloutButtonInputProxy_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_CalloutButtonInputProxy::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 32304 ];

	UUIEvent_CalloutButtonInputProxy_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32301 ];

	UUIEvent_CalloutButtonInputProxy_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.FindButtonAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

int UUIEvent_CalloutButtonInputProxy::FindButtonAliasIndex ( struct FName ButtonAliasName )
{
	static UFunction* pFnFindButtonAliasIndex = NULL;

	if ( ! pFnFindButtonAliasIndex )
		pFnFindButtonAliasIndex = (UFunction*) UObject::GObjObjects()->Data[ 32298 ];

	UUIEvent_CalloutButtonInputProxy_execFindButtonAliasIndex_Parms FindButtonAliasIndex_Parms;
	memcpy ( &FindButtonAliasIndex_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnFindButtonAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindButtonAliasIndex, &FindButtonAliasIndex_Parms, NULL );

	pFnFindButtonAliasIndex->FunctionFlags |= 0x400;

	return FindButtonAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.ChangeButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CurrentAliasName               ( CPF_Parm )
// struct FName                   NewAliasName                   ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName )
{
	static UFunction* pFnChangeButtonAlias = NULL;

	if ( ! pFnChangeButtonAlias )
		pFnChangeButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 32294 ];

	UUIEvent_CalloutButtonInputProxy_execChangeButtonAlias_Parms ChangeButtonAlias_Parms;
	memcpy ( &ChangeButtonAlias_Parms.CurrentAliasName, &CurrentAliasName, 0x8 );
	memcpy ( &ChangeButtonAlias_Parms.NewAliasName, &NewAliasName, 0x8 );

	pFnChangeButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeButtonAlias, &ChangeButtonAlias_Parms, NULL );

	pFnChangeButtonAlias->FunctionFlags |= 0x400;

	return ChangeButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.UnregisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::UnregisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnUnregisterButtonAlias = NULL;

	if ( ! pFnUnregisterButtonAlias )
		pFnUnregisterButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 32291 ];

	UUIEvent_CalloutButtonInputProxy_execUnregisterButtonAlias_Parms UnregisterButtonAlias_Parms;
	memcpy ( &UnregisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnUnregisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterButtonAlias, &UnregisterButtonAlias_Parms, NULL );

	pFnUnregisterButtonAlias->FunctionFlags |= 0x400;

	return UnregisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.RegisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::RegisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnRegisterButtonAlias = NULL;

	if ( ! pFnRegisterButtonAlias )
		pFnRegisterButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 32288 ];

	UUIEvent_CalloutButtonInputProxy_execRegisterButtonAlias_Parms RegisterButtonAlias_Parms;
	memcpy ( &RegisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnRegisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterButtonAlias, &RegisterButtonAlias_Parms, NULL );

	pFnRegisterButtonAlias->FunctionFlags |= 0x400;

	return RegisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_MetaObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 32312 ];

	UUIEvent_MetaObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_MetaObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32309 ];

	UUIEvent_MetaObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ProcessInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32315 ];

	UUIEvent_ProcessInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_SubmitTextData.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_SubmitTextData::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32320 ];

	UUIEvent_SubmitTextData_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_TextValueChanged.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_TextValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32323 ];

	UUIEvent_TextValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UISequence.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm )

void UUISequence::RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 32458 ];

	UUISequence_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0xC );
};

// Function Engine.UISequence.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUISequence::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 31895 ];

	UUISequence_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UISequence.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUISequence::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32453 ];

	UUISequence_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UISequence.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm )

void UUISequence::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 32449 ];

	UUISequence_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UISequence.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUISequence::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 32447 ];

	UUISequence_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIStateSequence.GetOwnerState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIState* UUIStateSequence::GetOwnerState ( )
{
	static UFunction* pFnGetOwnerState = NULL;

	if ( ! pFnGetOwnerState )
		pFnGetOwnerState = (UFunction*) UObject::GObjObjects()->Data[ 32524 ];

	UUIStateSequence_execGetOwnerState_Parms GetOwnerState_Parms;

	pFnGetOwnerState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerState, &GetOwnerState_Parms, NULL );

	pFnGetOwnerState->FunctionFlags |= 0x400;

	return GetOwnerState_Parms.ReturnValue;
};

// Function Engine.FluidInfluenceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void AFluidInfluenceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19408 ];

	AFluidInfluenceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AFluidSurfaceActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 19482 ];

	AFluidSurfaceActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFluidSurfaceActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 19474 ];

	AFluidSurfaceActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FluidSurfaceComponent.SetSimulationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetSimulationPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetSimulationPosition = NULL;

	if ( ! pFnSetSimulationPosition )
		pFnSetSimulationPosition = (UFunction*) UObject::GObjObjects()->Data[ 19471 ];

	UFluidSurfaceComponent_execSetSimulationPosition_Parms SetSimulationPosition_Parms;
	memcpy ( &SetSimulationPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetSimulationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSimulationPosition, &SetSimulationPosition_Parms, NULL );

	pFnSetSimulationPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.SetDetailPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetDetailPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetDetailPosition = NULL;

	if ( ! pFnSetDetailPosition )
		pFnSetDetailPosition = (UFunction*) UObject::GObjObjects()->Data[ 19469 ];

	UFluidSurfaceComponent_execSetDetailPosition_Parms SetDetailPosition_Parms;
	memcpy ( &SetDetailPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetDetailPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDetailPosition, &SetDetailPosition_Parms, NULL );

	pFnSetDetailPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.ApplyForce
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bImpulse                       ( CPF_OptionalParm | CPF_Parm )

void UFluidSurfaceComponent::ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse )
{
	static UFunction* pFnApplyForce = NULL;

	if ( ! pFnApplyForce )
		pFnApplyForce = (UFunction*) UObject::GObjObjects()->Data[ 19464 ];

	UFluidSurfaceComponent_execApplyForce_Parms ApplyForce_Parms;
	memcpy ( &ApplyForce_Parms.WorldPos, &WorldPos, 0xC );
	ApplyForce_Parms.Strength = Strength;
	ApplyForce_Parms.Radius = Radius;
	ApplyForce_Parms.bImpulse = bImpulse;

	pFnApplyForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyForce, &ApplyForce_Parms, NULL );

	pFnApplyForce->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetIsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInIsActive                    ( CPF_Parm )

void ULensFlareComponent::SetIsActive ( unsigned long bInIsActive )
{
	static UFunction* pFnSetIsActive = NULL;

	if ( ! pFnSetIsActive )
		pFnSetIsActive = (UFunction*) UObject::GObjObjects()->Data[ 22027 ];

	ULensFlareComponent_execSetIsActive_Parms SetIsActive_Parms;
	SetIsActive_Parms.bInIsActive = bInIsActive;

	pFnSetIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIsActive, &SetIsActive_Parms, NULL );

	pFnSetIsActive->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetSourceColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            InSourceColor                  ( CPF_Parm )

void ULensFlareComponent::SetSourceColor ( struct FLinearColor InSourceColor )
{
	static UFunction* pFnSetSourceColor = NULL;

	if ( ! pFnSetSourceColor )
		pFnSetSourceColor = (UFunction*) UObject::GObjObjects()->Data[ 22025 ];

	ULensFlareComponent_execSetSourceColor_Parms SetSourceColor_Parms;
	memcpy ( &SetSourceColor_Parms.InSourceColor, &InSourceColor, 0x10 );

	pFnSetSourceColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSourceColor, &SetSourceColor_Parms, NULL );

	pFnSetSourceColor->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )

void ULensFlareComponent::SetTemplate ( class ULensFlare* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 22023 ];

	ULensFlareComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareSource.SetActorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void ALensFlareSource::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 22050 ];

	ALensFlareSource_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetExtColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Red                            ( CPF_Parm )
// float                          Green                          ( CPF_Parm )
// float                          Blue                           ( CPF_Parm )
// float                          Alpha                          ( CPF_Parm )

void ALensFlareSource::SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 22044 ];

	ALensFlareSource_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Param                          ( CPF_Parm )

void ALensFlareSource::SetColorParameter ( struct FName ParameterName, struct FLinearColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 22041 ];

	ALensFlareSource_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x10 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetVectorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void ALensFlareSource::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 22038 ];

	ALensFlareSource_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetFloatParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void ALensFlareSource::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 22035 ];

	ALensFlareSource_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALensFlareSource::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 22033 ];

	ALensFlareSource_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.LensFlareSource.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )

void ALensFlareSource::SetTemplate ( class ULensFlare* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 22031 ];

	ALensFlareSource_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.AudioDevice.SetSoundMode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )
// int                            InSoundModeLayer               ( CPF_OptionalParm | CPF_Parm )

void UAudioDevice::SetSoundMode ( struct FName NewMode, int InSoundModeLayer )
{
	static UFunction* pFnSetSoundMode = NULL;

	if ( ! pFnSetSoundMode )
		pFnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 11352 ];

	UAudioDevice_execSetSoundMode_Parms SetSoundMode_Parms;
	memcpy ( &SetSoundMode_Parms.NewMode, &NewMode, 0x8 );
	SetSoundMode_Parms.InSoundModeLayer = InSoundModeLayer;

	pFnSetSoundMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoundMode, &SetSoundMode_Parms, NULL );

	pFnSetSoundMode->FunctionFlags |= 0x400;
};

// Function Engine.CustomUIComp_DrawImage.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UCustomUIComp_DrawImage::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 15799 ];

	UCustomUIComp_DrawImage_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.CustomUIComp_DrawStringComponents.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UCustomUIComp_DrawStringComponents::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 15875 ];

	UCustomUIComp_DrawStringComponents_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.SeqAct_MakeNoise.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_MakeNoise::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28434 ];

	USeqAct_MakeNoise_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AttachToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28150 ];

	USeqAct_AttachToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHidden::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28609 ];

	USeqAct_ToggleHidden_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch1                        ( CPF_Parm )
// int                            Switch2                        ( CPF_Parm )
// class UObject*                 OptionalObject1                ( CPF_Parm )
// class UObject*                 OptionalObject2                ( CPF_Parm )

bool ULocalMessage::PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 )
{
	static UFunction* pFnPartiallyDuplicates = NULL;

	if ( ! pFnPartiallyDuplicates )
		pFnPartiallyDuplicates = (UFunction*) UObject::GObjObjects()->Data[ 19335 ];

	ULocalMessage_execPartiallyDuplicates_Parms PartiallyDuplicates_Parms;
	PartiallyDuplicates_Parms.Switch1 = Switch1;
	PartiallyDuplicates_Parms.Switch2 = Switch2;
	PartiallyDuplicates_Parms.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Parms.OptionalObject2 = OptionalObject2;

	this->ProcessEvent ( pFnPartiallyDuplicates, &PartiallyDuplicates_Parms, NULL );

	return PartiallyDuplicates_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsKeyObjectiveMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsKeyObjectiveMessage ( int Switch )
{
	static UFunction* pFnIsKeyObjectiveMessage = NULL;

	if ( ! pFnIsKeyObjectiveMessage )
		pFnIsKeyObjectiveMessage = (UFunction*) UObject::GObjObjects()->Data[ 19332 ];

	ULocalMessage_execIsKeyObjectiveMessage_Parms IsKeyObjectiveMessage_Parms;
	IsKeyObjectiveMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsKeyObjectiveMessage, &IsKeyObjectiveMessage_Parms, NULL );

	return IsKeyObjectiveMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsConsoleMessage ( int Switch )
{
	static UFunction* pFnIsConsoleMessage = NULL;

	if ( ! pFnIsConsoleMessage )
		pFnIsConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 19329 ];

	ULocalMessage_execIsConsoleMessage_Parms IsConsoleMessage_Parms;
	IsConsoleMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsConsoleMessage, &IsConsoleMessage_Parms, NULL );

	return IsConsoleMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

float ULocalMessage::GetLifeTime ( int Switch )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 19326 ];

	ULocalMessage_execGetLifeTime_Parms GetLifeTime_Parms;
	GetLifeTime_Parms.Switch = Switch;

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int ULocalMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 19320 ];

	ULocalMessage_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class AHUD*                    myHUD                          ( CPF_Parm )

float ULocalMessage::GetPos ( int Switch, class AHUD* myHUD )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = (UFunction*) UObject::GObjObjects()->Data[ 19316 ];

	ULocalMessage_execGetPos_Parms GetPos_Parms;
	GetPos_Parms.Switch = Switch;
	GetPos_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );

	return GetPos_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor ULocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 19310 ];

	ULocalMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )

struct FColor ULocalMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI )
{
	static UFunction* pFnGetConsoleColor = NULL;

	if ( ! pFnGetConsoleColor )
		pFnGetConsoleColor = (UFunction*) UObject::GObjObjects()->Data[ 19307 ];

	ULocalMessage_execGetConsoleColor_Parms GetConsoleColor_Parms;
	GetConsoleColor_Parms.RelatedPRI = RelatedPRI;

	this->ProcessEvent ( pFnGetConsoleColor, &GetConsoleColor_Parms, NULL );

	return GetConsoleColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString ULocalMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 19300 ];

	ULocalMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00026002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ULocalMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 19293 ];

	ULocalMessage_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function Engine.AccessControl.IsIDBanned
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetId                          ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AAccessControl::IsIDBanned ( struct FUniqueNetId* NetId )
{
	static UFunction* pFnIsIDBanned = NULL;

	if ( ! pFnIsIDBanned )
		pFnIsIDBanned = (UFunction*) UObject::GObjObjects()->Data[ 6639 ];

	AAccessControl_execIsIDBanned_Parms IsIDBanned_Parms;

	this->ProcessEvent ( pFnIsIDBanned, &IsIDBanned_Parms, NULL );

	if ( NetId )
		memcpy ( NetId, &IsIDBanned_Parms.NetId, 0x8 );

	return IsIDBanned_Parms.ReturnValue;
};

// Function Engine.AccessControl.CheckIPPolicy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Address                        ( CPF_Parm )

bool AAccessControl::CheckIPPolicy ( struct FString Address )
{
	static UFunction* pFnCheckIPPolicy = NULL;

	if ( ! pFnCheckIPPolicy )
		pFnCheckIPPolicy = (UFunction*) UObject::GObjObjects()->Data[ 6529 ];

	AAccessControl_execCheckIPPolicy_Parms CheckIPPolicy_Parms;
	memcpy ( &CheckIPPolicy_Parms.Address, &Address, 0xC );

	this->ProcessEvent ( pFnCheckIPPolicy, &CheckIPPolicy_Parms, NULL );

	return CheckIPPolicy_Parms.ReturnValue;
};

// Function Engine.AccessControl.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm )
// struct FString                 Address                        ( CPF_Parm )
// unsigned long                  bSpectator                     ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm )

void AAccessControl::eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 6523 ];

	AAccessControl_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	PreLogin_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &PreLogin_Parms.OutError, 0xC );
};

// Function Engine.AccessControl.ValidLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm )

bool AAccessControl::ValidLogin ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnValidLogin = NULL;

	if ( ! pFnValidLogin )
		pFnValidLogin = (UFunction*) UObject::GObjObjects()->Data[ 6519 ];

	AAccessControl_execValidLogin_Parms ValidLogin_Parms;
	memcpy ( &ValidLogin_Parms.UserName, &UserName, 0xC );
	memcpy ( &ValidLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnValidLogin, &ValidLogin_Parms, NULL );

	return ValidLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.ParseAdminOptions
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm )

bool AAccessControl::ParseAdminOptions ( struct FString Options )
{
	static UFunction* pFnParseAdminOptions = NULL;

	if ( ! pFnParseAdminOptions )
		pFnParseAdminOptions = (UFunction*) UObject::GObjObjects()->Data[ 6514 ];

	AAccessControl_execParseAdminOptions_Parms ParseAdminOptions_Parms;
	memcpy ( &ParseAdminOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnParseAdminOptions, &ParseAdminOptions_Parms, NULL );

	return ParseAdminOptions_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminExited
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminExited ( class APlayerController* P )
{
	static UFunction* pFnAdminExited = NULL;

	if ( ! pFnAdminExited )
		pFnAdminExited = (UFunction*) UObject::GObjObjects()->Data[ 6511 ];

	AAccessControl_execAdminExited_Parms AdminExited_Parms;
	AdminExited_Parms.P = P;

	this->ProcessEvent ( pFnAdminExited, &AdminExited_Parms, NULL );
};

// Function Engine.AccessControl.AdminEntered
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminEntered ( class APlayerController* P )
{
	static UFunction* pFnAdminEntered = NULL;

	if ( ! pFnAdminEntered )
		pFnAdminEntered = (UFunction*) UObject::GObjObjects()->Data[ 6508 ];

	AAccessControl_execAdminEntered_Parms AdminEntered_Parms;
	AdminEntered_Parms.P = P;

	this->ProcessEvent ( pFnAdminEntered, &AdminEntered_Parms, NULL );
};

// Function Engine.AccessControl.AdminLogout
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::AdminLogout ( class APlayerController* P )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = (UFunction*) UObject::GObjObjects()->Data[ 6505 ];

	AAccessControl_execAdminLogout_Parms AdminLogout_Parms;
	AdminLogout_Parms.P = P;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );

	return AdminLogout_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm )

bool AAccessControl::AdminLogin ( class APlayerController* P, struct FString Password )
{
	static UFunction* pFnAdminLogin = NULL;

	if ( ! pFnAdminLogin )
		pFnAdminLogin = (UFunction*) UObject::GObjObjects()->Data[ 6501 ];

	AAccessControl_execAdminLogin_Parms AdminLogin_Parms;
	AdminLogin_Parms.P = P;
	memcpy ( &AdminLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnAdminLogin, &AdminLogin_Parms, NULL );

	return AdminLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm )

bool AAccessControl::KickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 6497 ];

	AAccessControl_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.C = C;
	memcpy ( &KickPlayer_Parms.KickReason, &KickReason, 0xC );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );

	return KickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm )

void AAccessControl::KickBan ( struct FString Target )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 6493 ];

	AAccessControl_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.AccessControl.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm )

void AAccessControl::Kick ( struct FString Target )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 6490 ];

	AAccessControl_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.AccessControl.GetControllerFromString
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Target                         ( CPF_Parm )

class AController* AAccessControl::GetControllerFromString ( struct FString Target )
{
	static UFunction* pFnGetControllerFromString = NULL;

	if ( ! pFnGetControllerFromString )
		pFnGetControllerFromString = (UFunction*) UObject::GObjObjects()->Data[ 6484 ];

	AAccessControl_execGetControllerFromString_Parms GetControllerFromString_Parms;
	memcpy ( &GetControllerFromString_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnGetControllerFromString, &GetControllerFromString_Parms, NULL );

	return GetControllerFromString_Parms.ReturnValue;
};

// Function Engine.AccessControl.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAccessControl::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 6482 ];

	AAccessControl_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.SetGamePassword
// [0x00020002] 
// Parameters infos:
// struct FString                 P                              ( CPF_Parm )

void AAccessControl::SetGamePassword ( struct FString P )
{
	static UFunction* pFnSetGamePassword = NULL;

	if ( ! pFnSetGamePassword )
		pFnSetGamePassword = (UFunction*) UObject::GObjObjects()->Data[ 6480 ];

	AAccessControl_execSetGamePassword_Parms SetGamePassword_Parms;
	memcpy ( &SetGamePassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetGamePassword, &SetGamePassword_Parms, NULL );
};

// Function Engine.AccessControl.SetAdminPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 P                              ( CPF_Parm )

bool AAccessControl::SetAdminPassword ( struct FString P )
{
	static UFunction* pFnSetAdminPassword = NULL;

	if ( ! pFnSetAdminPassword )
		pFnSetAdminPassword = (UFunction*) UObject::GObjObjects()->Data[ 6477 ];

	AAccessControl_execSetAdminPassword_Parms SetAdminPassword_Parms;
	memcpy ( &SetAdminPassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetAdminPassword, &SetAdminPassword_Parms, NULL );

	return SetAdminPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsAdmin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::IsAdmin ( class APlayerController* P )
{
	static UFunction* pFnIsAdmin = NULL;

	if ( ! pFnIsAdmin )
		pFnIsAdmin = (UFunction*) UObject::GObjObjects()->Data[ 6474 ];

	AAccessControl_execIsAdmin_Parms IsAdmin_Parms;
	IsAdmin_Parms.P = P;

	this->ProcessEvent ( pFnIsAdmin, &IsAdmin_Parms, NULL );

	return IsAdmin_Parms.ReturnValue;
};

// Function Engine.Admin.ServerSwitch
// [0x002200C2] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )

void AAdmin::ServerSwitch ( struct FString URL )
{
	static UFunction* pFnServerSwitch = NULL;

	if ( ! pFnServerSwitch )
		pFnServerSwitch = (UFunction*) UObject::GObjObjects()->Data[ 8576 ];

	AAdmin_execServerSwitch_Parms ServerSwitch_Parms;
	memcpy ( &ServerSwitch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnServerSwitch, &ServerSwitch_Parms, NULL );
};

// Function Engine.Admin.Switch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm )

void AAdmin::Switch ( struct FString URL )
{
	static UFunction* pFnSwitch = NULL;

	if ( ! pFnSwitch )
		pFnSwitch = (UFunction*) UObject::GObjObjects()->Data[ 8574 ];

	AAdmin_execSwitch_Parms Switch_Parms;
	memcpy ( &Switch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitch, &Switch_Parms, NULL );
};

// Function Engine.Admin.ServerRestartMap
// [0x002200C2] 
// Parameters infos:

void AAdmin::ServerRestartMap ( )
{
	static UFunction* pFnServerRestartMap = NULL;

	if ( ! pFnServerRestartMap )
		pFnServerRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 8573 ];

	AAdmin_execServerRestartMap_Parms ServerRestartMap_Parms;

	this->ProcessEvent ( pFnServerRestartMap, &ServerRestartMap_Parms, NULL );
};

// Function Engine.Admin.RestartMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::RestartMap ( )
{
	static UFunction* pFnRestartMap = NULL;

	if ( ! pFnRestartMap )
		pFnRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 8572 ];

	AAdmin_execRestartMap_Parms RestartMap_Parms;

	this->ProcessEvent ( pFnRestartMap, &RestartMap_Parms, NULL );
};

// Function Engine.Admin.PlayerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::PlayerList ( )
{
	static UFunction* pFnPlayerList = NULL;

	if ( ! pFnPlayerList )
		pFnPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 8570 ];

	AAdmin_execPlayerList_Parms PlayerList_Parms;

	this->ProcessEvent ( pFnPlayerList, &PlayerList_Parms, NULL );
};

// Function Engine.Admin.ServerKick
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AAdmin::ServerKick ( struct FString S )
{
	static UFunction* pFnServerKick = NULL;

	if ( ! pFnServerKick )
		pFnServerKick = (UFunction*) UObject::GObjObjects()->Data[ 8568 ];

	AAdmin_execServerKick_Parms ServerKick_Parms;
	memcpy ( &ServerKick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKick, &ServerKick_Parms, NULL );
};

// Function Engine.Admin.Kick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AAdmin::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 8566 ];

	AAdmin_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.Admin.ServerKickBan
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AAdmin::ServerKickBan ( struct FString S )
{
	static UFunction* pFnServerKickBan = NULL;

	if ( ! pFnServerKickBan )
		pFnServerKickBan = (UFunction*) UObject::GObjObjects()->Data[ 8564 ];

	AAdmin_execServerKickBan_Parms ServerKickBan_Parms;
	memcpy ( &ServerKickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKickBan, &ServerKickBan_Parms, NULL );
};

// Function Engine.Admin.KickBan
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm )

void AAdmin::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 8562 ];

	AAdmin_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.Admin.ServerAdmin
// [0x002200C2] 
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm )

void AAdmin::ServerAdmin ( struct FString CommandLine )
{
	static UFunction* pFnServerAdmin = NULL;

	if ( ! pFnServerAdmin )
		pFnServerAdmin = (UFunction*) UObject::GObjObjects()->Data[ 8559 ];

	AAdmin_execServerAdmin_Parms ServerAdmin_Parms;
	memcpy ( &ServerAdmin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnServerAdmin, &ServerAdmin_Parms, NULL );
};

// Function Engine.Admin.Admin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm )

void AAdmin::Admin ( struct FString CommandLine )
{
	static UFunction* pFnAdmin = NULL;

	if ( ! pFnAdmin )
		pFnAdmin = (UFunction*) UObject::GObjObjects()->Data[ 8557 ];

	AAdmin_execAdmin_Parms Admin_Parms;
	memcpy ( &Admin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnAdmin, &Admin_Parms, NULL );
};

// Function Engine.Admin.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAdmin::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8556 ];

	AAdmin_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18960 ];

	AEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.EmitterSpawnable.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 18957 ];

	AEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.DeleteMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

bool UOnlinePlayerInterface::DeleteMessage ( unsigned char LocalUserNum, int MessageIndex )
{
	static UFunction* pFnDeleteMessage = NULL;

	if ( ! pFnDeleteMessage )
		pFnDeleteMessage = (UFunction*) UObject::GObjObjects()->Data[ 23936 ];

	UOnlinePlayerInterface_execDeleteMessage_Parms DeleteMessage_Parms;
	DeleteMessage_Parms.LocalUserNum = LocalUserNum;
	DeleteMessage_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnDeleteMessage, &DeleteMessage_Parms, NULL );

	return DeleteMessage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm )

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnClearFriendMessageReceivedDelegate = NULL;

	if ( ! pFnClearFriendMessageReceivedDelegate )
		pFnClearFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23933 ];

	UOnlinePlayerInterface_execClearFriendMessageReceivedDelegate_Parms ClearFriendMessageReceivedDelegate_Parms;
	ClearFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendMessageReceivedDelegate, &ClearFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm )

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnAddFriendMessageReceivedDelegate = NULL;

	if ( ! pFnAddFriendMessageReceivedDelegate )
		pFnAddFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23930 ];

	UOnlinePlayerInterface_execAddFriendMessageReceivedDelegate_Parms AddFriendMessageReceivedDelegate_Parms;
	AddFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendMessageReceivedDelegate, &AddFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )

void UOnlinePlayerInterface::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 23925 ];

	UOnlinePlayerInterface_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetFriendMessages
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FOnlineFriendMessage > FriendMessages                 ( CPF_Parm | CPF_OutParm )

void UOnlinePlayerInterface::GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages )
{
	static UFunction* pFnGetFriendMessages = NULL;

	if ( ! pFnGetFriendMessages )
		pFnGetFriendMessages = (UFunction*) UObject::GObjObjects()->Data[ 23921 ];

	UOnlinePlayerInterface_execGetFriendMessages_Parms GetFriendMessages_Parms;
	GetFriendMessages_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetFriendMessages, &GetFriendMessages_Parms, NULL );

	if ( FriendMessages )
		memcpy ( FriendMessages, &GetFriendMessages_Parms.FriendMessages, 0xC );
};

// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnClearJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinFriendGameCompleteDelegate )
		pFnClearJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23919 ];

	UOnlinePlayerInterface_execClearJoinFriendGameCompleteDelegate_Parms ClearJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearJoinFriendGameCompleteDelegate, &ClearJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnAddJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinFriendGameCompleteDelegate )
		pFnAddJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23917 ];

	UOnlinePlayerInterface_execAddJoinFriendGameCompleteDelegate_Parms AddJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &AddJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddJoinFriendGameCompleteDelegate, &AddJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnJoinFriendGameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinFriendGameComplete = NULL;

	if ( ! pFnOnJoinFriendGameComplete )
		pFnOnJoinFriendGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23915 ];

	UOnlinePlayerInterface_execOnJoinFriendGameComplete_Parms OnJoinFriendGameComplete_Parms;
	OnJoinFriendGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinFriendGameComplete, &OnJoinFriendGameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.JoinFriendGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )

bool UOnlinePlayerInterface::JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend )
{
	static UFunction* pFnJoinFriendGame = NULL;

	if ( ! pFnJoinFriendGame )
		pFnJoinFriendGame = (UFunction*) UObject::GObjObjects()->Data[ 23911 ];

	UOnlinePlayerInterface_execJoinFriendGame_Parms JoinFriendGame_Parms;
	JoinFriendGame_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &JoinFriendGame_Parms.Friend, &Friend, 0x8 );

	this->ProcessEvent ( pFnJoinFriendGame, &JoinFriendGame_Parms, NULL );

	return JoinFriendGame_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm )

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnClearReceivedGameInviteDelegate = NULL;

	if ( ! pFnClearReceivedGameInviteDelegate )
		pFnClearReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23908 ];

	UOnlinePlayerInterface_execClearReceivedGameInviteDelegate_Parms ClearReceivedGameInviteDelegate_Parms;
	ClearReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReceivedGameInviteDelegate, &ClearReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm )

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnAddReceivedGameInviteDelegate = NULL;

	if ( ! pFnAddReceivedGameInviteDelegate )
		pFnAddReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23905 ];

	UOnlinePlayerInterface_execAddReceivedGameInviteDelegate_Parms AddReceivedGameInviteDelegate_Parms;
	AddReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReceivedGameInviteDelegate, &AddReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm )

void UOnlinePlayerInterface::OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnReceivedGameInvite = NULL;

	if ( ! pFnOnReceivedGameInvite )
		pFnOnReceivedGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 23902 ];

	UOnlinePlayerInterface_execOnReceivedGameInvite_Parms OnReceivedGameInvite_Parms;
	OnReceivedGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnReceivedGameInvite_Parms.InviterName, &InviterName, 0xC );

	this->ProcessEvent ( pFnOnReceivedGameInvite, &OnReceivedGameInvite_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FUniqueNetId >  Friends                        ( CPF_Parm )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriends = NULL;

	if ( ! pFnSendGameInviteToFriends )
		pFnSendGameInviteToFriends = (UFunction*) UObject::GObjObjects()->Data[ 23896 ];

	UOnlinePlayerInterface_execSendGameInviteToFriends_Parms SendGameInviteToFriends_Parms;
	SendGameInviteToFriends_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriends_Parms.Friends, &Friends, 0xC );
	memcpy ( &SendGameInviteToFriends_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriends, &SendGameInviteToFriends_Parms, NULL );

	return SendGameInviteToFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriend = NULL;

	if ( ! pFnSendGameInviteToFriend )
		pFnSendGameInviteToFriend = (UFunction*) UObject::GObjObjects()->Data[ 23891 ];

	UOnlinePlayerInterface_execSendGameInviteToFriend_Parms SendGameInviteToFriend_Parms;
	SendGameInviteToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendGameInviteToFriend_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriend, &SendGameInviteToFriend_Parms, NULL );

	return SendGameInviteToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )

bool UOnlinePlayerInterface::SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message )
{
	static UFunction* pFnSendMessageToFriend = NULL;

	if ( ! pFnSendMessageToFriend )
		pFnSendMessageToFriend = (UFunction*) UObject::GObjObjects()->Data[ 23886 ];

	UOnlinePlayerInterface_execSendMessageToFriend_Parms SendMessageToFriend_Parms;
	SendMessageToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendMessageToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendMessageToFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSendMessageToFriend, &SendMessageToFriend_Parms, NULL );

	return SendMessageToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnClearFriendInviteReceivedDelegate = NULL;

	if ( ! pFnClearFriendInviteReceivedDelegate )
		pFnClearFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23883 ];

	UOnlinePlayerInterface_execClearFriendInviteReceivedDelegate_Parms ClearFriendInviteReceivedDelegate_Parms;
	ClearFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendInviteReceivedDelegate, &ClearFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnAddFriendInviteReceivedDelegate = NULL;

	if ( ! pFnAddFriendInviteReceivedDelegate )
		pFnAddFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23880 ];

	UOnlinePlayerInterface_execAddFriendInviteReceivedDelegate_Parms AddFriendInviteReceivedDelegate_Parms;
	AddFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendInviteReceivedDelegate, &AddFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )

void UOnlinePlayerInterface::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 23875 ];

	UOnlinePlayerInterface_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.RemoveFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            FormerFriend                   ( CPF_Parm )

bool UOnlinePlayerInterface::RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend )
{
	static UFunction* pFnRemoveFriend = NULL;

	if ( ! pFnRemoveFriend )
		pFnRemoveFriend = (UFunction*) UObject::GObjObjects()->Data[ 23871 ];

	UOnlinePlayerInterface_execRemoveFriend_Parms RemoveFriend_Parms;
	RemoveFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RemoveFriend_Parms.FormerFriend, &FormerFriend, 0x8 );

	this->ProcessEvent ( pFnRemoveFriend, &RemoveFriend_Parms, NULL );

	return RemoveFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnDenyFriendInvite = NULL;

	if ( ! pFnDenyFriendInvite )
		pFnDenyFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 23867 ];

	UOnlinePlayerInterface_execDenyFriendInvite_Parms DenyFriendInvite_Parms;
	DenyFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &DenyFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnDenyFriendInvite, &DenyFriendInvite_Parms, NULL );

	return DenyFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnAcceptFriendInvite = NULL;

	if ( ! pFnAcceptFriendInvite )
		pFnAcceptFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 23863 ];

	UOnlinePlayerInterface_execAcceptFriendInvite_Parms AcceptFriendInvite_Parms;
	AcceptFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnAcceptFriendInvite, &AcceptFriendInvite_Parms, NULL );

	return AcceptFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnClearAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnClearAddFriendByNameCompleteDelegate )
		pFnClearAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23860 ];

	UOnlinePlayerInterface_execClearAddFriendByNameCompleteDelegate_Parms ClearAddFriendByNameCompleteDelegate_Parms;
	ClearAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0xC );

	this->ProcessEvent ( pFnClearAddFriendByNameCompleteDelegate, &ClearAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnAddAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnAddAddFriendByNameCompleteDelegate )
		pFnAddAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23857 ];

	UOnlinePlayerInterface_execAddAddFriendByNameCompleteDelegate_Parms AddAddFriendByNameCompleteDelegate_Parms;
	AddAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0xC );

	this->ProcessEvent ( pFnAddAddFriendByNameCompleteDelegate, &AddAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnAddFriendByNameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnAddFriendByNameComplete = NULL;

	if ( ! pFnOnAddFriendByNameComplete )
		pFnOnAddFriendByNameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23855 ];

	UOnlinePlayerInterface_execOnAddFriendByNameComplete_Parms OnAddFriendByNameComplete_Parms;
	OnAddFriendByNameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnAddFriendByNameComplete, &OnAddFriendByNameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendByName
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 FriendName                     ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message )
{
	static UFunction* pFnAddFriendByName = NULL;

	if ( ! pFnAddFriendByName )
		pFnAddFriendByName = (UFunction*) UObject::GObjObjects()->Data[ 23850 ];

	UOnlinePlayerInterface_execAddFriendByName_Parms AddFriendByName_Parms;
	AddFriendByName_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendByName_Parms.FriendName, &FriendName, 0xC );
	memcpy ( &AddFriendByName_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriendByName, &AddFriendByName_Parms, NULL );

	return AddFriendByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AddFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            NewFriend                      ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = (UFunction*) UObject::GObjObjects()->Data[ 23845 ];

	UOnlinePlayerInterface_execAddFriend_Parms AddFriend_Parms;
	AddFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriend_Parms.NewFriend, &NewFriend, 0x8 );
	memcpy ( &AddFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );

	return AddFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// [0x00420000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  bWasCanceled                   ( CPF_Parm | CPF_OutParm )

struct FString UOnlinePlayerInterface::GetKeyboardInputResults ( unsigned char* bWasCanceled )
{
	static UFunction* pFnGetKeyboardInputResults = NULL;

	if ( ! pFnGetKeyboardInputResults )
		pFnGetKeyboardInputResults = (UFunction*) UObject::GObjObjects()->Data[ 23842 ];

	UOnlinePlayerInterface_execGetKeyboardInputResults_Parms GetKeyboardInputResults_Parms;

	this->ProcessEvent ( pFnGetKeyboardInputResults, &GetKeyboardInputResults_Parms, NULL );

	if ( bWasCanceled )
		*bWasCanceled = GetKeyboardInputResults_Parms.bWasCanceled;

	return GetKeyboardInputResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm )

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnClearKeyboardInputDoneDelegate = NULL;

	if ( ! pFnClearKeyboardInputDoneDelegate )
		pFnClearKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23840 ];

	UOnlinePlayerInterface_execClearKeyboardInputDoneDelegate_Parms ClearKeyboardInputDoneDelegate_Parms;
	memcpy ( &ClearKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0xC );

	this->ProcessEvent ( pFnClearKeyboardInputDoneDelegate, &ClearKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm )

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnAddKeyboardInputDoneDelegate = NULL;

	if ( ! pFnAddKeyboardInputDoneDelegate )
		pFnAddKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23838 ];

	UOnlinePlayerInterface_execAddKeyboardInputDoneDelegate_Parms AddKeyboardInputDoneDelegate_Parms;
	memcpy ( &AddKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0xC );

	this->ProcessEvent ( pFnAddKeyboardInputDoneDelegate, &AddKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnKeyboardInputComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnKeyboardInputComplete = NULL;

	if ( ! pFnOnKeyboardInputComplete )
		pFnOnKeyboardInputComplete = (UFunction*) UObject::GObjObjects()->Data[ 23836 ];

	UOnlinePlayerInterface_execOnKeyboardInputComplete_Parms OnKeyboardInputComplete_Parms;
	OnKeyboardInputComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnKeyboardInputComplete, &OnKeyboardInputComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 TitleText                      ( CPF_Parm )
// struct FString                 DescriptionText                ( CPF_Parm )
// unsigned long                  bIsPassword                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldValidate                ( CPF_OptionalParm | CPF_Parm )
// struct FString                 DefaultText                    ( CPF_OptionalParm | CPF_Parm )
// int                            MaxResultLength                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength )
{
	static UFunction* pFnShowKeyboardUI = NULL;

	if ( ! pFnShowKeyboardUI )
		pFnShowKeyboardUI = (UFunction*) UObject::GObjObjects()->Data[ 23827 ];

	UOnlinePlayerInterface_execShowKeyboardUI_Parms ShowKeyboardUI_Parms;
	ShowKeyboardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowKeyboardUI_Parms.TitleText, &TitleText, 0xC );
	memcpy ( &ShowKeyboardUI_Parms.DescriptionText, &DescriptionText, 0xC );
	ShowKeyboardUI_Parms.bIsPassword = bIsPassword;
	ShowKeyboardUI_Parms.bShouldValidate = bShouldValidate;
	memcpy ( &ShowKeyboardUI_Parms.DefaultText, &DefaultText, 0xC );
	ShowKeyboardUI_Parms.MaxResultLength = MaxResultLength;

	this->ProcessEvent ( pFnShowKeyboardUI, &ShowKeyboardUI_Parms, NULL );

	return ShowKeyboardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            StatusId                       ( CPF_Parm )
// TArray< struct FLocalizedStringSetting > LocalizedStringSettings        ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< struct FSettingsProperty > Properties                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlinePlayerInterface::SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties )
{
	static UFunction* pFnSetOnlineStatus = NULL;

	if ( ! pFnSetOnlineStatus )
		pFnSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 23820 ];

	UOnlinePlayerInterface_execSetOnlineStatus_Parms SetOnlineStatus_Parms;
	SetOnlineStatus_Parms.LocalUserNum = LocalUserNum;
	SetOnlineStatus_Parms.StatusId = StatusId;

	this->ProcessEvent ( pFnSetOnlineStatus, &SetOnlineStatus_Parms, NULL );

	if ( LocalizedStringSettings )
		memcpy ( LocalizedStringSettings, &SetOnlineStatus_Parms.LocalizedStringSettings, 0xC );

	if ( Properties )
		memcpy ( Properties, &SetOnlineStatus_Parms.Properties, 0xC );
};

// Function Engine.OnlinePlayerInterface.GetFriendsList
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Parm | CPF_OutParm )

unsigned char UOnlinePlayerInterface::GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnGetFriendsList = NULL;

	if ( ! pFnGetFriendsList )
		pFnGetFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 23813 ];

	UOnlinePlayerInterface_execGetFriendsList_Parms GetFriendsList_Parms;
	GetFriendsList_Parms.LocalUserNum = LocalUserNum;
	GetFriendsList_Parms.Count = Count;
	GetFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnGetFriendsList, &GetFriendsList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &GetFriendsList_Parms.Friends, 0xC );

	return GetFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm )

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsCompleteDelegate )
		pFnClearReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23810 ];

	UOnlinePlayerInterface_execClearReadFriendsCompleteDelegate_Parms ClearReadFriendsCompleteDelegate_Parms;
	ClearReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadFriendsCompleteDelegate, &ClearReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm )

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsCompleteDelegate )
		pFnAddReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23807 ];

	UOnlinePlayerInterface_execAddReadFriendsCompleteDelegate_Parms AddReadFriendsCompleteDelegate_Parms;
	AddReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadFriendsCompleteDelegate, &AddReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadFriendsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsComplete = NULL;

	if ( ! pFnOnReadFriendsComplete )
		pFnOnReadFriendsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23805 ];

	UOnlinePlayerInterface_execOnReadFriendsComplete_Parms OnReadFriendsComplete_Parms;
	OnReadFriendsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsComplete, &OnReadFriendsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadFriendsList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt )
{
	static UFunction* pFnReadFriendsList = NULL;

	if ( ! pFnReadFriendsList )
		pFnReadFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 23800 ];

	UOnlinePlayerInterface_execReadFriendsList_Parms ReadFriendsList_Parms;
	ReadFriendsList_Parms.LocalUserNum = LocalUserNum;
	ReadFriendsList_Parms.Count = Count;
	ReadFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnReadFriendsList, &ReadFriendsList_Parms, NULL );

	return ReadFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearWriteProfileSettingsCompleteDelegate )
		pFnClearWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23797 ];

	UOnlinePlayerInterface_execClearWriteProfileSettingsCompleteDelegate_Parms ClearWriteProfileSettingsCompleteDelegate_Parms;
	ClearWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearWriteProfileSettingsCompleteDelegate, &ClearWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddWriteProfileSettingsCompleteDelegate )
		pFnAddWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23794 ];

	UOnlinePlayerInterface_execAddWriteProfileSettingsCompleteDelegate_Parms AddWriteProfileSettingsCompleteDelegate_Parms;
	AddWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddWriteProfileSettingsCompleteDelegate, &AddWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWriteProfileSettingsComplete = NULL;

	if ( ! pFnOnWriteProfileSettingsComplete )
		pFnOnWriteProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23791 ];

	UOnlinePlayerInterface_execOnWriteProfileSettingsComplete_Parms OnWriteProfileSettingsComplete_Parms;
	OnWriteProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnWriteProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWriteProfileSettingsComplete, &OnWriteProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnWriteProfileSettings = NULL;

	if ( ! pFnWriteProfileSettings )
		pFnWriteProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 23787 ];

	UOnlinePlayerInterface_execWriteProfileSettings_Parms WriteProfileSettings_Parms;
	WriteProfileSettings_Parms.LocalUserNum = LocalUserNum;
	WriteProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnWriteProfileSettings, &WriteProfileSettings_Parms, NULL );

	return WriteProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetProfileSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetProfileSettings = NULL;

	if ( ! pFnGetProfileSettings )
		pFnGetProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 23784 ];

	UOnlinePlayerInterface_execGetProfileSettings_Parms GetProfileSettings_Parms;
	GetProfileSettings_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetProfileSettings, &GetProfileSettings_Parms, NULL );

	return GetProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearReadProfileSettingsCompleteDelegate )
		pFnClearReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23781 ];

	UOnlinePlayerInterface_execClearReadProfileSettingsCompleteDelegate_Parms ClearReadProfileSettingsCompleteDelegate_Parms;
	ClearReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadProfileSettingsCompleteDelegate, &ClearReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddReadProfileSettingsCompleteDelegate )
		pFnAddReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23778 ];

	UOnlinePlayerInterface_execAddReadProfileSettingsCompleteDelegate_Parms AddReadProfileSettingsCompleteDelegate_Parms;
	AddReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadProfileSettingsCompleteDelegate, &AddReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23775 ];

	UOnlinePlayerInterface_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;
	OnReadProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnReadProfileSettings = NULL;

	if ( ! pFnReadProfileSettings )
		pFnReadProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 23771 ];

	UOnlinePlayerInterface_execReadProfileSettings_Parms ReadProfileSettings_Parms;
	ReadProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ReadProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnReadProfileSettings, &ReadProfileSettings_Parms, NULL );

	return ReadProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm )

void UOnlinePlayerInterface::ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnClearFriendsChangeDelegate = NULL;

	if ( ! pFnClearFriendsChangeDelegate )
		pFnClearFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23768 ];

	UOnlinePlayerInterface_execClearFriendsChangeDelegate_Parms ClearFriendsChangeDelegate_Parms;
	ClearFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendsChangeDelegate, &ClearFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm )

void UOnlinePlayerInterface::AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnAddFriendsChangeDelegate = NULL;

	if ( ! pFnAddFriendsChangeDelegate )
		pFnAddFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23765 ];

	UOnlinePlayerInterface_execAddFriendsChangeDelegate_Parms AddFriendsChangeDelegate_Parms;
	AddFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendsChangeDelegate, &AddFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnClearMutingChangeDelegate = NULL;

	if ( ! pFnClearMutingChangeDelegate )
		pFnClearMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23763 ];

	UOnlinePlayerInterface_execClearMutingChangeDelegate_Parms ClearMutingChangeDelegate_Parms;
	memcpy ( &ClearMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0xC );

	this->ProcessEvent ( pFnClearMutingChangeDelegate, &ClearMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnAddMutingChangeDelegate = NULL;

	if ( ! pFnAddMutingChangeDelegate )
		pFnAddMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23761 ];

	UOnlinePlayerInterface_execAddMutingChangeDelegate_Parms AddMutingChangeDelegate_Parms;
	memcpy ( &AddMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0xC );

	this->ProcessEvent ( pFnAddMutingChangeDelegate, &AddMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm )

void UOnlinePlayerInterface::ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnClearLoginCancelledDelegate = NULL;

	if ( ! pFnClearLoginCancelledDelegate )
		pFnClearLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23759 ];

	UOnlinePlayerInterface_execClearLoginCancelledDelegate_Parms ClearLoginCancelledDelegate_Parms;
	memcpy ( &ClearLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0xC );

	this->ProcessEvent ( pFnClearLoginCancelledDelegate, &ClearLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm )

void UOnlinePlayerInterface::AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnAddLoginCancelledDelegate = NULL;

	if ( ! pFnAddLoginCancelledDelegate )
		pFnAddLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23757 ];

	UOnlinePlayerInterface_execAddLoginCancelledDelegate_Parms AddLoginCancelledDelegate_Parms;
	memcpy ( &AddLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0xC );

	this->ProcessEvent ( pFnAddLoginCancelledDelegate, &AddLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlinePlayerInterface::ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearLoginChangeDelegate = NULL;

	if ( ! pFnClearLoginChangeDelegate )
		pFnClearLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23754 ];

	UOnlinePlayerInterface_execClearLoginChangeDelegate_Parms ClearLoginChangeDelegate_Parms;
	memcpy ( &ClearLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );
	ClearLoginChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearLoginChangeDelegate, &ClearLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlinePlayerInterface::AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddLoginChangeDelegate = NULL;

	if ( ! pFnAddLoginChangeDelegate )
		pFnAddLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23751 ];

	UOnlinePlayerInterface_execAddLoginChangeDelegate_Parms AddLoginChangeDelegate_Parms;
	memcpy ( &AddLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );
	AddLoginChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddLoginChangeDelegate, &AddLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::ShowFriendsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowFriendsUI = NULL;

	if ( ! pFnShowFriendsUI )
		pFnShowFriendsUI = (UFunction*) UObject::GObjObjects()->Data[ 23748 ];

	UOnlinePlayerInterface_execShowFriendsUI_Parms ShowFriendsUI_Parms;
	ShowFriendsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowFriendsUI, &ShowFriendsUI_Parms, NULL );

	return ShowFriendsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsMuted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsMuted = NULL;

	if ( ! pFnIsMuted )
		pFnIsMuted = (UFunction*) UObject::GObjObjects()->Data[ 23744 ];

	UOnlinePlayerInterface_execIsMuted_Parms IsMuted_Parms;
	IsMuted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsMuted_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsMuted, &IsMuted_Parms, NULL );

	return IsMuted_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AreAnyFriends
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FFriendsQuery > Query                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query )
{
	static UFunction* pFnAreAnyFriends = NULL;

	if ( ! pFnAreAnyFriends )
		pFnAreAnyFriends = (UFunction*) UObject::GObjObjects()->Data[ 23739 ];

	UOnlinePlayerInterface_execAreAnyFriends_Parms AreAnyFriends_Parms;
	AreAnyFriends_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAreAnyFriends, &AreAnyFriends_Parms, NULL );

	if ( Query )
		memcpy ( Query, &AreAnyFriends_Parms.Query, 0xC );

	return AreAnyFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsFriend = NULL;

	if ( ! pFnIsFriend )
		pFnIsFriend = (UFunction*) UObject::GObjObjects()->Data[ 23735 ];

	UOnlinePlayerInterface_execIsFriend_Parms IsFriend_Parms;
	IsFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsFriend_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsFriend, &IsFriend_Parms, NULL );

	return IsFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanShowPresenceInformation ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanShowPresenceInformation = NULL;

	if ( ! pFnCanShowPresenceInformation )
		pFnCanShowPresenceInformation = (UFunction*) UObject::GObjObjects()->Data[ 23732 ];

	UOnlinePlayerInterface_execCanShowPresenceInformation_Parms CanShowPresenceInformation_Parms;
	CanShowPresenceInformation_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanShowPresenceInformation, &CanShowPresenceInformation_Parms, NULL );

	return CanShowPresenceInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanViewPlayerProfiles ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanViewPlayerProfiles = NULL;

	if ( ! pFnCanViewPlayerProfiles )
		pFnCanViewPlayerProfiles = (UFunction*) UObject::GObjObjects()->Data[ 23729 ];

	UOnlinePlayerInterface_execCanViewPlayerProfiles_Parms CanViewPlayerProfiles_Parms;
	CanViewPlayerProfiles_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanViewPlayerProfiles, &CanViewPlayerProfiles_Parms, NULL );

	return CanViewPlayerProfiles_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPurchaseContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPurchaseContent = NULL;

	if ( ! pFnCanPurchaseContent )
		pFnCanPurchaseContent = (UFunction*) UObject::GObjObjects()->Data[ 23726 ];

	UOnlinePlayerInterface_execCanPurchaseContent_Parms CanPurchaseContent_Parms;
	CanPurchaseContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPurchaseContent, &CanPurchaseContent_Parms, NULL );

	return CanPurchaseContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanDownloadUserContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanDownloadUserContent = NULL;

	if ( ! pFnCanDownloadUserContent )
		pFnCanDownloadUserContent = (UFunction*) UObject::GObjObjects()->Data[ 23723 ];

	UOnlinePlayerInterface_execCanDownloadUserContent_Parms CanDownloadUserContent_Parms;
	CanDownloadUserContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanDownloadUserContent, &CanDownloadUserContent_Parms, NULL );

	return CanDownloadUserContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicate
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanCommunicate ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 23720 ];

	UOnlinePlayerInterface_execCanCommunicate_Parms CanCommunicate_Parms;
	CanCommunicate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPlayOnline
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPlayOnline ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 23717 ];

	UOnlinePlayerInterface_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlinePlayerInterface::GetPlayerNickname ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerNickname = NULL;

	if ( ! pFnGetPlayerNickname )
		pFnGetPlayerNickname = (UFunction*) UObject::GObjObjects()->Data[ 23714 ];

	UOnlinePlayerInterface_execGetPlayerNickname_Parms GetPlayerNickname_Parms;
	GetPlayerNickname_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerNickname, &GetPlayerNickname_Parms, NULL );

	return GetPlayerNickname_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnGetUniquePlayerId = NULL;

	if ( ! pFnGetUniquePlayerId )
		pFnGetUniquePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 23710 ];

	UOnlinePlayerInterface_execGetUniquePlayerId_Parms GetUniquePlayerId_Parms;
	GetUniquePlayerId_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetUniquePlayerId, &GetUniquePlayerId_Parms, NULL );

	if ( PlayerID )
		memcpy ( PlayerID, &GetUniquePlayerId_Parms.PlayerID, 0x8 );

	return GetUniquePlayerId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetLoginStatus
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::GetLoginStatus ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 23707 ];

	UOnlinePlayerInterface_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnClearLogoutCompletedDelegate = NULL;

	if ( ! pFnClearLogoutCompletedDelegate )
		pFnClearLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23704 ];

	UOnlinePlayerInterface_execClearLogoutCompletedDelegate_Parms ClearLogoutCompletedDelegate_Parms;
	ClearLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0xC );

	this->ProcessEvent ( pFnClearLogoutCompletedDelegate, &ClearLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm )

void UOnlinePlayerInterface::AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnAddLogoutCompletedDelegate = NULL;

	if ( ! pFnAddLogoutCompletedDelegate )
		pFnAddLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23701 ];

	UOnlinePlayerInterface_execAddLogoutCompletedDelegate_Parms AddLogoutCompletedDelegate_Parms;
	AddLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0xC );

	this->ProcessEvent ( pFnAddLogoutCompletedDelegate, &AddLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnLogoutCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnLogoutCompleted = NULL;

	if ( ! pFnOnLogoutCompleted )
		pFnOnLogoutCompleted = (UFunction*) UObject::GObjObjects()->Data[ 23699 ];

	UOnlinePlayerInterface_execOnLogoutCompleted_Parms OnLogoutCompleted_Parms;
	OnLogoutCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnLogoutCompleted, &OnLogoutCompleted_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.Logout
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::Logout ( unsigned char LocalUserNum )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 23696 ];

	UOnlinePlayerInterface_execLogout_Parms Logout_Parms;
	Logout_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );

	return Logout_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm )

void UOnlinePlayerInterface::ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginFailedDelegate = NULL;

	if ( ! pFnClearLoginFailedDelegate )
		pFnClearLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23693 ];

	UOnlinePlayerInterface_execClearLoginFailedDelegate_Parms ClearLoginFailedDelegate_Parms;
	ClearLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );

	this->ProcessEvent ( pFnClearLoginFailedDelegate, &ClearLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm )

void UOnlinePlayerInterface::AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginFailedDelegate = NULL;

	if ( ! pFnAddLoginFailedDelegate )
		pFnAddLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23690 ];

	UOnlinePlayerInterface_execAddLoginFailedDelegate_Parms AddLoginFailedDelegate_Parms;
	AddLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );

	this->ProcessEvent ( pFnAddLoginFailedDelegate, &AddLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginFailed
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 23687 ];

	UOnlinePlayerInterface_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AutoLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::AutoLogin ( )
{
	static UFunction* pFnAutoLogin = NULL;

	if ( ! pFnAutoLogin )
		pFnAutoLogin = (UFunction*) UObject::GObjObjects()->Data[ 23685 ];

	UOnlinePlayerInterface_execAutoLogin_Parms AutoLogin_Parms;

	this->ProcessEvent ( pFnAutoLogin, &AutoLogin_Parms, NULL );

	return AutoLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.Login
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 LoginName                      ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm )
// unsigned long                  bWantsLocalOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 23679 ];

	UOnlinePlayerInterface_execLogin_Parms Login_Parms;
	Login_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &Login_Parms.LoginName, &LoginName, 0xC );
	memcpy ( &Login_Parms.Password, &Password, 0xC );
	Login_Parms.bWantsLocalOnly = bWantsLocalOnly;

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	return Login_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bShowOnlineOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowLoginUI ( unsigned long bShowOnlineOnly )
{
	static UFunction* pFnShowLoginUI = NULL;

	if ( ! pFnShowLoginUI )
		pFnShowLoginUI = (UFunction*) UObject::GObjObjects()->Data[ 23676 ];

	UOnlinePlayerInterface_execShowLoginUI_Parms ShowLoginUI_Parms;
	ShowLoginUI_Parms.bShowOnlineOnly = bShowOnlineOnly;

	this->ProcessEvent ( pFnShowLoginUI, &ShowLoginUI_Parms, NULL );

	return ShowLoginUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.OnFriendsChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnFriendsChange ( )
{
	static UFunction* pFnOnFriendsChange = NULL;

	if ( ! pFnOnFriendsChange )
		pFnOnFriendsChange = (UFunction*) UObject::GObjObjects()->Data[ 23675 ];

	UOnlinePlayerInterface_execOnFriendsChange_Parms OnFriendsChange_Parms;

	this->ProcessEvent ( pFnOnFriendsChange, &OnFriendsChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnMutingChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnMutingChange ( )
{
	static UFunction* pFnOnMutingChange = NULL;

	if ( ! pFnOnMutingChange )
		pFnOnMutingChange = (UFunction*) UObject::GObjObjects()->Data[ 23674 ];

	UOnlinePlayerInterface_execOnMutingChange_Parms OnMutingChange_Parms;

	this->ProcessEvent ( pFnOnMutingChange, &OnMutingChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = (UFunction*) UObject::GObjObjects()->Data[ 23673 ];

	UOnlinePlayerInterface_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 23657 ];

	UOnlinePlayerInterface_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.DebugCameraController.DisableDebugCamera
// [0x00020002] 
// Parameters infos:

void ADebugCameraController::DisableDebugCamera ( )
{
	static UFunction* pFnDisableDebugCamera = NULL;

	if ( ! pFnDisableDebugCamera )
		pFnDisableDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 17701 ];

	ADebugCameraController_execDisableDebugCamera_Parms DisableDebugCamera_Parms;

	this->ProcessEvent ( pFnDisableDebugCamera, &DisableDebugCamera_Parms, NULL );
};

// Function Engine.DebugCameraController.NormalSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::NormalSpeed ( )
{
	static UFunction* pFnNormalSpeed = NULL;

	if ( ! pFnNormalSpeed )
		pFnNormalSpeed = (UFunction*) UObject::GObjObjects()->Data[ 17700 ];

	ADebugCameraController_execNormalSpeed_Parms NormalSpeed_Parms;

	this->ProcessEvent ( pFnNormalSpeed, &NormalSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.MoreSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::MoreSpeed ( )
{
	static UFunction* pFnMoreSpeed = NULL;

	if ( ! pFnMoreSpeed )
		pFnMoreSpeed = (UFunction*) UObject::GObjObjects()->Data[ 17699 ];

	ADebugCameraController_execMoreSpeed_Parms MoreSpeed_Parms;

	this->ProcessEvent ( pFnMoreSpeed, &MoreSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.SetFreezeRendering
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::SetFreezeRendering ( )
{
	static UFunction* pFnSetFreezeRendering = NULL;

	if ( ! pFnSetFreezeRendering )
		pFnSetFreezeRendering = (UFunction*) UObject::GObjObjects()->Data[ 17698 ];

	ADebugCameraController_execSetFreezeRendering_Parms SetFreezeRendering_Parms;

	this->ProcessEvent ( pFnSetFreezeRendering, &SetFreezeRendering_Parms, NULL );
};

// Function Engine.DebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnDeactivate ( class APlayerController* PC )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 17696 ];

	ADebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.DebugCameraController.OnActivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnActivate ( class APlayerController* PC )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = (UFunction*) UObject::GObjObjects()->Data[ 17694 ];

	ADebugCameraController_execOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.DebugCameraController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 17693 ];

	ADebugCameraController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleCinematicMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28599 ];

	USeqAct_ToggleCinematicMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.RecalculateSkillRating
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 23340 ];

	UOnlineGameInterface_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;
	memcpy ( &RecalculateSkillRating_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RecalculateSkillRating_Parms.Players, 0xC );

	return RecalculateSkillRating_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.AcceptGameInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName )
{
	static UFunction* pFnAcceptGameInvite = NULL;

	if ( ! pFnAcceptGameInvite )
		pFnAcceptGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 23336 ];

	UOnlineGameInterface_execAcceptGameInvite_Parms AcceptGameInvite_Parms;
	AcceptGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptGameInvite_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnAcceptGameInvite, &AcceptGameInvite_Parms, NULL );

	return AcceptGameInvite_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm )

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnClearGameInviteAcceptedDelegate = NULL;

	if ( ! pFnClearGameInviteAcceptedDelegate )
		pFnClearGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23333 ];

	UOnlineGameInterface_execClearGameInviteAcceptedDelegate_Parms ClearGameInviteAcceptedDelegate_Parms;
	ClearGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0xC );

	this->ProcessEvent ( pFnClearGameInviteAcceptedDelegate, &ClearGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm )

void UOnlineGameInterface::AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnAddGameInviteAcceptedDelegate = NULL;

	if ( ! pFnAddGameInviteAcceptedDelegate )
		pFnAddGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23330 ];

	UOnlineGameInterface_execAddGameInviteAcceptedDelegate_Parms AddGameInviteAcceptedDelegate_Parms;
	AddGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0xC );

	this->ProcessEvent ( pFnAddGameInviteAcceptedDelegate, &AddGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// [0x00120000] 
// Parameters infos:
// class UOnlineGameSettings*     GameInviteSettings             ( CPF_Parm )

void UOnlineGameInterface::OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 23328 ];

	UOnlineGameInterface_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	OnGameInviteAccepted_Parms.GameInviteSettings = GameInviteSettings;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );
};

// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// [0x00020000] 
// Parameters infos:
// TArray< struct FOnlineArbitrationRegistrant > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

TArray< struct FOnlineArbitrationRegistrant > UOnlineGameInterface::GetArbitratedPlayers ( struct FName SessionName )
{
	static UFunction* pFnGetArbitratedPlayers = NULL;

	if ( ! pFnGetArbitratedPlayers )
		pFnGetArbitratedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 23324 ];

	UOnlineGameInterface_execGetArbitratedPlayers_Parms GetArbitratedPlayers_Parms;
	memcpy ( &GetArbitratedPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetArbitratedPlayers, &GetArbitratedPlayers_Parms, NULL );

	return GetArbitratedPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnClearArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnClearArbitrationRegistrationCompleteDelegate )
		pFnClearArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23322 ];

	UOnlineGameInterface_execClearArbitrationRegistrationCompleteDelegate_Parms ClearArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &ClearArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearArbitrationRegistrationCompleteDelegate, &ClearArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnAddArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnAddArbitrationRegistrationCompleteDelegate )
		pFnAddArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23320 ];

	UOnlineGameInterface_execAddArbitrationRegistrationCompleteDelegate_Parms AddArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &AddArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddArbitrationRegistrationCompleteDelegate, &AddArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegistrationComplete = NULL;

	if ( ! pFnOnArbitrationRegistrationComplete )
		pFnOnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 23317 ];

	UOnlineGameInterface_execOnArbitrationRegistrationComplete_Parms OnArbitrationRegistrationComplete_Parms;
	memcpy ( &OnArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegistrationComplete, &OnArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterForArbitration
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterForArbitration ( struct FName SessionName )
{
	static UFunction* pFnRegisterForArbitration = NULL;

	if ( ! pFnRegisterForArbitration )
		pFnRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 23314 ];

	UOnlineGameInterface_execRegisterForArbitration_Parms RegisterForArbitration_Parms;
	memcpy ( &RegisterForArbitration_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRegisterForArbitration, &RegisterForArbitration_Parms, NULL );

	return RegisterForArbitration_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm )

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearEndOnlineGameCompleteDelegate )
		pFnClearEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23312 ];

	UOnlineGameInterface_execClearEndOnlineGameCompleteDelegate_Parms ClearEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearEndOnlineGameCompleteDelegate, &ClearEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm )

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddEndOnlineGameCompleteDelegate )
		pFnAddEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23310 ];

	UOnlineGameInterface_execAddEndOnlineGameCompleteDelegate_Parms AddEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddEndOnlineGameCompleteDelegate, &AddEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndOnlineGameComplete = NULL;

	if ( ! pFnOnEndOnlineGameComplete )
		pFnOnEndOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23307 ];

	UOnlineGameInterface_execOnEndOnlineGameComplete_Parms OnEndOnlineGameComplete_Parms;
	memcpy ( &OnEndOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndOnlineGameComplete, &OnEndOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.EndOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::EndOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23304 ];

	UOnlineGameInterface_execEndOnlineGame_Parms EndOnlineGame_Parms;
	memcpy ( &EndOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );

	return EndOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearStartOnlineGameCompleteDelegate )
		pFnClearStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23302 ];

	UOnlineGameInterface_execClearStartOnlineGameCompleteDelegate_Parms ClearStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearStartOnlineGameCompleteDelegate, &ClearStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddStartOnlineGameCompleteDelegate )
		pFnAddStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23300 ];

	UOnlineGameInterface_execAddStartOnlineGameCompleteDelegate_Parms AddStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddStartOnlineGameCompleteDelegate, &AddStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23297 ];

	UOnlineGameInterface_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.StartOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::StartOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23294 ];

	UOnlineGameInterface_execStartOnlineGame_Parms StartOnlineGame_Parms;
	memcpy ( &StartOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );

	return StartOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearUnregisterPlayerCompleteDelegate )
		pFnClearUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23292 ];

	UOnlineGameInterface_execClearUnregisterPlayerCompleteDelegate_Parms ClearUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUnregisterPlayerCompleteDelegate, &ClearUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddUnregisterPlayerCompleteDelegate )
		pFnAddUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23290 ];

	UOnlineGameInterface_execAddUnregisterPlayerCompleteDelegate_Parms AddUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUnregisterPlayerCompleteDelegate, &AddUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUnregisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerComplete = NULL;

	if ( ! pFnOnUnregisterPlayerComplete )
		pFnOnUnregisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 23287 ];

	UOnlineGameInterface_execOnUnregisterPlayerComplete_Parms OnUnregisterPlayerComplete_Parms;
	memcpy ( &OnUnregisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUnregisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerComplete, &OnUnregisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UnregisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineGameInterface::UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 23283 ];

	UOnlineGameInterface_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	memcpy ( &UnregisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &UnregisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );

	return UnregisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearRegisterPlayerCompleteDelegate )
		pFnClearRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23281 ];

	UOnlineGameInterface_execClearRegisterPlayerCompleteDelegate_Parms ClearRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearRegisterPlayerCompleteDelegate, &ClearRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddRegisterPlayerCompleteDelegate )
		pFnAddRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23279 ];

	UOnlineGameInterface_execAddRegisterPlayerCompleteDelegate_Parms AddRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddRegisterPlayerCompleteDelegate, &AddRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnRegisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterPlayerComplete = NULL;

	if ( ! pFnOnRegisterPlayerComplete )
		pFnOnRegisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 23276 ];

	UOnlineGameInterface_execOnRegisterPlayerComplete_Parms OnRegisterPlayerComplete_Parms;
	memcpy ( &OnRegisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	OnRegisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterPlayerComplete, &OnRegisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited )
{
	static UFunction* pFnRegisterPlayer = NULL;

	if ( ! pFnRegisterPlayer )
		pFnRegisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 23271 ];

	UOnlineGameInterface_execRegisterPlayer_Parms RegisterPlayer_Parms;
	memcpy ( &RegisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &RegisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	RegisterPlayer_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnRegisterPlayer, &RegisterPlayer_Parms, NULL );

	return RegisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetResolvedConnectString
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FString                 ConnectInfo                    ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo )
{
	static UFunction* pFnGetResolvedConnectString = NULL;

	if ( ! pFnGetResolvedConnectString )
		pFnGetResolvedConnectString = (UFunction*) UObject::GObjObjects()->Data[ 23267 ];

	UOnlineGameInterface_execGetResolvedConnectString_Parms GetResolvedConnectString_Parms;
	memcpy ( &GetResolvedConnectString_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetResolvedConnectString, &GetResolvedConnectString_Parms, NULL );

	if ( ConnectInfo )
		memcpy ( ConnectInfo, &GetResolvedConnectString_Parms.ConnectInfo, 0xC );

	return GetResolvedConnectString_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinOnlineGameCompleteDelegate )
		pFnClearJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23265 ];

	UOnlineGameInterface_execClearJoinOnlineGameCompleteDelegate_Parms ClearJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearJoinOnlineGameCompleteDelegate, &ClearJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinOnlineGameCompleteDelegate )
		pFnAddJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23263 ];

	UOnlineGameInterface_execAddJoinOnlineGameCompleteDelegate_Parms AddJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddJoinOnlineGameCompleteDelegate, &AddJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinOnlineGameComplete = NULL;

	if ( ! pFnOnJoinOnlineGameComplete )
		pFnOnJoinOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23260 ];

	UOnlineGameInterface_execOnJoinOnlineGameComplete_Parms OnJoinOnlineGameComplete_Parms;
	memcpy ( &OnJoinOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinOnlineGameComplete, &OnJoinOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.JoinOnlineGame
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame )
{
	static UFunction* pFnJoinOnlineGame = NULL;

	if ( ! pFnJoinOnlineGame )
		pFnJoinOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23255 ];

	UOnlineGameInterface_execJoinOnlineGame_Parms JoinOnlineGame_Parms;
	JoinOnlineGame_Parms.PlayerNum = PlayerNum;
	memcpy ( &JoinOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnJoinOnlineGame, &JoinOnlineGame_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &JoinOnlineGame_Parms.DesiredGame, 0x8 );

	return JoinOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartAt                        ( CPF_Parm )
// int                            NumberToQuery                  ( CPF_Parm )

bool UOnlineGameInterface::QueryNonAdvertisedData ( int StartAt, int NumberToQuery )
{
	static UFunction* pFnQueryNonAdvertisedData = NULL;

	if ( ! pFnQueryNonAdvertisedData )
		pFnQueryNonAdvertisedData = (UFunction*) UObject::GObjObjects()->Data[ 23251 ];

	UOnlineGameInterface_execQueryNonAdvertisedData_Parms QueryNonAdvertisedData_Parms;
	QueryNonAdvertisedData_Parms.StartAt = StartAt;
	QueryNonAdvertisedData_Parms.NumberToQuery = NumberToQuery;

	this->ProcessEvent ( pFnQueryNonAdvertisedData, &QueryNonAdvertisedData_Parms, NULL );

	return QueryNonAdvertisedData_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.FreeSearchResults
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSearch*       Search                         ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::FreeSearchResults ( class UOnlineGameSearch* Search )
{
	static UFunction* pFnFreeSearchResults = NULL;

	if ( ! pFnFreeSearchResults )
		pFnFreeSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 23248 ];

	UOnlineGameInterface_execFreeSearchResults_Parms FreeSearchResults_Parms;
	FreeSearchResults_Parms.Search = Search;

	this->ProcessEvent ( pFnFreeSearchResults, &FreeSearchResults_Parms, NULL );

	return FreeSearchResults_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSearch
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch ( )
{
	static UFunction* pFnGetGameSearch = NULL;

	if ( ! pFnGetGameSearch )
		pFnGetGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 23246 ];

	UOnlineGameInterface_execGetGameSearch_Parms GetGameSearch_Parms;

	this->ProcessEvent ( pFnGetGameSearch, &GetGameSearch_Parms, NULL );

	return GetGameSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnBindPlatformSpecificSessionToSearch = NULL;

	if ( ! pFnBindPlatformSpecificSessionToSearch )
		pFnBindPlatformSpecificSessionToSearch = (UFunction*) UObject::GObjObjects()->Data[ 23241 ];

	UOnlineGameInterface_execBindPlatformSpecificSessionToSearch_Parms BindPlatformSpecificSessionToSearch_Parms;
	BindPlatformSpecificSessionToSearch_Parms.SearchingPlayerNum = SearchingPlayerNum;
	BindPlatformSpecificSessionToSearch_Parms.SearchSettings = SearchSettings;
	memcpy ( &BindPlatformSpecificSessionToSearch_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x44 );

	this->ProcessEvent ( pFnBindPlatformSpecificSessionToSearch, &BindPlatformSpecificSessionToSearch_Parms, NULL );

	return BindPlatformSpecificSessionToSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfoBySessionName = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfoBySessionName )
		pFnReadPlatformSpecificSessionInfoBySessionName = (UFunction*) UObject::GObjObjects()->Data[ 23237 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfoBySessionName_Parms ReadPlatformSpecificSessionInfoBySessionName_Parms;
	memcpy ( &ReadPlatformSpecificSessionInfoBySessionName_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfoBySessionName, &ReadPlatformSpecificSessionInfoBySessionName_Parms, NULL );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfoBySessionName_Parms.PlatformSpecificInfo, 0x44 );

	return ReadPlatformSpecificSessionInfoBySessionName_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfo = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfo )
		pFnReadPlatformSpecificSessionInfo = (UFunction*) UObject::GObjObjects()->Data[ 23233 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfo_Parms ReadPlatformSpecificSessionInfo_Parms;

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfo, &ReadPlatformSpecificSessionInfo_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &ReadPlatformSpecificSessionInfo_Parms.DesiredGame, 0x8 );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfo_Parms.PlatformSpecificInfo, 0x44 );

	return ReadPlatformSpecificSessionInfo_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearCancelFindOnlineGamesCompleteDelegate )
		pFnClearCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23231 ];

	UOnlineGameInterface_execClearCancelFindOnlineGamesCompleteDelegate_Parms ClearCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearCancelFindOnlineGamesCompleteDelegate, &ClearCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddCancelFindOnlineGamesCompleteDelegate )
		pFnAddCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23229 ];

	UOnlineGameInterface_execAddCancelFindOnlineGamesCompleteDelegate_Parms AddCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddCancelFindOnlineGamesCompleteDelegate, &AddCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelFindOnlineGamesComplete = NULL;

	if ( ! pFnOnCancelFindOnlineGamesComplete )
		pFnOnCancelFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 23227 ];

	UOnlineGameInterface_execOnCancelFindOnlineGamesComplete_Parms OnCancelFindOnlineGamesComplete_Parms;
	OnCancelFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelFindOnlineGamesComplete, &OnCancelFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineGameInterface::CancelFindOnlineGames ( )
{
	static UFunction* pFnCancelFindOnlineGames = NULL;

	if ( ! pFnCancelFindOnlineGames )
		pFnCancelFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 23225 ];

	UOnlineGameInterface_execCancelFindOnlineGames_Parms CancelFindOnlineGames_Parms;

	this->ProcessEvent ( pFnCancelFindOnlineGames, &CancelFindOnlineGames_Parms, NULL );

	return CancelFindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearFindOnlineGamesCompleteDelegate )
		pFnClearFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23223 ];

	UOnlineGameInterface_execClearFindOnlineGamesCompleteDelegate_Parms ClearFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFindOnlineGamesCompleteDelegate, &ClearFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddFindOnlineGamesCompleteDelegate )
		pFnAddFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23221 ];

	UOnlineGameInterface_execAddFindOnlineGamesCompleteDelegate_Parms AddFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFindOnlineGamesCompleteDelegate, &AddFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 23219 ];

	UOnlineGameInterface_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.FindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )

bool UOnlineGameInterface::FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings )
{
	static UFunction* pFnFindOnlineGames = NULL;

	if ( ! pFnFindOnlineGames )
		pFnFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 23215 ];

	UOnlineGameInterface_execFindOnlineGames_Parms FindOnlineGames_Parms;
	FindOnlineGames_Parms.SearchingPlayerNum = SearchingPlayerNum;
	FindOnlineGames_Parms.SearchSettings = SearchSettings;

	this->ProcessEvent ( pFnFindOnlineGames, &FindOnlineGames_Parms, NULL );

	return FindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearDestroyOnlineGameCompleteDelegate )
		pFnClearDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23213 ];

	UOnlineGameInterface_execClearDestroyOnlineGameCompleteDelegate_Parms ClearDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearDestroyOnlineGameCompleteDelegate, &ClearDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddDestroyOnlineGameCompleteDelegate )
		pFnAddDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23211 ];

	UOnlineGameInterface_execAddDestroyOnlineGameCompleteDelegate_Parms AddDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddDestroyOnlineGameCompleteDelegate, &AddDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23208 ];

	UOnlineGameInterface_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.DestroyOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::DestroyOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23205 ];

	UOnlineGameInterface_execDestroyOnlineGame_Parms DestroyOnlineGame_Parms;
	memcpy ( &DestroyOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );

	return DestroyOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings ( struct FName SessionName )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 23202 ];

	UOnlineGameInterface_execGetGameSettings_Parms GetGameSettings_Parms;
	memcpy ( &GetGameSettings_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearUpdateOnlineGameCompleteDelegate )
		pFnClearUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23200 ];

	UOnlineGameInterface_execClearUpdateOnlineGameCompleteDelegate_Parms ClearUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUpdateOnlineGameCompleteDelegate, &ClearUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddUpdateOnlineGameCompleteDelegate )
		pFnAddUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23198 ];

	UOnlineGameInterface_execAddUpdateOnlineGameCompleteDelegate_Parms AddUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUpdateOnlineGameCompleteDelegate, &AddUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUpdateOnlineGameComplete = NULL;

	if ( ! pFnOnUpdateOnlineGameComplete )
		pFnOnUpdateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23195 ];

	UOnlineGameInterface_execOnUpdateOnlineGameComplete_Parms OnUpdateOnlineGameComplete_Parms;
	memcpy ( &OnUpdateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUpdateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUpdateOnlineGameComplete, &OnUpdateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UpdateOnlineGame
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     UpdatedGameSettings            ( CPF_Parm )
// unsigned long                  bShouldRefreshOnlineData       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData )
{
	static UFunction* pFnUpdateOnlineGame = NULL;

	if ( ! pFnUpdateOnlineGame )
		pFnUpdateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23190 ];

	UOnlineGameInterface_execUpdateOnlineGame_Parms UpdateOnlineGame_Parms;
	memcpy ( &UpdateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	UpdateOnlineGame_Parms.UpdatedGameSettings = UpdatedGameSettings;
	UpdateOnlineGame_Parms.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	this->ProcessEvent ( pFnUpdateOnlineGame, &UpdateOnlineGame_Parms, NULL );

	return UpdateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearCreateOnlineGameCompleteDelegate )
		pFnClearCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23188 ];

	UOnlineGameInterface_execClearCreateOnlineGameCompleteDelegate_Parms ClearCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearCreateOnlineGameCompleteDelegate, &ClearCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm )

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddCreateOnlineGameCompleteDelegate )
		pFnAddCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23186 ];

	UOnlineGameInterface_execAddCreateOnlineGameCompleteDelegate_Parms AddCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddCreateOnlineGameCompleteDelegate, &AddCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCreateOnlineGameComplete = NULL;

	if ( ! pFnOnCreateOnlineGameComplete )
		pFnOnCreateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 23171 ];

	UOnlineGameInterface_execOnCreateOnlineGameComplete_Parms OnCreateOnlineGameComplete_Parms;
	memcpy ( &OnCreateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnCreateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCreateOnlineGameComplete, &OnCreateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CreateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  HostingPlayerNum               ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     NewGameSettings                ( CPF_Parm )

bool UOnlineGameInterface::CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 23166 ];

	UOnlineGameInterface_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.HostingPlayerNum = HostingPlayerNum;
	memcpy ( &CreateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	CreateOnlineGame_Parms.NewGameSettings = NewGameSettings;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );

	return CreateOnlineGame_Parms.ReturnValue;
};

// Function Engine.ScoreBoard.ChangeState
// [0x00020000] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void AScoreBoard::ChangeState ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeState = NULL;

	if ( ! pFnChangeState )
		pFnChangeState = (UFunction*) UObject::GObjObjects()->Data[ 28029 ];

	AScoreBoard_execChangeState_Parms ChangeState_Parms;
	ChangeState_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeState, &ChangeState_Parms, NULL );
};

// Function Engine.ScoreBoard.UpdateScoreBoard
// [0x00020000] 
// Parameters infos:

void AScoreBoard::UpdateScoreBoard ( )
{
	static UFunction* pFnUpdateScoreBoard = NULL;

	if ( ! pFnUpdateScoreBoard )
		pFnUpdateScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 28028 ];

	AScoreBoard_execUpdateScoreBoard_Parms UpdateScoreBoard_Parms;

	this->ProcessEvent ( pFnUpdateScoreBoard, &UpdateScoreBoard_Parms, NULL );
};

// Function Engine.ScoreBoard.UpdateGRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AScoreBoard::UpdateGRI ( )
{
	static UFunction* pFnUpdateGRI = NULL;

	if ( ! pFnUpdateGRI )
		pFnUpdateGRI = (UFunction*) UObject::GObjObjects()->Data[ 28026 ];

	AScoreBoard_execUpdateGRI_Parms UpdateGRI_Parms;

	this->ProcessEvent ( pFnUpdateGRI, &UpdateGRI_Parms, NULL );

	return UpdateGRI_Parms.ReturnValue;
};

// Function Engine.ScoreBoard.DrawHUD
// [0x00020002] 
// Parameters infos:

void AScoreBoard::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 28025 ];

	AScoreBoard_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveManualCoverTypeSlots = NULL;

	if ( ! pFnClientReceiveManualCoverTypeSlots )
		pFnClientReceiveManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 15283 ];

	ACoverReplicator_execClientReceiveManualCoverTypeSlots_Parms ClientReceiveManualCoverTypeSlots_Parms;
	ClientReceiveManualCoverTypeSlots_Parms.Index = Index;
	ClientReceiveManualCoverTypeSlots_Parms.Link = Link;
	ClientReceiveManualCoverTypeSlots_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveManualCoverTypeSlots_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveManualCoverTypeSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveManualCoverTypeSlots, &ClientReceiveManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// [0x00A200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendManualCoverTypeSlots ( int Index )
{
	static UFunction* pFnServerSendManualCoverTypeSlots = NULL;

	if ( ! pFnServerSendManualCoverTypeSlots )
		pFnServerSendManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 15276 ];

	ACoverReplicator_execServerSendManualCoverTypeSlots_Parms ServerSendManualCoverTypeSlots_Parms;
	ServerSendManualCoverTypeSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendManualCoverTypeSlots, &ServerSendManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NewCoverType                   ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverReplicator::NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifySetManualCoverTypeForSlots = NULL;

	if ( ! pFnNotifySetManualCoverTypeForSlots )
		pFnNotifySetManualCoverTypeForSlots = (UFunction*) UObject::GObjObjects()->Data[ 15267 ];

	ACoverReplicator_execNotifySetManualCoverTypeForSlots_Parms NotifySetManualCoverTypeForSlots_Parms;
	NotifySetManualCoverTypeForSlots_Parms.Link = Link;
	NotifySetManualCoverTypeForSlots_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnNotifySetManualCoverTypeForSlots, &NotifySetManualCoverTypeForSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifySetManualCoverTypeForSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone )
{
	static UFunction* pFnClientReceiveAdjustedSlots = NULL;

	if ( ! pFnClientReceiveAdjustedSlots )
		pFnClientReceiveAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 15260 ];

	ACoverReplicator_execClientReceiveAdjustedSlots_Parms ClientReceiveAdjustedSlots_Parms;
	ClientReceiveAdjustedSlots_Parms.Index = Index;
	ClientReceiveAdjustedSlots_Parms.Link = Link;
	ClientReceiveAdjustedSlots_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveAdjustedSlots_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveAdjustedSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveAdjustedSlots, &ClientReceiveAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendAdjustedSlots ( int Index )
{
	static UFunction* pFnServerSendAdjustedSlots = NULL;

	if ( ! pFnServerSendAdjustedSlots )
		pFnServerSendAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 15253 ];

	ACoverReplicator_execServerSendAdjustedSlots_Parms ServerSendAdjustedSlots_Parms;
	ServerSendAdjustedSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendAdjustedSlots, &ServerSendAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverReplicator::NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyAutoAdjustSlots = NULL;

	if ( ! pFnNotifyAutoAdjustSlots )
		pFnNotifyAutoAdjustSlots = (UFunction*) UObject::GObjObjects()->Data[ 15245 ];

	ACoverReplicator_execNotifyAutoAdjustSlots_Parms NotifyAutoAdjustSlots_Parms;
	NotifyAutoAdjustSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyAutoAdjustSlots, &NotifyAutoAdjustSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyAutoAdjustSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveDisabledSlots = NULL;

	if ( ! pFnClientReceiveDisabledSlots )
		pFnClientReceiveDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15238 ];

	ACoverReplicator_execClientReceiveDisabledSlots_Parms ClientReceiveDisabledSlots_Parms;
	ClientReceiveDisabledSlots_Parms.Index = Index;
	ClientReceiveDisabledSlots_Parms.Link = Link;
	ClientReceiveDisabledSlots_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveDisabledSlots_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveDisabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveDisabledSlots, &ClientReceiveDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendDisabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendDisabledSlots ( int Index )
{
	static UFunction* pFnServerSendDisabledSlots = NULL;

	if ( ! pFnServerSendDisabledSlots )
		pFnServerSendDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15231 ];

	ACoverReplicator_execServerSendDisabledSlots_Parms ServerSendDisabledSlots_Parms;
	ServerSendDisabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendDisabledSlots, &ServerSendDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyDisabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverReplicator::NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyDisabledSlots = NULL;

	if ( ! pFnNotifyDisabledSlots )
		pFnNotifyDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15223 ];

	ACoverReplicator_execNotifyDisabledSlots_Parms NotifyDisabledSlots_Parms;
	NotifyDisabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyDisabledSlots, &NotifyDisabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyDisabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveEnabledSlots = NULL;

	if ( ! pFnClientReceiveEnabledSlots )
		pFnClientReceiveEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15216 ];

	ACoverReplicator_execClientReceiveEnabledSlots_Parms ClientReceiveEnabledSlots_Parms;
	ClientReceiveEnabledSlots_Parms.Index = Index;
	ClientReceiveEnabledSlots_Parms.Link = Link;
	ClientReceiveEnabledSlots_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveEnabledSlots_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveEnabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveEnabledSlots, &ClientReceiveEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendEnabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendEnabledSlots ( int Index )
{
	static UFunction* pFnServerSendEnabledSlots = NULL;

	if ( ! pFnServerSendEnabledSlots )
		pFnServerSendEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15209 ];

	ACoverReplicator_execServerSendEnabledSlots_Parms ServerSendEnabledSlots_Parms;
	ServerSendEnabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendEnabledSlots, &ServerSendEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyEnabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverReplicator::NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyEnabledSlots = NULL;

	if ( ! pFnNotifyEnabledSlots )
		pFnNotifyEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 15201 ];

	ACoverReplicator_execNotifyEnabledSlots_Parms NotifyEnabledSlots_Parms;
	NotifyEnabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyEnabledSlots, &NotifyEnabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyEnabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveInitialCoverReplicationInfo = NULL;

	if ( ! pFnClientReceiveInitialCoverReplicationInfo )
		pFnClientReceiveInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 15188 ];

	ACoverReplicator_execClientReceiveInitialCoverReplicationInfo_Parms ClientReceiveInitialCoverReplicationInfo_Parms;
	ClientReceiveInitialCoverReplicationInfo_Parms.Index = Index;
	ClientReceiveInitialCoverReplicationInfo_Parms.Link = Link;
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveInitialCoverReplicationInfo_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveInitialCoverReplicationInfo, &ClientReceiveInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// [0x00A200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendInitialCoverReplicationInfo ( int Index )
{
	static UFunction* pFnServerSendInitialCoverReplicationInfo = NULL;

	if ( ! pFnServerSendInitialCoverReplicationInfo )
		pFnServerSendInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 15175 ];

	ACoverReplicator_execServerSendInitialCoverReplicationInfo_Parms ServerSendInitialCoverReplicationInfo_Parms;
	ServerSendInitialCoverReplicationInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendInitialCoverReplicationInfo, &ServerSendInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::ReplicateInitialCoverInfo ( )
{
	static UFunction* pFnReplicateInitialCoverInfo = NULL;

	if ( ! pFnReplicateInitialCoverInfo )
		pFnReplicateInitialCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 15173 ];

	ACoverReplicator_execReplicateInitialCoverInfo_Parms ReplicateInitialCoverInfo_Parms;

	this->ProcessEvent ( pFnReplicateInitialCoverInfo, &ReplicateInitialCoverInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.PurgeOldEntries
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::PurgeOldEntries ( )
{
	static UFunction* pFnPurgeOldEntries = NULL;

	if ( ! pFnPurgeOldEntries )
		pFnPurgeOldEntries = (UFunction*) UObject::GObjObjects()->Data[ 15171 ];

	ACoverReplicator_execPurgeOldEntries_Parms PurgeOldEntries_Parms;

	this->ProcessEvent ( pFnPurgeOldEntries, &PurgeOldEntries_Parms, NULL );
};

// Function Engine.AmbientCreatureNode.PreBeginPlay
// [0x00020002] 
// Parameters infos:

void AAmbientCreatureNode::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8675 ];

	AAmbientCreatureNode_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature.Tick
// [0x00020002] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void AAmbientSkeletalCreature::Tick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 9831 ];

	AAmbientSkeletalCreature_execTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature.SetDest
// [0x00820002] 
// Parameters infos:
// class AAmbientCreatureNode*    inNode                         ( CPF_Parm )

void AAmbientSkeletalCreature::SetDest ( class AAmbientCreatureNode* inNode )
{
	static UFunction* pFnSetDest = NULL;

	if ( ! pFnSetDest )
		pFnSetDest = (UFunction*) UObject::GObjObjects()->Data[ 9827 ];

	AAmbientSkeletalCreature_execSetDest_Parms SetDest_Parms;
	SetDest_Parms.inNode = inNode;

	this->ProcessEvent ( pFnSetDest, &SetDest_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature.SetRandDest
// [0x00020002] 
// Parameters infos:

void AAmbientSkeletalCreature::SetRandDest ( )
{
	static UFunction* pFnSetRandDest = NULL;

	if ( ! pFnSetRandDest )
		pFnSetRandDest = (UFunction*) UObject::GObjObjects()->Data[ 9823 ];

	AAmbientSkeletalCreature_execSetRandDest_Parms SetRandDest_Parms;

	this->ProcessEvent ( pFnSetRandDest, &SetRandDest_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAmbientSkeletalCreature::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9820 ];

	AAmbientSkeletalCreature_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature_Fish.Tick
// [0x00020002] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void AAmbientSkeletalCreature_Fish::Tick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 9848 ];

	AAmbientSkeletalCreature_Fish_execTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature_Fish.SetRandDest
// [0x00020002] 
// Parameters infos:

void AAmbientSkeletalCreature_Fish::SetRandDest ( )
{
	static UFunction* pFnSetRandDest = NULL;

	if ( ! pFnSetRandDest )
		pFnSetRandDest = (UFunction*) UObject::GObjObjects()->Data[ 9847 ];

	AAmbientSkeletalCreature_Fish_execSetRandDest_Parms SetRandDest_Parms;

	this->ProcessEvent ( pFnSetRandDest, &SetRandDest_Parms, NULL );
};

// Function Engine.AmbientSkeletalCreature_Fish.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAmbientSkeletalCreature_Fish::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9844 ];

	AAmbientSkeletalCreature_Fish_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AAmbientSoundSimpleToggleable::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 9955 ];

	AAmbientSoundSimpleToggleable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StopPlaying ( )
{
	static UFunction* pFnStopPlaying = NULL;

	if ( ! pFnStopPlaying )
		pFnStopPlaying = (UFunction*) UObject::GObjObjects()->Data[ 9954 ];

	AAmbientSoundSimpleToggleable_execStopPlaying_Parms StopPlaying_Parms;

	this->ProcessEvent ( pFnStopPlaying, &StopPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StartPlaying ( )
{
	static UFunction* pFnStartPlaying = NULL;

	if ( ! pFnStartPlaying )
		pFnStartPlaying = (UFunction*) UObject::GObjObjects()->Data[ 9953 ];

	AAmbientSoundSimpleToggleable_execStartPlaying_Parms StartPlaying_Parms;

	this->ProcessEvent ( pFnStartPlaying, &StartPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AAmbientSoundSimpleToggleable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 9951 ];

	AAmbientSoundSimpleToggleable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAmbientSoundSimpleToggleable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9950 ];

	AAmbientSoundSimpleToggleable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AmbientStaticCreature.Tick
// [0x00020002] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void AAmbientStaticCreature::Tick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 10190 ];

	AAmbientStaticCreature_execTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.AmbientStaticCreature.SetDest
// [0x00820002] 
// Parameters infos:
// class AAmbientCreatureNode*    inNode                         ( CPF_Parm )

void AAmbientStaticCreature::SetDest ( class AAmbientCreatureNode* inNode )
{
	static UFunction* pFnSetDest = NULL;

	if ( ! pFnSetDest )
		pFnSetDest = (UFunction*) UObject::GObjObjects()->Data[ 10186 ];

	AAmbientStaticCreature_execSetDest_Parms SetDest_Parms;
	SetDest_Parms.inNode = inNode;

	this->ProcessEvent ( pFnSetDest, &SetDest_Parms, NULL );
};

// Function Engine.AmbientStaticCreature.SetRandDest
// [0x00020002] 
// Parameters infos:

void AAmbientStaticCreature::SetRandDest ( )
{
	static UFunction* pFnSetRandDest = NULL;

	if ( ! pFnSetRandDest )
		pFnSetRandDest = (UFunction*) UObject::GObjObjects()->Data[ 10182 ];

	AAmbientStaticCreature_execSetRandDest_Parms SetRandDest_Parms;

	this->ProcessEvent ( pFnSetRandDest, &SetRandDest_Parms, NULL );
};

// Function Engine.AmbientStaticCreature.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAmbientStaticCreature::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 10179 ];

	AAmbientStaticCreature_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AmbientStaticCreature_Fish.Tick
// [0x00020002] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void AAmbientStaticCreature_Fish::Tick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 10205 ];

	AAmbientStaticCreature_Fish_execTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.AmbientStaticCreature_Fish.SetRandDest
// [0x00020002] 
// Parameters infos:

void AAmbientStaticCreature_Fish::SetRandDest ( )
{
	static UFunction* pFnSetRandDest = NULL;

	if ( ! pFnSetRandDest )
		pFnSetRandDest = (UFunction*) UObject::GObjObjects()->Data[ 10204 ];

	AAmbientStaticCreature_Fish_execSetRandDest_Parms SetRandDest_Parms;

	this->ProcessEvent ( pFnSetRandDest, &SetRandDest_Parms, NULL );
};

// Function Engine.AmbientStaticCreature_Fish.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAmbientStaticCreature_Fish::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 10201 ];

	AAmbientStaticCreature_Fish_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_PlayFaceFXAnim::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 10845 ];

	UAnimNotify_PlayFaceFXAnim_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_ViewShake.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_ViewShake::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 10927 ];

	UAnimNotify_ViewShake_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalizedTeam = NULL;

	if ( ! pFnAllowBroadcastLocalizedTeam )
		pFnAllowBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 11596 ];

	ABroadcastHandler_eventAllowBroadcastLocalizedTeam_Parms AllowBroadcastLocalizedTeam_Parms;
	AllowBroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	AllowBroadcastLocalizedTeam_Parms.Sender = Sender;
	AllowBroadcastLocalizedTeam_Parms.Message = Message;
	AllowBroadcastLocalizedTeam_Parms.Switch = Switch;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalizedTeam, &AllowBroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalized = NULL;

	if ( ! pFnAllowBroadcastLocalized )
		pFnAllowBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 11588 ];

	ABroadcastHandler_eventAllowBroadcastLocalized_Parms AllowBroadcastLocalized_Parms;
	AllowBroadcastLocalized_Parms.Sender = Sender;
	AllowBroadcastLocalized_Parms.Message = Message;
	AllowBroadcastLocalized_Parms.Switch = Switch;
	AllowBroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalized, &AllowBroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 11583 ];

	ABroadcastHandler_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.Broadcast
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::Broadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 11577 ];

	ABroadcastHandler_execBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastLocalized
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 11569 ];

	ABroadcastHandler_execBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Receiver = Receiver;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastText
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  SenderPRI                      ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastText = NULL;

	if ( ! pFnBroadcastText )
		pFnBroadcastText = (UFunction*) UObject::GObjObjects()->Data[ 11564 ];

	ABroadcastHandler_execBroadcastText_Parms BroadcastText_Parms;
	BroadcastText_Parms.SenderPRI = SenderPRI;
	BroadcastText_Parms.Receiver = Receiver;
	memcpy ( &BroadcastText_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastText_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastText, &BroadcastText_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowsBroadcast
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  broadcaster                    ( CPF_Parm )
// int                            InLen                          ( CPF_Parm )

bool ABroadcastHandler::AllowsBroadcast ( class AActor* broadcaster, int InLen )
{
	static UFunction* pFnAllowsBroadcast = NULL;

	if ( ! pFnAllowsBroadcast )
		pFnAllowsBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 11560 ];

	ABroadcastHandler_execAllowsBroadcast_Parms AllowsBroadcast_Parms;
	AllowsBroadcast_Parms.broadcaster = broadcaster;
	AllowsBroadcast_Parms.InLen = InLen;

	this->ProcessEvent ( pFnAllowsBroadcast, &AllowsBroadcast_Parms, NULL );

	return AllowsBroadcast_Parms.ReturnValue;
};

// Function Engine.BroadcastHandler.UpdateSentText
// [0x00020002] 
// Parameters infos:

void ABroadcastHandler::UpdateSentText ( )
{
	static UFunction* pFnUpdateSentText = NULL;

	if ( ! pFnUpdateSentText )
		pFnUpdateSentText = (UFunction*) UObject::GObjObjects()->Data[ 11559 ];

	ABroadcastHandler_execUpdateSentText_Parms UpdateSentText_Parms;

	this->ProcessEvent ( pFnUpdateSentText, &UpdateSentText_Parms, NULL );
};

// Function Engine.ColorScaleVolume.UnTouch
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AColorScaleVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 12303 ];

	AColorScaleVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.ColorScaleVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AColorScaleVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 12296 ];

	AColorScaleVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm )
// struct FString                 Description                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnShowCustomPlayersUI = NULL;

	if ( ! pFnShowCustomPlayersUI )
		pFnShowCustomPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 24039 ];

	UOnlinePlayerInterfaceEx_execShowCustomPlayersUI_Parms ShowCustomPlayersUI_Parms;
	ShowCustomPlayersUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCustomPlayersUI_Parms.Title, &Title, 0xC );
	memcpy ( &ShowCustomPlayersUI_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowCustomPlayersUI, &ShowCustomPlayersUI_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ShowCustomPlayersUI_Parms.Players, 0xC );

	return ShowCustomPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetAchievements
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FAchievementDetails > Achievements                   ( CPF_Parm | CPF_OutParm )

unsigned char UOnlinePlayerInterfaceEx::GetAchievements ( unsigned char LocalUserNum, int TitleId, TArray< struct FAchievementDetails >* Achievements )
{
	static UFunction* pFnGetAchievements = NULL;

	if ( ! pFnGetAchievements )
		pFnGetAchievements = (UFunction*) UObject::GObjObjects()->Data[ 24033 ];

	UOnlinePlayerInterfaceEx_execGetAchievements_Parms GetAchievements_Parms;
	GetAchievements_Parms.LocalUserNum = LocalUserNum;
	GetAchievements_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnGetAchievements, &GetAchievements_Parms, NULL );

	if ( Achievements )
		memcpy ( Achievements, &GetAchievements_Parms.Achievements, 0xC );

	return GetAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterfaceEx::ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnClearReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnClearReadAchievementsCompleteDelegate )
		pFnClearReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24030 ];

	UOnlinePlayerInterfaceEx_execClearReadAchievementsCompleteDelegate_Parms ClearReadAchievementsCompleteDelegate_Parms;
	ClearReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadAchievementsCompleteDelegate, &ClearReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterfaceEx::AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnAddReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnAddReadAchievementsCompleteDelegate )
		pFnAddReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24027 ];

	UOnlinePlayerInterfaceEx_execAddReadAchievementsCompleteDelegate_Parms AddReadAchievementsCompleteDelegate_Parms;
	AddReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadAchievementsCompleteDelegate, &AddReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnReadAchievementsComplete
// [0x00120000] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnReadAchievementsComplete ( int TitleId )
{
	static UFunction* pFnOnReadAchievementsComplete = NULL;

	if ( ! pFnOnReadAchievementsComplete )
		pFnOnReadAchievementsComplete = (UFunction*) UObject::GObjObjects()->Data[ 24025 ];

	UOnlinePlayerInterfaceEx_execOnReadAchievementsComplete_Parms OnReadAchievementsComplete_Parms;
	OnReadAchievementsComplete_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnReadAchievementsComplete, &OnReadAchievementsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ReadAchievements
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadText                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadImages              ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages )
{
	static UFunction* pFnReadAchievements = NULL;

	if ( ! pFnReadAchievements )
		pFnReadAchievements = (UFunction*) UObject::GObjObjects()->Data[ 24019 ];

	UOnlinePlayerInterfaceEx_execReadAchievements_Parms ReadAchievements_Parms;
	ReadAchievements_Parms.LocalUserNum = LocalUserNum;
	ReadAchievements_Parms.TitleId = TitleId;
	ReadAchievements_Parms.bShouldReadText = bShouldReadText;
	ReadAchievements_Parms.bShouldReadImages = bShouldReadImages;

	this->ProcessEvent ( pFnReadAchievements, &ReadAchievements_Parms, NULL );

	return ReadAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowPlayersUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPlayersUI = NULL;

	if ( ! pFnShowPlayersUI )
		pFnShowPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 24016 ];

	UOnlinePlayerInterfaceEx_execShowPlayersUI_Parms ShowPlayersUI_Parms;
	ShowPlayersUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPlayersUI, &ShowPlayersUI_Parms, NULL );

	return ShowPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFriendsInviteUI = NULL;

	if ( ! pFnShowFriendsInviteUI )
		pFnShowFriendsInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 24012 ];

	UOnlinePlayerInterfaceEx_execShowFriendsInviteUI_Parms ShowFriendsInviteUI_Parms;
	ShowFriendsInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFriendsInviteUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFriendsInviteUI, &ShowFriendsInviteUI_Parms, NULL );

	return ShowFriendsInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm )

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnClearProfileDataChangedDelegate = NULL;

	if ( ! pFnClearProfileDataChangedDelegate )
		pFnClearProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24009 ];

	UOnlinePlayerInterfaceEx_execClearProfileDataChangedDelegate_Parms ClearProfileDataChangedDelegate_Parms;
	ClearProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0xC );

	this->ProcessEvent ( pFnClearProfileDataChangedDelegate, &ClearProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm )

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnAddProfileDataChangedDelegate = NULL;

	if ( ! pFnAddProfileDataChangedDelegate )
		pFnAddProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24006 ];

	UOnlinePlayerInterfaceEx_execAddProfileDataChangedDelegate_Parms AddProfileDataChangedDelegate_Parms;
	AddProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0xC );

	this->ProcessEvent ( pFnAddProfileDataChangedDelegate, &AddProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterfaceEx::OnProfileDataChanged ( )
{
	static UFunction* pFnOnProfileDataChanged = NULL;

	if ( ! pFnOnProfileDataChanged )
		pFnOnProfileDataChanged = (UFunction*) UObject::GObjObjects()->Data[ 24005 ];

	UOnlinePlayerInterfaceEx_execOnProfileDataChanged_Parms OnProfileDataChanged_Parms;

	this->ProcessEvent ( pFnOnProfileDataChanged, &OnProfileDataChanged_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            PictureId                      ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId )
{
	static UFunction* pFnUnlockGamerPicture = NULL;

	if ( ! pFnUnlockGamerPicture )
		pFnUnlockGamerPicture = (UFunction*) UObject::GObjObjects()->Data[ 24001 ];

	UOnlinePlayerInterfaceEx_execUnlockGamerPicture_Parms UnlockGamerPicture_Parms;
	UnlockGamerPicture_Parms.LocalUserNum = LocalUserNum;
	UnlockGamerPicture_Parms.PictureId = PictureId;

	this->ProcessEvent ( pFnUnlockGamerPicture, &UnlockGamerPicture_Parms, NULL );

	return UnlockGamerPicture_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterfaceEx::ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnClearUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnClearUnlockAchievementCompleteDelegate )
		pFnClearUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23998 ];

	UOnlinePlayerInterfaceEx_execClearUnlockAchievementCompleteDelegate_Parms ClearUnlockAchievementCompleteDelegate_Parms;
	ClearUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUnlockAchievementCompleteDelegate, &ClearUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm )

void UOnlinePlayerInterfaceEx::AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnAddUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnAddUnlockAchievementCompleteDelegate )
		pFnAddUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23995 ];

	UOnlinePlayerInterfaceEx_execAddUnlockAchievementCompleteDelegate_Parms AddUnlockAchievementCompleteDelegate_Parms;
	AddUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUnlockAchievementCompleteDelegate, &AddUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnUnlockAchievementComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnUnlockAchievementComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnlockAchievementComplete = NULL;

	if ( ! pFnOnUnlockAchievementComplete )
		pFnOnUnlockAchievementComplete = (UFunction*) UObject::GObjObjects()->Data[ 23993 ];

	UOnlinePlayerInterfaceEx_execOnUnlockAchievementComplete_Parms OnUnlockAchievementComplete_Parms;
	OnUnlockAchievementComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnlockAchievementComplete, &OnUnlockAchievementComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockAchievement ( unsigned char LocalUserNum, int AchievementId )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 23989 ];

	UOnlinePlayerInterfaceEx_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.LocalUserNum = LocalUserNum;
	UnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );

	return UnlockAchievement_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeviceID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::IsDeviceValid ( int DeviceID )
{
	static UFunction* pFnIsDeviceValid = NULL;

	if ( ! pFnIsDeviceValid )
		pFnIsDeviceValid = (UFunction*) UObject::GObjObjects()->Data[ 23986 ];

	UOnlinePlayerInterfaceEx_execIsDeviceValid_Parms IsDeviceValid_Parms;
	IsDeviceValid_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnIsDeviceValid, &IsDeviceValid_Parms, NULL );

	return IsDeviceValid_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// [0x00420000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 DeviceName                     ( CPF_Parm | CPF_OutParm )

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName )
{
	static UFunction* pFnGetDeviceSelectionResults = NULL;

	if ( ! pFnGetDeviceSelectionResults )
		pFnGetDeviceSelectionResults = (UFunction*) UObject::GObjObjects()->Data[ 23982 ];

	UOnlinePlayerInterfaceEx_execGetDeviceSelectionResults_Parms GetDeviceSelectionResults_Parms;
	GetDeviceSelectionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetDeviceSelectionResults, &GetDeviceSelectionResults_Parms, NULL );

	if ( DeviceName )
		memcpy ( DeviceName, &GetDeviceSelectionResults_Parms.DeviceName, 0xC );

	return GetDeviceSelectionResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnClearDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnClearDeviceSelectionDoneDelegate )
		pFnClearDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23979 ];

	UOnlinePlayerInterfaceEx_execClearDeviceSelectionDoneDelegate_Parms ClearDeviceSelectionDoneDelegate_Parms;
	ClearDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0xC );

	this->ProcessEvent ( pFnClearDeviceSelectionDoneDelegate, &ClearDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnAddDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnAddDeviceSelectionDoneDelegate )
		pFnAddDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23976 ];

	UOnlinePlayerInterfaceEx_execAddDeviceSelectionDoneDelegate_Parms AddDeviceSelectionDoneDelegate_Parms;
	AddDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0xC );

	this->ProcessEvent ( pFnAddDeviceSelectionDoneDelegate, &AddDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 23970 ];

	UOnlinePlayerInterfaceEx_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_Parm )
// unsigned long                  bForceShowUI                   ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI )
{
	static UFunction* pFnShowDeviceSelectionUI = NULL;

	if ( ! pFnShowDeviceSelectionUI )
		pFnShowDeviceSelectionUI = (UFunction*) UObject::GObjObjects()->Data[ 23965 ];

	UOnlinePlayerInterfaceEx_execShowDeviceSelectionUI_Parms ShowDeviceSelectionUI_Parms;
	ShowDeviceSelectionUI_Parms.LocalUserNum = LocalUserNum;
	ShowDeviceSelectionUI_Parms.SizeNeeded = SizeNeeded;
	ShowDeviceSelectionUI_Parms.bForceShowUI = bForceShowUI;

	this->ProcessEvent ( pFnShowDeviceSelectionUI, &ShowDeviceSelectionUI_Parms, NULL );

	return ShowDeviceSelectionUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMembershipMarketplaceUI = NULL;

	if ( ! pFnShowMembershipMarketplaceUI )
		pFnShowMembershipMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 23962 ];

	UOnlinePlayerInterfaceEx_execShowMembershipMarketplaceUI_Parms ShowMembershipMarketplaceUI_Parms;
	ShowMembershipMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMembershipMarketplaceUI, &ShowMembershipMarketplaceUI_Parms, NULL );

	return ShowMembershipMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowContentMarketplaceUI = NULL;

	if ( ! pFnShowContentMarketplaceUI )
		pFnShowContentMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 23959 ];

	UOnlinePlayerInterfaceEx_execShowContentMarketplaceUI_Parms ShowContentMarketplaceUI_Parms;
	ShowContentMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowContentMarketplaceUI, &ShowContentMarketplaceUI_Parms, NULL );

	return ShowContentMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviteText                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText )
{
	static UFunction* pFnShowInviteUI = NULL;

	if ( ! pFnShowInviteUI )
		pFnShowInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 23955 ];

	UOnlinePlayerInterfaceEx_execShowInviteUI_Parms ShowInviteUI_Parms;
	ShowInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowInviteUI_Parms.InviteText, &InviteText, 0xC );

	this->ProcessEvent ( pFnShowInviteUI, &ShowInviteUI_Parms, NULL );

	return ShowInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowAchievementsUI = NULL;

	if ( ! pFnShowAchievementsUI )
		pFnShowAchievementsUI = (UFunction*) UObject::GObjObjects()->Data[ 23952 ];

	UOnlinePlayerInterfaceEx_execShowAchievementsUI_Parms ShowAchievementsUI_Parms;
	ShowAchievementsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowAchievementsUI, &ShowAchievementsUI_Parms, NULL );

	return ShowAchievementsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMessagesUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMessagesUI = NULL;

	if ( ! pFnShowMessagesUI )
		pFnShowMessagesUI = (UFunction*) UObject::GObjObjects()->Data[ 23949 ];

	UOnlinePlayerInterfaceEx_execShowMessagesUI_Parms ShowMessagesUI_Parms;
	ShowMessagesUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMessagesUI, &ShowMessagesUI_Parms, NULL );

	return ShowMessagesUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowGamerCardUI = NULL;

	if ( ! pFnShowGamerCardUI )
		pFnShowGamerCardUI = (UFunction*) UObject::GObjObjects()->Data[ 23945 ];

	UOnlinePlayerInterfaceEx_execShowGamerCardUI_Parms ShowGamerCardUI_Parms;
	ShowGamerCardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowGamerCardUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowGamerCardUI, &ShowGamerCardUI_Parms, NULL );

	return ShowGamerCardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFeedbackUI = NULL;

	if ( ! pFnShowFeedbackUI )
		pFnShowFeedbackUI = (UFunction*) UObject::GObjObjects()->Data[ 23941 ];

	UOnlinePlayerInterfaceEx_execShowFeedbackUI_Parms ShowFeedbackUI_Parms;
	ShowFeedbackUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFeedbackUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFeedbackUI, &ShowFeedbackUI_Parms, NULL );

	return ShowFeedbackUI_Parms.ReturnValue;
};

// Function Engine.UIEvent_SceneActivated.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_SceneActivated::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 15730 ];

	UUIEvent_SceneActivated_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_SceneActivated.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIEvent_SceneActivated::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 15727 ];

	UUIEvent_SceneActivated_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetTitleFileState
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm )

unsigned char UOnlineSystemInterface::GetTitleFileState ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileState = NULL;

	if ( ! pFnGetTitleFileState )
		pFnGetTitleFileState = (UFunction*) UObject::GObjObjects()->Data[ 24561 ];

	UOnlineSystemInterface_execGetTitleFileState_Parms GetTitleFileState_Parms;
	memcpy ( &GetTitleFileState_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileState, &GetTitleFileState_Parms, NULL );

	return GetTitleFileState_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetTitleFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSystemInterface::GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetTitleFileContents = NULL;

	if ( ! pFnGetTitleFileContents )
		pFnGetTitleFileContents = (UFunction*) UObject::GObjObjects()->Data[ 24556 ];

	UOnlineSystemInterface_execGetTitleFileContents_Parms GetTitleFileContents_Parms;
	memcpy ( &GetTitleFileContents_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileContents, &GetTitleFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetTitleFileContents_Parms.FileContents, 0xC );

	return GetTitleFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm )

void UOnlineSystemInterface::ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearReadTitleFileCompleteDelegate )
		pFnClearReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24554 ];

	UOnlineSystemInterface_execClearReadTitleFileCompleteDelegate_Parms ClearReadTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadTitleFileCompleteDelegate, &ClearReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm )

void UOnlineSystemInterface::AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddReadTitleFileCompleteDelegate )
		pFnAddReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24552 ];

	UOnlineSystemInterface_execAddReadTitleFileCompleteDelegate_Parms AddReadTitleFileCompleteDelegate_Parms;
	memcpy ( &AddReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadTitleFileCompleteDelegate, &AddReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ReadTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FileToRead                     ( CPF_Parm )

bool UOnlineSystemInterface::ReadTitleFile ( struct FString FileToRead )
{
	static UFunction* pFnReadTitleFile = NULL;

	if ( ! pFnReadTitleFile )
		pFnReadTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 24549 ];

	UOnlineSystemInterface_execReadTitleFile_Parms ReadTitleFile_Parms;
	memcpy ( &ReadTitleFile_Parms.FileToRead, &FileToRead, 0xC );

	this->ProcessEvent ( pFnReadTitleFile, &ReadTitleFile_Parms, NULL );

	return ReadTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm )

void UOnlineSystemInterface::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 24546 ];

	UOnlineSystemInterface_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm )

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnClearStorageDeviceChangeDelegate = NULL;

	if ( ! pFnClearStorageDeviceChangeDelegate )
		pFnClearStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24544 ];

	UOnlineSystemInterface_execClearStorageDeviceChangeDelegate_Parms ClearStorageDeviceChangeDelegate_Parms;
	memcpy ( &ClearStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0xC );

	this->ProcessEvent ( pFnClearStorageDeviceChangeDelegate, &ClearStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm )

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnAddStorageDeviceChangeDelegate = NULL;

	if ( ! pFnAddStorageDeviceChangeDelegate )
		pFnAddStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24542 ];

	UOnlineSystemInterface_execAddStorageDeviceChangeDelegate_Parms AddStorageDeviceChangeDelegate_Parms;
	memcpy ( &AddStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0xC );

	this->ProcessEvent ( pFnAddStorageDeviceChangeDelegate, &AddStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 24541 ];

	UOnlineSystemInterface_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNATType
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 24539 ];

	UOnlineSystemInterface_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm )

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnClearConnectionStatusChangeDelegate = NULL;

	if ( ! pFnClearConnectionStatusChangeDelegate )
		pFnClearConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24537 ];

	UOnlineSystemInterface_execClearConnectionStatusChangeDelegate_Parms ClearConnectionStatusChangeDelegate_Parms;
	memcpy ( &ClearConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0xC );

	this->ProcessEvent ( pFnClearConnectionStatusChangeDelegate, &ClearConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm )

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnAddConnectionStatusChangeDelegate = NULL;

	if ( ! pFnAddConnectionStatusChangeDelegate )
		pFnAddConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24535 ];

	UOnlineSystemInterface_execAddConnectionStatusChangeDelegate_Parms AddConnectionStatusChangeDelegate_Parms;
	memcpy ( &AddConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0xC );

	this->ProcessEvent ( pFnAddConnectionStatusChangeDelegate, &AddConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  ConnectionStatus               ( CPF_Parm )

void UOnlineSystemInterface::OnConnectionStatusChange ( unsigned char ConnectionStatus )
{
	static UFunction* pFnOnConnectionStatusChange = NULL;

	if ( ! pFnOnConnectionStatusChange )
		pFnOnConnectionStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 24533 ];

	UOnlineSystemInterface_execOnConnectionStatusChange_Parms OnConnectionStatusChange_Parms;
	OnConnectionStatusChange_Parms.ConnectionStatus = ConnectionStatus;

	this->ProcessEvent ( pFnOnConnectionStatusChange, &OnConnectionStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.IsControllerConnected
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UOnlineSystemInterface::IsControllerConnected ( int ControllerId )
{
	static UFunction* pFnIsControllerConnected = NULL;

	if ( ! pFnIsControllerConnected )
		pFnIsControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 24530 ];

	UOnlineSystemInterface_execIsControllerConnected_Parms IsControllerConnected_Parms;
	IsControllerConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsControllerConnected, &IsControllerConnected_Parms, NULL );

	return IsControllerConnected_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm )

void UOnlineSystemInterface::ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnClearControllerChangeDelegate = NULL;

	if ( ! pFnClearControllerChangeDelegate )
		pFnClearControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24528 ];

	UOnlineSystemInterface_execClearControllerChangeDelegate_Parms ClearControllerChangeDelegate_Parms;
	memcpy ( &ClearControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0xC );

	this->ProcessEvent ( pFnClearControllerChangeDelegate, &ClearControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm )

void UOnlineSystemInterface::AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnAddControllerChangeDelegate = NULL;

	if ( ! pFnAddControllerChangeDelegate )
		pFnAddControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24526 ];

	UOnlineSystemInterface_execAddControllerChangeDelegate_Parms AddControllerChangeDelegate_Parms;
	memcpy ( &AddControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0xC );

	this->ProcessEvent ( pFnAddControllerChangeDelegate, &AddControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnControllerChange
// [0x00120000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnControllerChange ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChange = NULL;

	if ( ! pFnOnControllerChange )
		pFnOnControllerChange = (UFunction*) UObject::GObjObjects()->Data[ 24523 ];

	UOnlineSystemInterface_execOnControllerChange_Parms OnControllerChange_Parms;
	OnControllerChange_Parms.ControllerId = ControllerId;
	OnControllerChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChange, &OnControllerChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  NewPos                         ( CPF_Parm )

void UOnlineSystemInterface::SetNetworkNotificationPosition ( unsigned char NewPos )
{
	static UFunction* pFnSetNetworkNotificationPosition = NULL;

	if ( ! pFnSetNetworkNotificationPosition )
		pFnSetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 24521 ];

	UOnlineSystemInterface_execSetNetworkNotificationPosition_Parms SetNetworkNotificationPosition_Parms;
	SetNetworkNotificationPosition_Parms.NewPos = NewPos;

	this->ProcessEvent ( pFnSetNetworkNotificationPosition, &SetNetworkNotificationPosition_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNetworkNotificationPosition ( )
{
	static UFunction* pFnGetNetworkNotificationPosition = NULL;

	if ( ! pFnGetNetworkNotificationPosition )
		pFnGetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 24519 ];

	UOnlineSystemInterface_execGetNetworkNotificationPosition_Parms GetNetworkNotificationPosition_Parms;

	this->ProcessEvent ( pFnGetNetworkNotificationPosition, &GetNetworkNotificationPosition_Parms, NULL );

	return GetNetworkNotificationPosition_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm )

void UOnlineSystemInterface::ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnClearExternalUIChangeDelegate = NULL;

	if ( ! pFnClearExternalUIChangeDelegate )
		pFnClearExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24517 ];

	UOnlineSystemInterface_execClearExternalUIChangeDelegate_Parms ClearExternalUIChangeDelegate_Parms;
	memcpy ( &ClearExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0xC );

	this->ProcessEvent ( pFnClearExternalUIChangeDelegate, &ClearExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm )

void UOnlineSystemInterface::AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnAddExternalUIChangeDelegate = NULL;

	if ( ! pFnAddExternalUIChangeDelegate )
		pFnAddExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24515 ];

	UOnlineSystemInterface_execAddExternalUIChangeDelegate_Parms AddExternalUIChangeDelegate_Parms;
	memcpy ( &AddExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0xC );

	this->ProcessEvent ( pFnAddExternalUIChangeDelegate, &AddExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnExternalUIChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UOnlineSystemInterface::OnExternalUIChange ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChange = NULL;

	if ( ! pFnOnExternalUIChange )
		pFnOnExternalUIChange = (UFunction*) UObject::GObjObjects()->Data[ 24513 ];

	UOnlineSystemInterface_execOnExternalUIChange_Parms OnExternalUIChange_Parms;
	OnExternalUIChange_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChange, &OnExternalUIChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm )

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnClearLinkStatusChangeDelegate = NULL;

	if ( ! pFnClearLinkStatusChangeDelegate )
		pFnClearLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24511 ];

	UOnlineSystemInterface_execClearLinkStatusChangeDelegate_Parms ClearLinkStatusChangeDelegate_Parms;
	memcpy ( &ClearLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0xC );

	this->ProcessEvent ( pFnClearLinkStatusChangeDelegate, &ClearLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm )

void UOnlineSystemInterface::AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnAddLinkStatusChangeDelegate = NULL;

	if ( ! pFnAddLinkStatusChangeDelegate )
		pFnAddLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24509 ];

	UOnlineSystemInterface_execAddLinkStatusChangeDelegate_Parms AddLinkStatusChangeDelegate_Parms;
	memcpy ( &AddLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0xC );

	this->ProcessEvent ( pFnAddLinkStatusChangeDelegate, &AddLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnLinkStatusChange ( unsigned long bIsConnected )
{
	static UFunction* pFnOnLinkStatusChange = NULL;

	if ( ! pFnOnLinkStatusChange )
		pFnOnLinkStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 24501 ];

	UOnlineSystemInterface_execOnLinkStatusChange_Parms OnLinkStatusChange_Parms;
	OnLinkStatusChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnLinkStatusChange, &OnLinkStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.HasLinkConnection
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 24499 ];

	UOnlineSystemInterface_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.DebugCameraHUD.PostRender
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 17922 ];

	ADebugCameraHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.DebugCameraHUD.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 17921 ];

	ADebugCameraHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.VolumeTimer.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 32666 ];

	AVolumeTimer_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.VolumeTimer.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 32665 ];

	AVolumeTimer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DialogueManager.TriggerDialogueEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class AActor*                  InOriginator                   ( CPF_Parm )

bool ADialogueManager::TriggerDialogueEvent ( class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator )
{
	static UFunction* pFnTriggerDialogueEvent = NULL;

	if ( ! pFnTriggerDialogueEvent )
		pFnTriggerDialogueEvent = (UFunction*) UObject::GObjObjects()->Data[ 18301 ];

	ADialogueManager_execTriggerDialogueEvent_Parms TriggerDialogueEvent_Parms;
	TriggerDialogueEvent_Parms.InEventClass = InEventClass;
	TriggerDialogueEvent_Parms.InInstigator = InInstigator;
	TriggerDialogueEvent_Parms.InOriginator = InOriginator;

	this->ProcessEvent ( pFnTriggerDialogueEvent, &TriggerDialogueEvent_Parms, NULL );

	return TriggerDialogueEvent_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UFailedConnect::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 19347 ];

	UFailedConnect_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetFailSwitch
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FailString                     ( CPF_Parm )

int UFailedConnect::GetFailSwitch ( struct FString FailString )
{
	static UFunction* pFnGetFailSwitch = NULL;

	if ( ! pFnGetFailSwitch )
		pFnGetFailSwitch = (UFunction*) UObject::GObjObjects()->Data[ 19344 ];

	UFailedConnect_execGetFailSwitch_Parms GetFailSwitch_Parms;
	memcpy ( &GetFailSwitch_Parms.FailString, &FailString, 0xC );

	this->ProcessEvent ( pFnGetFailSwitch, &GetFailSwitch_Parms, NULL );

	return GetFailSwitch_Parms.ReturnValue;
};

// Function Engine.GameMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UGameMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 20797 ];

	UGameMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.RegisterStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 ClientStatGuid                 ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineStatsInterface::RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid )
{
	static UFunction* pFnRegisterStatGuid = NULL;

	if ( ! pFnRegisterStatGuid )
		pFnRegisterStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 24373 ];

	UOnlineStatsInterface_execRegisterStatGuid_Parms RegisterStatGuid_Parms;
	memcpy ( &RegisterStatGuid_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterStatGuid, &RegisterStatGuid_Parms, NULL );

	if ( ClientStatGuid )
		memcpy ( ClientStatGuid, &RegisterStatGuid_Parms.ClientStatGuid, 0xC );

	return RegisterStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetClientStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UOnlineStatsInterface::GetClientStatGuid ( )
{
	static UFunction* pFnGetClientStatGuid = NULL;

	if ( ! pFnGetClientStatGuid )
		pFnGetClientStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 24371 ];

	UOnlineStatsInterface_execGetClientStatGuid_Parms GetClientStatGuid_Parms;

	this->ProcessEvent ( pFnGetClientStatGuid, &GetClientStatGuid_Parms, NULL );

	return GetClientStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnClearRegisterHostStatGuidCompleteDelegateDelegate = NULL;

	if ( ! pFnClearRegisterHostStatGuidCompleteDelegateDelegate )
		pFnClearRegisterHostStatGuidCompleteDelegateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24369 ];

	UOnlineStatsInterface_execClearRegisterHostStatGuidCompleteDelegateDelegate_Parms ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms;
	memcpy ( &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearRegisterHostStatGuidCompleteDelegateDelegate, &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnAddRegisterHostStatGuidCompleteDelegate = NULL;

	if ( ! pFnAddRegisterHostStatGuidCompleteDelegate )
		pFnAddRegisterHostStatGuidCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24367 ];

	UOnlineStatsInterface_execAddRegisterHostStatGuidCompleteDelegate_Parms AddRegisterHostStatGuidCompleteDelegate_Parms;
	memcpy ( &AddRegisterHostStatGuidCompleteDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddRegisterHostStatGuidCompleteDelegate, &AddRegisterHostStatGuidCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 24365 ];

	UOnlineStatsInterface_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 HostStatGuid                   ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineStatsInterface::RegisterHostStatGuid ( struct FString* HostStatGuid )
{
	static UFunction* pFnRegisterHostStatGuid = NULL;

	if ( ! pFnRegisterHostStatGuid )
		pFnRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 24362 ];

	UOnlineStatsInterface_execRegisterHostStatGuid_Parms RegisterHostStatGuid_Parms;

	this->ProcessEvent ( pFnRegisterHostStatGuid, &RegisterHostStatGuid_Parms, NULL );

	if ( HostStatGuid )
		memcpy ( HostStatGuid, &RegisterHostStatGuid_Parms.HostStatGuid, 0xC );

	return RegisterHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetHostStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString UOnlineStatsInterface::GetHostStatGuid ( )
{
	static UFunction* pFnGetHostStatGuid = NULL;

	if ( ! pFnGetHostStatGuid )
		pFnGetHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 24360 ];

	UOnlineStatsInterface_execGetHostStatGuid_Parms GetHostStatGuid_Parms;

	this->ProcessEvent ( pFnGetHostStatGuid, &GetHostStatGuid_Parms, NULL );

	return GetHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// int                            LeaderboardId                  ( CPF_Parm )
// TArray< struct FOnlinePlayerScore > PlayerScores                   ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineStatsInterface::WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, TArray< struct FOnlinePlayerScore >* PlayerScores )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 24354 ];

	UOnlineStatsInterface_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;
	memcpy ( &WriteOnlinePlayerScores_Parms.SessionName, &SessionName, 0x8 );
	WriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );

	if ( PlayerScores )
		memcpy ( PlayerScores, &WriteOnlinePlayerScores_Parms.PlayerScores, 0xC );

	return WriteOnlinePlayerScores_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearFlushOnlineStatsCompleteDelegate )
		pFnClearFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24352 ];

	UOnlineStatsInterface_execClearFlushOnlineStatsCompleteDelegate_Parms ClearFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFlushOnlineStatsCompleteDelegate, &ClearFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddFlushOnlineStatsCompleteDelegate )
		pFnAddFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24350 ];

	UOnlineStatsInterface_execAddFlushOnlineStatsCompleteDelegate_Parms AddFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFlushOnlineStatsCompleteDelegate, &AddFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFlushOnlineStatsComplete = NULL;

	if ( ! pFnOnFlushOnlineStatsComplete )
		pFnOnFlushOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 24347 ];

	UOnlineStatsInterface_execOnFlushOnlineStatsComplete_Parms OnFlushOnlineStatsComplete_Parms;
	memcpy ( &OnFlushOnlineStatsComplete_Parms.SessionName, &SessionName, 0x8 );
	OnFlushOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFlushOnlineStatsComplete, &OnFlushOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.FlushOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineStatsInterface::FlushOnlineStats ( struct FName SessionName )
{
	static UFunction* pFnFlushOnlineStats = NULL;

	if ( ! pFnFlushOnlineStats )
		pFnFlushOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 24344 ];

	UOnlineStatsInterface_execFlushOnlineStats_Parms FlushOnlineStats_Parms;
	memcpy ( &FlushOnlineStats_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnFlushOnlineStats, &FlushOnlineStats_Parms, NULL );

	return FlushOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            Player                         ( CPF_Parm )
// class UOnlineStatsWrite*       StatsWrite                     ( CPF_Parm )

bool UOnlineStatsInterface::WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 24339 ];

	UOnlineStatsInterface_execWriteOnlineStats_Parms WriteOnlineStats_Parms;
	memcpy ( &WriteOnlineStats_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &WriteOnlineStats_Parms.Player, &Player, 0x8 );
	WriteOnlineStats_Parms.StatsWrite = StatsWrite;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );

	return WriteOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.FreeStats
// [0x00020000] 
// Parameters infos:
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

void UOnlineStatsInterface::FreeStats ( class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnFreeStats = NULL;

	if ( ! pFnFreeStats )
		pFnFreeStats = (UFunction*) UObject::GObjObjects()->Data[ 24337 ];

	UOnlineStatsInterface_execFreeStats_Parms FreeStats_Parms;
	FreeStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnFreeStats, &FreeStats_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearReadOnlineStatsCompleteDelegate )
		pFnClearReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24335 ];

	UOnlineStatsInterface_execClearReadOnlineStatsCompleteDelegate_Parms ClearReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadOnlineStatsCompleteDelegate, &ClearReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm )

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddReadOnlineStatsCompleteDelegate )
		pFnAddReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24333 ];

	UOnlineStatsInterface_execAddReadOnlineStatsCompleteDelegate_Parms AddReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadOnlineStatsCompleteDelegate, &AddReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadOnlineStatsComplete = NULL;

	if ( ! pFnOnReadOnlineStatsComplete )
		pFnOnReadOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 24328 ];

	UOnlineStatsInterface_execOnReadOnlineStatsComplete_Parms OnReadOnlineStatsComplete_Parms;
	OnReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadOnlineStatsComplete, &OnReadOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            NumRows                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows )
{
	static UFunction* pFnReadOnlineStatsByRankAroundPlayer = NULL;

	if ( ! pFnReadOnlineStatsByRankAroundPlayer )
		pFnReadOnlineStatsByRankAroundPlayer = (UFunction*) UObject::GObjObjects()->Data[ 24323 ];

	UOnlineStatsInterface_execReadOnlineStatsByRankAroundPlayer_Parms ReadOnlineStatsByRankAroundPlayer_Parms;
	ReadOnlineStatsByRankAroundPlayer_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsByRankAroundPlayer_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRankAroundPlayer_Parms.NumRows = NumRows;

	this->ProcessEvent ( pFnReadOnlineStatsByRankAroundPlayer, &ReadOnlineStatsByRankAroundPlayer_Parms, NULL );

	return ReadOnlineStatsByRankAroundPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            StartIndex                     ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead )
{
	static UFunction* pFnReadOnlineStatsByRank = NULL;

	if ( ! pFnReadOnlineStatsByRank )
		pFnReadOnlineStatsByRank = (UFunction*) UObject::GObjObjects()->Data[ 24318 ];

	UOnlineStatsInterface_execReadOnlineStatsByRank_Parms ReadOnlineStatsByRank_Parms;
	ReadOnlineStatsByRank_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRank_Parms.StartIndex = StartIndex;
	ReadOnlineStatsByRank_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadOnlineStatsByRank, &ReadOnlineStatsByRank_Parms, NULL );

	return ReadOnlineStatsByRank_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnReadOnlineStatsForFriends = NULL;

	if ( ! pFnReadOnlineStatsForFriends )
		pFnReadOnlineStatsForFriends = (UFunction*) UObject::GObjObjects()->Data[ 24314 ];

	UOnlineStatsInterface_execReadOnlineStatsForFriends_Parms ReadOnlineStatsForFriends_Parms;
	ReadOnlineStatsForFriends_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsForFriends_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStatsForFriends, &ReadOnlineStatsForFriends_Parms, NULL );

	return ReadOnlineStatsForFriends_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStats
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineStatsInterface::ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnReadOnlineStats = NULL;

	if ( ! pFnReadOnlineStats )
		pFnReadOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 24309 ];

	UOnlineStatsInterface_execReadOnlineStats_Parms ReadOnlineStats_Parms;
	ReadOnlineStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStats, &ReadOnlineStats_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ReadOnlineStats_Parms.Players, 0xC );

	return ReadOnlineStats_Parms.ReturnValue;
};

// Function Engine.GameRules.NetDamage
// [0x00420002] 
// Parameters infos:
// int                            OriginalDamage                 ( CPF_Parm )
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameRules::NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnNetDamage = NULL;

	if ( ! pFnNetDamage )
		pFnNetDamage = (UFunction*) UObject::GObjObjects()->Data[ 20914 ];

	AGameRules_execNetDamage_Parms NetDamage_Parms;
	NetDamage_Parms.OriginalDamage = OriginalDamage;
	NetDamage_Parms.injured = injured;
	NetDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NetDamage_Parms.HitLocation, &HitLocation, 0xC );
	NetDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnNetDamage, &NetDamage_Parms, NULL );

	if ( Damage )
		*Damage = NetDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &NetDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameRules.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )

void AGameRules::ScoreKill ( class AController* Killer, class AController* Killed )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 20911 ];

	AGameRules_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Killed = Killed;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameRules.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameRules::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 20908 ];

	AGameRules_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameRules.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Killed                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameRules::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 20902 ];

	AGameRules_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.Killed = Killed;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameRules.OverridePickupQuery
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )
// unsigned char                  bAllowPickup                   ( CPF_Parm | CPF_OutParm )

bool AGameRules::OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup )
{
	static UFunction* pFnOverridePickupQuery = NULL;

	if ( ! pFnOverridePickupQuery )
		pFnOverridePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 20896 ];

	AGameRules_execOverridePickupQuery_Parms OverridePickupQuery_Parms;
	OverridePickupQuery_Parms.Other = Other;
	OverridePickupQuery_Parms.ItemClass = ItemClass;
	OverridePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnOverridePickupQuery, &OverridePickupQuery_Parms, NULL );

	if ( bAllowPickup )
		*bAllowPickup = OverridePickupQuery_Parms.bAllowPickup;

	return OverridePickupQuery_Parms.ReturnValue;
};

// Function Engine.GameRules.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm )

bool AGameRules::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20892 ];

	AGameRules_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameRules.HandleRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameRules::HandleRestartGame ( )
{
	static UFunction* pFnHandleRestartGame = NULL;

	if ( ! pFnHandleRestartGame )
		pFnHandleRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 20890 ];

	AGameRules_execHandleRestartGame_Parms HandleRestartGame_Parms;

	this->ProcessEvent ( pFnHandleRestartGame, &HandleRestartGame_Parms, NULL );

	return HandleRestartGame_Parms.ReturnValue;
};

// Function Engine.GameRules.GetRules
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FString AGameRules::GetRules ( )
{
	static UFunction* pFnGetRules = NULL;

	if ( ! pFnGetRules )
		pFnGetRules = (UFunction*) UObject::GObjObjects()->Data[ 20887 ];

	AGameRules_execGetRules_Parms GetRules_Parms;

	this->ProcessEvent ( pFnGetRules, &GetRules_Parms, NULL );

	return GetRules_Parms.ReturnValue;
};

// Function Engine.GameRules.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* AGameRules::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20882 ];

	AGameRules_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameRules.AddGameRules
// [0x00020002] 
// Parameters infos:
// class AGameRules*              GR                             ( CPF_Parm )

void AGameRules::AddGameRules ( class AGameRules* GR )
{
	static UFunction* pFnAddGameRules = NULL;

	if ( ! pFnAddGameRules )
		pFnAddGameRules = (UFunction*) UObject::GObjObjects()->Data[ 20880 ];

	AGameRules_execAddGameRules_Parms AddGameRules_Parms;
	AddGameRules_Parms.GR = GR;

	this->ProcessEvent ( pFnAddGameRules, &AddGameRules_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.HandleSceneActivated
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ActivatedScene                 ( CPF_Parm )
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIMessageBoxBase::HandleSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation )
{
	static UFunction* pFnHandleSceneActivated = NULL;

	if ( ! pFnHandleSceneActivated )
		pFnHandleSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 32408 ];

	UUIMessageBoxBase_execHandleSceneActivated_Parms HandleSceneActivated_Parms;
	HandleSceneActivated_Parms.ActivatedScene = ActivatedScene;
	HandleSceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnHandleSceneActivated, &HandleSceneActivated_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.OptionChosen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIMessageBoxBase::OptionChosen ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOptionChosen = NULL;

	if ( ! pFnOptionChosen )
		pFnOptionChosen = (UFunction*) UObject::GObjObjects()->Data[ 32403 ];

	UUIMessageBoxBase_execOptionChosen_Parms OptionChosen_Parms;
	OptionChosen_Parms.EventObject = EventObject;
	OptionChosen_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOptionChosen, &OptionChosen_Parms, NULL );

	return OptionChosen_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.SetupDockingRelationships
// [0x00020000] 
// Parameters infos:

void UUIMessageBoxBase::SetupDockingRelationships ( )
{
	static UFunction* pFnSetupDockingRelationships = NULL;

	if ( ! pFnSetupDockingRelationships )
		pFnSetupDockingRelationships = (UFunction*) UObject::GObjObjects()->Data[ 32402 ];

	UUIMessageBoxBase_execSetupDockingRelationships_Parms SetupDockingRelationships_Parms;

	this->ProcessEvent ( pFnSetupDockingRelationships, &SetupDockingRelationships_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.LayoutControls
// [0x00020002] 
// Parameters infos:

void UUIMessageBoxBase::LayoutControls ( )
{
	static UFunction* pFnLayoutControls = NULL;

	if ( ! pFnLayoutControls )
		pFnLayoutControls = (UFunction*) UObject::GObjObjects()->Data[ 32401 ];

	UUIMessageBoxBase_execLayoutControls_Parms LayoutControls_Parms;

	this->ProcessEvent ( pFnLayoutControls, &LayoutControls_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.GetButtonBar
// [0x00020002] 
// Parameters infos:
// class UUICalloutButtonPanel*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUICalloutButtonPanel* UUIMessageBoxBase::GetButtonBar ( )
{
	static UFunction* pFnGetButtonBar = NULL;

	if ( ! pFnGetButtonBar )
		pFnGetButtonBar = (UFunction*) UObject::GObjObjects()->Data[ 32399 ];

	UUIMessageBoxBase_execGetButtonBar_Parms GetButtonBar_Parms;

	this->ProcessEvent ( pFnGetButtonBar, &GetButtonBar_Parms, NULL );

	return GetButtonBar_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.GetMessageLabel
// [0x00020002] 
// Parameters infos:
// class UUILabel*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUILabel* UUIMessageBoxBase::GetMessageLabel ( )
{
	static UFunction* pFnGetMessageLabel = NULL;

	if ( ! pFnGetMessageLabel )
		pFnGetMessageLabel = (UFunction*) UObject::GObjObjects()->Data[ 32397 ];

	UUIMessageBoxBase_execGetMessageLabel_Parms GetMessageLabel_Parms;

	this->ProcessEvent ( pFnGetMessageLabel, &GetMessageLabel_Parms, NULL );

	return GetMessageLabel_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.GetTitleLabel
// [0x00020002] 
// Parameters infos:
// class UUILabel*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUILabel* UUIMessageBoxBase::GetTitleLabel ( )
{
	static UFunction* pFnGetTitleLabel = NULL;

	if ( ! pFnGetTitleLabel )
		pFnGetTitleLabel = (UFunction*) UObject::GObjObjects()->Data[ 32395 ];

	UUIMessageBoxBase_execGetTitleLabel_Parms GetTitleLabel_Parms;

	this->ProcessEvent ( pFnGetTitleLabel, &GetTitleLabel_Parms, NULL );

	return GetTitleLabel_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.FindButtonIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

int UUIMessageBoxBase::FindButtonIndex ( struct FName ButtonAlias )
{
	static UFunction* pFnFindButtonIndex = NULL;

	if ( ! pFnFindButtonIndex )
		pFnFindButtonIndex = (UFunction*) UObject::GObjObjects()->Data[ 32392 ];

	UUIMessageBoxBase_execFindButtonIndex_Parms FindButtonIndex_Parms;
	memcpy ( &FindButtonIndex_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnFindButtonIndex, &FindButtonIndex_Parms, NULL );

	return FindButtonIndex_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.HasButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::HasButton ( struct FName ButtonAlias )
{
	static UFunction* pFnHasButton = NULL;

	if ( ! pFnHasButton )
		pFnHasButton = (UFunction*) UObject::GObjObjects()->Data[ 32389 ];

	UUIMessageBoxBase_execHasButton_Parms HasButton_Parms;
	memcpy ( &HasButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnHasButton, &HasButton_Parms, NULL );

	return HasButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.RemoveButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::RemoveButton ( struct FName ButtonAlias )
{
	static UFunction* pFnRemoveButton = NULL;

	if ( ! pFnRemoveButton )
		pFnRemoveButton = (UFunction*) UObject::GObjObjects()->Data[ 32385 ];

	UUIMessageBoxBase_execRemoveButton_Parms RemoveButton_Parms;
	memcpy ( &RemoveButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnRemoveButton, &RemoveButton_Parms, NULL );

	return RemoveButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.AddButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::AddButton ( struct FName ButtonAlias )
{
	static UFunction* pFnAddButton = NULL;

	if ( ! pFnAddButton )
		pFnAddButton = (UFunction*) UObject::GObjObjects()->Data[ 32380 ];

	UUIMessageBoxBase_execAddButton_Parms AddButton_Parms;
	memcpy ( &AddButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnAddButton, &AddButton_Parms, NULL );

	return AddButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.SetButtonCallback
// [0x00080002] 
// Parameters infos:
// class UUICalloutButton*        TargetButton                   ( CPF_Parm )

void UUIMessageBoxBase::SetButtonCallback ( class UUICalloutButton* TargetButton )
{
	static UFunction* pFnSetButtonCallback = NULL;

	if ( ! pFnSetButtonCallback )
		pFnSetButtonCallback = (UFunction*) UObject::GObjObjects()->Data[ 32378 ];

	UUIMessageBoxBase_execSetButtonCallback_Parms SetButtonCallback_Parms;
	SetButtonCallback_Parms.TargetButton = TargetButton;

	this->ProcessEvent ( pFnSetButtonCallback, &SetButtonCallback_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetQuestion
// [0x00020002] 
// Parameters infos:
// struct FString                 NewMessageString               ( CPF_Parm )

void UUIMessageBoxBase::SetQuestion ( struct FString NewMessageString )
{
	static UFunction* pFnSetQuestion = NULL;

	if ( ! pFnSetQuestion )
		pFnSetQuestion = (UFunction*) UObject::GObjObjects()->Data[ 32376 ];

	UUIMessageBoxBase_execSetQuestion_Parms SetQuestion_Parms;
	memcpy ( &SetQuestion_Parms.NewMessageString, &NewMessageString, 0xC );

	this->ProcessEvent ( pFnSetQuestion, &SetQuestion_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 NewMessageString               ( CPF_Parm )

void UUIMessageBoxBase::SetMessage ( struct FString NewMessageString )
{
	static UFunction* pFnSetMessage = NULL;

	if ( ! pFnSetMessage )
		pFnSetMessage = (UFunction*) UObject::GObjObjects()->Data[ 32374 ];

	UUIMessageBoxBase_execSetMessage_Parms SetMessage_Parms;
	memcpy ( &SetMessage_Parms.NewMessageString, &NewMessageString, 0xC );

	this->ProcessEvent ( pFnSetMessage, &SetMessage_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetTitle
// [0x00020002] 
// Parameters infos:
// struct FString                 NewTitleString                 ( CPF_Parm )

void UUIMessageBoxBase::SetTitle ( struct FString NewTitleString )
{
	static UFunction* pFnSetTitle = NULL;

	if ( ! pFnSetTitle )
		pFnSetTitle = (UFunction*) UObject::GObjObjects()->Data[ 32372 ];

	UUIMessageBoxBase_execSetTitle_Parms SetTitle_Parms;
	memcpy ( &SetTitle_Parms.NewTitleString, &NewTitleString, 0xC );

	this->ProcessEvent ( pFnSetTitle, &SetTitle_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetupMessageBox
// [0x00024002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm )
// struct FString                 Question                       ( CPF_Parm )
// TArray< struct FName >         ButtonAliases                  ( CPF_Parm )
// struct FScriptDelegate         SelectionCallback              ( CPF_OptionalParm | CPF_Parm )

void UUIMessageBoxBase::SetupMessageBox ( struct FString Title, struct FString Message, struct FString Question, TArray< struct FName > ButtonAliases, struct FScriptDelegate SelectionCallback )
{
	static UFunction* pFnSetupMessageBox = NULL;

	if ( ! pFnSetupMessageBox )
		pFnSetupMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 32364 ];

	UUIMessageBoxBase_execSetupMessageBox_Parms SetupMessageBox_Parms;
	memcpy ( &SetupMessageBox_Parms.Title, &Title, 0xC );
	memcpy ( &SetupMessageBox_Parms.Message, &Message, 0xC );
	memcpy ( &SetupMessageBox_Parms.Question, &Question, 0xC );
	memcpy ( &SetupMessageBox_Parms.ButtonAliases, &ButtonAliases, 0xC );
	memcpy ( &SetupMessageBox_Parms.SelectionCallback, &SelectionCallback, 0xC );

	this->ProcessEvent ( pFnSetupMessageBox, &SetupMessageBox_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.OnOptionSelected
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIMessageBoxBase*       Sender                         ( CPF_Parm )
// struct FName                   SelectedInputAlias             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIMessageBoxBase::OnOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex )
{
	static UFunction* pFnOnOptionSelected = NULL;

	if ( ! pFnOnOptionSelected )
		pFnOnOptionSelected = (UFunction*) UObject::GObjObjects()->Data[ 32359 ];

	UUIMessageBoxBase_execOnOptionSelected_Parms OnOptionSelected_Parms;
	OnOptionSelected_Parms.Sender = Sender;
	memcpy ( &OnOptionSelected_Parms.SelectedInputAlias, &SelectedInputAlias, 0x8 );
	OnOptionSelected_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnOptionSelected, &OnOptionSelected_Parms, NULL );

	return OnOptionSelected_Parms.ReturnValue;
};

// Function Engine.UIMessageBox.SetupDockingRelationships
// [0x00020002] 
// Parameters infos:

void UUIMessageBox::SetupDockingRelationships ( )
{
	static UFunction* pFnSetupDockingRelationships = NULL;

	if ( ! pFnSetupDockingRelationships )
		pFnSetupDockingRelationships = (UFunction*) UObject::GObjObjects()->Data[ 32413 ];

	UUIMessageBox_execSetupDockingRelationships_Parms SetupDockingRelationships_Parms;

	this->ProcessEvent ( pFnSetupDockingRelationships, &SetupDockingRelationships_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FString >       Accounts                       ( CPF_Parm | CPF_OutParm )

bool UOnlineAccountInterface::GetLocalAccountNames ( TArray< struct FString >* Accounts )
{
	static UFunction* pFnGetLocalAccountNames = NULL;

	if ( ! pFnGetLocalAccountNames )
		pFnGetLocalAccountNames = (UFunction*) UObject::GObjObjects()->Data[ 22999 ];

	UOnlineAccountInterface_execGetLocalAccountNames_Parms GetLocalAccountNames_Parms;

	this->ProcessEvent ( pFnGetLocalAccountNames, &GetLocalAccountNames_Parms, NULL );

	if ( Accounts )
		memcpy ( Accounts, &GetLocalAccountNames_Parms.Accounts, 0xC );

	return GetLocalAccountNames_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineAccountInterface::DeleteLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnDeleteLocalAccount = NULL;

	if ( ! pFnDeleteLocalAccount )
		pFnDeleteLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 22995 ];

	UOnlineAccountInterface_execDeleteLocalAccount_Parms DeleteLocalAccount_Parms;
	memcpy ( &DeleteLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &DeleteLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnDeleteLocalAccount, &DeleteLocalAccount_Parms, NULL );

	return DeleteLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.RenameLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewUserName                    ( CPF_Parm )
// struct FString                 OldUserName                    ( CPF_Parm )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineAccountInterface::RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password )
{
	static UFunction* pFnRenameLocalAccount = NULL;

	if ( ! pFnRenameLocalAccount )
		pFnRenameLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 22990 ];

	UOnlineAccountInterface_execRenameLocalAccount_Parms RenameLocalAccount_Parms;
	memcpy ( &RenameLocalAccount_Parms.NewUserName, &NewUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.OldUserName, &OldUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnRenameLocalAccount, &RenameLocalAccount_Parms, NULL );

	return RenameLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.CreateLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineAccountInterface::CreateLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnCreateLocalAccount = NULL;

	if ( ! pFnCreateLocalAccount )
		pFnCreateLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 22986 ];

	UOnlineAccountInterface_execCreateLocalAccount_Parms CreateLocalAccount_Parms;
	memcpy ( &CreateLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnCreateLocalAccount, &CreateLocalAccount_Parms, NULL );

	return CreateLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm )

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnClearCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnClearCreateOnlineAccountCompletedDelegate )
		pFnClearCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 22984 ];

	UOnlineAccountInterface_execClearCreateOnlineAccountCompletedDelegate_Parms ClearCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &ClearCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0xC );

	this->ProcessEvent ( pFnClearCreateOnlineAccountCompletedDelegate, &ClearCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm )

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnAddCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnAddCreateOnlineAccountCompletedDelegate )
		pFnAddCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 22982 ];

	UOnlineAccountInterface_execAddCreateOnlineAccountCompletedDelegate_Parms AddCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &AddCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0xC );

	this->ProcessEvent ( pFnAddCreateOnlineAccountCompletedDelegate, &AddCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  ErrorStatus                    ( CPF_Parm )

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus )
{
	static UFunction* pFnOnCreateOnlineAccountCompleted = NULL;

	if ( ! pFnOnCreateOnlineAccountCompleted )
		pFnOnCreateOnlineAccountCompleted = (UFunction*) UObject::GObjObjects()->Data[ 22979 ];

	UOnlineAccountInterface_execOnCreateOnlineAccountCompleted_Parms OnCreateOnlineAccountCompleted_Parms;
	OnCreateOnlineAccountCompleted_Parms.ErrorStatus = ErrorStatus;

	this->ProcessEvent ( pFnOnCreateOnlineAccountCompleted, &OnCreateOnlineAccountCompleted_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm )
// struct FString                 EmailAddress                   ( CPF_Parm )
// struct FString                 ProductKey                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlineAccountInterface::CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey )
{
	static UFunction* pFnCreateOnlineAccount = NULL;

	if ( ! pFnCreateOnlineAccount )
		pFnCreateOnlineAccount = (UFunction*) UObject::GObjObjects()->Data[ 22973 ];

	UOnlineAccountInterface_execCreateOnlineAccount_Parms CreateOnlineAccount_Parms;
	memcpy ( &CreateOnlineAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.Password, &Password, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.EmailAddress, &EmailAddress, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.ProductKey, &ProductKey, 0xC );

	this->ProcessEvent ( pFnCreateOnlineAccount, &CreateOnlineAccount_Parms, NULL );

	return CreateOnlineAccount_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.RateContent
// [0x00420000] 
// Parameters infos:
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            NewRating                      ( CPF_Parm )
// struct FCommunityContentFile   FileToRate                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineCommunityContentInterface::RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate )
{
	static UFunction* pFnRateContent = NULL;

	if ( ! pFnRateContent )
		pFnRateContent = (UFunction*) UObject::GObjObjects()->Data[ 23085 ];

	UOnlineCommunityContentInterface_execRateContent_Parms RateContent_Parms;
	RateContent_Parms.PlayerNum = PlayerNum;
	RateContent_Parms.NewRating = NewRating;

	this->ProcessEvent ( pFnRateContent, &RateContent_Parms, NULL );

	if ( FileToRate )
		memcpy ( FileToRate, &RateContent_Parms.FileToRate, 0x34 );
};

// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnClearGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnClearGetContentPayloadCompleteDelegate )
		pFnClearGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23083 ];

	UOnlineCommunityContentInterface_execClearGetContentPayloadCompleteDelegate_Parms ClearGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &ClearGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearGetContentPayloadCompleteDelegate, &ClearGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnAddGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnAddGetContentPayloadCompleteDelegate )
		pFnAddGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23081 ];

	UOnlineCommunityContentInterface_execAddGetContentPayloadCompleteDelegate_Parms AddGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &AddGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddGetContentPayloadCompleteDelegate, &AddGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char >* Payload )
{
	static UFunction* pFnOnGetContentPayloadComplete = NULL;

	if ( ! pFnOnGetContentPayloadComplete )
		pFnOnGetContentPayloadComplete = (UFunction*) UObject::GObjObjects()->Data[ 23076 ];

	UOnlineCommunityContentInterface_execOnGetContentPayloadComplete_Parms OnGetContentPayloadComplete_Parms;
	OnGetContentPayloadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnGetContentPayloadComplete_Parms.FileDownloaded, &FileDownloaded, 0x34 );

	this->ProcessEvent ( pFnOnGetContentPayloadComplete, &OnGetContentPayloadComplete_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &OnGetContentPayloadComplete_Parms.Payload, 0xC );
};

// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded )
{
	static UFunction* pFnGetContentPayload = NULL;

	if ( ! pFnGetContentPayload )
		pFnGetContentPayload = (UFunction*) UObject::GObjObjects()->Data[ 23072 ];

	UOnlineCommunityContentInterface_execGetContentPayload_Parms GetContentPayload_Parms;
	GetContentPayload_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentPayload, &GetContentPayload_Parms, NULL );

	if ( FileDownloaded )
		memcpy ( FileDownloaded, &GetContentPayload_Parms.FileDownloaded, 0x34 );

	return GetContentPayload_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnClearDownloadContentCompleteDelegate = NULL;

	if ( ! pFnClearDownloadContentCompleteDelegate )
		pFnClearDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23070 ];

	UOnlineCommunityContentInterface_execClearDownloadContentCompleteDelegate_Parms ClearDownloadContentCompleteDelegate_Parms;
	memcpy ( &ClearDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearDownloadContentCompleteDelegate, &ClearDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnAddDownloadContentCompleteDelegate = NULL;

	if ( ! pFnAddDownloadContentCompleteDelegate )
		pFnAddDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23068 ];

	UOnlineCommunityContentInterface_execAddDownloadContentCompleteDelegate_Parms AddDownloadContentCompleteDelegate_Parms;
	memcpy ( &AddDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddDownloadContentCompleteDelegate, &AddDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded )
{
	static UFunction* pFnOnDownloadContentComplete = NULL;

	if ( ! pFnOnDownloadContentComplete )
		pFnOnDownloadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 23065 ];

	UOnlineCommunityContentInterface_execOnDownloadContentComplete_Parms OnDownloadContentComplete_Parms;
	OnDownloadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadContentComplete_Parms.FileDownloaded, &FileDownloaded, 0x34 );

	this->ProcessEvent ( pFnOnDownloadContentComplete, &OnDownloadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.DownloadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileToDownload                 ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = (UFunction*) UObject::GObjObjects()->Data[ 23061 ];

	UOnlineCommunityContentInterface_execDownloadContent_Parms DownloadContent_Parms;
	DownloadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );

	if ( FileToDownload )
		memcpy ( FileToDownload, &DownloadContent_Parms.FileToDownload, 0x34 );

	return DownloadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm )

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnClearUploadContentCompleteDelegate = NULL;

	if ( ! pFnClearUploadContentCompleteDelegate )
		pFnClearUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23059 ];

	UOnlineCommunityContentInterface_execClearUploadContentCompleteDelegate_Parms ClearUploadContentCompleteDelegate_Parms;
	memcpy ( &ClearUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUploadContentCompleteDelegate, &ClearUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm )

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnAddUploadContentCompleteDelegate = NULL;

	if ( ! pFnAddUploadContentCompleteDelegate )
		pFnAddUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23057 ];

	UOnlineCommunityContentInterface_execAddUploadContentCompleteDelegate_Parms AddUploadContentCompleteDelegate_Parms;
	memcpy ( &AddUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUploadContentCompleteDelegate, &AddUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   UploadedFile                   ( CPF_Parm )

void UOnlineCommunityContentInterface::OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile )
{
	static UFunction* pFnOnUploadContentComplete = NULL;

	if ( ! pFnOnUploadContentComplete )
		pFnOnUploadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 23054 ];

	UOnlineCommunityContentInterface_execOnUploadContentComplete_Parms OnUploadContentComplete_Parms;
	OnUploadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnUploadContentComplete_Parms.UploadedFile, &UploadedFile, 0x34 );

	this->ProcessEvent ( pFnOnUploadContentComplete, &OnUploadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.UploadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FCommunityContentMetadata MetaData                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::UploadContent ( unsigned char PlayerNum, TArray< unsigned char >* Payload, struct FCommunityContentMetadata* MetaData )
{
	static UFunction* pFnUploadContent = NULL;

	if ( ! pFnUploadContent )
		pFnUploadContent = (UFunction*) UObject::GObjObjects()->Data[ 23048 ];

	UOnlineCommunityContentInterface_execUploadContent_Parms UploadContent_Parms;
	UploadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnUploadContent, &UploadContent_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &UploadContent_Parms.Payload, 0xC );

	if ( MetaData )
		memcpy ( MetaData, &UploadContent_Parms.MetaData, 0x10 );

	return UploadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FOnlineFriend           Friend                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetFriendsContentList = NULL;

	if ( ! pFnGetFriendsContentList )
		pFnGetFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 23042 ];

	UOnlineCommunityContentInterface_execGetFriendsContentList_Parms GetFriendsContentList_Parms;
	GetFriendsContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetFriendsContentList, &GetFriendsContentList_Parms, NULL );

	if ( Friend )
		memcpy ( Friend, &GetFriendsContentList_Parms.Friend, 0x24 );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetFriendsContentList_Parms.ContentFiles, 0xC );

	return GetFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsContentListCompleteDelegate )
		pFnClearReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23040 ];

	UOnlineCommunityContentInterface_execClearReadFriendsContentListCompleteDelegate_Parms ClearReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadFriendsContentListCompleteDelegate, &ClearReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsContentListCompleteDelegate )
		pFnAddReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23038 ];

	UOnlineCommunityContentInterface_execAddReadFriendsContentListCompleteDelegate_Parms AddReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &AddReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadFriendsContentListCompleteDelegate, &AddReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsContentListComplete = NULL;

	if ( ! pFnOnReadFriendsContentListComplete )
		pFnOnReadFriendsContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 23036 ];

	UOnlineCommunityContentInterface_execOnReadFriendsContentListComplete_Parms OnReadFriendsContentListComplete_Parms;
	OnReadFriendsContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsContentListComplete, &OnReadFriendsContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnReadFriendsContentList = NULL;

	if ( ! pFnReadFriendsContentList )
		pFnReadFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 23029 ];

	UOnlineCommunityContentInterface_execReadFriendsContentList_Parms ReadFriendsContentList_Parms;
	ReadFriendsContentList_Parms.PlayerNum = PlayerNum;
	ReadFriendsContentList_Parms.StartAt = StartAt;
	ReadFriendsContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadFriendsContentList, &ReadFriendsContentList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &ReadFriendsContentList_Parms.Friends, 0xC );

	return ReadFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm )

bool UOnlineCommunityContentInterface::GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 23024 ];

	UOnlineCommunityContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetContentList_Parms.ContentFiles, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnClearReadContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadContentListCompleteDelegate )
		pFnClearReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23022 ];

	UOnlineCommunityContentInterface_execClearReadContentListCompleteDelegate_Parms ClearReadContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadContentListCompleteDelegate, &ClearReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm )

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnAddReadContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadContentListCompleteDelegate )
		pFnAddReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23020 ];

	UOnlineCommunityContentInterface_execAddReadContentListCompleteDelegate_Parms AddReadContentListCompleteDelegate_Parms;
	memcpy ( &AddReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadContentListCompleteDelegate, &AddReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentListComplete = NULL;

	if ( ! pFnOnReadContentListComplete )
		pFnOnReadContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 23013 ];

	UOnlineCommunityContentInterface_execOnReadContentListComplete_Parms OnReadContentListComplete_Parms;
	OnReadContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentListComplete, &OnReadContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadContentList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineCommunityContentInterface::ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 23008 ];

	UOnlineCommunityContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.PlayerNum = PlayerNum;
	ReadContentList_Parms.StartAt = StartAt;
	ReadContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.Exit
// [0x00020000] 
// Parameters infos:

void UOnlineCommunityContentInterface::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 23007 ];

	UOnlineCommunityContentInterface_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineCommunityContentInterface::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 23005 ];

	UOnlineCommunityContentInterface_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            NewDownloads                   ( CPF_Parm | CPF_OutParm )
// int                            TotalDownloads                 ( CPF_Parm | CPF_OutParm )

void UOnlineContentInterface::GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads )
{
	static UFunction* pFnGetAvailableDownloadCounts = NULL;

	if ( ! pFnGetAvailableDownloadCounts )
		pFnGetAvailableDownloadCounts = (UFunction*) UObject::GObjObjects()->Data[ 23128 ];

	UOnlineContentInterface_execGetAvailableDownloadCounts_Parms GetAvailableDownloadCounts_Parms;
	GetAvailableDownloadCounts_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetAvailableDownloadCounts, &GetAvailableDownloadCounts_Parms, NULL );

	if ( NewDownloads )
		*NewDownloads = GetAvailableDownloadCounts_Parms.NewDownloads;

	if ( TotalDownloads )
		*TotalDownloads = GetAvailableDownloadCounts_Parms.TotalDownloads;
};

// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm )

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnClearQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnClearQueryAvailableDownloadsComplete )
		pFnClearQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23125 ];

	UOnlineContentInterface_execClearQueryAvailableDownloadsComplete_Parms ClearQueryAvailableDownloadsComplete_Parms;
	ClearQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0xC );

	this->ProcessEvent ( pFnClearQueryAvailableDownloadsComplete, &ClearQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm )

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnAddQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnAddQueryAvailableDownloadsComplete )
		pFnAddQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23122 ];

	UOnlineContentInterface_execAddQueryAvailableDownloadsComplete_Parms AddQueryAvailableDownloadsComplete_Parms;
	AddQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0xC );

	this->ProcessEvent ( pFnAddQueryAvailableDownloadsComplete, &AddQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnOnQueryAvailableDownloadsComplete )
		pFnOnQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 23120 ];

	UOnlineContentInterface_execOnQueryAvailableDownloadsComplete_Parms OnQueryAvailableDownloadsComplete_Parms;
	OnQueryAvailableDownloadsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnQueryAvailableDownloadsComplete, &OnQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::QueryAvailableDownloads ( unsigned char LocalUserNum )
{
	static UFunction* pFnQueryAvailableDownloads = NULL;

	if ( ! pFnQueryAvailableDownloads )
		pFnQueryAvailableDownloads = (UFunction*) UObject::GObjObjects()->Data[ 23117 ];

	UOnlineContentInterface_execQueryAvailableDownloads_Parms QueryAvailableDownloads_Parms;
	QueryAvailableDownloads_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnQueryAvailableDownloads, &QueryAvailableDownloads_Parms, NULL );

	return QueryAvailableDownloads_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FOnlineContent > ContentList                    ( CPF_Parm | CPF_OutParm )

unsigned char UOnlineContentInterface::GetContentList ( unsigned char LocalUserNum, TArray< struct FOnlineContent >* ContentList )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 23112 ];

	UOnlineContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentList )
		memcpy ( ContentList, &GetContentList_Parms.ContentList, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadContentList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::ReadContentList ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 23109 ];

	UOnlineContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm )

void UOnlineContentInterface::ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnClearReadContentComplete = NULL;

	if ( ! pFnClearReadContentComplete )
		pFnClearReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 23106 ];

	UOnlineContentInterface_execClearReadContentComplete_Parms ClearReadContentComplete_Parms;
	ClearReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadContentComplete, &ClearReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm )

void UOnlineContentInterface::AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnAddReadContentComplete = NULL;

	if ( ! pFnAddReadContentComplete )
		pFnAddReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 23103 ];

	UOnlineContentInterface_execAddReadContentComplete_Parms AddReadContentComplete_Parms;
	AddReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadContentComplete, &AddReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnReadContentComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentComplete = NULL;

	if ( ! pFnOnReadContentComplete )
		pFnOnReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 23101 ];

	UOnlineContentInterface_execOnReadContentComplete_Parms OnReadContentComplete_Parms;
	OnReadContentComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentComplete, &OnReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearContentChangeDelegate = NULL;

	if ( ! pFnClearContentChangeDelegate )
		pFnClearContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23098 ];

	UOnlineContentInterface_execClearContentChangeDelegate_Parms ClearContentChangeDelegate_Parms;
	memcpy ( &ClearContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0xC );
	ClearContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearContentChangeDelegate, &ClearContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddContentChangeDelegate = NULL;

	if ( ! pFnAddContentChangeDelegate )
		pFnAddContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23095 ];

	UOnlineContentInterface_execAddContentChangeDelegate_Parms AddContentChangeDelegate_Parms;
	memcpy ( &AddContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0xC );
	AddContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddContentChangeDelegate, &AddContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnContentChange
// [0x00120000] 
// Parameters infos:

void UOnlineContentInterface::OnContentChange ( )
{
	static UFunction* pFnOnContentChange = NULL;

	if ( ! pFnOnContentChange )
		pFnOnContentChange = (UFunction*) UObject::GObjObjects()->Data[ 23091 ];

	UOnlineContentInterface_execOnContentChange_Parms OnContentChange_Parms;

	this->ProcessEvent ( pFnOnContentChange, &OnContentChange_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.UploadHardwareData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// struct FString                 PlayerNick                     ( CPF_Parm )

bool UOnlineEventsInterface::UploadHardwareData ( struct FUniqueNetId UniqueId, struct FString PlayerNick )
{
	static UFunction* pFnUploadHardwareData = NULL;

	if ( ! pFnUploadHardwareData )
		pFnUploadHardwareData = (UFunction*) UObject::GObjObjects()->Data[ 23161 ];

	UOnlineEventsInterface_execUploadHardwareData_Parms UploadHardwareData_Parms;
	memcpy ( &UploadHardwareData_Parms.UniqueId, &UniqueId, 0x8 );
	memcpy ( &UploadHardwareData_Parms.PlayerNick, &PlayerNick, 0xC );

	this->ProcessEvent ( pFnUploadHardwareData, &UploadHardwareData_Parms, NULL );

	return UploadHardwareData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadGameplayEventsData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameplayEvents*   Events                         ( CPF_Parm )

bool UOnlineEventsInterface::UploadGameplayEventsData ( class UOnlineGameplayEvents* Events )
{
	static UFunction* pFnUploadGameplayEventsData = NULL;

	if ( ! pFnUploadGameplayEventsData )
		pFnUploadGameplayEventsData = (UFunction*) UObject::GObjObjects()->Data[ 23158 ];

	UOnlineEventsInterface_execUploadGameplayEventsData_Parms UploadGameplayEventsData_Parms;
	UploadGameplayEventsData_Parms.Events = Events;

	this->ProcessEvent ( pFnUploadGameplayEventsData, &UploadGameplayEventsData_Parms, NULL );

	return UploadGameplayEventsData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadProfileData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// struct FString                 PlayerNick                     ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlineEventsInterface::UploadProfileData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnUploadProfileData = NULL;

	if ( ! pFnUploadProfileData )
		pFnUploadProfileData = (UFunction*) UObject::GObjObjects()->Data[ 23153 ];

	UOnlineEventsInterface_execUploadProfileData_Parms UploadProfileData_Parms;
	memcpy ( &UploadProfileData_Parms.UniqueId, &UniqueId, 0x8 );
	memcpy ( &UploadProfileData_Parms.PlayerNick, &PlayerNick, 0xC );
	UploadProfileData_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnUploadProfileData, &UploadProfileData_Parms, NULL );

	return UploadProfileData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.SaveLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::SaveLog ( )
{
	static UFunction* pFnSaveLog = NULL;

	if ( ! pFnSaveLog )
		pFnSaveLog = (UFunction*) UObject::GObjObjects()->Data[ 23152 ];

	UOnlineEventsInterface_execSaveLog_Parms SaveLog_Parms;

	this->ProcessEvent ( pFnSaveLog, &SaveLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.UploadLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::UploadLog ( )
{
	static UFunction* pFnUploadLog = NULL;

	if ( ! pFnUploadLog )
		pFnUploadLog = (UFunction*) UObject::GObjObjects()->Data[ 23151 ];

	UOnlineEventsInterface_execUploadLog_Parms UploadLog_Parms;

	this->ProcessEvent ( pFnUploadLog, &UploadLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.EndEvent
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::EndEvent ( )
{
	static UFunction* pFnEndEvent = NULL;

	if ( ! pFnEndEvent )
		pFnEndEvent = (UFunction*) UObject::GObjObjects()->Data[ 23150 ];

	UOnlineEventsInterface_execEndEvent_Parms EndEvent_Parms;

	this->ProcessEvent ( pFnEndEvent, &EndEvent_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamString
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm )
// struct FString                 ParamValue                     ( CPF_Parm )

void UOnlineEventsInterface::AddParamString ( struct FString ParamName, struct FString ParamValue )
{
	static UFunction* pFnAddParamString = NULL;

	if ( ! pFnAddParamString )
		pFnAddParamString = (UFunction*) UObject::GObjObjects()->Data[ 23147 ];

	UOnlineEventsInterface_execAddParamString_Parms AddParamString_Parms;
	memcpy ( &AddParamString_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &AddParamString_Parms.ParamValue, &ParamValue, 0xC );

	this->ProcessEvent ( pFnAddParamString, &AddParamString_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamFloat
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm )
// float                          ParamValue                     ( CPF_Parm )

void UOnlineEventsInterface::AddParamFloat ( struct FString ParamName, float ParamValue )
{
	static UFunction* pFnAddParamFloat = NULL;

	if ( ! pFnAddParamFloat )
		pFnAddParamFloat = (UFunction*) UObject::GObjObjects()->Data[ 23144 ];

	UOnlineEventsInterface_execAddParamFloat_Parms AddParamFloat_Parms;
	memcpy ( &AddParamFloat_Parms.ParamName, &ParamName, 0xC );
	AddParamFloat_Parms.ParamValue = ParamValue;

	this->ProcessEvent ( pFnAddParamFloat, &AddParamFloat_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamInt
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm )
// int                            ParamValue                     ( CPF_Parm )

void UOnlineEventsInterface::AddParamInt ( struct FString ParamName, int ParamValue )
{
	static UFunction* pFnAddParamInt = NULL;

	if ( ! pFnAddParamInt )
		pFnAddParamInt = (UFunction*) UObject::GObjObjects()->Data[ 23141 ];

	UOnlineEventsInterface_execAddParamInt_Parms AddParamInt_Parms;
	memcpy ( &AddParamInt_Parms.ParamName, &ParamName, 0xC );
	AddParamInt_Parms.ParamValue = ParamValue;

	this->ProcessEvent ( pFnAddParamInt, &AddParamInt_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.BeginEvent
// [0x00020000] 
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm )

void UOnlineEventsInterface::BeginEvent ( struct FString EventName )
{
	static UFunction* pFnBeginEvent = NULL;

	if ( ! pFnBeginEvent )
		pFnBeginEvent = (UFunction*) UObject::GObjObjects()->Data[ 23139 ];

	UOnlineEventsInterface_execBeginEvent_Parms BeginEvent_Parms;
	memcpy ( &BeginEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnBeginEvent, &BeginEvent_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.EndLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::EndLog ( )
{
	static UFunction* pFnEndLog = NULL;

	if ( ! pFnEndLog )
		pFnEndLog = (UFunction*) UObject::GObjObjects()->Data[ 23138 ];

	UOnlineEventsInterface_execEndLog_Parms EndLog_Parms;

	this->ProcessEvent ( pFnEndLog, &EndLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.BeginLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::BeginLog ( )
{
	static UFunction* pFnBeginLog = NULL;

	if ( ! pFnBeginLog )
		pFnBeginLog = (UFunction*) UObject::GObjObjects()->Data[ 23137 ];

	UOnlineEventsInterface_execBeginLog_Parms BeginLog_Parms;

	this->ProcessEvent ( pFnBeginLog, &BeginLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MaxNumEvents                   ( CPF_Parm )

bool UOnlineEventsInterface::Init ( int MaxNumEvents )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 23134 ];

	UOnlineEventsInterface_execInit_Parms Init_Parms;
	Init_Parms.MaxNumEvents = MaxNumEvents;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.GetNews
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

struct FString UOnlineNewsInterface::GetNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnGetNews = NULL;

	if ( ! pFnGetNews )
		pFnGetNews = (UFunction*) UObject::GObjObjects()->Data[ 23652 ];

	UOnlineNewsInterface_execGetNews_Parms GetNews_Parms;
	GetNews_Parms.LocalUserNum = LocalUserNum;
	GetNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnGetNews, &GetNews_Parms, NULL );

	return GetNews_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm )

void UOnlineNewsInterface::ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnClearReadNewsCompletedDelegate = NULL;

	if ( ! pFnClearReadNewsCompletedDelegate )
		pFnClearReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23639 ];

	UOnlineNewsInterface_execClearReadNewsCompletedDelegate_Parms ClearReadNewsCompletedDelegate_Parms;
	memcpy ( &ClearReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadNewsCompletedDelegate, &ClearReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm )

void UOnlineNewsInterface::AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnAddReadNewsCompletedDelegate = NULL;

	if ( ! pFnAddReadNewsCompletedDelegate )
		pFnAddReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23637 ];

	UOnlineNewsInterface_execAddReadNewsCompletedDelegate_Parms AddReadNewsCompletedDelegate_Parms;
	memcpy ( &AddReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadNewsCompletedDelegate, &AddReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.OnReadNewsCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

void UOnlineNewsInterface::OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType )
{
	static UFunction* pFnOnReadNewsCompleted = NULL;

	if ( ! pFnOnReadNewsCompleted )
		pFnOnReadNewsCompleted = (UFunction*) UObject::GObjObjects()->Data[ 23633 ];

	UOnlineNewsInterface_execOnReadNewsCompleted_Parms OnReadNewsCompleted_Parms;
	OnReadNewsCompleted_Parms.bWasSuccessful = bWasSuccessful;
	OnReadNewsCompleted_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnOnReadNewsCompleted, &OnReadNewsCompleted_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.ReadNews
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

bool UOnlineNewsInterface::ReadNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnReadNews = NULL;

	if ( ! pFnReadNews )
		pFnReadNews = (UFunction*) UObject::GObjObjects()->Data[ 23629 ];

	UOnlineNewsInterface_execReadNews_Parms ReadNews_Parms;
	ReadNews_Parms.LocalUserNum = LocalUserNum;
	ReadNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnReadNews, &ReadNews_Parms, NULL );

	return ReadNews_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm )
// struct FString                 Description                    ( CPF_Parm )

bool UOnlineRecentPlayersList::ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowLastPartyPlayerList = NULL;

	if ( ! pFnShowLastPartyPlayerList )
		pFnShowLastPartyPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 24293 ];

	UOnlineRecentPlayersList_execShowLastPartyPlayerList_Parms ShowLastPartyPlayerList_Parms;
	ShowLastPartyPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowLastPartyPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowLastPartyPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowLastPartyPlayerList, &ShowLastPartyPlayerList_Parms, NULL );

	return ShowLastPartyPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm )
// struct FString                 Description                    ( CPF_Parm )

bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPartiesPlayerList = NULL;

	if ( ! pFnShowRecentPartiesPlayerList )
		pFnShowRecentPartiesPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 24285 ];

	UOnlineRecentPlayersList_execShowRecentPartiesPlayerList_Parms ShowRecentPartiesPlayerList_Parms;
	ShowRecentPartiesPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowRecentPartiesPlayerList, &ShowRecentPartiesPlayerList_Parms, NULL );

	return ShowRecentPartiesPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm )
// struct FString                 Description                    ( CPF_Parm )

bool UOnlineRecentPlayersList::ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPlayerList = NULL;

	if ( ! pFnShowRecentPlayerList )
		pFnShowRecentPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 24279 ];

	UOnlineRecentPlayersList_execShowRecentPlayerList_Parms ShowRecentPlayerList_Parms;
	ShowRecentPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowRecentPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowRecentPlayerList, &ShowRecentPlayerList_Parms, NULL );

	return ShowRecentPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.SetLastParty
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineRecentPlayersList::SetLastParty ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers )
{
	static UFunction* pFnSetLastParty = NULL;

	if ( ! pFnSetLastParty )
		pFnSetLastParty = (UFunction*) UObject::GObjObjects()->Data[ 24275 ];

	UOnlineRecentPlayersList_execSetLastParty_Parms SetLastParty_Parms;
	memcpy ( &SetLastParty_Parms.PartyLeader, &PartyLeader, 0x8 );

	this->ProcessEvent ( pFnSetLastParty, &SetLastParty_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &SetLastParty_Parms.PartyMembers, 0xC );
};

// Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
// [0x00420002] 
// Parameters infos:
// TArray< struct FUniqueNetId >  Players                        ( CPF_Parm | CPF_OutParm )

void UOnlineRecentPlayersList::GetPlayersFromRecentParties ( TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnGetPlayersFromRecentParties = NULL;

	if ( ! pFnGetPlayersFromRecentParties )
		pFnGetPlayersFromRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 24269 ];

	UOnlineRecentPlayersList_execGetPlayersFromRecentParties_Parms GetPlayersFromRecentParties_Parms;

	this->ProcessEvent ( pFnGetPlayersFromRecentParties, &GetPlayersFromRecentParties_Parms, NULL );

	if ( Players )
		memcpy ( Players, &GetPlayersFromRecentParties_Parms.Players, 0xC );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentParties
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentParties ( )
{
	static UFunction* pFnClearRecentParties = NULL;

	if ( ! pFnClearRecentParties )
		pFnClearRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 24268 ];

	UOnlineRecentPlayersList_execClearRecentParties_Parms ClearRecentParties_Parms;

	this->ProcessEvent ( pFnClearRecentParties, &ClearRecentParties_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineRecentPlayersList::AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers )
{
	static UFunction* pFnAddPartyToRecentParties = NULL;

	if ( ! pFnAddPartyToRecentParties )
		pFnAddPartyToRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 24263 ];

	UOnlineRecentPlayersList_execAddPartyToRecentParties_Parms AddPartyToRecentParties_Parms;
	memcpy ( &AddPartyToRecentParties_Parms.PartyLeader, &PartyLeader, 0x8 );

	this->ProcessEvent ( pFnAddPartyToRecentParties, &AddPartyToRecentParties_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &AddPartyToRecentParties_Parms.PartyMembers, 0xC );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentPlayers ( )
{
	static UFunction* pFnClearRecentPlayers = NULL;

	if ( ! pFnClearRecentPlayers )
		pFnClearRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 24262 ];

	UOnlineRecentPlayersList_execClearRecentPlayers_Parms ClearRecentPlayers_Parms;

	this->ProcessEvent ( pFnClearRecentPlayers, &ClearRecentPlayers_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            NewPlayer                      ( CPF_Parm )

void UOnlineRecentPlayersList::AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer )
{
	static UFunction* pFnAddPlayerToRecentPlayers = NULL;

	if ( ! pFnAddPlayerToRecentPlayers )
		pFnAddPlayerToRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 24259 ];

	UOnlineRecentPlayersList_execAddPlayerToRecentPlayers_Parms AddPlayerToRecentPlayers_Parms;
	memcpy ( &AddPlayerToRecentPlayers_Parms.NewPlayer, &NewPlayer, 0x8 );

	this->ProcessEvent ( pFnAddPlayerToRecentPlayers, &AddPlayerToRecentPlayers_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteAll ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnmuteAll = NULL;

	if ( ! pFnUnmuteAll )
		pFnUnmuteAll = (UFunction*) UObject::GObjObjects()->Data[ 24641 ];

	UOnlineVoiceInterface_execUnmuteAll_Parms UnmuteAll_Parms;
	UnmuteAll_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnmuteAll, &UnmuteAll_Parms, NULL );

	return UnmuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAllowFriends                  ( CPF_Parm )

bool UOnlineVoiceInterface::MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends )
{
	static UFunction* pFnMuteAll = NULL;

	if ( ! pFnMuteAll )
		pFnMuteAll = (UFunction*) UObject::GObjObjects()->Data[ 24637 ];

	UOnlineVoiceInterface_execMuteAll_Parms MuteAll_Parms;
	MuteAll_Parms.LocalUserNum = LocalUserNum;
	MuteAll_Parms.bAllowFriends = bAllowFriends;

	this->ProcessEvent ( pFnMuteAll, &MuteAll_Parms, NULL );

	return MuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class USpeechRecognition*      SpeechRecogObj                 ( CPF_Parm )

bool UOnlineVoiceInterface::SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj )
{
	static UFunction* pFnSetSpeechRecognitionObject = NULL;

	if ( ! pFnSetSpeechRecognitionObject )
		pFnSetSpeechRecognitionObject = (UFunction*) UObject::GObjObjects()->Data[ 24633 ];

	UOnlineVoiceInterface_execSetSpeechRecognitionObject_Parms SetSpeechRecognitionObject_Parms;
	SetSpeechRecognitionObject_Parms.LocalUserNum = LocalUserNum;
	SetSpeechRecognitionObject_Parms.SpeechRecogObj = SpeechRecogObj;

	this->ProcessEvent ( pFnSetSpeechRecognitionObject, &SetSpeechRecognitionObject_Parms, NULL );

	return SetSpeechRecognitionObject_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SelectVocabulary
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            VocabularyId                   ( CPF_Parm )

bool UOnlineVoiceInterface::SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId )
{
	static UFunction* pFnSelectVocabulary = NULL;

	if ( ! pFnSelectVocabulary )
		pFnSelectVocabulary = (UFunction*) UObject::GObjObjects()->Data[ 24629 ];

	UOnlineVoiceInterface_execSelectVocabulary_Parms SelectVocabulary_Parms;
	SelectVocabulary_Parms.LocalUserNum = LocalUserNum;
	SelectVocabulary_Parms.VocabularyId = VocabularyId;

	this->ProcessEvent ( pFnSelectVocabulary, &SelectVocabulary_Parms, NULL );

	return SelectVocabulary_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm )

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnClearRecognitionCompleteDelegate = NULL;

	if ( ! pFnClearRecognitionCompleteDelegate )
		pFnClearRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24626 ];

	UOnlineVoiceInterface_execClearRecognitionCompleteDelegate_Parms ClearRecognitionCompleteDelegate_Parms;
	ClearRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0xC );

	this->ProcessEvent ( pFnClearRecognitionCompleteDelegate, &ClearRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm )

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnAddRecognitionCompleteDelegate = NULL;

	if ( ! pFnAddRecognitionCompleteDelegate )
		pFnAddRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24623 ];

	UOnlineVoiceInterface_execAddRecognitionCompleteDelegate_Parms AddRecognitionCompleteDelegate_Parms;
	AddRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0xC );

	this->ProcessEvent ( pFnAddRecognitionCompleteDelegate, &AddRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// [0x00120000] 
// Parameters infos:

void UOnlineVoiceInterface::OnRecognitionComplete ( )
{
	static UFunction* pFnOnRecognitionComplete = NULL;

	if ( ! pFnOnRecognitionComplete )
		pFnOnRecognitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 24622 ];

	UOnlineVoiceInterface_execOnRecognitionComplete_Parms OnRecognitionComplete_Parms;

	this->ProcessEvent ( pFnOnRecognitionComplete, &OnRecognitionComplete_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FSpeechRecognizedWord > Words                          ( CPF_Parm | CPF_OutParm )

bool UOnlineVoiceInterface::GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words )
{
	static UFunction* pFnGetRecognitionResults = NULL;

	if ( ! pFnGetRecognitionResults )
		pFnGetRecognitionResults = (UFunction*) UObject::GObjObjects()->Data[ 24617 ];

	UOnlineVoiceInterface_execGetRecognitionResults_Parms GetRecognitionResults_Parms;
	GetRecognitionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetRecognitionResults, &GetRecognitionResults_Parms, NULL );

	if ( Words )
		memcpy ( Words, &GetRecognitionResults_Parms.Words, 0xC );

	return GetRecognitionResults_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StopSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopSpeechRecognition = NULL;

	if ( ! pFnStopSpeechRecognition )
		pFnStopSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 24614 ];

	UOnlineVoiceInterface_execStopSpeechRecognition_Parms StopSpeechRecognition_Parms;
	StopSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopSpeechRecognition, &StopSpeechRecognition_Parms, NULL );

	return StopSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StartSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartSpeechRecognition = NULL;

	if ( ! pFnStartSpeechRecognition )
		pFnStartSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 24611 ];

	UOnlineVoiceInterface_execStartSpeechRecognition_Parms StartSpeechRecognition_Parms;
	StartSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartSpeechRecognition, &StartSpeechRecognition_Parms, NULL );

	return StartSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StopNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopNetworkedVoice = NULL;

	if ( ! pFnStopNetworkedVoice )
		pFnStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 24609 ];

	UOnlineVoiceInterface_execStopNetworkedVoice_Parms StopNetworkedVoice_Parms;
	StopNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopNetworkedVoice, &StopNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StartNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartNetworkedVoice = NULL;

	if ( ! pFnStartNetworkedVoice )
		pFnStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 24607 ];

	UOnlineVoiceInterface_execStartNetworkedVoice_Parms StartNetworkedVoice_Parms;
	StartNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartNetworkedVoice, &StartNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm )

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnClearPlayerTalkingDelegate = NULL;

	if ( ! pFnClearPlayerTalkingDelegate )
		pFnClearPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24605 ];

	UOnlineVoiceInterface_execClearPlayerTalkingDelegate_Parms ClearPlayerTalkingDelegate_Parms;
	memcpy ( &ClearPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0xC );

	this->ProcessEvent ( pFnClearPlayerTalkingDelegate, &ClearPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm )

void UOnlineVoiceInterface::AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnAddPlayerTalkingDelegate = NULL;

	if ( ! pFnAddPlayerTalkingDelegate )
		pFnAddPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 24603 ];

	UOnlineVoiceInterface_execAddPlayerTalkingDelegate_Parms AddPlayerTalkingDelegate_Parms;
	memcpy ( &AddPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0xC );

	this->ProcessEvent ( pFnAddPlayerTalkingDelegate, &AddPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnPlayerTalking
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            Player                         ( CPF_Parm )

void UOnlineVoiceInterface::OnPlayerTalking ( struct FUniqueNetId Player )
{
	static UFunction* pFnOnPlayerTalking = NULL;

	if ( ! pFnOnPlayerTalking )
		pFnOnPlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 24599 ];

	UOnlineVoiceInterface_execOnPlayerTalking_Parms OnPlayerTalking_Parms;
	memcpy ( &OnPlayerTalking_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnOnPlayerTalking, &OnPlayerTalking_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnmuteRemoteTalker = NULL;

	if ( ! pFnUnmuteRemoteTalker )
		pFnUnmuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 24595 ];

	UOnlineVoiceInterface_execUnmuteRemoteTalker_Parms UnmuteRemoteTalker_Parms;
	UnmuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &UnmuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnmuteRemoteTalker, &UnmuteRemoteTalker_Parms, NULL );

	return UnmuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnMuteRemoteTalker = NULL;

	if ( ! pFnMuteRemoteTalker )
		pFnMuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 24591 ];

	UOnlineVoiceInterface_execMuteRemoteTalker_Parms MuteRemoteTalker_Parms;
	MuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &MuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnMuteRemoteTalker, &MuteRemoteTalker_Parms, NULL );

	return MuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            Priority                       ( CPF_Parm )

bool UOnlineVoiceInterface::SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority )
{
	static UFunction* pFnSetRemoteTalkerPriority = NULL;

	if ( ! pFnSetRemoteTalkerPriority )
		pFnSetRemoteTalkerPriority = (UFunction*) UObject::GObjObjects()->Data[ 24586 ];

	UOnlineVoiceInterface_execSetRemoteTalkerPriority_Parms SetRemoteTalkerPriority_Parms;
	SetRemoteTalkerPriority_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetRemoteTalkerPriority_Parms.PlayerID, &PlayerID, 0x8 );
	SetRemoteTalkerPriority_Parms.Priority = Priority;

	this->ProcessEvent ( pFnSetRemoteTalkerPriority, &SetRemoteTalkerPriority_Parms, NULL );

	return SetRemoteTalkerPriority_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsHeadsetPresent ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsHeadsetPresent = NULL;

	if ( ! pFnIsHeadsetPresent )
		pFnIsHeadsetPresent = (UFunction*) UObject::GObjObjects()->Data[ 24583 ];

	UOnlineVoiceInterface_execIsHeadsetPresent_Parms IsHeadsetPresent_Parms;
	IsHeadsetPresent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsHeadsetPresent, &IsHeadsetPresent_Parms, NULL );

	return IsHeadsetPresent_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::IsRemotePlayerTalking ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsRemotePlayerTalking = NULL;

	if ( ! pFnIsRemotePlayerTalking )
		pFnIsRemotePlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 24580 ];

	UOnlineVoiceInterface_execIsRemotePlayerTalking_Parms IsRemotePlayerTalking_Parms;
	memcpy ( &IsRemotePlayerTalking_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsRemotePlayerTalking, &IsRemotePlayerTalking_Parms, NULL );

	return IsRemotePlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsLocalPlayerTalking ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalPlayerTalking = NULL;

	if ( ! pFnIsLocalPlayerTalking )
		pFnIsLocalPlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 24577 ];

	UOnlineVoiceInterface_execIsLocalPlayerTalking_Parms IsLocalPlayerTalking_Parms;
	IsLocalPlayerTalking_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalPlayerTalking, &IsLocalPlayerTalking_Parms, NULL );

	return IsLocalPlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterRemoteTalker = NULL;

	if ( ! pFnUnregisterRemoteTalker )
		pFnUnregisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 24574 ];

	UOnlineVoiceInterface_execUnregisterRemoteTalker_Parms UnregisterRemoteTalker_Parms;
	memcpy ( &UnregisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterRemoteTalker, &UnregisterRemoteTalker_Parms, NULL );

	return UnregisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnRegisterRemoteTalker = NULL;

	if ( ! pFnRegisterRemoteTalker )
		pFnRegisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 24571 ];

	UOnlineVoiceInterface_execRegisterRemoteTalker_Parms RegisterRemoteTalker_Parms;
	memcpy ( &RegisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterRemoteTalker, &RegisterRemoteTalker_Parms, NULL );

	return RegisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnregisterLocalTalker = NULL;

	if ( ! pFnUnregisterLocalTalker )
		pFnUnregisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 24568 ];

	UOnlineVoiceInterface_execUnregisterLocalTalker_Parms UnregisterLocalTalker_Parms;
	UnregisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnregisterLocalTalker, &UnregisterLocalTalker_Parms, NULL );

	return UnregisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnRegisterLocalTalker = NULL;

	if ( ! pFnRegisterLocalTalker )
		pFnRegisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 24565 ];

	UOnlineVoiceInterface_execRegisterLocalTalker_Parms RegisterLocalTalker_Parms;
	RegisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnRegisterLocalTalker, &RegisterLocalTalker_Parms, NULL );

	return RegisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.ScriptConsoleEntry.OnCreateChild
// [0x00020000] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UScriptConsoleEntry::OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreateChild = NULL;

	if ( ! pFnOnCreateChild )
		pFnOnCreateChild = (UFunction*) UObject::GObjObjects()->Data[ 28065 ];

	UScriptConsoleEntry_execOnCreateChild_Parms OnCreateChild_Parms;
	OnCreateChild_Parms.CreatedWidget = CreatedWidget;
	OnCreateChild_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreateChild, &OnCreateChild_Parms, NULL );
};

// Function Engine.ScriptConsoleEntry.SetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 NewValue                       ( CPF_Parm )

void UScriptConsoleEntry::SetValue ( struct FString NewValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 28063 ];

	UScriptConsoleEntry_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewValue, &NewValue, 0xC );

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.ScriptConsoleEntry.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UScriptConsoleEntry::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 28062 ];

	UScriptConsoleEntry_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.SeqAct_ControlMovieTexture.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ControlMovieTexture::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 28207 ];

	USeqAct_ControlMovieTexture_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_SetVector.Activated
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetVector::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 28571 ];

	USeqAct_SetVector_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleAffectedByHitEffects::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28595 ];

	USeqAct_ToggleAffectedByHitEffects_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleGodMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28604 ];

	USeqAct_ToggleGodMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ToggleHUD::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28617 ];

	USeqAct_ToggleHUD_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHUD::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28614 ];

	USeqAct_ToggleHUD_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 28623 ];

	USeqAct_ToggleInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_UpdateDynamicCover.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_UpdateDynamicCover::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28635 ];

	USeqAct_UpdateDynamicCover_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_LOS.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_LOS::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 28718 ];

	USeqEvent_LOS_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.Trigger_LOS.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATrigger_LOS::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 31554 ];

	ATrigger_LOS_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.TriggeredPath.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ATriggeredPath::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 31578 ];

	ATriggeredPath_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATriggeredPath::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 31574 ];

	ATriggeredPath_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ATriggeredPath::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31572 ];

	ATriggeredPath_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.TriggerStreamingLevel.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATriggerStreamingLevel::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 31591 ];

	ATriggerStreamingLevel_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.UICond_SwitchWidget.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICond_SwitchWidget::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 31904 ];

	UUICond_SwitchWidget_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIScriptConsoleScene.OnCreateChild
// [0x00020000] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UUIScriptConsoleScene::OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreateChild = NULL;

	if ( ! pFnOnCreateChild )
		pFnOnCreateChild = (UFunction*) UObject::GObjObjects()->Data[ 32436 ];

	UUIScriptConsoleScene_execOnCreateChild_Parms OnCreateChild_Parms;
	OnCreateChild_Parms.CreatedWidget = CreatedWidget;
	OnCreateChild_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreateChild, &OnCreateChild_Parms, NULL );
};

// Function Engine.UIScriptConsoleScene.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScriptConsoleScene::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32435 ];

	UUIScriptConsoleScene_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.WaterVolume.PlayExitSplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayExitSplash ( class AActor* Other )
{
	static UFunction* pFnPlayExitSplash = NULL;

	if ( ! pFnPlayExitSplash )
		pFnPlayExitSplash = (UFunction*) UObject::GObjObjects()->Data[ 32683 ];

	AWaterVolume_execPlayExitSplash_Parms PlayExitSplash_Parms;
	PlayExitSplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayExitSplash, &PlayExitSplash_Parms, NULL );
};

// Function Engine.WaterVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 32681 ];

	AWaterVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.WaterVolume.PlayEntrySplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayEntrySplash ( class AActor* Other )
{
	static UFunction* pFnPlayEntrySplash = NULL;

	if ( ! pFnPlayEntrySplash )
		pFnPlayEntrySplash = (UFunction*) UObject::GObjObjects()->Data[ 32679 ];

	AWaterVolume_execPlayEntrySplash_Parms PlayEntrySplash_Parms;
	PlayEntrySplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayEntrySplash, &PlayEntrySplash_Parms, NULL );
};

// Function Engine.WaterVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AWaterVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 32674 ];

	AWaterVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};


/*
# ========================================================================================= #
# Class Pointers
# ========================================================================================= #
*/

UClass* UUIRoot::pClassPointer = NULL;
UClass* UUIScreenObject::pClassPointer = NULL;
UClass* UUIObject::pClassPointer = NULL;
UClass* UCustomUIObject::pClassPointer = NULL;
UClass* UCustomUIImageText::pClassPointer = NULL;
UClass* UCustomUISliderBox::pClassPointer = NULL;
UClass* UCustomUIArrow::pClassPointer = NULL;
UClass* UCustomUIScrollIndex::pClassPointer = NULL;
UClass* UCustomUIWebBrowser::pClassPointer = NULL;
UClass* UCustomUIRadialGraph::pClassPointer = NULL;
UClass* UCustomUIReading::pClassPointer = NULL;
UClass* UCustomUICandidate::pClassPointer = NULL;
UClass* UCustomUIImage::pClassPointer = NULL;
UClass* UCustomUIPanel::pClassPointer = NULL;
UClass* UCustomUIWindow::pClassPointer = NULL;
UClass* UCustomUIMultiLineEditBox::pClassPointer = NULL;
UClass* UCustomUIBink::pClassPointer = NULL;
UClass* UCustomUISizer::pClassPointer = NULL;
UClass* UCustomUIColumnList::pClassPointer = NULL;
UClass* UCustomUIMiniMap::pClassPointer = NULL;
UClass* UCustomUITabCtrl::pClassPointer = NULL;
UClass* UCustomUIButton::pClassPointer = NULL;
UClass* UCustomUILabelButton::pClassPointer = NULL;
UClass* UCustomUIToggleButton::pClassPointer = NULL;
UClass* UCustomUISlider::pClassPointer = NULL;
UClass* UCustomUIScrollBar::pClassPointer = NULL;
UClass* UCustomUIRadioButton::pClassPointer = NULL;
UClass* UCustomUIProgressBar::pClassPointer = NULL;
UClass* UCustomUIMeshWidget::pClassPointer = NULL;
UClass* UCustomUIListCtrl::pClassPointer = NULL;
UClass* UCustomUIListBox::pClassPointer = NULL;
UClass* UCustomUILabel::pClassPointer = NULL;
UClass* UCustomUIEditBox::pClassPointer = NULL;
UClass* UCustomUIComboBox::pClassPointer = NULL;
UClass* UCustomUICaption::pClassPointer = NULL;
UClass* UEngine::pClassPointer = NULL;
UClass* UGameEngine::pClassPointer = NULL;
UClass* AActor::pClassPointer = NULL;
UClass* UChannel::pClassPointer = NULL;
UClass* UActorChannel::pClassPointer = NULL;
UClass* UActorComponent::pClassPointer = NULL;
UClass* UActorFactory::pClassPointer = NULL;
UClass* UActorFactoryAI::pClassPointer = NULL;
UClass* UActorFactoryAmbientSound::pClassPointer = NULL;
UClass* UActorFactoryAmbientSoundMovable::pClassPointer = NULL;
UClass* UActorFactoryAmbientSoundSimple::pClassPointer = NULL;
UClass* UActorFactoryArchetype::pClassPointer = NULL;
UClass* UActorFactoryCoverLink::pClassPointer = NULL;
UClass* UActorFactoryDynamicSM::pClassPointer = NULL;
UClass* UActorFactoryEmitter::pClassPointer = NULL;
UClass* UActorFactoryEmitterMovable::pClassPointer = NULL;
UClass* UActorFactoryFracturedStaticMesh::pClassPointer = NULL;
UClass* UActorFactoryLensFlare::pClassPointer = NULL;
UClass* UActorFactoryLight::pClassPointer = NULL;
UClass* UActorFactoryMover::pClassPointer = NULL;
UClass* UActorFactoryPathNode::pClassPointer = NULL;
UClass* UActorFactoryPhysicsAsset::pClassPointer = NULL;
UClass* UActorFactoryPhysXDestructible::pClassPointer = NULL;
UClass* UActorFactoryPlayerStart::pClassPointer = NULL;
UClass* UActorFactoryRigidBody::pClassPointer = NULL;
UClass* UActorFactorySkeletalMesh::pClassPointer = NULL;
UClass* UActorFactoryStaticMesh::pClassPointer = NULL;
UClass* UActorFactoryTrigger::pClassPointer = NULL;
UClass* UActorFactoryVehicle::pClassPointer = NULL;
UClass* UReachSpec::pClassPointer = NULL;
UClass* UAdvancedReachSpec::pClassPointer = NULL;
UClass* UPostProcessEffect::pClassPointer = NULL;
UClass* UAmbientOcclusionEffect::pClassPointer = NULL;
UClass* ABrush::pClassPointer = NULL;
UClass* AVolume::pClassPointer = NULL;
UClass* AMusicVolume::pClassPointer = NULL;
UClass* AAmbientSoundVolume::pClassPointer = NULL;
UClass* ACamera::pClassPointer = NULL;
UClass* AAnimatedCamera::pClassPointer = NULL;
UClass* UAntiAliasingEffect::pClassPointer = NULL;
UClass* UPrimitiveComponent::pClassPointer = NULL;
UClass* UArrowComponent::pClassPointer = NULL;
UClass* UAudioComponent::pClassPointer = NULL;
UClass* ANavigationPoint::pClassPointer = NULL;
UClass* ALadder::pClassPointer = NULL;
UClass* AAutoLadder::pClassPointer = NULL;
UClass* ABlockingVolume::pClassPointer = NULL;
UClass* ABlockingVolumeResourceCheck::pClassPointer = NULL;
UClass* UBloomEffect::pClassPointer = NULL;
UClass* UBookMark::pClassPointer = NULL;
UClass* ABossVolume::pClassPointer = NULL;
UClass* UBrushComponent::pClassPointer = NULL;
UClass* ACameraActor::pClassPointer = NULL;
UClass* UCameraAnim::pClassPointer = NULL;
UClass* UCameraAnimInst::pClassPointer = NULL;
UClass* UCameraConeComponent::pClassPointer = NULL;
UClass* UCameraMode::pClassPointer = NULL;
UClass* UCameraModifier::pClassPointer = NULL;
UClass* APostProcessVolume::pClassPointer = NULL;
UClass* ACameraPostProcessVolume::pClassPointer = NULL;
UClass* UCanvas::pClassPointer = NULL;
UClass* UCeilingReachSpec::pClassPointer = NULL;
UClass* UDownload::pClassPointer = NULL;
UClass* UChannelDownload::pClassPointer = NULL;
UClass* AController::pClassPointer = NULL;
UClass* APlayerController::pClassPointer = NULL;
UClass* UCheatManager::pClassPointer = NULL;
UClass* UPlayer::pClassPointer = NULL;
UClass* UNetConnection::pClassPointer = NULL;
UClass* UChildConnection::pClassPointer = NULL;
UClass* UClient::pClassPointer = NULL;
UClass* AKeypoint::pClassPointer = NULL;
UClass* AClipMarker::pClassPointer = NULL;
UClass* UClipPadEntry::pClassPointer = NULL;
UClass* AInfo::pClassPointer = NULL;
UClass* ACloudInfo::pClassPointer = NULL;
UClass* UCodecMovie::pClassPointer = NULL;
UClass* UCodecMovieBink::pClassPointer = NULL;
UClass* UCodecMovieFallback::pClassPointer = NULL;
UClass* UControlChannel::pClassPointer = NULL;
UClass* ACoverGroup::pClassPointer = NULL;
UClass* ACoverLink::pClassPointer = NULL;
UClass* UForcedReachSpec::pClassPointer = NULL;
UClass* UCoverSlipReachSpec::pClassPointer = NULL;
UClass* ACoverSlotMarker::pClassPointer = NULL;
UClass* ACrowdReplicationActor::pClassPointer = NULL;
UClass* ACullDistanceVolume::pClassPointer = NULL;
UClass* UCurveEdPresetCurve::pClassPointer = NULL;
UClass* UCustomPropertyItemHandler::pClassPointer = NULL;
UClass* UGameViewportClient::pClassPointer = NULL;
UClass* UCustomViewportClient::pClassPointer = NULL;
UClass* UCylinderComponent::pClassPointer = NULL;
UClass* UDamageType::pClassPointer = NULL;
UClass* UDebugManager::pClassPointer = NULL;
UClass* APhysicsVolume::pClassPointer = NULL;
UClass* ADefaultPhysicsVolume::pClassPointer = NULL;
UClass* ULevelBase::pClassPointer = NULL;
UClass* UPendingLevel::pClassPointer = NULL;
UClass* UDemoPlayPendingLevel::pClassPointer = NULL;
UClass* UDemoRecConnection::pClassPointer = NULL;
UClass* UNetDriver::pClassPointer = NULL;
UClass* UDemoRecDriver::pClassPointer = NULL;
UClass* UDialogueSet::pClassPointer = NULL;
UClass* ALight::pClassPointer = NULL;
UClass* ADirectionalLight::pClassPointer = NULL;
UClass* ULightComponent::pClassPointer = NULL;
UClass* UDirectionalLightComponent::pClassPointer = NULL;
UClass* ADirectionalLightToggleable::pClassPointer = NULL;
UClass* ADiscoverVolume::pClassPointer = NULL;
UClass* UDistributionFloatConstant::pClassPointer = NULL;
UClass* UDistributionFloatConstantCurve::pClassPointer = NULL;
UClass* UDistributionFloatConstantCurveResource::pClassPointer = NULL;
UClass* UDistributionFloatParameterBase::pClassPointer = NULL;
UClass* UDistributionFloatUniform::pClassPointer = NULL;
UClass* UDistributionFloatUniformCurve::pClassPointer = NULL;
UClass* UDistributionVectorConstant::pClassPointer = NULL;
UClass* UDistributionVectorConstantCurve::pClassPointer = NULL;
UClass* UDistributionVectorParameterBase::pClassPointer = NULL;
UClass* UDistributionVectorUniform::pClassPointer = NULL;
UClass* UDistributionVectorUniformCurve::pClassPointer = NULL;
UClass* UDOFEffect::pClassPointer = NULL;
UClass* UDOFAndBloomEffect::pClassPointer = NULL;
UClass* ADoorMarker::pClassPointer = NULL;
UClass* UDrawBoxComponent::pClassPointer = NULL;
UClass* UDrawCapsuleComponent::pClassPointer = NULL;
UClass* UDrawConeComponent::pClassPointer = NULL;
UClass* UDrawCylinderComponent::pClassPointer = NULL;
UClass* UDrawFrustumComponent::pClassPointer = NULL;
UClass* UDrawLightConeComponent::pClassPointer = NULL;
UClass* UDrawSphereComponent::pClassPointer = NULL;
UClass* UDrawLightRadiusComponent::pClassPointer = NULL;
UClass* UDrawQuadComponent::pClassPointer = NULL;
UClass* UDrawSoundRadiusComponent::pClassPointer = NULL;
UClass* ADroppedPickup::pClassPointer = NULL;
UClass* ADynamicAnchor::pClassPointer = NULL;
UClass* ADynamicBlockingVolume::pClassPointer = NULL;
UClass* ADynamicCameraActor::pClassPointer = NULL;
UClass* ULightEnvironmentComponent::pClassPointer = NULL;
UClass* UDynamicLightEnvironmentComponent::pClassPointer = NULL;
UClass* ADynamicSMActor::pClassPointer = NULL;
UClass* UEdCoordSystem::pClassPointer = NULL;
UClass* UEditTextParser::pClassPointer = NULL;
UClass* AEmitterPool::pClassPointer = NULL;
UClass* UEventJumpTemplate::pClassPointer = NULL;
UClass* UFaceFXAnimSet::pClassPointer = NULL;
UClass* UFaceFXAsset::pClassPointer = NULL;
UClass* AFallAreaVolume::pClassPointer = NULL;
UClass* UFileChannel::pClassPointer = NULL;
UClass* AFileWriter::pClassPointer = NULL;
UClass* AFileLog::pClassPointer = NULL;
UClass* UFilterEffect::pClassPointer = NULL;
UClass* UFloorToCeilingReachSpec::pClassPointer = NULL;
UClass* UFont::pClassPointer = NULL;
UClass* UFontAttribute::pClassPointer = NULL;
UClass* UFontColor::pClassPointer = NULL;
UClass* UFontFace::pClassPointer = NULL;
UClass* UFontImportOptions::pClassPointer = NULL;
UClass* UFontResource::pClassPointer = NULL;
UClass* UFontSet::pClassPointer = NULL;
UClass* AForceFallingVolume::pClassPointer = NULL;
UClass* UForceFeedbackManager::pClassPointer = NULL;
UClass* UForceFeedbackWaveform::pClassPointer = NULL;
UClass* UStaticMesh::pClassPointer = NULL;
UClass* USurface::pClassPointer = NULL;
UClass* UMaterialInterface::pClassPointer = NULL;
UClass* UKMeshProps::pClassPointer = NULL;
UClass* URB_BodySetup::pClassPointer = NULL;
UClass* UFracturedStaticMesh::pClassPointer = NULL;
UClass* UParticleSystem::pClassPointer = NULL;
UClass* AGameInfo::pClassPointer = NULL;
UClass* AReplicationInfo::pClassPointer = NULL;
UClass* AGameReplicationInfo::pClassPointer = NULL;
UClass* AGravityVolume::pClassPointer = NULL;
UClass* UGuidCache::pClassPointer = NULL;
UClass* AHeightFog::pClassPointer = NULL;
UClass* UHeightFogComponent::pClassPointer = NULL;
UClass* AHUD::pClassPointer = NULL;
UClass* UImageSet::pClassPointer = NULL;
UClass* UIniLocPatcher::pClassPointer = NULL;
UClass* AInternetInfo::pClassPointer = NULL;
UClass* AInterpActor::pClassPointer = NULL;
UClass* UInterpCurveEdSetup::pClassPointer = NULL;
UClass* UInterpTrack::pClassPointer = NULL;
UClass* AInventory::pClassPointer = NULL;
UClass* AInventoryManager::pClassPointer = NULL;
UClass* UKillZDamageType::pClassPointer = NULL;
UClass* ULadderReachSpec::pClassPointer = NULL;
UClass* ALadderVolume::pClassPointer = NULL;
UClass* ULevel::pClassPointer = NULL;
UClass* ULevelStreaming::pClassPointer = NULL;
UClass* ULevelStreamingDistance::pClassPointer = NULL;
UClass* ULevelStreamingKismet::pClassPointer = NULL;
UClass* ULevelStreamingPersistent::pClassPointer = NULL;
UClass* ALevelStreamingVolume::pClassPointer = NULL;
UClass* ALiftCenter::pClassPointer = NULL;
UClass* ALiftExit::pClassPointer = NULL;
UClass* ULightFunction::pClassPointer = NULL;
UClass* UTexture::pClassPointer = NULL;
UClass* UTexture2D::pClassPointer = NULL;
UClass* ULightMapTexture2D::pClassPointer = NULL;
UClass* ALightVolume::pClassPointer = NULL;
UClass* ULineBatchComponent::pClassPointer = NULL;
UClass* ALocalAxisMapVolume::pClassPointer = NULL;
UClass* ULocalPlayer::pClassPointer = NULL;
UClass* AMantleMarker::pClassPointer = NULL;
UClass* UMantleReachSpec::pClassPointer = NULL;
UClass* UMapInfo::pClassPointer = NULL;
UClass* UMaterial::pClassPointer = NULL;
UClass* UMaterialEffect::pClassPointer = NULL;
UClass* UMaterialExpression::pClassPointer = NULL;
UClass* AMaterialInstanceActor::pClassPointer = NULL;
UClass* AMatineeActor::pClassPointer = NULL;
UClass* UMeshComponent::pClassPointer = NULL;
UClass* UPrimitiveComponentFactory::pClassPointer = NULL;
UClass* UMeshComponentFactory::pClassPointer = NULL;
UClass* UModel::pClassPointer = NULL;
UClass* UModelComponent::pClassPointer = NULL;
UClass* UMotionBlurEffect::pClassPointer = NULL;
UClass* AMoveActionPoint::pClassPointer = NULL;
UClass* UMoveActionPointCylinerComponent::pClassPointer = NULL;
UClass* UMultiFont::pClassPointer = NULL;
UClass* AMusicOnceVolume::pClassPointer = NULL;
UClass* UMusicTrackDataStructures::pClassPointer = NULL;
UClass* AMutator::pClassPointer = NULL;
UClass* UNetPendingLevel::pClassPointer = NULL;
UClass* ANote::pClassPointer = NULL;
UClass* ANoticeBoardActor::pClassPointer = NULL;
UClass* AObjective::pClassPointer = NULL;
UClass* UObjectNote::pClassPointer = NULL;
UClass* UObjectReferencer::pClassPointer = NULL;
UClass* AOceanVolume::pClassPointer = NULL;
UClass* UOnlineGameplayEvents::pClassPointer = NULL;
UClass* USettings::pClassPointer = NULL;
UClass* UOnlineGameSearch::pClassPointer = NULL;
UClass* UOnlineGameSettings::pClassPointer = NULL;
UClass* UOnlinePlaylistManager::pClassPointer = NULL;
UClass* UOnlineProfileSettings::pClassPointer = NULL;
UClass* UOnlineStats::pClassPointer = NULL;
UClass* UOnlineStatsRead::pClassPointer = NULL;
UClass* UOnlineStatsWrite::pClassPointer = NULL;
UClass* UOnlineSubsystem::pClassPointer = NULL;
UClass* UOutLineBloomEffect::pClassPointer = NULL;
UClass* UPackageMapLevel::pClassPointer = NULL;
UClass* UPackageMapSeekFree::pClassPointer = NULL;
UClass* UParticleSet::pClassPointer = NULL;
UClass* APathBlockingVolume::pClassPointer = NULL;
UClass* UPathEngine_FederationFile::pClassPointer = NULL;
UClass* APathNode::pClassPointer = NULL;
UClass* APawn::pClassPointer = NULL;
UClass* APickupFactory::pClassPointer = NULL;
UClass* UPlayerCameraAnim::pClassPointer = NULL;
UClass* UPlayerCameraAnimInstance::pClassPointer = NULL;
UClass* UPlayerCameraSample::pClassPointer = NULL;
UClass* UPlayerCameraFreeSample::pClassPointer = NULL;
UClass* UPlayerCameraLockedSample::pClassPointer = NULL;
UClass* APlayerReplicationInfo::pClassPointer = NULL;
UClass* APlayerStart::pClassPointer = NULL;
UClass* APointLight::pClassPointer = NULL;
UClass* UPointLightComponent::pClassPointer = NULL;
UClass* APointLightMovable::pClassPointer = NULL;
UClass* APointLightToggleable::pClassPointer = NULL;
UClass* APolyMarker::pClassPointer = NULL;
UClass* UPolys::pClassPointer = NULL;
UClass* APortalMarker::pClassPointer = NULL;
UClass* ASceneCaptureActor::pClassPointer = NULL;
UClass* ASceneCaptureReflectActor::pClassPointer = NULL;
UClass* ASceneCapturePortalActor::pClassPointer = NULL;
UClass* APortalTeleporter::pClassPointer = NULL;
UClass* APortalVolume::pClassPointer = NULL;
UClass* UPostProcessChain::pClassPointer = NULL;
UClass* UPostProcessParameter::pClassPointer = NULL;
UClass* APotentialClimbWatcher::pClassPointer = NULL;
UClass* UProgressControler::pClassPointer = NULL;
UClass* UProgressControler_FixedValue::pClassPointer = NULL;
UClass* UProgressControler_InternalValue::pClassPointer = NULL;
UClass* UProgressControler_Time::pClassPointer = NULL;
UClass* UProgressEffectProperty::pClassPointer = NULL;
UClass* UProgressEffectProperty_Anim::pClassPointer = NULL;
UClass* UProgressEffectProperty_MatInst::pClassPointer = NULL;
UClass* UProgressEffectProperty_Particle::pClassPointer = NULL;
UClass* UProgressEffectProperty_Sound::pClassPointer = NULL;
UClass* UProgressiveEffect::pClassPointer = NULL;
UClass* AProjectile::pClassPointer = NULL;
UClass* UProscribedReachSpec::pClassPointer = NULL;
UClass* AReverbVolume::pClassPointer = NULL;
UClass* ARoute::pClassPointer = NULL;
UClass* USavedMove::pClassPointer = NULL;
UClass* USaveGameSummary::pClassPointer = NULL;
UClass* ASceneCapture2DActor::pClassPointer = NULL;
UClass* USceneCaptureComponent::pClassPointer = NULL;
UClass* USceneCapture2DComponent::pClassPointer = NULL;
UClass* ASceneCaptureCubeMapActor::pClassPointer = NULL;
UClass* USceneCaptureCubeMapComponent::pClassPointer = NULL;
UClass* USceneCapturePortalComponent::pClassPointer = NULL;
UClass* USceneCaptureReflectComponent::pClassPointer = NULL;
UClass* AScout::pClassPointer = NULL;
UClass* UTextureRenderTarget::pClassPointer = NULL;
UClass* UTextureRenderTarget2D::pClassPointer = NULL;
UClass* UScriptedTexture::pClassPointer = NULL;
UClass* UServerCommandlet::pClassPointer = NULL;
UClass* UShaderCache::pClassPointer = NULL;
UClass* UShaderObject::pClassPointer = NULL;
UClass* UShadowMap1D::pClassPointer = NULL;
UClass* UShadowMap2D::pClassPointer = NULL;
UClass* UShadowMapTexture2D::pClassPointer = NULL;
UClass* USignalInfo::pClassPointer = NULL;
UClass* USkeletalMesh::pClassPointer = NULL;
UClass* USkeletalMeshComponent::pClassPointer = NULL;
UClass* USkeletalMeshFactorSet::pClassPointer = NULL;
UClass* USkeletalMeshSocket::pClassPointer = NULL;
UClass* ASkyLight::pClassPointer = NULL;
UClass* USkyLightComponent::pClassPointer = NULL;
UClass* ASkyLightToggleable::pClassPointer = NULL;
UClass* USlotToSlotReachSpec::pClassPointer = NULL;
UClass* USmokeTestCommandlet::pClassPointer = NULL;
UClass* USoundCue::pClassPointer = NULL;
UClass* USoundSet::pClassPointer = NULL;
UClass* USpeechRecognition::pClassPointer = NULL;
UClass* USphericalHarmonicLightComponent::pClassPointer = NULL;
UClass* ASpotLight::pClassPointer = NULL;
UClass* USpotLightComponent::pClassPointer = NULL;
UClass* ASpotLightMovable::pClassPointer = NULL;
UClass* ASpotLightToggleable::pClassPointer = NULL;
UClass* USpriteComponent::pClassPointer = NULL;
UClass* AStandaloneComponentHolder::pClassPointer = NULL;
UClass* AStaticLightCollectionActor::pClassPointer = NULL;
UClass* AStaticMeshActorBase::pClassPointer = NULL;
UClass* AStaticMeshActor::pClassPointer = NULL;
UClass* AStaticMeshCollectionActor::pClassPointer = NULL;
UClass* UStaticMeshComponent::pClassPointer = NULL;
UClass* UStaticMeshComponentFactory::pClassPointer = NULL;
UClass* USwatTurnReachSpec::pClassPointer = NULL;
UClass* ATeamInfo::pClassPointer = NULL;
UClass* ATeleporter::pClassPointer = NULL;
UClass* UTeleportReachSpec::pClassPointer = NULL;
UClass* UTextParser::pClassPointer = NULL;
UClass* UTexture2DComposite::pClassPointer = NULL;
UClass* UTexture2DDynamic::pClassPointer = NULL;
UClass* UTexture2DExternalStreamed::pClassPointer = NULL;
UClass* UTextureCube::pClassPointer = NULL;
UClass* UTextureFlipBook::pClassPointer = NULL;
UClass* UTextureMovie::pClassPointer = NULL;
UClass* UTextureRenderTargetCube::pClassPointer = NULL;
UClass* ATopViewRenderingActor::pClassPointer = NULL;
UClass* ATrigger::pClassPointer = NULL;
UClass* ATriggerVolume::pClassPointer = NULL;
UClass* UUberPostProcessEffect::pClassPointer = NULL;
UClass* UUIActionData::pClassPointer = NULL;
UClass* UUIActionGroupData::pClassPointer = NULL;
UClass* AUIModVolume::pClassPointer = NULL;
UClass* AVehicle::pClassPointer = NULL;
UClass* UVoiceChannel::pClassPointer = NULL;
UClass* UVoiceSet::pClassPointer = NULL;
UClass* AVolumePathNode::pClassPointer = NULL;
UClass* UWallTransReachSpec::pClassPointer = NULL;
UClass* AWeapon::pClassPointer = NULL;
UClass* UWebTexture::pClassPointer = NULL;
UClass* AWindDirectionalSource::pClassPointer = NULL;
UClass* UWindDirectionalSourceComponent::pClassPointer = NULL;
UClass* UWorld::pClassPointer = NULL;
UClass* AZoneInfo::pClassPointer = NULL;
UClass* AWorldInfo::pClassPointer = NULL;
UClass* AZoneTeleport::pClassPointer = NULL;
UClass* AZoneTeleportSwitch::pClassPointer = NULL;
UClass* AAIController::pClassPointer = NULL;
UClass* UCoverGroupRenderingComponent::pClassPointer = NULL;
UClass* UCoverMeshComponent::pClassPointer = NULL;
UClass* UPathGoalEvaluator::pClassPointer = NULL;
UClass* UGoal_AtActor::pClassPointer = NULL;
UClass* UPathConstraint::pClassPointer = NULL;
UClass* UPath_AlongLine::pClassPointer = NULL;
UClass* UPath_TowardGoal::pClassPointer = NULL;
UClass* UPath_WithinTraversalDist::pClassPointer = NULL;
UClass* UPathRenderingComponent::pClassPointer = NULL;
UClass* URouteRenderingComponent::pClassPointer = NULL;
UClass* UAnimationCompressionAlgorithm::pClassPointer = NULL;
UClass* UAnimationCompressionAlgorithm_BitwiseCompressOnly::pClassPointer = NULL;
UClass* UAnimationCompressionAlgorithm_RemoveEverySecondKey::pClassPointer = NULL;
UClass* UAnimationCompressionAlgorithm_RemoveTrivialKeys::pClassPointer = NULL;
UClass* UAnimationCompressionAlgorithm_RevertToRaw::pClassPointer = NULL;
UClass* UAnimNode::pClassPointer = NULL;
UClass* UAnimNodeBlendBase::pClassPointer = NULL;
UClass* UAnimNodeBlend::pClassPointer = NULL;
UClass* UAnimNodeAdditiveBlending::pClassPointer = NULL;
UClass* UAnimNodeAimOffset::pClassPointer = NULL;
UClass* UAnimNodeBlendList::pClassPointer = NULL;
UClass* UAnimNodeBlendByBase::pClassPointer = NULL;
UClass* UAnimNodeBlendByEnvType::pClassPointer = NULL;
UClass* UAnimNodeBlendByPhysics::pClassPointer = NULL;
UClass* UAnimNodeBlendByPosture::pClassPointer = NULL;
UClass* UAnimNodeBlendBySpeed::pClassPointer = NULL;
UClass* UAnimNodeBlendDirectional::pClassPointer = NULL;
UClass* UAnimNodeBlendList_AutoNextStep::pClassPointer = NULL;
UClass* UAnimNodeBlendMultiBone::pClassPointer = NULL;
UClass* UAnimNodeBlendPerBone::pClassPointer = NULL;
UClass* UAnimNodeSequence::pClassPointer = NULL;
UClass* UAnimNodeSequenceBlendBase::pClassPointer = NULL;
UClass* UAnimNodeByMoveState::pClassPointer = NULL;
UClass* UAnimNodeByMoveState_Pet::pClassPointer = NULL;
UClass* UAnimNodeCrossfader::pClassPointer = NULL;
UClass* UAnimNodeMirror::pClassPointer = NULL;
UClass* UAnimNodePlayCustomAnim::pClassPointer = NULL;
UClass* UAnimNodeRandom::pClassPointer = NULL;
UClass* UAnimNodeScalePlayRate::pClassPointer = NULL;
UClass* UAnimNodeScaleRateBySpeed::pClassPointer = NULL;
UClass* UAnimNodeSeqBlendByEnvState::pClassPointer = NULL;
UClass* UAnimNodeSeqBlendByProgress::pClassPointer = NULL;
UClass* UAnimNodeSequenceBlendByAim::pClassPointer = NULL;
UClass* UAnimNodeSlot::pClassPointer = NULL;
UClass* UAnimNodeSynch::pClassPointer = NULL;
UClass* UAnimNotify::pClassPointer = NULL;
UClass* UAnimNotify_AdjustAniScale::pClassPointer = NULL;
UClass* UAnimNotify_AttachAni::pClassPointer = NULL;
UClass* UAnimNotify_DependencyParticle::pClassPointer = NULL;
UClass* UAnimNotify_DialogueSound::pClassPointer = NULL;
UClass* UAnimNotify_DynamicParam::pClassPointer = NULL;
UClass* UAnimNotify_GroundParticle::pClassPointer = NULL;
UClass* UAnimNotify_IgnoreWeaponC::pClassPointer = NULL;
UClass* UAnimNotify_ParticleSet::pClassPointer = NULL;
UClass* UAnimNotify_PhysicNoiseForce::pClassPointer = NULL;
UClass* UAnimNotify_PlayPostProcess::pClassPointer = NULL;
UClass* UAnimNotify_ResetPhysicsBones::pClassPointer = NULL;
UClass* UAnimNotify_RtoLMoveEvent::pClassPointer = NULL;
UClass* UAnimNotify_Script::pClassPointer = NULL;
UClass* UAnimNotify_Scripted::pClassPointer = NULL;
UClass* UAnimNotify_SESound::pClassPointer = NULL;
UClass* UAnimNotify_Sound::pClassPointer = NULL;
UClass* UAnimNotify_VehicleAni::pClassPointer = NULL;
UClass* UAnimNotify_VoiceSound::pClassPointer = NULL;
UClass* UAnimNotify_Wrinkle::pClassPointer = NULL;
UClass* UAnimSequence::pClassPointer = NULL;
UClass* UAnimSet::pClassPointer = NULL;
UClass* UAnimTree::pClassPointer = NULL;
UClass* ACrowdAgent::pClassPointer = NULL;
UClass* ACrowdAttractor::pClassPointer = NULL;
UClass* UMorphNodeBase::pClassPointer = NULL;
UClass* UMorphNodePose::pClassPointer = NULL;
UClass* UMorphNodeWeightBase::pClassPointer = NULL;
UClass* UMorphNodeWeight::pClassPointer = NULL;
UClass* UMorphTarget::pClassPointer = NULL;
UClass* UMorphTargetSet::pClassPointer = NULL;
UClass* UMorphWeightSequence::pClassPointer = NULL;
UClass* ASkeletalMeshActor::pClassPointer = NULL;
UClass* ANpcAppDummyMeshActor::pClassPointer = NULL;
UClass* USkelControlBase::pClassPointer = NULL;
UClass* USkelControlLimb::pClassPointer = NULL;
UClass* USkelControlFootPlacement::pClassPointer = NULL;
UClass* USkelControlLookAt::pClassPointer = NULL;
UClass* USkelControlLookAtTarget::pClassPointer = NULL;
UClass* USkelControlMeshSlant::pClassPointer = NULL;
UClass* USkelControlSingleBone::pClassPointer = NULL;
UClass* USkelControlSpline::pClassPointer = NULL;
UClass* USkelControlTrail::pClassPointer = NULL;
UClass* USkelControlWheel::pClassPointer = NULL;
UClass* ASkeletalMeshActorMAT::pClassPointer = NULL;
UClass* USkeletalMeshCustomizeSet::pClassPointer = NULL;
UClass* UAnimNotify_Trail::pClassPointer = NULL;
UClass* UTrailComponent::pClassPointer = NULL;
UClass* UTrailTemplate::pClassPointer = NULL;
UClass* UActorFactoryDecal::pClassPointer = NULL;
UClass* ACircularShadowManager::pClassPointer = NULL;
UClass* ADecalActorBase::pClassPointer = NULL;
UClass* ADecalActor::pClassPointer = NULL;
UClass* ADecalActorMovable::pClassPointer = NULL;
UClass* UDecalComponent::pClassPointer = NULL;
UClass* ADecalManager::pClassPointer = NULL;
UClass* UDecalMaterial::pClassPointer = NULL;
UClass* UActorFactoryFogVolumeConstantDensityInfo::pClassPointer = NULL;
UClass* UActorFactoryFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;
UClass* UActorFactoryFogVolumeSphericalDensityInfo::pClassPointer = NULL;
UClass* UFogVolumeDensityComponent::pClassPointer = NULL;
UClass* UFogVolumeConeDensityComponent::pClassPointer = NULL;
UClass* AFogVolumeDensityInfo::pClassPointer = NULL;
UClass* AFogVolumeConeDensityInfo::pClassPointer = NULL;
UClass* UFogVolumeConstantDensityComponent::pClassPointer = NULL;
UClass* AFogVolumeConstantDensityInfo::pClassPointer = NULL;
UClass* UFogVolumeLinearHalfspaceDensityComponent::pClassPointer = NULL;
UClass* AFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;
UClass* UFogVolumeSphericalDensityComponent::pClassPointer = NULL;
UClass* AFogVolumeSphericalDensityInfo::pClassPointer = NULL;
UClass* UFracturedBaseComponent::pClassPointer = NULL;
UClass* UFracturedSkinnedMeshComponent::pClassPointer = NULL;
UClass* AFracturedStaticMeshActor::pClassPointer = NULL;
UClass* UFracturedStaticMeshComponent::pClassPointer = NULL;
UClass* AFracturedStaticMeshPart::pClassPointer = NULL;
UClass* AFractureManager::pClassPointer = NULL;
UClass* UPhysXDestructible::pClassPointer = NULL;
UClass* APhysXDestructibleActor::pClassPointer = NULL;
UClass* UPhysXDestructibleAsset::pClassPointer = NULL;
UClass* UPhysXDestructibleComponent::pClassPointer = NULL;
UClass* APhysXDestructiblePart::pClassPointer = NULL;
UClass* UPhysXDestructibleStructure::pClassPointer = NULL;
UClass* UInterpFilter::pClassPointer = NULL;
UClass* UInterpFilter_Classes::pClassPointer = NULL;
UClass* UInterpFilter_Custom::pClassPointer = NULL;
UClass* UInterpGroup::pClassPointer = NULL;
UClass* UInterpGroupDirector::pClassPointer = NULL;
UClass* UInterpGroupInst::pClassPointer = NULL;
UClass* UInterpGroupInstDirector::pClassPointer = NULL;
UClass* UInterpTrackFloatBase::pClassPointer = NULL;
UClass* UInterpTrackAnimControl::pClassPointer = NULL;
UClass* UInterpTrackVectorBase::pClassPointer = NULL;
UClass* UInterpTrackAudioMaster::pClassPointer = NULL;
UClass* UInterpTrackBooleanBase::pClassPointer = NULL;
UClass* UInterpTrackColorProp::pClassPointer = NULL;
UClass* UInterpTrackColorScale::pClassPointer = NULL;
UClass* UInterpTrackDirector::pClassPointer = NULL;
UClass* UInterpTrackEvent::pClassPointer = NULL;
UClass* UInterpTrackFaceFX::pClassPointer = NULL;
UClass* UInterpTrackFade::pClassPointer = NULL;
UClass* UInterpTrackFloatMaterialParam::pClassPointer = NULL;
UClass* UInterpTrackFloatParticleParam::pClassPointer = NULL;
UClass* UInterpTrackFloatProp::pClassPointer = NULL;
UClass* UInterpTrackInst::pClassPointer = NULL;
UClass* UInterpTrackInstAnimControl::pClassPointer = NULL;
UClass* UInterpTrackInstAudioMaster::pClassPointer = NULL;
UClass* UInterpTrackInstProperty::pClassPointer = NULL;
UClass* UInterpTrackInstColorProp::pClassPointer = NULL;
UClass* UInterpTrackInstColorScale::pClassPointer = NULL;
UClass* UInterpTrackInstDirector::pClassPointer = NULL;
UClass* UInterpTrackInstEvent::pClassPointer = NULL;
UClass* UInterpTrackInstFaceFX::pClassPointer = NULL;
UClass* UInterpTrackInstFade::pClassPointer = NULL;
UClass* UInterpTrackInstFloatMaterialParam::pClassPointer = NULL;
UClass* UInterpTrackInstFloatParticleParam::pClassPointer = NULL;
UClass* UInterpTrackInstFloatProp::pClassPointer = NULL;
UClass* UInterpTrackInstMorphWeight::pClassPointer = NULL;
UClass* UInterpTrackInstMove::pClassPointer = NULL;
UClass* UInterpTrackInstParticleReplay::pClassPointer = NULL;
UClass* UInterpTrackInstParticleSystemToggle::pClassPointer = NULL;
UClass* UInterpTrackInstSkelControlScale::pClassPointer = NULL;
UClass* UInterpTrackInstSlomo::pClassPointer = NULL;
UClass* UInterpTrackInstSound::pClassPointer = NULL;
UClass* UInterpTrackInstToggle::pClassPointer = NULL;
UClass* UInterpTrackInstVectorMaterialParam::pClassPointer = NULL;
UClass* UInterpTrackInstVectorProp::pClassPointer = NULL;
UClass* UInterpTrackInstVisibility::pClassPointer = NULL;
UClass* UInterpTrackInstVoice::pClassPointer = NULL;
UClass* UInterpTrackMorphWeight::pClassPointer = NULL;
UClass* UInterpTrackMove::pClassPointer = NULL;
UClass* UInterpTrackParticleReplay::pClassPointer = NULL;
UClass* UInterpTrackParticleSystemToggle::pClassPointer = NULL;
UClass* UInterpTrackSkelControlScale::pClassPointer = NULL;
UClass* UInterpTrackSlomo::pClassPointer = NULL;
UClass* UInterpTrackSound::pClassPointer = NULL;
UClass* UInterpTrackToggle::pClassPointer = NULL;
UClass* UInterpTrackVectorMaterialParam::pClassPointer = NULL;
UClass* UInterpTrackVectorProp::pClassPointer = NULL;
UClass* UInterpTrackVisibility::pClassPointer = NULL;
UClass* UInterpTrackVoice::pClassPointer = NULL;
UClass* UMaterialExpressionAbs::pClassPointer = NULL;
UClass* UMaterialExpressionAdd::pClassPointer = NULL;
UClass* UMaterialExpressionAppendVector::pClassPointer = NULL;
UClass* UMaterialExpressionAtan::pClassPointer = NULL;
UClass* UMaterialExpressionAtan2::pClassPointer = NULL;
UClass* UMaterialExpressionBumpMapping::pClassPointer = NULL;
UClass* UMaterialExpressionBumpOffset::pClassPointer = NULL;
UClass* UMaterialExpressionCameraVector::pClassPointer = NULL;
UClass* UMaterialExpressionCameraWorldPosition::pClassPointer = NULL;
UClass* UMaterialExpressionCeil::pClassPointer = NULL;
UClass* UMaterialExpressionCircleSystemDecal::pClassPointer = NULL;
UClass* UMaterialExpressionClamp::pClassPointer = NULL;
UClass* UMaterialExpressionComment::pClassPointer = NULL;
UClass* UMaterialExpressionComponentMask::pClassPointer = NULL;
UClass* UMaterialExpressionCompound::pClassPointer = NULL;
UClass* UMaterialExpressionConstant::pClassPointer = NULL;
UClass* UMaterialExpressionConstant2Vector::pClassPointer = NULL;
UClass* UMaterialExpressionConstant3Vector::pClassPointer = NULL;
UClass* UMaterialExpressionConstant4Vector::pClassPointer = NULL;
UClass* UMaterialExpressionConstantBiasScale::pClassPointer = NULL;
UClass* UMaterialExpressionConstantClamp::pClassPointer = NULL;
UClass* UMaterialExpressionCosine::pClassPointer = NULL;
UClass* UMaterialExpressionCrossProduct::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSample::pClassPointer = NULL;
UClass* UMaterialExpressionDepthBiasBlend::pClassPointer = NULL;
UClass* UMaterialExpressionDepthBiasedAlpha::pClassPointer = NULL;
UClass* UMaterialExpressionDepthBiasedBlend::pClassPointer = NULL;
UClass* UMaterialExpressionDepthMaskValue::pClassPointer = NULL;
UClass* UMaterialExpressionDepthScale::pClassPointer = NULL;
UClass* UMaterialExpressionDeriveNormalZ::pClassPointer = NULL;
UClass* UMaterialExpressionDesaturation::pClassPointer = NULL;
UClass* UMaterialExpressionDestColor::pClassPointer = NULL;
UClass* UMaterialExpressionDestDepth::pClassPointer = NULL;
UClass* UMaterialExpressionDistance::pClassPointer = NULL;
UClass* UMaterialExpressionDivide::pClassPointer = NULL;
UClass* UMaterialExpressionDotMaskValue::pClassPointer = NULL;
UClass* UMaterialExpressionDotProduct::pClassPointer = NULL;
UClass* UMaterialExpressionDynamicParameter::pClassPointer = NULL;
UClass* UMaterialExpressionFlipBookSample::pClassPointer = NULL;
UClass* UMaterialExpressionFloor::pClassPointer = NULL;
UClass* UMaterialExpressionFluidNormal::pClassPointer = NULL;
UClass* UMaterialExpressionFmod::pClassPointer = NULL;
UClass* UMaterialExpressionFontSample::pClassPointer = NULL;
UClass* UMaterialExpressionFontSampleParameter::pClassPointer = NULL;
UClass* UMaterialExpressionFrac::pClassPointer = NULL;
UClass* UMaterialExpressionFresnel::pClassPointer = NULL;
UClass* UMaterialExpressionIf::pClassPointer = NULL;
UClass* UMaterialExpressionLensFlareIntensity::pClassPointer = NULL;
UClass* UMaterialExpressionLensFlareOcclusion::pClassPointer = NULL;
UClass* UMaterialExpressionLensFlareRadialDistance::pClassPointer = NULL;
UClass* UMaterialExpressionLensFlareRayDistance::pClassPointer = NULL;
UClass* UMaterialExpressionLensFlareSourceDistance::pClassPointer = NULL;
UClass* UMaterialExpressionLightVector::pClassPointer = NULL;
UClass* UMaterialExpressionLightVector2::pClassPointer = NULL;
UClass* UMaterialExpressionLinearInterpolate::pClassPointer = NULL;
UClass* UMaterialExpressionMeshEmitterVertexColor::pClassPointer = NULL;
UClass* UMaterialExpressionMeshSubUV::pClassPointer = NULL;
UClass* UMaterialExpressionMultiply::pClassPointer = NULL;
UClass* UMaterialExpressionNormalize::pClassPointer = NULL;
UClass* UMaterialExpressionNormalMesh::pClassPointer = NULL;
UClass* UMaterialExpressionNormalTexture::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSampleParameter::pClassPointer = NULL;
UClass* UMaterialExpressionNormalTextureParameter::pClassPointer = NULL;
UClass* UMaterialExpressionObjectRadius::pClassPointer = NULL;
UClass* UMaterialExpressionObjectWorldPosition::pClassPointer = NULL;
UClass* UMaterialExpressionOneMinus::pClassPointer = NULL;
UClass* UMaterialExpressionPanner::pClassPointer = NULL;
UClass* UMaterialExpressionParameter::pClassPointer = NULL;
UClass* UMaterialExpressionParticleSubUV::pClassPointer = NULL;
UClass* UMaterialExpressionPixelDepth::pClassPointer = NULL;
UClass* UMaterialExpressionPixelDepthToCenter::pClassPointer = NULL;
UClass* UMaterialExpressionPixelDepthToFront::pClassPointer = NULL;
UClass* UMaterialExpressionPostProcessVolume::pClassPointer = NULL;
UClass* UMaterialExpressionPower::pClassPointer = NULL;
UClass* UMaterialExpressionReflectionVector::pClassPointer = NULL;
UClass* UMaterialExpressionRotateAboutAxis::pClassPointer = NULL;
UClass* UMaterialExpressionRotator::pClassPointer = NULL;
UClass* UMaterialExpressionScalarParameter::pClassPointer = NULL;
UClass* UMaterialExpressionSceneDepth::pClassPointer = NULL;
UClass* UMaterialExpressionSceneTexture::pClassPointer = NULL;
UClass* UMaterialExpressionScreenPosition::pClassPointer = NULL;
UClass* UMaterialExpressionSine::pClassPointer = NULL;
UClass* UMaterialExpressionSquareRoot::pClassPointer = NULL;
UClass* UMaterialExpressionSquareSystemDecal::pClassPointer = NULL;
UClass* UMaterialExpressionStaticComponentMaskParameter::pClassPointer = NULL;
UClass* UMaterialExpressionStaticSwitchParameter::pClassPointer = NULL;
UClass* UMaterialExpressionSubtract::pClassPointer = NULL;
UClass* UMaterialExpressionSunLightDirection::pClassPointer = NULL;
UClass* UMaterialExpressionTextureCoordinate::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSampleParameter2D::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSampleParameterCube::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSampleParameterMovie::pClassPointer = NULL;
UClass* UMaterialExpressionTextureSampleParameterSubUV::pClassPointer = NULL;
UClass* UMaterialExpressionTime::pClassPointer = NULL;
UClass* UMaterialExpressionTransform::pClassPointer = NULL;
UClass* UMaterialExpressionTransformMatrix::pClassPointer = NULL;
UClass* UMaterialExpressionTransformPosition::pClassPointer = NULL;
UClass* UMaterialExpressionTwoSideSampler::pClassPointer = NULL;
UClass* UMaterialExpressionVectorParameter::pClassPointer = NULL;
UClass* UMaterialExpressionVertexColor::pClassPointer = NULL;
UClass* UMaterialExpressionWindDirectionAndSpeed::pClassPointer = NULL;
UClass* UMaterialExpressionWorldLightVector::pClassPointer = NULL;
UClass* UMaterialExpressionWorldNormal::pClassPointer = NULL;
UClass* UMaterialExpressionWorldPosition::pClassPointer = NULL;
UClass* UMaterialExpressionWorldTime::pClassPointer = NULL;
UClass* UMaterialExpressionWorldTwoSideSampler::pClassPointer = NULL;
UClass* UMaterialInstance::pClassPointer = NULL;
UClass* UMaterialInstanceConstant::pClassPointer = NULL;
UClass* UMaterialInstanceTimeVarying::pClassPointer = NULL;
UClass* UDistributionFloatParticleParameter::pClassPointer = NULL;
UClass* UDistributionVectorParticleParameter::pClassPointer = NULL;
UClass* AEmitter::pClassPointer = NULL;
UClass* AEmitterMovable::pClassPointer = NULL;
UClass* UParticleEmitter::pClassPointer = NULL;
UClass* UParticleLODLevel::pClassPointer = NULL;
UClass* UParticleModule::pClassPointer = NULL;
UClass* UParticleModuleAccelerationBase::pClassPointer = NULL;
UClass* UParticleModuleAcceleration::pClassPointer = NULL;
UClass* UParticleModuleAccelerationOverLifetime::pClassPointer = NULL;
UClass* UParticleModuleAttractorBase::pClassPointer = NULL;
UClass* UParticleModuleAttractorLine::pClassPointer = NULL;
UClass* UParticleModuleAttractorParticle::pClassPointer = NULL;
UClass* UParticleModuleAttractorPoint::pClassPointer = NULL;
UClass* UParticleModuleBeamBase::pClassPointer = NULL;
UClass* UParticleModuleBeamModifier::pClassPointer = NULL;
UClass* UParticleModuleBeamNoise::pClassPointer = NULL;
UClass* UParticleModuleBeamSource::pClassPointer = NULL;
UClass* UParticleModuleBeamTarget::pClassPointer = NULL;
UClass* UParticleModuleCloneBase::pClassPointer = NULL;
UClass* UParticleModuleClone::pClassPointer = NULL;
UClass* UParticleModuleCollisionBase::pClassPointer = NULL;
UClass* UParticleModuleCollision::pClassPointer = NULL;
UClass* UParticleModuleColorBase::pClassPointer = NULL;
UClass* UParticleModuleColor::pClassPointer = NULL;
UClass* UParticleModuleColorByParameter::pClassPointer = NULL;
UClass* UParticleModuleColorOverLife::pClassPointer = NULL;
UClass* UParticleModuleColorScaleOverLife::pClassPointer = NULL;
UClass* UParticleModuleDecalBase::pClassPointer = NULL;
UClass* UParticleModuleDecalAngle::pClassPointer = NULL;
UClass* UParticleModuleDecalAngleRate::pClassPointer = NULL;
UClass* UParticleModuleDecalMax::pClassPointer = NULL;
UClass* UParticleModuleDecalMaxRate::pClassPointer = NULL;
UClass* UParticleModuleDecalMin::pClassPointer = NULL;
UClass* UParticleModuleDecalMinRate::pClassPointer = NULL;
UClass* UParticleModuleEventBase::pClassPointer = NULL;
UClass* UParticleModuleEventGenerator::pClassPointer = NULL;
UClass* UParticleModuleEventReceiverBase::pClassPointer = NULL;
UClass* UParticleModuleEventReceiverSpawn::pClassPointer = NULL;
UClass* UParticleModuleKillBase::pClassPointer = NULL;
UClass* UParticleModuleKillBox::pClassPointer = NULL;
UClass* UParticleModuleKillHeight::pClassPointer = NULL;
UClass* UParticleModuleLifetimeBase::pClassPointer = NULL;
UClass* UParticleModuleLifetime::pClassPointer = NULL;
UClass* UParticleModuleLocationBase::pClassPointer = NULL;
UClass* UParticleModuleLocation::pClassPointer = NULL;
UClass* UParticleModuleLocationDirect::pClassPointer = NULL;
UClass* UParticleModuleLocationEmitter::pClassPointer = NULL;
UClass* UParticleModuleLocationEmitterDirect::pClassPointer = NULL;
UClass* UParticleModuleLocationPrimitiveBase::pClassPointer = NULL;
UClass* UParticleModuleLocationPrimitiveCylinder::pClassPointer = NULL;
UClass* UParticleModuleLocationPrimitiveSphere::pClassPointer = NULL;
UClass* UParticleModuleLocationSkeletalMeshDirect::pClassPointer = NULL;
UClass* UParticleModuleLocationSkeletalMeshEmitter::pClassPointer = NULL;
UClass* UParticleModuleLocationStaticMesh::pClassPointer = NULL;
UClass* UParticleModuleMaterialBase::pClassPointer = NULL;
UClass* UParticleModuleMaterialByParameter::pClassPointer = NULL;
UClass* UParticleModuleMeshMaterial::pClassPointer = NULL;
UClass* UParticleModuleRotationBase::pClassPointer = NULL;
UClass* UParticleModuleMeshRotation::pClassPointer = NULL;
UClass* UParticleModuleRotationRateBase::pClassPointer = NULL;
UClass* UParticleModuleMeshRotationRate::pClassPointer = NULL;
UClass* UParticleModuleMeshRotationRateMultiplyLife::pClassPointer = NULL;
UClass* UParticleModuleOrbitBase::pClassPointer = NULL;
UClass* UParticleModuleOrbit::pClassPointer = NULL;
UClass* UParticleModuleOrientationBase::pClassPointer = NULL;
UClass* UParticleModuleOrientationAxisLock::pClassPointer = NULL;
UClass* UParticleModuleParameterBase::pClassPointer = NULL;
UClass* UParticleModuleParameterDecalDynamicParam::pClassPointer = NULL;
UClass* UParticleModuleParameterDynamic::pClassPointer = NULL;
UClass* UParticleModuleParameterMeshDynamicParam::pClassPointer = NULL;
UClass* UParticleModulePointLightMovable::pClassPointer = NULL;
UClass* UParticleModuleRequired::pClassPointer = NULL;
UClass* UParticleModuleRotation::pClassPointer = NULL;
UClass* UParticleModuleRotationOverLifetime::pClassPointer = NULL;
UClass* UParticleModuleRotationRate::pClassPointer = NULL;
UClass* UParticleModuleRotationRateMultiplyLife::pClassPointer = NULL;
UClass* UParticleModuleSizeBase::pClassPointer = NULL;
UClass* UParticleModuleSize::pClassPointer = NULL;
UClass* UParticleModuleSizeMultiplyDistance::pClassPointer = NULL;
UClass* UParticleModuleSizeMultiplyLife::pClassPointer = NULL;
UClass* UParticleModuleSizeMultiplyVelocity::pClassPointer = NULL;
UClass* UParticleModuleSizeScale::pClassPointer = NULL;
UClass* UParticleModuleSpawnBase::pClassPointer = NULL;
UClass* UParticleModuleSpawn::pClassPointer = NULL;
UClass* UParticleModuleSpawnPerUnit::pClassPointer = NULL;
UClass* UParticleModuleSubUVBase::pClassPointer = NULL;
UClass* UParticleModuleSubUV::pClassPointer = NULL;
UClass* UParticleModuleSubUVDirect::pClassPointer = NULL;
UClass* UParticleModuleSubUVSelect::pClassPointer = NULL;
UClass* UParticleModuleTrailBase::pClassPointer = NULL;
UClass* UParticleModuleTrailSource::pClassPointer = NULL;
UClass* UParticleModuleTrailSpawn::pClassPointer = NULL;
UClass* UParticleModuleTrailTaper::pClassPointer = NULL;
UClass* UParticleModuleTypeDataBase::pClassPointer = NULL;
UClass* UParticleModuleTypeDataBeam::pClassPointer = NULL;
UClass* UParticleModuleTypeDataBeam2::pClassPointer = NULL;
UClass* UParticleModuleTypeDataDecal::pClassPointer = NULL;
UClass* UParticleModuleTypeDataMesh::pClassPointer = NULL;
UClass* UParticleModuleTypeDataMeshPhysX::pClassPointer = NULL;
UClass* UParticleModuleTypeDataPhysX::pClassPointer = NULL;
UClass* UParticleModuleTypeDataSkeletalMesh::pClassPointer = NULL;
UClass* UParticleModuleTypeDataTrail::pClassPointer = NULL;
UClass* UParticleModuleTypeDataTrail2::pClassPointer = NULL;
UClass* UParticleModuleUberBase::pClassPointer = NULL;
UClass* UParticleModuleUberLTISIVCL::pClassPointer = NULL;
UClass* UParticleModuleUberLTISIVCLIL::pClassPointer = NULL;
UClass* UParticleModuleUberLTISIVCLILIRSSBLIRR::pClassPointer = NULL;
UClass* UParticleModuleUberRainDrops::pClassPointer = NULL;
UClass* UParticleModuleUberRainImpacts::pClassPointer = NULL;
UClass* UParticleModuleUberRainSplashA::pClassPointer = NULL;
UClass* UParticleModuleUberRainSplashB::pClassPointer = NULL;
UClass* UParticleModuleVelocityBase::pClassPointer = NULL;
UClass* UParticleModuleVelocity::pClassPointer = NULL;
UClass* UParticleModuleVelocityInheritParent::pClassPointer = NULL;
UClass* UParticleModuleVelocityOverLifetime::pClassPointer = NULL;
UClass* UParticleModuleWeatherBase::pClassPointer = NULL;
UClass* UParticleModuleWeather::pClassPointer = NULL;
UClass* UParticleSpriteEmitter::pClassPointer = NULL;
UClass* UParticleSystemComponent::pClassPointer = NULL;
UClass* UParticleSystemReplay::pClassPointer = NULL;
UClass* APhysXEmitterSpawnable::pClassPointer = NULL;
UClass* UPhysXParticleSystem::pClassPointer = NULL;
UClass* AKActor::pClassPointer = NULL;
UClass* AKActorSpawnable::pClassPointer = NULL;
UClass* AKAsset::pClassPointer = NULL;
UClass* UPhysicalMaterial::pClassPointer = NULL;
UClass* UPhysicalMaterialPropertyBase::pClassPointer = NULL;
UClass* UPhysicsAsset::pClassPointer = NULL;
UClass* UPhysicsAssetInstance::pClassPointer = NULL;
UClass* UPhysicsLODVerticalDestructible::pClassPointer = NULL;
UClass* UPhysicsLODVerticalEmitter::pClassPointer = NULL;
UClass* URB_BodyInstance::pClassPointer = NULL;
UClass* URB_ConstraintSetup::pClassPointer = NULL;
UClass* URB_BSJointSetup::pClassPointer = NULL;
UClass* ARB_ConstraintActor::pClassPointer = NULL;
UClass* URB_ConstraintDrawComponent::pClassPointer = NULL;
UClass* URB_ConstraintInstance::pClassPointer = NULL;
UClass* URB_DistanceJointSetup::pClassPointer = NULL;
UClass* URB_Handle::pClassPointer = NULL;
UClass* URB_HingeSetup::pClassPointer = NULL;
UClass* ARB_LineImpulseActor::pClassPointer = NULL;
UClass* URB_PrismaticSetup::pClassPointer = NULL;
UClass* URB_PulleyJointSetup::pClassPointer = NULL;
UClass* ARB_RadialImpulseActor::pClassPointer = NULL;
UClass* URB_RadialImpulseComponent::pClassPointer = NULL;
UClass* URB_SkelJointSetup::pClassPointer = NULL;
UClass* URB_Spring::pClassPointer = NULL;
UClass* URB_StayUprightSetup::pClassPointer = NULL;
UClass* ARB_Thruster::pClassPointer = NULL;
UClass* ASVehicle::pClassPointer = NULL;
UClass* USVehicleSimBase::pClassPointer = NULL;
UClass* USVehicleSimCar::pClassPointer = NULL;
UClass* USVehicleSimTank::pClassPointer = NULL;
UClass* USVehicleWheel::pClassPointer = NULL;
UClass* UForceFieldShape::pClassPointer = NULL;
UClass* UForceFieldShapeBox::pClassPointer = NULL;
UClass* UForceFieldShapeCapsule::pClassPointer = NULL;
UClass* UForceFieldShapeSphere::pClassPointer = NULL;
UClass* ANxForceField::pClassPointer = NULL;
UClass* ANxCylindricalForceField::pClassPointer = NULL;
UClass* ANxCylindricalForceFieldCapsule::pClassPointer = NULL;
UClass* ANxForceFieldGeneric::pClassPointer = NULL;
UClass* ANxForceFieldRadial::pClassPointer = NULL;
UClass* ANxForceFieldTornado::pClassPointer = NULL;
UClass* ANxGenericForceField::pClassPointer = NULL;
UClass* ANxGenericForceFieldBox::pClassPointer = NULL;
UClass* ANxGenericForceFieldBrush::pClassPointer = NULL;
UClass* ANxGenericForceFieldCapsule::pClassPointer = NULL;
UClass* ANxRadialForceField::pClassPointer = NULL;
UClass* ANxRadialCustomForceField::pClassPointer = NULL;
UClass* ANxTornadoAngularForceField::pClassPointer = NULL;
UClass* ANxTornadoAngularForceFieldCapsule::pClassPointer = NULL;
UClass* ANxTornadoForceField::pClassPointer = NULL;
UClass* ANxTornadoForceFieldCapsule::pClassPointer = NULL;
UClass* ARB_CylindricalForceActor::pClassPointer = NULL;
UClass* ARB_ForceFieldExcludeVolume::pClassPointer = NULL;
UClass* ARB_RadialForceActor::pClassPointer = NULL;
UClass* UPrefab::pClassPointer = NULL;
UClass* APrefabInstance::pClassPointer = NULL;
UClass* USequenceObject::pClassPointer = NULL;
UClass* USequenceVariable::pClassPointer = NULL;
UClass* UInterpData::pClassPointer = NULL;
UClass* USequenceOp::pClassPointer = NULL;
UClass* USequence::pClassPointer = NULL;
UClass* UPrefabSequence::pClassPointer = NULL;
UClass* UPrefabSequenceContainer::pClassPointer = NULL;
UClass* USequenceAction::pClassPointer = NULL;
UClass* USeqAct_ActivateRemoteEvent::pClassPointer = NULL;
UClass* USeqAct_Latent::pClassPointer = NULL;
UClass* USeqAct_ActorFactory::pClassPointer = NULL;
UClass* USeqAct_ActorFactoryEx::pClassPointer = NULL;
UClass* USeqAct_SetSequenceVariable::pClassPointer = NULL;
UClass* USeqAct_AddFloat::pClassPointer = NULL;
UClass* USeqAct_AddInt::pClassPointer = NULL;
UClass* USeqAct_AIMoveToActor::pClassPointer = NULL;
UClass* USeqAct_ApplySoundNode::pClassPointer = NULL;
UClass* USeqAct_AttachToEvent::pClassPointer = NULL;
UClass* USeqAct_CameraFade::pClassPointer = NULL;
UClass* USeqAct_CameraLookAt::pClassPointer = NULL;
UClass* USeqAct_CastToFloat::pClassPointer = NULL;
UClass* USeqAct_CastToInt::pClassPointer = NULL;
UClass* USeqAct_CauseDamage::pClassPointer = NULL;
UClass* USeqAct_CauseDamageRadial::pClassPointer = NULL;
UClass* USeqAct_ChangeCollision::pClassPointer = NULL;
UClass* USeqAct_CommitMapChange::pClassPointer = NULL;
UClass* USeqAct_ConsoleCommand::pClassPointer = NULL;
UClass* USeqAct_CrowdSpawner::pClassPointer = NULL;
UClass* USeqAct_Delay::pClassPointer = NULL;
UClass* USeqAct_DelaySwitch::pClassPointer = NULL;
UClass* USeqAct_DivideFloat::pClassPointer = NULL;
UClass* USeqAct_DivideInt::pClassPointer = NULL;
UClass* USeqAct_FinishSequence::pClassPointer = NULL;
UClass* USeqAct_ForceGarbageCollection::pClassPointer = NULL;
UClass* USeqAct_ForceMaterialMipsResident::pClassPointer = NULL;
UClass* USeqAct_Gate::pClassPointer = NULL;
UClass* USeqAct_GetDistance::pClassPointer = NULL;
UClass* USeqAct_GetProperty::pClassPointer = NULL;
UClass* USeqAct_GetVelocity::pClassPointer = NULL;
UClass* USeqAct_Interp::pClassPointer = NULL;
UClass* USeqAct_IsInObjectList::pClassPointer = NULL;
UClass* USeqAct_LevelStreamingBase::pClassPointer = NULL;
UClass* USeqAct_LevelStreaming::pClassPointer = NULL;
UClass* USeqAct_LevelVisibility::pClassPointer = NULL;
UClass* USeqAct_Log::pClassPointer = NULL;
UClass* USeqAct_ModifyObjectList::pClassPointer = NULL;
UClass* USeqAct_MultiLevelStreaming::pClassPointer = NULL;
UClass* USeqAct_MultiplyFloat::pClassPointer = NULL;
UClass* USeqAct_MultiplyInt::pClassPointer = NULL;
UClass* USeqAct_ParticleEventGenerator::pClassPointer = NULL;
UClass* USeqAct_PlayCameraAnim::pClassPointer = NULL;
UClass* USeqAct_PlayFaceFXAnim::pClassPointer = NULL;
UClass* USeqAct_PlayMusicTrack::pClassPointer = NULL;
UClass* USeqAct_PlaySound::pClassPointer = NULL;
UClass* USeqAct_Possess::pClassPointer = NULL;
UClass* USeqAct_PrepareMapChange::pClassPointer = NULL;
UClass* USeqAct_Switch::pClassPointer = NULL;
UClass* USeqAct_RandomSwitch::pClassPointer = NULL;
UClass* USeqAct_RangeSwitch::pClassPointer = NULL;
UClass* USeqAct_SetBlockRigidBody::pClassPointer = NULL;
UClass* USeqAct_SetBool::pClassPointer = NULL;
UClass* USeqAct_SetCameraTarget::pClassPointer = NULL;
UClass* USeqAct_SetDOFParams::pClassPointer = NULL;
UClass* USeqAct_SetFloat::pClassPointer = NULL;
UClass* USeqAct_SetInt::pClassPointer = NULL;
UClass* USeqAct_SetMaterial::pClassPointer = NULL;
UClass* USeqAct_SetMatInstScalarParam::pClassPointer = NULL;
UClass* USeqAct_SetMatInstTexParam::pClassPointer = NULL;
UClass* USeqAct_SetMatInstVectorParam::pClassPointer = NULL;
UClass* USeqAct_SetMotionBlurParams::pClassPointer = NULL;
UClass* USeqAct_SetObject::pClassPointer = NULL;
UClass* USeqAct_SetPhysics::pClassPointer = NULL;
UClass* USeqAct_SetRigidBodyIgnoreVehicles::pClassPointer = NULL;
UClass* USeqAct_SetString::pClassPointer = NULL;
UClass* USeqAct_SubtractFloat::pClassPointer = NULL;
UClass* USeqAct_SubtractInt::pClassPointer = NULL;
UClass* USeqAct_Timer::pClassPointer = NULL;
UClass* USeqAct_Toggle::pClassPointer = NULL;
UClass* USeqAct_ToggleDynamicChannel::pClassPointer = NULL;
UClass* USeqAct_Trace::pClassPointer = NULL;
UClass* USeqAct_WaitForLevelsVisible::pClassPointer = NULL;
UClass* USequenceCondition::pClassPointer = NULL;
UClass* USeqCond_CompareBool::pClassPointer = NULL;
UClass* USeqCond_CompareFloat::pClassPointer = NULL;
UClass* USeqCond_CompareInt::pClassPointer = NULL;
UClass* USeqCond_CompareObject::pClassPointer = NULL;
UClass* USeqCond_GetServerType::pClassPointer = NULL;
UClass* USeqCond_Increment::pClassPointer = NULL;
UClass* USeqCond_IncrementFloat::pClassPointer = NULL;
UClass* USeqCond_IsInCombat::pClassPointer = NULL;
UClass* USeqCond_IsLoggedIn::pClassPointer = NULL;
UClass* USeqCond_IsSameTeam::pClassPointer = NULL;
UClass* USeqCond_SwitchBase::pClassPointer = NULL;
UClass* USeqCond_SwitchClass::pClassPointer = NULL;
UClass* USeqCond_SwitchName::pClassPointer = NULL;
UClass* USeqCond_SwitchObject::pClassPointer = NULL;
UClass* USequenceEvent::pClassPointer = NULL;
UClass* USeqEvent_AISeeEnemy::pClassPointer = NULL;
UClass* USeqEvent_Console::pClassPointer = NULL;
UClass* USeqEvent_ConstraintBroken::pClassPointer = NULL;
UClass* USeqEvent_Destroyed::pClassPointer = NULL;
UClass* USeqEvent_GetInventory::pClassPointer = NULL;
UClass* USeqEvent_LevelBeginning::pClassPointer = NULL;
UClass* USeqEvent_LevelLoaded::pClassPointer = NULL;
UClass* USeqEvent_LevelStartup::pClassPointer = NULL;
UClass* USeqEvent_Mover::pClassPointer = NULL;
UClass* USeqEvent_ParticleEvent::pClassPointer = NULL;
UClass* USeqEvent_ProjectileLanded::pClassPointer = NULL;
UClass* USeqEvent_RemoteEvent::pClassPointer = NULL;
UClass* USeqEvent_RigidBodyCollision::pClassPointer = NULL;
UClass* USeqEvent_SeeDeath::pClassPointer = NULL;
UClass* USeqEvent_SequenceActivated::pClassPointer = NULL;
UClass* USeqEvent_TakeDamage::pClassPointer = NULL;
UClass* USeqEvent_Touch::pClassPointer = NULL;
UClass* USeqEvent_Used::pClassPointer = NULL;
UClass* USequenceFrame::pClassPointer = NULL;
UClass* USequenceFrameWrapped::pClassPointer = NULL;
UClass* USeqVar_Bool::pClassPointer = NULL;
UClass* USeqVar_Byte::pClassPointer = NULL;
UClass* USeqVar_External::pClassPointer = NULL;
UClass* USeqVar_Float::pClassPointer = NULL;
UClass* USeqVar_Object::pClassPointer = NULL;
UClass* USeqVar_Group::pClassPointer = NULL;
UClass* USeqVar_Int::pClassPointer = NULL;
UClass* USeqVar_Name::pClassPointer = NULL;
UClass* USeqVar_Named::pClassPointer = NULL;
UClass* USeqVar_ObjectList::pClassPointer = NULL;
UClass* USeqVar_ObjectVolume::pClassPointer = NULL;
UClass* USeqVar_Player::pClassPointer = NULL;
UClass* USeqVar_RandomFloat::pClassPointer = NULL;
UClass* USeqVar_RandomInt::pClassPointer = NULL;
UClass* USeqVar_String::pClassPointer = NULL;
UClass* USeqVar_Union::pClassPointer = NULL;
UClass* USeqVar_Vector::pClassPointer = NULL;
UClass* AAmbientSound::pClassPointer = NULL;
UClass* AAmbientSoundMovable::pClassPointer = NULL;
UClass* AAmbientSoundSimple::pClassPointer = NULL;
UClass* AAmbientSoundNonLoop::pClassPointer = NULL;
UClass* UAudioTrack::pClassPointer = NULL;
UClass* UDistributionFloatSoundParameter::pClassPointer = NULL;
UClass* USoundMode::pClassPointer = NULL;
UClass* USoundNode::pClassPointer = NULL;
UClass* USoundNodeAmbient::pClassPointer = NULL;
UClass* USoundNodeAmbientNonLoop::pClassPointer = NULL;
UClass* USoundNodeAttenuation::pClassPointer = NULL;
UClass* USoundNodeConcatenator::pClassPointer = NULL;
UClass* USoundNodeDelay::pClassPointer = NULL;
UClass* USoundNodeDistanceCrossFade::pClassPointer = NULL;
UClass* USoundNodeLooping::pClassPointer = NULL;
UClass* USoundNodeMature::pClassPointer = NULL;
UClass* USoundNodeMixer::pClassPointer = NULL;
UClass* USoundNodeModulator::pClassPointer = NULL;
UClass* USoundNodeModulatorContinuous::pClassPointer = NULL;
UClass* USoundNodeOscillator::pClassPointer = NULL;
UClass* USoundNodeRandom::pClassPointer = NULL;
UClass* USoundNodeWave::pClassPointer = NULL;
UClass* USoundNodeWaveParam::pClassPointer = NULL;
UClass* ATerrain::pClassPointer = NULL;
UClass* UTerrainComponent::pClassPointer = NULL;
UClass* UTerrainLayerSetup::pClassPointer = NULL;
UClass* UTerrainMaterial::pClassPointer = NULL;
UClass* UTerrainWeightMapTexture::pClassPointer = NULL;
UClass* UInteraction::pClassPointer = NULL;
UClass* UConsole::pClassPointer = NULL;
UClass* UDataStoreClient::pClassPointer = NULL;
UClass* UInput::pClassPointer = NULL;
UClass* UPlayerInput::pClassPointer = NULL;
UClass* UPlayerManagerInteraction::pClassPointer = NULL;
UClass* UUIActionEditBase::pClassPointer = NULL;
UClass* UUIActionEditNode::pClassPointer = NULL;
UClass* UUIActionEditAnimNode::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Alpha::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Counting::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Dummy::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Pos::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Progress::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Scale::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_Scroll::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_TexCoords::pClassPointer = NULL;
UClass* UUIActionEditAnimNode_TextFade::pClassPointer = NULL;
UClass* UUIActionEditSequence::pClassPointer = NULL;
UClass* UUIActionEditAnimSequence::pClassPointer = NULL;
UClass* UUIActionEditManager::pClassPointer = NULL;
UClass* UUIActionEditNode_Image::pClassPointer = NULL;
UClass* UUIActionEditNode_InstRenderObj::pClassPointer = NULL;
UClass* UUIActionEditNode_Particle::pClassPointer = NULL;
UClass* UUIActionEditNode_ResizeLink::pClassPointer = NULL;
UClass* UUIActionEditNode_Sound::pClassPointer = NULL;
UClass* UUIActionEditNode_Text::pClassPointer = NULL;
UClass* UUIActionEditNode_Visible::pClassPointer = NULL;
UClass* UUIActionEditObject::pClassPointer = NULL;
UClass* UUIActionGroupEditManager::pClassPointer = NULL;
UClass* UUIComponent::pClassPointer = NULL;
UClass* UUIComp_Event::pClassPointer = NULL;
UClass* UUIEventContainer::pClassPointer = NULL;
UClass* UUIInputConfiguration::pClassPointer = NULL;
UClass* UUIInteraction::pClassPointer = NULL;
UClass* UUILayerBase::pClassPointer = NULL;
UClass* UUISceneClient::pClassPointer = NULL;
UClass* UUIState::pClassPointer = NULL;
UClass* UUIState_Disabled::pClassPointer = NULL;
UClass* UUIState_Enabled::pClassPointer = NULL;
UClass* UUIString::pClassPointer = NULL;
UClass* UUIDataProvider::pClassPointer = NULL;
UClass* UUIDataStore::pClassPointer = NULL;
UClass* UUISkin::pClassPointer = NULL;
UClass* UUIStyle::pClassPointer = NULL;
UClass* UConsoleEntry::pClassPointer = NULL;
UClass* UGameUISceneClient::pClassPointer = NULL;
UClass* UUIButton::pClassPointer = NULL;
UClass* UUILabelButton::pClassPointer = NULL;
UClass* UUICalloutButton::pClassPointer = NULL;
UClass* UUIContainer::pClassPointer = NULL;
UClass* UUICalloutButtonPanel::pClassPointer = NULL;
UClass* UUIComp_AutoAlignment::pClassPointer = NULL;
UClass* UUIComp_DrawComponents::pClassPointer = NULL;
UClass* UUIComp_DrawImage::pClassPointer = NULL;
UClass* UUIComp_DrawString::pClassPointer = NULL;
UClass* UUIEditBox::pClassPointer = NULL;
UClass* UUIComp_DrawStringEditbox::pClassPointer = NULL;
UClass* UUIConfigProvider::pClassPointer = NULL;
UClass* UUIConfigFileProvider::pClassPointer = NULL;
UClass* UUIConfigSectionProvider::pClassPointer = NULL;
UClass* UUICustomSkin::pClassPointer = NULL;
UClass* UUIDataStore_GameState::pClassPointer = NULL;
UClass* UUIDataStore_StringBase::pClassPointer = NULL;
UClass* UUIDataStore_InputAlias::pClassPointer = NULL;
UClass* UUIDataStore_Registry::pClassPointer = NULL;
UClass* UUIDataStore_Remote::pClassPointer = NULL;
UClass* UUIDataStore_StringAliasMap::pClassPointer = NULL;
UClass* UUIDataStore_Strings::pClassPointer = NULL;
UClass* UUIDataStoreSubscriber::pClassPointer = NULL;
UClass* UUIDataStorePublisher::pClassPointer = NULL;
UClass* UUIDynamicFieldProvider::pClassPointer = NULL;
UClass* UUIEditboxString::pClassPointer = NULL;
UClass* UUIImage::pClassPointer = NULL;
UClass* UUILabel::pClassPointer = NULL;
UClass* UUIPanel::pClassPointer = NULL;
UClass* UUISafeRegionPanel::pClassPointer = NULL;
UClass* UUIScene::pClassPointer = NULL;
UClass* UUIState_Active::pClassPointer = NULL;
UClass* UUIState_Focused::pClassPointer = NULL;
UClass* UUIState_Pressed::pClassPointer = NULL;
UClass* UUIStringRenderer::pClassPointer = NULL;
UClass* UUIStyle_Data::pClassPointer = NULL;
UClass* UUIStyle_Combo::pClassPointer = NULL;
UClass* UUIStyle_Image::pClassPointer = NULL;
UClass* UUIStyle_Text::pClassPointer = NULL;
UClass* UUIStyleResolver::pClassPointer = NULL;
UClass* UUITexture::pClassPointer = NULL;
UClass* USeqVar_UIRange::pClassPointer = NULL;
UClass* USeqVar_UniqueNetId::pClassPointer = NULL;
UClass* UUICond_IsFocused::pClassPointer = NULL;
UClass* UUIEvent::pClassPointer = NULL;
UClass* UUIEvent_CalloutButtonInputProxy::pClassPointer = NULL;
UClass* UUIEvent_MetaObject::pClassPointer = NULL;
UClass* UUIEvent_OnClick::pClassPointer = NULL;
UClass* UUIEvent_OnDoubleClick::pClassPointer = NULL;
UClass* UUIEvent_State::pClassPointer = NULL;
UClass* UUIEvent_OnEnterState::pClassPointer = NULL;
UClass* UUIEvent_OnLeaveState::pClassPointer = NULL;
UClass* UUIEvent_ProcessInput::pClassPointer = NULL;
UClass* UUIEvent_Scene::pClassPointer = NULL;
UClass* UUIEvent_SubmitData::pClassPointer = NULL;
UClass* UUIEvent_SubmitTextData::pClassPointer = NULL;
UClass* UUIEvent_ValueChanged::pClassPointer = NULL;
UClass* UUIEvent_TextValueChanged::pClassPointer = NULL;
UClass* UUISequence::pClassPointer = NULL;
UClass* UUIStateSequence::pClassPointer = NULL;
UClass* UScene::pClassPointer = NULL;
UClass* UFoliageComponent::pClassPointer = NULL;
UClass* AFoliageFactory::pClassPointer = NULL;
UClass* AFluidInfluenceActor::pClassPointer = NULL;
UClass* UFluidInfluenceComponent::pClassPointer = NULL;
UClass* AFluidSurfaceActor::pClassPointer = NULL;
UClass* AFluidSurfaceActorMovable::pClassPointer = NULL;
UClass* UFluidSurfaceComponent::pClassPointer = NULL;
UClass* ULensFlare::pClassPointer = NULL;
UClass* ULensFlareComponent::pClassPointer = NULL;
UClass* ALensFlareSource::pClassPointer = NULL;
UClass* UAudioDevice::pClassPointer = NULL;
UClass* UCustomUIComp_DrawImage::pClassPointer = NULL;
UClass* UCustomUIComp_DrawStringComponents::pClassPointer = NULL;
UClass* UCustomUIComp_DrawString::pClassPointer = NULL;
UClass* UCustomUIComp_DrawStringEditbox::pClassPointer = NULL;
UClass* UCustomUIComp_DrawStringList::pClassPointer = NULL;
UClass* UCustomUIComp_DrawStringMultiLineEditbox::pClassPointer = NULL;
UClass* UCustomUIComp_UIString::pClassPointer = NULL;
UClass* UCustomUIBaseScene::pClassPointer = NULL;
UClass* UCustomUIGameScene::pClassPointer = NULL;
UClass* UCustomUIGameMainScene::pClassPointer = NULL;
UClass* UCustomUIInteraction::pClassPointer = NULL;
UClass* UShowKey::pClassPointer = NULL;
UClass* UShowActionKey::pClassPointer = NULL;
UClass* UShowActionCatmullromKey::pClassPointer = NULL;
UClass* UShowActionCatmullromPawnKey::pClassPointer = NULL;
UClass* UShowActionCatmullromRandomKey::pClassPointer = NULL;
UClass* UShowActionFollowBoneKey::pClassPointer = NULL;
UClass* UShowActionLinearKey::pClassPointer = NULL;
UClass* UShowActionLinearPawnKey::pClassPointer = NULL;
UClass* UShowActionLinearRandomKey::pClassPointer = NULL;
UClass* UShowDurationKey::pClassPointer = NULL;
UClass* UShowAnimKey::pClassPointer = NULL;
UClass* UShowAnimRandomKey::pClassPointer = NULL;
UClass* UShowAnimSlowKey::pClassPointer = NULL;
UClass* UShowAnimStopKey::pClassPointer = NULL;
UClass* UShowBeamKey::pClassPointer = NULL;
UClass* UShowCameraInterpolKey::pClassPointer = NULL;
UClass* UShowCameraKey::pClassPointer = NULL;
UClass* UShowCameraLocationAndTargetInterpKey::pClassPointer = NULL;
UClass* UShowCopyPawnKey::pClassPointer = NULL;
UClass* UShowDamageKey::pClassPointer = NULL;
UClass* UShowDependencyParticleKey::pClassPointer = NULL;
UClass* UShowDependencyTrailKey::pClassPointer = NULL;
UClass* UShowDialogueKey::pClassPointer = NULL;
UClass* UShowDieKey::pClassPointer = NULL;
UClass* UShowDynamicParamKey::pClassPointer = NULL;
UClass* UShowFaceFxKey::pClassPointer = NULL;
UClass* UShowFacialAniKey::pClassPointer = NULL;
UClass* UShowHitKey::pClassPointer = NULL;
UClass* UShowMaterialKey::pClassPointer = NULL;
UClass* UShowMultiHitKey::pClassPointer = NULL;
UClass* UShowObject::pClassPointer = NULL;
UClass* UShowParameterBlock::pClassPointer = NULL;
UClass* UShowParticleAnimKey::pClassPointer = NULL;
UClass* UShowParticleKey::pClassPointer = NULL;
UClass* UShowParticleMaterialKey::pClassPointer = NULL;
UClass* UShowParticlePhysicKey::pClassPointer = NULL;
UClass* UShowPawnOutlineBloomKey::pClassPointer = NULL;
UClass* UShowPawnParticleAttachmentKey::pClassPointer = NULL;
UClass* UShowPhysicsKey::pClassPointer = NULL;
UClass* UShowPlayerCameraAnimKey::pClassPointer = NULL;
UClass* UShowPlayerCameraAnimRandomKey::pClassPointer = NULL;
UClass* UShowPointLightKey::pClassPointer = NULL;
UClass* UShowPostProcKey::pClassPointer = NULL;
UClass* UShowSkillParameterBlock::pClassPointer = NULL;
UClass* UShowSocketControllerKey::pClassPointer = NULL;
UClass* UShowSocketDelayMoveKey::pClassPointer = NULL;
UClass* UShowSoundKey::pClassPointer = NULL;
UClass* UShowSoundMaterialKey::pClassPointer = NULL;
UClass* UShowSpawnKey::pClassPointer = NULL;
UClass* UShowSplashParticleKey::pClassPointer = NULL;
UClass* UShowSpotLightOuterConeKey::pClassPointer = NULL;
UClass* UShowTerminateSoundNotifiesKey::pClassPointer = NULL;
UClass* UShowTrackInputParameter::pClassPointer = NULL;
UClass* UShowTrackOutputParameter::pClassPointer = NULL;
UClass* UShowTrailAnimKey::pClassPointer = NULL;
UClass* UShowTrailMeshKey::pClassPointer = NULL;
UClass* UShowTrailPawnKey::pClassPointer = NULL;
UClass* UShowTrailWeaponKey::pClassPointer = NULL;
UClass* UShowUIParticleKey::pClassPointer = NULL;
UClass* UShowVoiceKey::pClassPointer = NULL;
UClass* ABillBoardActor::pClassPointer = NULL;
UClass* UBillboardComponent::pClassPointer = NULL;
UClass* UBillboardComponentFactory::pClassPointer = NULL;
UClass* USeqAct_MakeNoise::pClassPointer = NULL;
UClass* USeqAct_AttachToActor::pClassPointer = NULL;
UClass* USeqAct_ToggleHidden::pClassPointer = NULL;
UClass* USeqAct_Teleport::pClassPointer = NULL;
UClass* USeqAct_HealDamage::pClassPointer = NULL;
UClass* USeqAct_Destroy::pClassPointer = NULL;
UClass* ULocalMessage::pClassPointer = NULL;
UClass* AAccessControl::pClassPointer = NULL;
UClass* AAdmin::pClassPointer = NULL;
UClass* AEmitterSpawnable::pClassPointer = NULL;
UClass* AKAssetSpawnable::pClassPointer = NULL;
UClass* ASkeletalMeshActorSpawnable::pClassPointer = NULL;
UClass* UActorFactorySkeletalMeshMAT::pClassPointer = NULL;
UClass* USeqEvent_Death::pClassPointer = NULL;
UClass* UOnlinePlayerInterface::pClassPointer = NULL;
UClass* ADebugCameraController::pClassPointer = NULL;
UClass* USeqAct_ToggleCinematicMode::pClassPointer = NULL;
UClass* USeqAct_ForceFeedback::pClassPointer = NULL;
UClass* USeqAct_FlyThroughHasEnded::pClassPointer = NULL;
UClass* UOnlineGameInterface::pClassPointer = NULL;
UClass* UDmgType_Suicided::pClassPointer = NULL;
UClass* AScoreBoard::pClassPointer = NULL;
UClass* ACoverReplicator::pClassPointer = NULL;
UClass* AAmbientCreatureNode::pClassPointer = NULL;
UClass* USeqAct_SetSkeletalMesh::pClassPointer = NULL;
UClass* AAmbientSkeletalCreature::pClassPointer = NULL;
UClass* AAmbientSkeletalCreature_Fish::pClassPointer = NULL;
UClass* AAmbientSoundSimpleToggleable::pClassPointer = NULL;
UClass* AAmbientStaticCreature::pClassPointer = NULL;
UClass* AAmbientStaticCreature_Fish::pClassPointer = NULL;
UClass* UAnimNotify_PlayFaceFXAnim::pClassPointer = NULL;
UClass* UAnimNotify_ViewShake::pClassPointer = NULL;
UClass* ABroadcastHandler::pClassPointer = NULL;
UClass* AColorScaleVolume::pClassPointer = NULL;
UClass* UOnlinePlayerInterfaceEx::pClassPointer = NULL;
UClass* UUIEvent_Initialized::pClassPointer = NULL;
UClass* USeqAct_ModifyCover::pClassPointer = NULL;
UClass* UUIEvent_SceneActivated::pClassPointer = NULL;
UClass* UUIEvent_SceneDeactivated::pClassPointer = NULL;
UClass* UOnlineSystemInterface::pClassPointer = NULL;
UClass* ADebugCameraHUD::pClassPointer = NULL;
UClass* UDebugCameraInput::pClassPointer = NULL;
UClass* UDecalLifetime::pClassPointer = NULL;
UClass* UDecalLifetimeAge::pClassPointer = NULL;
UClass* USeqAct_SetDamageInstigator::pClassPointer = NULL;
UClass* AVolumeTimer::pClassPointer = NULL;
UClass* ADialogueManager::pClassPointer = NULL;
UClass* UDmgType_Crushed::pClassPointer = NULL;
UClass* UDmgType_Fell::pClassPointer = NULL;
UClass* UDmgType_Telefragged::pClassPointer = NULL;
UClass* ADynamicPhysicsVolume::pClassPointer = NULL;
UClass* USeqAct_SetStaticMesh::pClassPointer = NULL;
UClass* ADynamicSMActor_Spawnable::pClassPointer = NULL;
UClass* ADynamicTriggerVolume::pClassPointer = NULL;
UClass* USeqAct_SetParticleSysParam::pClassPointer = NULL;
UClass* UFailedConnect::pClassPointer = NULL;
UClass* UGameMessage::pClassPointer = NULL;
UClass* UOnlineStatsInterface::pClassPointer = NULL;
UClass* USeqEvent_PlayerSpawned::pClassPointer = NULL;
UClass* AGameRules::pClassPointer = NULL;
UClass* USeqEvent_LevelReset::pClassPointer = NULL;
UClass* UUIMessageBoxBase::pClassPointer = NULL;
UClass* UUIMessageBox::pClassPointer = NULL;
UClass* UOnlineAccountInterface::pClassPointer = NULL;
UClass* UOnlineCommunityContentInterface::pClassPointer = NULL;
UClass* UOnlineContentInterface::pClassPointer = NULL;
UClass* UOnlineEventsInterface::pClassPointer = NULL;
UClass* UOnlineNewsInterface::pClassPointer = NULL;
UClass* UOnlineRecentPlayersList::pClassPointer = NULL;
UClass* UOnlineVoiceInterface::pClassPointer = NULL;
UClass* USeqAct_GiveInventory::pClassPointer = NULL;
UClass* USeqAct_AssignController::pClassPointer = NULL;
UClass* USeqEvent_PickupStatusChange::pClassPointer = NULL;
UClass* ARB_BSJointActor::pClassPointer = NULL;
UClass* ARB_ConstraintActorSpawnable::pClassPointer = NULL;
UClass* ARB_HingeActor::pClassPointer = NULL;
UClass* ARB_PrismaticActor::pClassPointer = NULL;
UClass* ARB_PulleyJointActor::pClassPointer = NULL;
UClass* UScriptConsoleEntry::pClassPointer = NULL;
UClass* USeqAct_AIAbortMoveToActor::pClassPointer = NULL;
UClass* USeqAct_ControlMovieTexture::pClassPointer = NULL;
UClass* USeqAct_SetVector::pClassPointer = NULL;
UClass* USeqAct_ToggleAffectedByHitEffects::pClassPointer = NULL;
UClass* USeqAct_ToggleGodMode::pClassPointer = NULL;
UClass* USeqAct_ToggleHUD::pClassPointer = NULL;
UClass* USeqAct_ToggleInput::pClassPointer = NULL;
UClass* USeqAct_UpdateDynamicCover::pClassPointer = NULL;
UClass* USeqEvent_LOS::pClassPointer = NULL;
UClass* ASkeletalMeshActorMATSpawnable::pClassPointer = NULL;
UClass* ATargetPoint::pClassPointer = NULL;
UClass* ATrigger_Dynamic::pClassPointer = NULL;
UClass* ATrigger_LOS::pClassPointer = NULL;
UClass* ATriggeredPath::pClassPointer = NULL;
UClass* ATriggerStreamingLevel::pClassPointer = NULL;
UClass* UUICond_SwitchWidget::pClassPointer = NULL;
UClass* UUIScriptConsoleScene::pClassPointer = NULL;
UClass* AWaterVolume::pClassPointer = NULL;

#ifdef _MSC_VER
	#pragma pack ( pop )
#endif